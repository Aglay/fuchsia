# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

variant_replaces_allocator = toolchain_variant.tags + [ "replaces-allocator" ] -
                             [ "replaces-allocator" ] != toolchain_variant.tags

assert(is_fuchsia)

scudo_sources = [
  "src/checksum.cpp",
  "src/common.cpp",
  "src/crc32_hw.cpp",
  "src/flags.cpp",
  "src/flags_parser.cpp",
  "src/fuchsia.cpp",
  "src/release.cpp",
  "src/report.cpp",
  "src/string_utils.cpp",
]

gwp_asan_sources = [
  "gwp_asan/common.cpp",
  "gwp_asan/common.h",
  "gwp_asan/crash_handler.cpp",
  "gwp_asan/crash_handler.h",
  "gwp_asan/definitions.h",
  "gwp_asan/guarded_pool_allocator.cpp",
  "gwp_asan/guarded_pool_allocator.h",
  "gwp_asan/mutex.h",
  "gwp_asan/optional/backtrace.h",
  "gwp_asan/optional/backtrace_fuchsia.cpp",
  "gwp_asan/optional/segv_handler.h",
  "gwp_asan/optional/segv_handler_fuchsia.cpp",
  "gwp_asan/options.h",
  "gwp_asan/options.inc",
  "gwp_asan/platform_specific/common_fuchsia.cpp",
  "gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp",
  "gwp_asan/platform_specific/guarded_pool_allocator_tls.h",
  "gwp_asan/platform_specific/mutex_fuchsia.cpp",
  "gwp_asan/platform_specific/mutex_fuchsia.h",
  "gwp_asan/platform_specific/mutex_posix.h",
  "gwp_asan/platform_specific/utilities_fuchsia.cpp",
  "gwp_asan/stack_trace_compressor.cpp",
  "gwp_asan/stack_trace_compressor.h",
  "gwp_asan/utilities.cpp",
  "gwp_asan/utilities.h",
]

# The code needs to be compiled separately for production and test use for two
# reasons.
#
# The first reason only affects the flag-parsing code (src/flags.cpp): it uses
# the `__scudo_default_options` callback function.  The test code wants to
# define this to set special options needed by certain tests.  But defining it
# by that name will also affect the production Scudo built into libc, which the
# test should not do (and it makes it very hard to e.g. debug the test linked
# against a libc containing a slightly different version of Scudo than the code
# under test).  So both the flag-parsing code and the test code must be
# compiled with `-D__scudo_default_options=<some other name>` to make the test
# code safe.
#
# TODO(fxbug.dev/64175): The second reason is similar but more subtle and it
# affects much of the code, both the Scudo code proper and the gwp_asan code it
# incorporates.  These both use thread-local state that is directly located in
# the thread structure when the code is built into libc, because normal
# `thread_local` C++ variables are not available inside libc itself (due to
# implementation constraints in the dynamic linker).  If the test code is built
# the same way, then it will clobber the thread-local state of the libc
# Scudo/gwp_asan code, which the test should not do.

group("common") {
  visibility = [ ":*" ]

  public_configs = [ ":common.config" ]
  public_deps = [
    "//zircon/system/ulib/runtime",
    "//zircon/system/ulib/sync",
  ]
  if (zircon_toolchain != false) {
    public_deps += [ "//zircon/system/ulib/zircon" ]
  } else {
    public_deps += [ "//src/zircon/lib/zircon" ]
  }
}

config("common.config") {
  visibility = [ ":*" ]

  include_dirs = [
    ".",
    "src",
    "src/include",
  ]

  defines = [ "GWP_ASAN_HOOKS=1" ]
}

group("libc") {
  visibility = [ ":*" ]

  public_configs = [ ":libc.config" ]
  public_deps = [
    ":common",

    # The local headers introduced by libc.config (below) use libc internals,
    # so they need access to the internal headers.
    "//zircon/third_party/ulib/musl:musl_internal",
  ]
}

config("libc.config") {
  visibility = [ ":*" ]

  # Tell the scudo and gwp_asan code to use our headers.
  defines = [
    "SCUDO_HAS_PLATFORM_TLS_SLOT=1",
    "GWP_ASAN_PLATFORM_TLS_HEADER=<gwp_asan_platform_tls_slot.h>",
  ]

  # This library is linked into libc, which is used by libfuzzer.
  # Don't instrument it to avoid getting noise in code coverage.
  # TODO(fxbug.dev/25073): Once a cleaner solution is found, remove this.
  configs = [ "//build/config/zircon:no_fuzzer" ]
}

group("testonly") {
  visibility = [ ":*" ]
  testonly = true

  public_deps = [
    ":common",
    "//zircon/system/ulib/zxtest",
  ]
  public_configs = [ ":testonly.config" ]
}

config("testonly.config") {
  visibility = [ ":*" ]

  # TODO(crbug.com/gn/214): testonly = true

  # The test version avoids that symbol name since it also affects the system
  # libc and not only the code under test.  Instead it renames the function to
  # a safe name for the test.  The test code that defines its own function by
  # this name also uses this config so it renames its definition to match.
  defines = [ "__scudo_default_options=testonly_scudo_default_options" ]
}

source_set("scudo") {
  sources = scudo_sources

  # These define the public API entry points (malloc et al).  They cannot be
  # included in the test code without polluting the test harness and other
  # unrelated code with the allocator code under test.  So they are only
  # included in libc itself, not in the test build.
  sources += [
    "src/wrappers_c.cpp",
    # "src/wrappers_cpp.cpp", TODO(mcgrathr): maybe use this later
  ]

  deps = [
    ":gwp_asan",
    ":libc",
  ]

  # GWP-ASan is opt-in via the SCUDO_OPTIONS environment variable.
  defines = [ "GWP_ASAN_DEFAULT_ENABLED=false" ]
}

source_set("scudo.testonly") {
  visibility = [ ":*" ]
  testonly = true

  sources = scudo_sources
  public_deps = [
    ":gwp_asan.testonly",
    ":testonly",
  ]
}

source_set("gwp_asan") {
  visibility = [ ":*" ]

  sources = gwp_asan_sources
  deps = [ ":libc" ]
}

source_set("gwp_asan.testonly") {
  visibility = [ ":*" ]
  testonly = true

  sources = gwp_asan_sources
  public_deps = [ ":testonly" ]
}

# This is included in libc-unittests and standalone core-tests.
source_set("unittests") {
  visibility = [
    ":*",
    "//zircon/system/ulib/c/*",
  ]
  testonly = true

  sources = [
    "src/tests/atomic_test.cpp",
    "src/tests/bytemap_test.cpp",
    "src/tests/checksum_test.cpp",
    "src/tests/chunk_test.cpp",
    "src/tests/combined_test.cpp",
    "src/tests/flags_test.cpp",
    "src/tests/list_test.cpp",
    "src/tests/map_test.cpp",
    "src/tests/mutex_test.cpp",
    "src/tests/primary_test.cpp",
    "src/tests/quarantine_test.cpp",
    "src/tests/release_test.cpp",
    "src/tests/report_test.cpp",
    "src/tests/scudo_unit_test.h",
    "src/tests/scudo_unit_test_main.cpp",
    "src/tests/secondary_test.cpp",
    "src/tests/size_class_map_test.cpp",
    "src/tests/stats_test.cpp",
    "src/tests/strings_test.cpp",
    "src/tests/tsd_test.cpp",
    "src/tests/vector_test.cpp",
  ]

  deps = [
    ":gwp_asan-unittests",
    ":scudo.testonly",
  ]

  # The public API tests both assume Scudo's behavior rather than purely kosher
  # standard behavior and they include testing error cases.  The instrumented
  # runtimes' allocators often make error cases or dubiously kosher uses fatal.
  if (!variant_replaces_allocator) {
    deps += [ ":wrapper-tests" ]
  }
}

# These tests use the public API, so they are testing what's actually in libc
# rather than the isolated test code.
source_set("wrapper-tests") {
  visibility = [ ":*" ]
  testonly = true

  sources = [
    "src/tests/scudo_unit_test.h",
    "src/tests/wrappers_c_test.cpp",

    # TODO(mcgrathr): see src/wrappers_cpp.cpp inclusion above.
    #"src/tests/wrappers_cpp_test.cpp",
  ]

  deps = [
    ":common",
    "//zircon/system/ulib/zxtest",
  ]
}

source_set("gwp_asan-unittests") {
  visibility = [ ":*" ]
  testonly = true

  sources = [
    "gwp_asan/tests/alignment.cpp",

    #"backtrace.cpp", # TODO(kostyak): enable when we have backtrace support
    "gwp_asan/tests/basic.cpp",
    "gwp_asan/tests/compression.cpp",
    "gwp_asan/tests/crash_handler_api.cpp",

    #"enable_disable.cpp", # TODO(kostyak): fork() based, see if it can apply to Fuchsia
    "gwp_asan/tests/harness.cpp",
    "gwp_asan/tests/harness.h",
    "gwp_asan/tests/iterate.cpp",

    #"late_init.cpp", # TODO(fxbug.dev/65522): flaky due to TLS pollution
    "gwp_asan/tests/mutex_test.cpp",
    "gwp_asan/tests/slot_reuse.cpp",
    "gwp_asan/tests/thread_contention.cpp",
  ]

  deps = [ ":gwp_asan.testonly" ]
}
