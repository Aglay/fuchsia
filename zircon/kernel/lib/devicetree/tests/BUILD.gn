#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

import("//build/test.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")
import("//build/testing/host_test_data.gni")

group("tests") {
  testonly = true
  deps = [
    ":devicetree-extract-package",
    ":devicetree-test-package",
    ":devicetree-tests($host_toolchain)",
  ]
}

test("devicetree-tests") {
  sources = [ "devicetree_tests.cc" ]
  deps = [
    "//zircon/kernel/lib/devicetree",
    "//zircon/public/lib/zxtest",
  ]
  if (is_host) {
    data_deps = [ ":host-test-data" ]
  } else if (is_fuchsia && current_cpu == "arm64") {
    # Only arm64 emulation uses a devicetree-based boot shim.
    sources += [ "zbi-item-test.cc" ]
    deps += [
      "//sdk/fidl/fuchsia.boot",
      "//sdk/lib/sys/cpp",
      "//zircon/public/lib/zx",
      "//zircon/public/lib/zxc",
    ]
  }
}

# The binary, flattened devicetrees files created by data/update.sh.
dtb_sources = [
  "data/complex_no_properties.dtb",
  "data/empty.dtb",
  "data/memory_reservations.dtb",
  "data/simple_with_properties.dtb",
]

if (is_host) {
  host_test_data("host-test-data") {
    sources = dtb_sources
    outputs = [ "$root_out_dir/test_data/devicetree/{{source_file_part}}" ]
  }
}

test_package("devicetree-test-package") {
  deps = [ ":devicetree-tests" ]
  package_name = "devicetree-test"
  tests = [
    {
      name = "devicetree-tests"

      # The test requires that a ZBI item of type ZBI_TYPE_DEVICETREE exists,
      # which is true in the case of the arm64 qemu-boot-shim.
      environments = [ emu_env ]
    },
  ]
  resources = []
  foreach(dtb, dtb_sources) {
    resources += [
      {
        path = dtb
        dest = get_path_info(dtb, "file")
      },
    ]
  }
}

executable("devicetree-extract") {
  testonly = true
  sources = [ "zbi-item-tool.cc" ]
  deps = [
    "//sdk/fidl/fuchsia.boot",
    "//sdk/lib/fdio",
    "//sdk/lib/sys/cpp",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/zx",
    "//zircon/public/lib/zxc",
  ]
}

package("devicetree-extract-package") {
  testonly = true
  deps = [ ":devicetree-extract" ]
  package_name = "devicetree-extract"
  binaries = [
    {
      name = "devicetree-extract"
      shell = true
    },
  ]
}
