# Copyright 2020 The Fuchsia Authors
#
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT

# TODO(54160) Keep in sync with BUILD.zircon.gn

import("//build/config/zircon/standard.gni")
import("//build/toolchain/zircon/zircon_toolchain_suite.gni")
import("//build/unification/global_variables.gni")

# userboot gets its own toolchain for its special build requirements.
if (current_toolchain == default_toolchain) {
  # Define the special toolchain itself only in the default toolchain.
  foreach(cpu, standard_fuchsia_cpus) {
    zircon_toolchain_suite("userboot_$cpu") {
      cpu = cpu
      os = "fuchsia"
      environment = "userboot"
      toolchain_variant_args = {
        configs = [
          "//zircon/kernel/lib/userabi/userboot:userboot_config",

          # TODO(48501): This is needed pervasively and not just
          # in the linking target so its compile-time flags can
          # work around fxbug.dev/48501.  It's separate from
          # userboot_config so it can be removed by other links
          # reusing this environment, e.g. hermetic_module().
          "$zx_build_config:rodso",
        ]
      }

      # This doesn't get a separate shlib sub-toolchain, but the main one
      # can do loadable_module().
      with_shared = false
      is_pic_default = true

      toolchain_args = {
        if (zircon_optimize == "none" || zircon_optimize == "debug") {
          # userboot doesn't stay sufficiently pure without optimization.
          zircon_optimize = "default"
        }

        # No runtime to print asserts, so can't compile them in.
        zx_assert_level = 0
      }

      # userboot can't use any instrumentation runtimes.
      exclude_variant_tags = [ "instrumented" ]
    }
  }
} else if (toolchain.environment == "userboot") {
  # Everything in userboot gets compiled this way.
  config("userboot_config") {
    configs = [
      "$zx_build_config:user",
      "$zx_build_config:static-libc++",
      "$zx_build_config:no_sanitizers",
      "$zx_build_config:no_undefined_symbols",
    ]

    cflags = [
      # -fPIE is the default in Clang, but not in GCC.
      "-fpie",

      # Everything is statically linked together with no PLT or GOT.
      # No $inputs needed here since the depfile will list it.
      "-include",
      rebase_path("$zx/kernel/include/hidden.h", root_build_dir),
    ]
    defines = [ "HIDDEN" ]
  }

  group("userboot_config_deps") {
  }
}
