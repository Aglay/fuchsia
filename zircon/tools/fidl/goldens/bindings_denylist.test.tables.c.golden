// WARNING: This file is machine generated by fidlc.

#include <lib/fidl/internal.h>

// Forward declarations for old <-> V1 mappings

extern const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable;
extern const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable;
extern const fidl_type_t test_name_OnlyLlcppTable;
extern const fidl_type_t test_name_OnlyGoTable;
extern const fidl_type_t v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable;
extern const fidl_type_t v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable;
extern const fidl_type_t v1_test_name_OnlyLlcppTable;
extern const fidl_type_t v1_test_name_OnlyLlcppNullableRefTable;
extern const fidl_type_t v1_test_name_OnlyGoTable;

// Coding tables for old wire format.

extern const fidl_type_t test_name_OnlySyzkallerTable;
extern const fidl_type_t test_name_OnlyRustTable;
extern const fidl_type_t test_name_OnlyLlcppTable;
extern const fidl_type_t test_name_OnlyGoTable;
extern const fidl_type_t test_name_OnlyDartTable;

static const fidl_type_t Pointer19test_name_OnlyLlcppTable __attribute__((unused)) = {.type_tag=kFidlTypeUnionPointer, {.coded_union_pointer={.union_type=&test_name_OnlyLlcppTable.coded_union}}};

extern const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable;
static const struct FidlStructField Fields60test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest[] = {};
const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields60test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest", .alt_type=&v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable}}};

extern const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable;
static const struct FidlStructField Fields61test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse[] = {};
const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields61test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse", .alt_type=&v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable}}};


const fidl_type_t test_name_OnlySyzkallerTable = {.type_tag=kFidlTypeBits, {.coded_bits={.underlying_type=kFidlCodedPrimitive_Uint32, .mask=1ul, .name="test.name/OnlySyzkaller"}}};

static const struct FidlTableField Fields18test_name_OnlyRust[] = {};
const fidl_type_t test_name_OnlyRustTable = {.type_tag=kFidlTypeTable, {.coded_table={.fields=Fields18test_name_OnlyRust, .field_count=0u, .name="test.name/OnlyRust"}}};

static const struct FidlUnionField Fields19test_name_OnlyLlcpp[] = {
    /*FidlUnionField*/{.type=NULL, .padding=0u, .xunion_ordinal=1u}
};
const fidl_type_t test_name_OnlyLlcppTable = {.type_tag=kFidlTypeUnion, {.coded_union={.fields=Fields19test_name_OnlyLlcpp, .field_count=1u, .data_offset=4u, .size=8u, .name="test.name/OnlyLlcpp", .alt_type=&v1_test_name_OnlyLlcppTable}}};

static const struct FidlStructField Fields16test_name_OnlyGo[] = {};
const fidl_type_t test_name_OnlyGoTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields16test_name_OnlyGo, .field_count=0u, .size=1u, .max_out_of_line=0u, .contains_union=false, .name="test.name/OnlyGo", .alt_type=&v1_test_name_OnlyGoTable}}};

static bool EnumValidatorFor_test_name_OnlyDart(uint64_t v) { return (v == 1ul) || false; }
const fidl_type_t test_name_OnlyDartTable = {.type_tag=kFidlTypeEnum, {.coded_enum={.underlying_type=kFidlCodedPrimitive_Uint32, .validate=&EnumValidatorFor_test_name_OnlyDart, .name="test.name/OnlyDart"}}};

// Coding tables for v1 wire format.

extern const fidl_type_t v1_test_name_OnlySyzkallerTable;
extern const fidl_type_t v1_test_name_OnlyRustTable;
extern const fidl_type_t v1_test_name_OnlyLlcppTable;
extern const fidl_type_t v1_test_name_OnlyLlcppNullableRefTable;
extern const fidl_type_t v1_test_name_OnlyGoTable;
extern const fidl_type_t v1_test_name_OnlyDartTable;


extern const fidl_type_t v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable;
static const struct FidlStructField Fields63v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest[] = {};
const fidl_type_t v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields63v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest", .alt_type=&test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable}}};

extern const fidl_type_t v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable;
static const struct FidlStructField Fields64v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse[] = {};
const fidl_type_t v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields64v1_test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse, .field_count=0u, .size=16u, .max_out_of_line=0u, .contains_union=false, .name="test.name/OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse", .alt_type=&test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable}}};


const fidl_type_t v1_test_name_OnlySyzkallerTable = {.type_tag=kFidlTypeBits, {.coded_bits={.underlying_type=kFidlCodedPrimitive_Uint32, .mask=1ul, .name="test.name/OnlySyzkaller"}}};

static const struct FidlTableField Fields21v1_test_name_OnlyRust[] = {};
const fidl_type_t v1_test_name_OnlyRustTable = {.type_tag=kFidlTypeTable, {.coded_table={.fields=Fields21v1_test_name_OnlyRust, .field_count=0u, .name="test.name/OnlyRust"}}};

static const struct FidlXUnionField Fields22v1_test_name_OnlyLlcpp[] = {
    /*FidlXUnionField*/{.type=&fidl_internal_kUint32Table, .ordinal=1u}
};
const fidl_type_t v1_test_name_OnlyLlcppTable = {.type_tag=kFidlTypeXUnion, {.coded_xunion={.field_count=1u, .fields=Fields22v1_test_name_OnlyLlcpp, .nullable=kFidlNullability_Nonnullable, .name="test.name/OnlyLlcpp", .strictness=kFidlStrictness_Strict, .alt_type=&test_name_OnlyLlcppTable}}};
static const struct FidlXUnionField Fields33v1_test_name_OnlyLlcppNullableRef[] = {
    /*FidlXUnionField*/{.type=&fidl_internal_kUint32Table, .ordinal=1u}
};
const fidl_type_t v1_test_name_OnlyLlcppNullableRefTable = {.type_tag=kFidlTypeXUnion, {.coded_xunion={.field_count=1u, .fields=Fields33v1_test_name_OnlyLlcppNullableRef, .nullable=kFidlNullability_Nullable, .name="test.name/OnlyLlcpp", .strictness=kFidlStrictness_Strict, .alt_type=&Pointer19test_name_OnlyLlcppTable}}};
static const struct FidlStructField Fields19v1_test_name_OnlyGo[] = {};
const fidl_type_t v1_test_name_OnlyGoTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields19v1_test_name_OnlyGo, .field_count=0u, .size=1u, .max_out_of_line=0u, .contains_union=false, .name="test.name/OnlyGo", .alt_type=&test_name_OnlyGoTable}}};

static bool EnumValidatorFor_v1_test_name_OnlyDart(uint64_t v) { return (v == 1ul) || false; }
const fidl_type_t v1_test_name_OnlyDartTable = {.type_tag=kFidlTypeEnum, {.coded_enum={.underlying_type=kFidlCodedPrimitive_Uint32, .validate=&EnumValidatorFor_v1_test_name_OnlyDart, .name="test.name/OnlyDart"}}};

