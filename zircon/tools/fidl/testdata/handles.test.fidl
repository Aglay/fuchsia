library fidl.test.handles;

protocol SomeProtocol {
};

using aliased_handle_plain = handle;
using aliased_handle_subtype = handle<vmo>;
using aliased_handle_only_required_rights = handle<vmo, 1>;
using aliased_handle_required_and_optional_rights = handle<vmo, 1, 2>;

struct Handles {
    handle plain_handle;
    handle<none> plain_handle_explicit;
    handle<none, 1> plain_handle_only_required_rights;
    handle<none, 1, 2> plain_handle_required_and_optional_rights;

    handle<vmo> no_rights_for_migration;
    handle<vmo, 1> only_required_rights;
    handle<vmo, 1, 2> required_and_optional_rights;

    aliased_handle_plain aliased_plain;
    aliased_handle_subtype aliased_subtype;
    aliased_handle_only_required_rights aliased_only_required_rights;
    aliased_handle_required_and_optional_rights aliased_required_and_optional_rights;

    SomeProtocol some_protocol;
    request<SomeProtocol> request_some_protocol;
};
