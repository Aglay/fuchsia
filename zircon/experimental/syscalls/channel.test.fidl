// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// !!! THIS FILE IS NOT YET USED !!!
// See //zircon/system/public/zircon/syscalls.banjo.
// !!! THIS FILE IS NOT YET USED !!!

library zz;

using ObjType = uint32;

// TODO(scottmg): ZX_OBJ_TYPE_xyz here.

using HandleOp = uint32;

// TODO(scottmg): ZX_HANDLE_OP_xyz here.

struct HandleInfo {
    handle handle;
    ObjType type;
    rights rights;
    uint32 unused;
};

struct ChannelCallArgs {
    vector<byte> wr_bytes;
    vector<handle> wr_handles;
    // TODO(scottmg): mutable_vector_void
    vector<byte> rd_bytes;
    // TODO(scottmg): mutable_vector_handle
    vector<handle> rd_handles;
};

struct HandleDisposition {
    HandleOp operation;
    handle handle;
    ObjType type;
    rights rights;
    status result;
};

[Transport="Syscall"]
protocol Channel {
    /// Create a channel.
    Create(uint32 options) -> (status status, handle out0, handle out1);

    /// Read a message from a channel.
    [In0="handle:rights=READ",
     ArgReorder="handle,options,bytes,handles,num_bytes,num_handles,actual_bytes,actual_handles"]
    Read(handle<channel> handle,
         uint32 options,
         mutable_vector_void_u32size bytes,
         mutable_vector_handle_u32size handles) ->
        (status status, optional_uint32 actual_bytes, optional_uint32 actual_handles);

    /// Read a message from a channel.
    [In0="handle:rights=READ",
     ArgReorder="handle,options,bytes,handles,num_bytes,num_handles,actual_bytes,actual_handles"]
    ReadEtc(handle<channel> handle,
            uint32 options,
            mutable_vector_void_u32size bytes,
            mutable_vector_HandleInfo_u32size handles) ->
        (status status, optional_uint32 actual_bytes, optional_uint32 actual_handles);

    /// Write a message to a channel.
    [In0="handle:rights=WRITE"]
    // TODO(scottmg): "Every entry of |handles| must have ZX_RIGHT_TRANSFER."
    Write(handle<channel> handle,
          uint32 options,
          vector_void_u32size bytes,
          vector_handle_u32size handles) ->
        (status status);

    /// Write a message to a channel.
    [In0="handle:rights=WRITE"]
    // TODO(scottmg): "Every entry of |handles| must have ZX_RIGHT_TRANSFER."
    WriteEtc(handle<channel> handle,
             uint32 options,
             vector_void_u32size bytes,
             mutable_vector_HandleDisposition_u32size handles) ->
        (status status);

    [Internal,
     In0="handle:rights=READ,WRITE"]
    // TODO(scottmg): Express "All wr_handles of args must have ZX_RIGHT_TRANSFER."
    CallNoretry(handle<channel> handle, uint32 options, time deadline, ChannelCallArgs args) ->
        (status status, uint32 actual_bytes, uint32 actual_handles);

    [Internal]
    CallFinish(time deadline, ChannelCallArgs args) ->
        (status status, uint32 actual_bytes, uint32 actual_handles);

    /// Send a message to a channel and await a reply.
    [Blocking,
     Vdsocall,
     In0="handle<channel>:rights=READ,WRITE"]
    // TODO(scottmg): Express "All wr_handles of args must have ZX_RIGHT_TRANSFER."
    Call(handle handle, uint32 options, time deadline, ChannelCallArgs args) ->
        (status status, uint32 actual_bytes, uint32 actual_handles);
};
