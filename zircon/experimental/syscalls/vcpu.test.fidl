// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// !!! THIS FILE IS NOT YET USED !!!
// See //zircon/system/public/zircon/syscalls.banjo.
// !!! THIS FILE IS NOT YET USED !!!

library zz;

[Transport="Syscall"]
protocol Vcpu {
    /// Create a VCPU.
    /// Rights: guest must be of type ZX_OBJ_TYPE_GUEST and have ZX_RIGHT_MANAGE_PROCESS.
    Create(handle<guest> guest, uint32 options, vaddr entry) -> (status status, handle<vcpu> out);

    // See port.fidl for definition of PortPacket.
    /// Resume execution of a VCPU.
    /// Rights: handle must be of type ZX_OBJ_TYPE_VCPU and have ZX_RIGHT_EXECUTE.
    [Blocking]
    Resume(handle<vcpu> handle) -> (status status, PortPacket packet);

    /// Raise an interrupt on a VCPU.
    /// Rights: handle must be of type ZX_OBJ_TYPE_VCPU and have ZX_RIGHT_SIGNAL.
    Interrupt(handle<vcpu> handle, uint32 vector) -> (status status);

    /// Read the state of a VCPU.
    /// Rights: handle must be of type ZX_OBJ_TYPE_VCPU and have ZX_RIGHT_READ.
    ReadState(handle<vcpu> handle, uint32 kind) -> (status status, vector_void buffer);

    /// Write the state of a VCPU.
    /// Rights: handle must be of type ZX_OBJ_TYPE_VCPU and have ZX_RIGHT_WRITE.
    WriteState(handle<vcpu> handle, uint32 kind, vector_void buffer) -> (status status);
};
