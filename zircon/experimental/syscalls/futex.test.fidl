// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// !!! THIS FILE IS NOT YET USED !!!
// See //zircon/system/public/zircon/syscalls.banjo.
// !!! THIS FILE IS NOT YET USED !!!

library zz;

// TODO(scottmg): This is approximately right, but will need to match the
// current definition of zx_futex_t (atomic_int in some #if branches).
using futex = int32;

// TODO(scottmg): The futex is unusual in that by virtue of being an int,
// sometimes it's passed by pointer, and sometimes by value.

[Transport="Syscall"]
protocol Futex {
    /// Wait on a futex.
    [Blocking]
    Wait(const_futexptr value_ptr, futex current_value, handle new_futex_owner, time deadline) ->
        (status status);

    /// Wake some number of threads waiting on a futex, optionally transferring ownership to the thread which was woken in the process.
    Wake(const_futexptr value_ptr, uint32 wake_count) -> (status status);

    /// Wake some number of threads waiting on a futex, and move more waiters to another wait queue.
    Requeue(const_futexptr value_ptr,
            uint32 wake_count,
            futex current_value,
            const_futexptr requeue_ptr,
            uint32 requeue_count,
            handle new_requeue_owner) ->
        (status status);

    /// Wake some number of threads waiting on a futex, optionally transferring ownership to the thread which was woken in the process.
    WakeSingleOwner(const_futexptr value_ptr) -> (status status);

    /// Wake some number of threads waiting on a futex, and move more waiters to another wait queue.
    RequeueSingleOwner(const_futexptr value_ptr,
                       futex current_value,
                       const_futexptr requeue_ptr,
                       uint32 requeue_count,
                       handle new_requeue_owner) ->
        (status status);

    /// Fetch the koid current owner of a futex, if any.
    GetOwner(const_futexptr value_ptr) -> (status status, optional_koid koid);
};
