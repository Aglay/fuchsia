To run the bootsvc integration tests, boot with these boot cmdline arguments:

`userboot=bin/bootsvc bootsvc.next=bin/bootsvc-integration-test,testargument`.

This will tell bootsvc to execute its test suite instead of the usual boot
chain. The expected output from a boot in this mode is a unittest suite report
that says 0 failed tests.

To test that factory items are processed correctly, you need to add a BOOTFS_FACTORY
item to the boot ZBI. Adding any file should work for this test as no processing
of the payload occurs here:
```
$ fx set bringup.x64 && fx build &&
  build-gcc/tools/zbi -o build-gcc/x64.zbi build-gcc/x64.zbi \
    -T BOOTFS_FACTORY README.md &&
  scripts/run-zircon-x64 -k -c userboot=bin/bootsvc \
    -c bootsvc.next=bin/bootsvc-integration-test,testargument
```

To test that crashlogs are being added to bootfs, you need to add a CRASHLOG item
to the boot zbi.  For example, to add the contents of README.md as the crashlog:
```
$ fx set bringup.x64 && fx build &&
  build-gcc/tools/zbi -o build-gcc/x64.zbi build-gcc/x64.zbi \
    -T CRASHLOG README.md &&
  fx run -k -c userboot=bin/bootsvc \
    -c bootsvc.next=bin/bootsvc-integration-test,testargument
```

To test that boot args from ZBI container are being parsed correctly, you need to add
a IMAGE_ARGS item with `testkey=testvalue` contant to the boot zbi.
For example:
```
$ cat > test_image_args.txt <<EOF
testkey=testvalue
EOF

$ ./out/default.zircon/tools/zbi -o out/default.zircon/x64.zbi out/default.zircon/x64.zbi \
    -T IMAGE_ARGS test_image_args.txt

$ cd out && ../scripts/run-zircon-x86 -V -k -q $(pwd)/../buildtools/linux-x64/qemu/bin \
    -c userboot=bin/bootsvc -c bootsvc.next=bin/bootsvc-integration-test,testargument
```
