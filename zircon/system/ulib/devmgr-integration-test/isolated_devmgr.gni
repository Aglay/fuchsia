# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/sys/build/components.gni")

# Produces a component with an isoalted driver manager which can be used to launch drivers.
#
# Example Usage:
#
# ```
# isolated_devmgr_component("my-component") {
#   args = [ "--svc_name=fuchsia.example.IsolatedDevmgr" ]
# }
#
# fuchsia_package("my-package") {
#   deps = [ ":my-component" ]
# }
# ```
# The component above will have the following launch URL:
# `fuchsia-pkg://fuchsia.com/my-package#meta/my-component.cmx`
#
# `isolated_devmgr_component` may depend on any number of `driver_module()` targets to ensure
# that any `fuchsia_package()` that includes them will include the same drivers.
#
# ```
# driver_module("my_driver") {
#   ...
# }
#
# isolated_devmgr_component("my-component") {
#   deps = [ ":my_driver" ]
#   ...
# }
# ```
#
# The component defined above will be able to read my_driver under the path
# "/pkg/driver/my_driver.so" in its sandbox.
#
# Parameters
#
#   package_name (optional)
#     The name of the package.
#     Type: string
#     Default: target_name
#
#   executable_path (required)
#     Specify the packaged path of the test executable.
#     Example: "test/my_executable"
#     This executable must be generated by one of the `deps`.
#     This is used in generating the manifest.
#     Type: string
#
#   test_specs (optional)
#     Additional test specifications to apply to the test defined above.
#     See `test_spec.gni`.
#     Type: scope
#
#   deps
#   testonly
#   visibility
template("isolated_devmgr_unittest_package") {
  assert(
      defined(invoker.executable_path),
      "`executable_path` must be specified when calling isolated_devmgr_unittest_package($target_name)")

  component_name = "${target_name}-component"

  manifest_path = "${target_gen_dir}/meta/${component_name}.cmx"

  manifest_name = "${component_name}.cmx"
  generated_file(manifest_name) {
    outputs = [ manifest_path ]

    contents = {
      program = {
        binary = invoker.executable_path
      }
      sandbox = {
        services = [
          "fuchsia.exception.Handler",
          "fuchsia.logger.LogSink",
          "fuchsia.process.Launcher",
        ]
      }
    }
    output_conversion = "json"
  }

  fuchsia_component(component_name) {
    component_name = invoker.target_name
    testonly = true
    visibility = [ ":*" ]
    manifest = manifest_path
    deps = []
    if (defined(invoker.deps)) {
      deps = invoker.deps
    }
    deps += [
      ":${manifest_name}",
      "//src/bringup/bin/miscsvc",
      "//src/bringup/bin/netsvc:device-name-provider",
      "//src/devices/bin/driver_host",
      "//src/devices/bin/driver_manager",
      "//src/lib/isolated_devmgr:isolated_devmgr",
      "//src/storage/fshost",
    ]
  }

  fuchsia_test_package(target_name) {
    forward_variables_from(invoker,
                           [
                             "package_name",
                             "test_specs",
                             "visibility",
                           ])
    test_components = [ ":$component_name" ]
  }
}
