# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This file exists to find the GN toolchain() instance used to build
# the uninstrumented version of the C library, required for the Fuchsia
# system package (even if an instrumented variant is enabled for the build)
# as well as used by the sysroot.
#
# For more details, see the extensive TECHNICAL NOTE in the comments at
# the end of this file.

# The C library's own GN target label, without a toolchain
sysroot_libc_label = "//zircon/system/ulib/c"

# The base toolchain used to build the C library. This is the toolchain that is used
# when no variant is selected by the user through `select_variant` in args.gn.
sysroot_libc_base_toolchain = "//zircon/system/ulib/c:user.libc_$target_cpu"

# The toolchain that is used to build the C library, after variant selection has been
# applied. The computation mimics those in variant_target(), but with a set of hard-coded
# target properties as:
#
# - host = false
# - target_type = [ "shared_library" ]
# - output_name = [ "libc.so" ]
# - label = [ "//zircon/system/ulib/c" ]
# - name = [ "c" ]
# - dir = [ "//zircon/system/ulib/c" ]
# - exclude_variant_tags = [ "fuzzer" ]
#
# IMPORTANT: Always keep this in sync with variant_target() in //build/config/BUILDCONFIG.gn.
_instrumented_target_variant = ""
_uninstrumented_target_variant = ""
_libprefix = ""
if (select_variant_canonical != []) {
  selected = false
  foreach(selector, select_variant_canonical) {
    if (_instrumented_target_variant == "") {
      select = {
      }
      select = {
        target_type = []
        output_name = []
        label = []
        name = []
        dir = []
        forward_variables_from(selector, "*")
      }
      selected = true
      if (selected && defined(selector.host)) {
        selected = selector.host == false
      }

      if (selected && defined(selector.testonly)) {
        selected = selector.testonly == false
      }

      if (selected && select.target_type != []) {
        selected = select.target_type + [ "shared_library" ] -
                   [ "shared_library" ] != select.target_type
      }
      if (selected && select.output_name != []) {  # installed as ld.so.1.
        # NOTE: The C library's output name is always libc.so, even if it is later
        selected = select.output_name + [ "libc.so" ] - [ "libc.so" ] !=
                   select.output_name
      }
      if (selected && select.label != []) {
        selected = select.label + [ sysroot_libc_label ] -
                   [ sysroot_libc_label ] != select.label
      }
      if (selected && select.name != []) {
        selected = select.name + [ "c" ] - [ "c" ] != select.name
      }
      if (selected && select.dir != []) {
        selected = select.dir + [ "//zircon/system/ulib/c" ] -
                   [ "//zircon/system/ulib/c" ] != select.dir
      }
      if (selected) {  # We hack here the fact that "fuzzer" is in the
                       # user.libc_$cpu exclude_variant_tags list.
        if (select.variant_tags + [ "fuzzer" ] - [ "fuzzer" ] !=
            select.variant_tags) {
          selected = false
        }
      }
      if (selected && selector.variant != false) {
        if (selector.variant_tags + [ "instrumented" ] - [ "instrumented" ] !=
            selector.variant_tags) {
          _instrumented_target_variant = "-${selector.variant}"
          _libprefix = "${selector.variant}/"
        } else {
          _uninstrumented_target_variant = "-${selector.variant}"
        }
      }
    }
  }
}

# See technical note below to understand why these computations are necessary.
if (_instrumented_target_variant != "") {
  _user_target_variant = _instrumented_target_variant
} else {
  _user_target_variant = _uninstrumented_target_variant
}

_system_target_variant = _uninstrumented_target_variant

# This is the toolchain used to build the C library for regular Fuchsia packages.
# If an instrumented toolchain is used, it will be installed as lib/<variant>/ld.so.1
# as expected by other user-level binaries.
sysroot_libc_toolchain = sysroot_libc_base_toolchain + _user_target_variant

# This is the toolchain used to build the C library that appears in the system package,
# i.e. that is installed under /lib/ld.so.1. It must be a non-instrumented version of
# the library, though a variant like "gcc" might be applied to it.
system_libc_toolchain = sysroot_libc_base_toolchain + _system_target_variant

# This is the 'libprefix' value for the C library's toolchain.
# In a nutshell, this is an empty string, except for instrumented variants
# where it will be the variant name, without a -fuzzer suffix.
# The library is typically installed as lib/${_libprefix}ld.so.1 in packages.
sysroot_libc_libprefix = _libprefix

# The GN target that builds the C library for the current variant selection.
sysroot_libc_target = "${sysroot_libc_label}(${sysroot_libc_toolchain})"

# The paths to the binaries generated by the C library target. Note that these
# are called libc.so, but are installed in packages or the system as ld.so.1.
sysroot_libc_stripped =
    get_label_info(sysroot_libc_target, "root_out_dir") + "/libc.so"
sysroot_libc_unstripped = sysroot_libc_stripped + ".debug"

# The GN target that builds the system C library.
# This is required for certain binaries that are placed in the system package, and
# expect to find the library under lib/ld.so.1, instead of lib/<variant>/ld.so.1
system_libc_target = "${sysroot_libc_label}(${system_libc_toolchain})"
system_libc_stripped =
    get_label_info(system_libc_target, "root_out_dir") + "/libc.so"
system_libc_unstripped = system_libc_stripped + ".debug"

# TECHNICAL NOTE
#
# This file exists because the C library, while technically not part of the
# system in Fuchsia, still requires very special care during the build.
#
# Its main purpose is to find the GN toolchain() instance that is used to
# build the uninstrumented version of 'libc.so', based on the current set
# of variant selectors (i.e. 'select_variant' as defined in
# 'out/default/args.gn')
#
# Some critical considerations to be aware of to understand what's below:
#
# - The C library is built as 'libc.so' and 'libc.so.debug', for the stripped
#   and unstripped versions, respectively.
#
#   The stripped version is installed into Fuchsia packages and is used
#   at runtime. The unstripped version is used at link time and for
#   debugging + symbolization.
#
# - The C library can be built with GCC, instead of Clang. This is usually
#   done by enabling the "gcc" variant, which is ignored by non-Zircon specific
#   targets (in other words, Fuchsia user binaries are never built with GCC
#   even if this variant is enabled).
#
# - The stripped C library (libc.so) will be installed as 'lib/ld.so.1'
#   by default within Fuchsia packages. This is because it implements both
#   the C runtime and the dynamic loader at the same time. Fuchsia user
#   executables contain a direct reference to this location inside their
#   dynamic section.
#
#   However, a Fuchsia executable built with an _instrumented_ variant,
#   will look at runtime for 'lib/<variant>/ld.so.1' instead, which
#   should contain the version of 'libc.so' compiled for the same variant.
#
#   E.g., if the "asan" variant is enabled, then an executable installed
#   as 'bin/program' will use 'lib/asan/ld.so.1' to find the dynamic loader,
#   and this file should be a copy of 'out/default/user.libc_x64-asan/libc.so'.
#
#   Hence, which version of the C library is associated with a given
#   executable binary (or loadable_module), depends on the variant used to
#   build it.
#
#   As a reminder, our build system provides the ability to enable different
#   variants for different targets, e.g.:
#
#     select_variant = [
#       "ubsan/cat",
#       "profile/echo",
#       "asan"
#     ]
#
#   Would build the 'cat' executable with the 'ubsan' variant, the
#   'echo' one with the 'profile' variant, and all other Fuchsia executables
#   with the 'asan' one.
#
# - Even if no variant is enabled in a given build, the "asan" and "asan-ubsan"
#   variants of the C library need to be built and exported to the Fuchsia SDK.
#   (see //zircon/system/ulib/c/sysroot_entries.gni for details).
#
# - The "system package" is a special Fuchsia package that contains system
#   libraries and binaries (i.e. those required to boot the system). It requires
#   an un-instrumented C library in 'lib/ld.so.1', since several prebuilt
#   driver binaries depend on it.
#
#   And this, even if a variant is enabled to build all Fuchsia binaries.
#   Note that non-instrumented variants still need to apply to this binary
#   (e.g. "gcc" or "thinlto").
#
# - Finally, when linking executables or ELF shared objects, the C++ compiler
#   will by default inject implicit dependencies to various libraries and
#   object files, i.e.:
#
#    - Adding an implicit '-lc' and '-lm' link argument before invoking
#      the final linker program.
#
#    - Adding implicit dependencies to compiler-builtins support libraries
#      (e.g. '-lgcc'), the C++ runtime library (e.g. '-lc++') and other
#      instrumentation-related runtime libraries (e.g. '-lclang_rt.asan')
#      when needed.
#
#    - For ELF executables, it will also search for a file named 'Scrt1.o'
#      which contains the low-level C runtime startup code (i.e. the
#      one that implements the '_start' entry point, called by the
#      system once the executable and its dependent libraries are
#      loaded, its role is to initialize the C runtime, then jump
#      off to the main() function).
#
#   All of these can be controlled by an array of compiler/linker flags,
#   the most important one being the --sysroot=DIR option used to specify
#   the location of these system headers and libraries at build time.
#
# - Rust and Go binaries do not participate in variant selection. As such
#   they should always be linked against a non-instrumented version of
#   the C library, even if an instrumented variant is used for other
#   C++ Fuchsia binaries.
#
# - Apparently, it is ok to link an instrumented executable or loadable
#   module against a non-instrumented C library at build time, as long
#   as the proper instrumented binary is installed into the corresponding
#   Fuchsia package.
#
#   That is the way the build worked before unification, and continues to
#   do so for now. In the future, it might be possible to use the right
#   instrumented C library at link time instead.
#
#   select_variant = []
#     No variant is selected. Both libraries are the same binary, installed
#     as lib/ld.so.1 everywhere,
#
# - The fact that the C library can be compiled with GCC, but that
#   instrumented executables require a C library built in the same
#   variant toolchain instance means that variant selection for the
#   C library must happen in a slightly different way than for
#   regular targets. Consider the following four cases:
#
#   select_variant = [ "gcc" ]
#     The system C library is built with GCC, and installed as lib/ld.so.1
#     everywhere. Note that the "gcc" selector only applies to zircon-specific
#     toolchains (e.g. the ones used to build the C library, the Zircon VDSO,
#     or the Zircon kernel), but not to the toolchain(s) used to build Fuchsia
#     user binaries. This is intentional (since a lot of Fuchsia user code does
#     not compile with GCC without errors or warnings-as-errors).
#
#   select_variant = [ "asan", "gcc" ]
#     Variant selection stops at the first variant in the list that matches
#     the current target. In this specific case, "asan" will always match
#     for the C library and Fuchsia user binaries, and the "gcc" variant
#     would be ignored. However, the system C library, which ignores
#     instrumented variants, will be built with GCC nonetheless.
#
#   select_variant = [ "gcc", "asan" ]
#     Similarly, the "gcc" selector applies to the C library target,
#     but not to other Fuchsia user binaries. The system C library will
#     also be built with GCC.
#

