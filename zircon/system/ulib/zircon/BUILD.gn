# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/zircon/standard.gni")
import("//build/toolchain/zircon/zircon_toolchain_suite.gni")
import("//build/unification/global_variables.gni")
import("//build/unification/zx_library.gni")

# The vDSO is built in its own special environment because it has special
# constraints.  If all the code going into the vDSO were built entirely in
# this BUILD.gn file, then a separate environment would not be necessary.
# But the vDSO needs to be able to use some other library code defined
# elsewhere.

if (current_toolchain == default_toolchain) {
  # Define the special toolchain itself only in the default toolchain.
  foreach(cpu, standard_fuchsia_cpus) {
    zircon_toolchain_suite("user.vdso_$cpu") {
      cpu = cpu
      os = current_os
      strip = "--strip-sections"
      environment = "user.vdso"

      with_shared = false
      is_pic_default = true

      configs = [ "//zircon/system/ulib/zircon:user.vdso.config" ]

      exclude_variant_tags = [
        # The vDSO can't use instrumentation runtimes.
        "instrumented",

        # The vDSO cannot be built with GCC.
        "gcc",
      ]
    }
  }
}

if (toolchain.environment == "user.vdso") {
  # The following are needed by the zircon_toolchain_suite() definition above.
  config("user.vdso.config") {
    configs = [
      # This is mostly like other user code.
      "//build/config/zircon:user",

      # But it can't rely on full Fuchsia ABI like SafeStack/ShadowCallStack.
      "//build/config/zircon:no_sanitizers",

      # And it can't rely on libc.
      "//build/config/zircon:freestanding",

      "//build/config/zircon:rodso",
    ]
  }

  group("user.vdso.config_deps") {
  }
}

if (toolchain.environment != "user.vdso") {
  # Even non-user environments can see the headers.
  import("vdso_toolchain.gni")
  group("headers") {
    public_deps = [ ":headers($zircon_vdso_toolchain)" ]
  }

  if (toolchain.base_environment == "user") {
    # Other userland environments redirect to pick up the real library.
    group("zircon") {
      public_deps = [ ":zircon($zircon_vdso_toolchain)" ]
    }
  } else {
    # References from other environments only get the headers.  This
    # makes it easy to have "$zx/system/ulib/zircon" deps in common
    # libraries that need to link against it in userland but that in
    # other contexts like kernel or userboot are just using the headers.
    group("zircon") {
      public_deps = [ ":headers" ]
    }
  }

  # Publish headers to the GN build so that they may be used in host binaries.
  source_set("zircon-headers") {
    sources = [
      "include/zircon/exception.h",
      "include/zircon/status.h",
    ]
    public_configs = [ ":zircon-headers.config" ]
  }

  config("zircon-headers.config") {
    include_dirs = [ "include" ]
  }
} else {  # toolchain.environment == "user.vdso"
  zx_library("zircon") {
    shared = true
    static = false

    sources = [
      "data.S",
      "syscall-wrappers.cc",
      "zx_cache_flush.cc",
      "zx_channel_call.cc",
      "zx_clock_get_monotonic.cc",
      "zx_cprng_draw.cc",
      "zx_deadline_after.cc",
      "zx_exception_get_string.cc",
      "zx_status_get_string.cc",
      "zx_system_get_dcache_line_size.cc",
      "zx_system_get_features.cc",
      "zx_system_get_num_cpus.cc",
      "zx_system_get_physmem.cc",
      "zx_system_get_version.cc",
      "zx_system_get_version_string.cc",
      "zx_ticks_get.cc",
      "zx_ticks_per_second.cc",
    ]

    deps = [
      ":syscall-asm",
      "$zx/kernel/lib/syscalls:headers",
      "$zx/kernel/lib/userabi:headers",
      "$zx/system/ulib/affine",
    ]
    public_deps = [ "$zx/vdso:public($default_toolchain)" ]

    # The line above doesn't work in the Fuchsia build because its
    # default toolchain does not propagate configs. Adding the config
    # manually works-around the issue.
    public_configs = [ "$zx/vdso:public.config($default_toolchain)" ]

    # Instruct the linker to preserve the hidden alternate entry points.
    # Note, "./" makes GN realize this is a file rather than a -l switch.
    libs = [ "./alternates.ld" ]

    ldflags = [
      # Make sure libc++ is not linked into the vDSO.  Header-only use is OK.
      "-nostdlib++",

      # Set e_entry so _zx_process_exit is easy to find without reading .dynsym.
      "-Wl,-e,_zx_process_exit",
    ]

    # This ensures that the vDSO is never installed into Fuchsia packages
    # or bootfs filesystems, since it will be hard-coded into the kernel.
    metadata = {
      distribution_entries_barrier = []
      distribution_entries = []
    }
  }

  source_set("syscall-asm") {
    sources = [
      "syscalls-$zircon_cpu.S",
      "zx_futex_wake_handle_close_thread_exit-$zircon_cpu.S",
      "zx_vmar_unmap_handle_close_thread_exit-$zircon_cpu.S",
    ]
    deps = [
      ":headers",
      "$zx/kernel/lib/syscalls",
    ]
    if (toolchain.base_environment == "user") {
      configs -= [ "//build/config/zircon:user" ]
    }
  }
}
