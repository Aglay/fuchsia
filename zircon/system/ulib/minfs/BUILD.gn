# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

##########################################
# Though under //zircon, this build file #
# is meant to be used in the Fuchsia GN  #
# build.                                 #
# See fxb/36548.                         #
##########################################

assert(!defined(zx) || zx != "/",
       "This file can only be used in the Fuchsia GN build.")

import("//build/unification/zx_library.gni")

zx_library("minfs") {
  sdk = "source"
  sdk_headers = [
    "minfs/fsck.h",
    "minfs/bcache.h",
    "minfs/superblock.h",
    "minfs/inspector.h",
    "minfs/writeback.h",
    "minfs/transaction_limits.h",
    "minfs/allocator_reservation.h",
    "minfs/format.h",
    "minfs/mutex.h",
    "minfs/minfs.h",
    "minfs/host.h",
    "minfs/metrics.h",
    "minfs/pending_work.h",
    "minfs/command_handler.h",
    "minfs/minfs_inspector.h",
  ]
  host = true
  static = true
  sources = [
    "allocator/allocator_common.cc",
    "allocator/allocator_reservation.cc",
    "allocator/metadata.cc",
    "allocator/storage_common.cc",
    "directory.cc",
    "file.cc",
    "fsck.cc",
    "metrics.cc",
    "minfs.cc",
    "transaction_limits.cc",
    "vnode.cc",
    "writeback.cc",
  ]
  if (!is_fuchsia) {
    sources += [
      "allocator/allocator_host.cc",
      "allocator/inode_manager_host.cc",
      "allocator/storage_host.cc",
      "bcache_host.cc",
      "host.cc",
      "superblock_host.cc",
    ]
  }
  public_deps = [
    "//zircon/public/lib/bitmap",

    #"//zircon/public/lib/disk_inspector",
    "//zircon/public/lib/fbl",
    "//zircon/public/lib/fs",
    "//zircon/public/lib/journal",
    "//zircon/public/lib/transaction",

    # <minfs/bcache.h> has #include <fvm/client.h>.
    "//zircon/public/lib/fvm",
    "//zircon/public/lib/operation",
  ]
  deps = [
    "//zircon/public/lib/bitmap",
    "//zircon/public/lib/disk_inspector",
    "//zircon/public/lib/fbl",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/fs",
    "//zircon/public/lib/transaction",
    "//zircon/public/lib/buffer",
    "//zircon/public/lib/operation",
    "//zircon/public/lib/zircon-internal",
    "//zircon/public/lib/cksum",
    "//zircon/public/lib/safemath",
  ]
  if (is_fuchsia) {
    public_deps += [
      "//zircon/public/lib/block-client",
      "//zircon/public/lib/fzl",
      "//zircon/public/lib/storage-metrics",
      "//zircon/public/lib/zx",
      "//zircon/system/fidl/fuchsia-hardware-block:c",
      "//zircon/system/fidl/fuchsia-hardware-block-volume:c",
      "//zircon/system/fidl/fuchsia-minfs:llcpp",
    ]
    deps += [
      "//zircon/public/lib/async",
      "//zircon/public/lib/async-cpp",
      "//zircon/public/lib/async-default",
      "//zircon/public/lib/async-loop",
      "//zircon/public/lib/async-loop-cpp",
      "//zircon/public/lib/async-loop-default",
      "//zircon/public/lib/fdio",
      "//zircon/public/lib/fdio-caller",
      "//zircon/public/lib/fidl",
      "//zircon/public/lib/fidl-utils",
      "//zircon/public/lib/journal",
      "//zircon/public/lib/fvm",
      "//zircon/public/lib/fzl",
      "//zircon/public/lib/storage-metrics",
      "//zircon/public/lib/operation",
      "//zircon/public/lib/sync",
      "//zircon/public/lib/trace",
      "//zircon/public/lib/trace-engine",
      "//zircon/public/lib/zx",
      "//zircon/system/fidl/fuchsia-device:c",
      "//zircon/system/fidl/fuchsia-device:llcpp",
      "//zircon/system/fidl/fuchsia-io:llcpp",
      "//zircon/system/fidl/fuchsia-minfs:llcpp",
    ]
    sources += [
      "allocator/allocator.cc",
      "allocator/inode_manager.cc",
      "allocator/storage.cc",
      "bcache.cc",
      "inspector.cc",
      "inspector/command_handler.cc",
      "inspector/disk_struct.cc",
      "inspector/loader.cc",
      "inspector/minfs_inspector.cc",
      "inspector/parser.cc",
      "inspector_inode.cc",
      "inspector_inode_table.cc",
      "inspector_superblock.cc",
      "superblock.cc",
      "vnode_allocation.cc",
    ]
  }
  include_dirs = [ "." ]
}
