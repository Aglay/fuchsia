// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// NOTE: Refer to README.md to regenerate the coding tables whenever these
// definitions change.

library example;

union UnionSize8Aligned4 {
    uint8 unused1;   // makes `variant` tagged 2
    uint8 unused2;   // since it is the third
    uint32 variant;  // xunion_ordinal = 0x7fc2f0db
};

union UnionSize16Aligned4 {
    uint8 unused1;          // avoid tag 0
    uint8 unused2;          // avoid tag 1
    uint8 unused3;          // avoid tag 2
    array<uint8>:6 variant; // 0x20d1d3bf
};

struct StructSize16Alignement8 {
    uint64 f1;
    uint64 f2;
};

union UnionSize24Alignement8 {
    uint8 unused1;                   // avoid tag 0
    uint8 unused2;                   // avoid tag 1
    uint8 unused3;                   // avoid tag 2
    StructSize16Alignement8 variant; // 0x3404559b
};

struct Sandwich1 {
   uint32 before;
   UnionSize8Aligned4 union;
   uint32 after;
};

struct Sandwich2 {
   uint32 before;
   UnionSize16Aligned4 union;
   uint32 after;
};

struct Sandwich3 {
   uint32 before;
   UnionSize24Alignement8 union;
   uint32 after;
};

union UnionSize36Alignment4 {
    uint8 unused1;           // avoid tag 0
    uint8 unused2;           // avoid tag 1
    uint8 unused3;           // avoid tag 2
    array<uint8>:32 variant; // 0x5e411019
};

struct Sandwich4 {
    uint32 before;
    UnionSize36Alignment4 union;
    uint32 after;
};

union UnionOfUnion {
    uint8 unused;                          // avoid tag 0
    UnionSize8Aligned4 size8aligned4;      // 0x20AADD60
    UnionSize16Aligned4 size16aligned4;    // 0x2D7665CD
    UnionSize24Alignement8 size24aligned8; // 0x06722D1F
};

struct Sandwich5 {
    uint32 before;
    UnionOfUnion union_of_union;
    uint32 after;
};

struct StructSize3Alignment1 {
    array<uint8>:3 three_bytes;
};

struct StructSize3Alignment2 {
    uint16 f1;
    uint8 f2;
};

// We name Sandwich6 cases by the tag number, i.e. Sandwich6 case 2 is
// testing the `string` variant.
union UnionWithVector {
    uint8 unused;                                    // avoid tag 0
    vector<uint8> vector_of_uint8;                   // 1: 0x79C3CCAD
    string string;                                   // 2: 0x3B314338
    vector<StructSize3Alignment1> vector_s3_a1;      // 3: 0x4BC13CDC
    vector<StructSize3Alignment2> vector_s3_a2;      // 4: 0x1D08AA3C
    vector<handle> handles;                          // 5: 0x471EAA76
    array<StructSize3Alignment1>:2 array_s3_a1;      // 6: 0x5EA0A810
    array<StructSize3Alignment2>:2 array_s3_a2;      // 7: 0x5CF8B70D
    vector<UnionSize8Aligned4> vector_union;         // 8: 0x2B768C31
};

struct Sandwich6 {
    uint32 before;
    UnionWithVector union;
    uint32 after;
};

struct Sandwich7 {
    uint32 before;
    Sandwich1? opt_sandwich1;
    uint32 after;
};

// TODO(apang): Add the following tests
//
//     struct Regression1 {
//         uint8 f1;
//         uint32 f2;
//         uint8 f3;
//         uint16 f4;
//         uint64 f5;
//         uint8 f6;
//     };
//
//     struct Regression2 {
//         Regression1 head;
//         uint8 f6;
//     };
//
//     struct Regression3 {
//         Regression2? opt_value;
//     };
//
// These are particularly interesting because they exercice complex field
// placement, padding, both inline and out-of-line.
