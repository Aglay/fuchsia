// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Code generated by tools/fidl/gidl-conformance-suite/regen.sh; DO NOT EDIT.

#include <unittest/unittest.h>

#include "generated/transformer_conformance_tables.h"
#include "transformer_conformance_utils.h"

namespace {

uint8_t sandwich1_case1_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,  //
};

uint8_t sandwich1_case1_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich1_with_opt_union_present_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,  //
};

uint8_t sandwich1_with_opt_union_present_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich1_with_opt_union_absent_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich1_with_opt_union_absent_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich2_case1_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich2_case1_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,  //
};

uint8_t sandwich3_case1_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich3_case1_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //
};

uint8_t sandwich4_case1_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,  //
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich4_case1_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,  //
    0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,  //
};

uint8_t sandwich5_case1_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich5_case1_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich5_case2_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich5_case2_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,  //
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,  //
};

uint8_t sandwich6_case1_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,  //
};

uint8_t sandwich6_case1_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,  //
};

uint8_t sandwich6_case1_absent_vector_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case1_absent_vector_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
};

uint8_t sandwich6_case2_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67,  //
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,  //
    0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case2_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67,  //
    0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20,  //
    0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case3_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x73, 0x6f, 0x66, 0x20, 0x6d, 0x69, 0x72, 0x61,  //
    0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case3_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x73, 0x6f, 0x66, 0x20, 0x6d, 0x69, 0x72, 0x61,  //
    0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case4_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x73, 0x6f, 0x66, 0x00, 0x20, 0x6d, 0x69, 0x00,  //
    0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case4_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x73, 0x6f, 0x66, 0x00, 0x20, 0x6d, 0x69, 0x00,  //
    0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case5_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case5_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case6_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case6_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00,  //
};

uint8_t sandwich6_case7_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich6_case7_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00,  //
};

uint8_t sandwich6_case8_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,  //
};

uint8_t sandwich6_case8_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich7_case1_old_bytes[] = {
    0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,  //
};

uint8_t sandwich7_case1_v1_bytes[] = {
    0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich7_case2_old_bytes[] = {
    0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t sandwich7_case2_v1_bytes[] = {
    0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression1_old_bytes[] = {
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression1_v1_bytes[] = {
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression2_old_bytes[] = {
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression2_v1_bytes[] = {
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression3_absent_old_bytes[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression3_absent_v1_bytes[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression3_present_old_bytes[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t regression3_present_v1_bytes[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t size5_alignment1_array_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,  //
};

uint8_t size5_alignment1_array_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,  //
    0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,  //
};

uint8_t size5_alignment4_array_old_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00,  //
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,  //
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,  //
};

uint8_t size5_alignment4_array_v1_bytes[] = {
    0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00,  //
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,  //
    0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,  //
};

uint8_t size5_alignment1_vector_old_bytes[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,  //
    0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t size5_alignment1_vector_v1_bytes[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,  //
    0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t size5_alignment4_vector_old_bytes[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00,  //
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,  //
};

uint8_t size5_alignment4_vector_v1_bytes[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00,  //
    0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,  //
};

uint8_t table_struct_with_reserved_sandwich_old_bytes[] = {
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t table_struct_with_reserved_sandwich_v1_bytes[] = {
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t table_struct_with_uint32_sandwich_old_bytes[] = {
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t table_struct_with_uint32_sandwich_v1_bytes[] = {
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,  //
    0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t table_union_with_vector_reserved_sandwich_old_bytes[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,  //
};

uint8_t table_union_with_vector_reserved_sandwich_v1_bytes[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,  //
};

uint8_t table_union_with_vector_struct_sandwich_old_bytes[] = {
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,  //
    0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t table_union_with_vector_struct_sandwich_v1_bytes[] = {
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,  //
    0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t x_union_with_struct_old_bytes[] = {
    0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t x_union_with_struct_v1_bytes[] = {
    0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00,  //
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t array_struct_old_bytes[] = {
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x74, 0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x74, 0x68, 0x72, 0x65, 0x65, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x66, 0x6f, 0x75, 0x72, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x66, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00,  //
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x73, 0x69, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

uint8_t array_struct_v1_bytes[] = {
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x74, 0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x74, 0x68, 0x72, 0x65, 0x65, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x66, 0x6f, 0x75, 0x72, 0x00, 0x00, 0x00, 0x00,  //
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x66, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00,  //
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,  //
    0x73, 0x69, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,  //
};

bool test_sandwich1_case1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich1Table,
                                   sandwich1_case1_old_bytes, sizeof sandwich1_case1_old_bytes,
                                   sandwich1_case1_v1_bytes, sizeof sandwich1_case1_v1_bytes));
  END_TEST;
}

bool test_sandwich1_case1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich1Table,
                                   sandwich1_case1_v1_bytes, sizeof sandwich1_case1_v1_bytes,
                                   sandwich1_case1_old_bytes, sizeof sandwich1_case1_old_bytes));
  END_TEST;
}

bool test_sandwich1_with_opt_union_present_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich1WithOptUnionTable,
      sandwich1_with_opt_union_present_old_bytes, sizeof sandwich1_with_opt_union_present_old_bytes,
      sandwich1_with_opt_union_present_v1_bytes, sizeof sandwich1_with_opt_union_present_v1_bytes));
  END_TEST;
}

bool test_sandwich1_with_opt_union_present_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich1WithOptUnionTable,
      sandwich1_with_opt_union_present_v1_bytes, sizeof sandwich1_with_opt_union_present_v1_bytes,
      sandwich1_with_opt_union_present_old_bytes,
      sizeof sandwich1_with_opt_union_present_old_bytes));
  END_TEST;
}

bool test_sandwich1_with_opt_union_absent_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich1WithOptUnionTable,
      sandwich1_with_opt_union_absent_old_bytes, sizeof sandwich1_with_opt_union_absent_old_bytes,
      sandwich1_with_opt_union_absent_v1_bytes, sizeof sandwich1_with_opt_union_absent_v1_bytes));
  END_TEST;
}

bool test_sandwich1_with_opt_union_absent_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich1WithOptUnionTable,
      sandwich1_with_opt_union_absent_v1_bytes, sizeof sandwich1_with_opt_union_absent_v1_bytes,
      sandwich1_with_opt_union_absent_old_bytes, sizeof sandwich1_with_opt_union_absent_old_bytes));
  END_TEST;
}

bool test_sandwich2_case1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich2Table,
                                   sandwich2_case1_old_bytes, sizeof sandwich2_case1_old_bytes,
                                   sandwich2_case1_v1_bytes, sizeof sandwich2_case1_v1_bytes));
  END_TEST;
}

bool test_sandwich2_case1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich2Table,
                                   sandwich2_case1_v1_bytes, sizeof sandwich2_case1_v1_bytes,
                                   sandwich2_case1_old_bytes, sizeof sandwich2_case1_old_bytes));
  END_TEST;
}

bool test_sandwich3_case1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich3Table,
                                   sandwich3_case1_old_bytes, sizeof sandwich3_case1_old_bytes,
                                   sandwich3_case1_v1_bytes, sizeof sandwich3_case1_v1_bytes));
  END_TEST;
}

bool test_sandwich3_case1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich3Table,
                                   sandwich3_case1_v1_bytes, sizeof sandwich3_case1_v1_bytes,
                                   sandwich3_case1_old_bytes, sizeof sandwich3_case1_old_bytes));
  END_TEST;
}

bool test_sandwich4_case1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich4Table,
                                   sandwich4_case1_old_bytes, sizeof sandwich4_case1_old_bytes,
                                   sandwich4_case1_v1_bytes, sizeof sandwich4_case1_v1_bytes));
  END_TEST;
}

bool test_sandwich4_case1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich4Table,
                                   sandwich4_case1_v1_bytes, sizeof sandwich4_case1_v1_bytes,
                                   sandwich4_case1_old_bytes, sizeof sandwich4_case1_old_bytes));
  END_TEST;
}

bool test_sandwich5_case1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich5Table,
                                   sandwich5_case1_old_bytes, sizeof sandwich5_case1_old_bytes,
                                   sandwich5_case1_v1_bytes, sizeof sandwich5_case1_v1_bytes));
  END_TEST;
}

bool test_sandwich5_case1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich5Table,
                                   sandwich5_case1_v1_bytes, sizeof sandwich5_case1_v1_bytes,
                                   sandwich5_case1_old_bytes, sizeof sandwich5_case1_old_bytes));
  END_TEST;
}

bool test_sandwich5_case2_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich5Table,
                                   sandwich5_case2_old_bytes, sizeof sandwich5_case2_old_bytes,
                                   sandwich5_case2_v1_bytes, sizeof sandwich5_case2_v1_bytes));
  END_TEST;
}

bool test_sandwich5_case2_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich5Table,
                                   sandwich5_case2_v1_bytes, sizeof sandwich5_case2_v1_bytes,
                                   sandwich5_case2_old_bytes, sizeof sandwich5_case2_old_bytes));
  END_TEST;
}

bool test_sandwich6_case1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case1_old_bytes, sizeof sandwich6_case1_old_bytes,
                                   sandwich6_case1_v1_bytes, sizeof sandwich6_case1_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case1_v1_bytes, sizeof sandwich6_case1_v1_bytes,
                                   sandwich6_case1_old_bytes, sizeof sandwich6_case1_old_bytes));
  END_TEST;
}

bool test_sandwich6_case1_absent_vector_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
      sandwich6_case1_absent_vector_old_bytes, sizeof sandwich6_case1_absent_vector_old_bytes,
      sandwich6_case1_absent_vector_v1_bytes, sizeof sandwich6_case1_absent_vector_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case1_absent_vector_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
      sandwich6_case1_absent_vector_v1_bytes, sizeof sandwich6_case1_absent_vector_v1_bytes,
      sandwich6_case1_absent_vector_old_bytes, sizeof sandwich6_case1_absent_vector_old_bytes));
  END_TEST;
}

bool test_sandwich6_case2_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case2_old_bytes, sizeof sandwich6_case2_old_bytes,
                                   sandwich6_case2_v1_bytes, sizeof sandwich6_case2_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case2_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case2_v1_bytes, sizeof sandwich6_case2_v1_bytes,
                                   sandwich6_case2_old_bytes, sizeof sandwich6_case2_old_bytes));
  END_TEST;
}

bool test_sandwich6_case3_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case3_old_bytes, sizeof sandwich6_case3_old_bytes,
                                   sandwich6_case3_v1_bytes, sizeof sandwich6_case3_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case3_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case3_v1_bytes, sizeof sandwich6_case3_v1_bytes,
                                   sandwich6_case3_old_bytes, sizeof sandwich6_case3_old_bytes));
  END_TEST;
}

bool test_sandwich6_case4_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case4_old_bytes, sizeof sandwich6_case4_old_bytes,
                                   sandwich6_case4_v1_bytes, sizeof sandwich6_case4_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case4_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case4_v1_bytes, sizeof sandwich6_case4_v1_bytes,
                                   sandwich6_case4_old_bytes, sizeof sandwich6_case4_old_bytes));
  END_TEST;
}

bool test_sandwich6_case5_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case5_old_bytes, sizeof sandwich6_case5_old_bytes,
                                   sandwich6_case5_v1_bytes, sizeof sandwich6_case5_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case5_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case5_v1_bytes, sizeof sandwich6_case5_v1_bytes,
                                   sandwich6_case5_old_bytes, sizeof sandwich6_case5_old_bytes));
  END_TEST;
}

bool test_sandwich6_case6_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case6_old_bytes, sizeof sandwich6_case6_old_bytes,
                                   sandwich6_case6_v1_bytes, sizeof sandwich6_case6_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case6_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case6_v1_bytes, sizeof sandwich6_case6_v1_bytes,
                                   sandwich6_case6_old_bytes, sizeof sandwich6_case6_old_bytes));
  END_TEST;
}

bool test_sandwich6_case7_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case7_old_bytes, sizeof sandwich6_case7_old_bytes,
                                   sandwich6_case7_v1_bytes, sizeof sandwich6_case7_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case7_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case7_v1_bytes, sizeof sandwich6_case7_v1_bytes,
                                   sandwich6_case7_old_bytes, sizeof sandwich6_case7_old_bytes));
  END_TEST;
}

bool test_sandwich6_case8_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich6Table,
                                   sandwich6_case8_old_bytes, sizeof sandwich6_case8_old_bytes,
                                   sandwich6_case8_v1_bytes, sizeof sandwich6_case8_v1_bytes));
  END_TEST;
}

bool test_sandwich6_case8_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich6Table,
                                   sandwich6_case8_v1_bytes, sizeof sandwich6_case8_v1_bytes,
                                   sandwich6_case8_old_bytes, sizeof sandwich6_case8_old_bytes));
  END_TEST;
}

bool test_sandwich7_case1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich7Table,
                                   sandwich7_case1_old_bytes, sizeof sandwich7_case1_old_bytes,
                                   sandwich7_case1_v1_bytes, sizeof sandwich7_case1_v1_bytes));
  END_TEST;
}

bool test_sandwich7_case1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich7Table,
                                   sandwich7_case1_v1_bytes, sizeof sandwich7_case1_v1_bytes,
                                   sandwich7_case1_old_bytes, sizeof sandwich7_case1_old_bytes));
  END_TEST;
}

bool test_sandwich7_case2_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Sandwich7Table,
                                   sandwich7_case2_old_bytes, sizeof sandwich7_case2_old_bytes,
                                   sandwich7_case2_v1_bytes, sizeof sandwich7_case2_v1_bytes));
  END_TEST;
}

bool test_sandwich7_case2_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Sandwich7Table,
                                   sandwich7_case2_v1_bytes, sizeof sandwich7_case2_v1_bytes,
                                   sandwich7_case2_old_bytes, sizeof sandwich7_case2_old_bytes));
  END_TEST;
}

bool test_regression1_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Regression1Table,
                                   regression1_old_bytes, sizeof regression1_old_bytes,
                                   regression1_v1_bytes, sizeof regression1_v1_bytes));
  END_TEST;
}

bool test_regression1_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Regression1Table,
                                   regression1_v1_bytes, sizeof regression1_v1_bytes,
                                   regression1_old_bytes, sizeof regression1_old_bytes));
  END_TEST;
}

bool test_regression2_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Regression2Table,
                                   regression2_old_bytes, sizeof regression2_old_bytes,
                                   regression2_v1_bytes, sizeof regression2_v1_bytes));
  END_TEST;
}

bool test_regression2_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Regression2Table,
                                   regression2_v1_bytes, sizeof regression2_v1_bytes,
                                   regression2_old_bytes, sizeof regression2_old_bytes));
  END_TEST;
}

bool test_regression3_absent_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Regression3Table,
                                   regression3_absent_old_bytes,
                                   sizeof regression3_absent_old_bytes, regression3_absent_v1_bytes,
                                   sizeof regression3_absent_v1_bytes));
  END_TEST;
}

bool test_regression3_absent_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Regression3Table,
                                   regression3_absent_v1_bytes, sizeof regression3_absent_v1_bytes,
                                   regression3_absent_old_bytes,
                                   sizeof regression3_absent_old_bytes));
  END_TEST;
}

bool test_regression3_present_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(
      check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Regression3Table,
                           regression3_present_old_bytes, sizeof regression3_present_old_bytes,
                           regression3_present_v1_bytes, sizeof regression3_present_v1_bytes));
  END_TEST;
}

bool test_regression3_present_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(
      check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Regression3Table,
                           regression3_present_v1_bytes, sizeof regression3_present_v1_bytes,
                           regression3_present_old_bytes, sizeof regression3_present_old_bytes));
  END_TEST;
}

bool test_size5_alignment1_array_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Size5Alignment1ArrayTable,
      size5_alignment1_array_old_bytes, sizeof size5_alignment1_array_old_bytes,
      size5_alignment1_array_v1_bytes, sizeof size5_alignment1_array_v1_bytes));
  END_TEST;
}

bool test_size5_alignment1_array_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Size5Alignment1ArrayTable,
      size5_alignment1_array_v1_bytes, sizeof size5_alignment1_array_v1_bytes,
      size5_alignment1_array_old_bytes, sizeof size5_alignment1_array_old_bytes));
  END_TEST;
}

bool test_size5_alignment4_array_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Size5Alignment4ArrayTable,
      size5_alignment4_array_old_bytes, sizeof size5_alignment4_array_old_bytes,
      size5_alignment4_array_v1_bytes, sizeof size5_alignment4_array_v1_bytes));
  END_TEST;
}

bool test_size5_alignment4_array_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Size5Alignment4ArrayTable,
      size5_alignment4_array_v1_bytes, sizeof size5_alignment4_array_v1_bytes,
      size5_alignment4_array_old_bytes, sizeof size5_alignment4_array_old_bytes));
  END_TEST;
}

bool test_size5_alignment1_vector_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Size5Alignment1VectorTable,
      size5_alignment1_vector_old_bytes, sizeof size5_alignment1_vector_old_bytes,
      size5_alignment1_vector_v1_bytes, sizeof size5_alignment1_vector_v1_bytes));
  END_TEST;
}

bool test_size5_alignment1_vector_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Size5Alignment1VectorTable,
      size5_alignment1_vector_v1_bytes, sizeof size5_alignment1_vector_v1_bytes,
      size5_alignment1_vector_old_bytes, sizeof size5_alignment1_vector_old_bytes));
  END_TEST;
}

bool test_size5_alignment4_vector_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_Size5Alignment4VectorTable,
      size5_alignment4_vector_old_bytes, sizeof size5_alignment4_vector_old_bytes,
      size5_alignment4_vector_v1_bytes, sizeof size5_alignment4_vector_v1_bytes));
  END_TEST;
}

bool test_size5_alignment4_vector_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Size5Alignment4VectorTable,
      size5_alignment4_vector_v1_bytes, sizeof size5_alignment4_vector_v1_bytes,
      size5_alignment4_vector_old_bytes, sizeof size5_alignment4_vector_old_bytes));
  END_TEST;
}

bool test_table_struct_with_reserved_sandwich_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1,
                                   &conformance_Table_StructWithReservedSandwichStructTable,
                                   table_struct_with_reserved_sandwich_old_bytes,
                                   sizeof table_struct_with_reserved_sandwich_old_bytes,
                                   table_struct_with_reserved_sandwich_v1_bytes,
                                   sizeof table_struct_with_reserved_sandwich_v1_bytes));
  END_TEST;
}

bool test_table_struct_with_reserved_sandwich_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD,
                                   &v1_conformance_Table_StructWithReservedSandwichStructTable,
                                   table_struct_with_reserved_sandwich_v1_bytes,
                                   sizeof table_struct_with_reserved_sandwich_v1_bytes,
                                   table_struct_with_reserved_sandwich_old_bytes,
                                   sizeof table_struct_with_reserved_sandwich_old_bytes));
  END_TEST;
}

bool test_table_struct_with_uint32_sandwich_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1,
                                   &conformance_Table_StructWithUint32SandwichStructTable,
                                   table_struct_with_uint32_sandwich_old_bytes,
                                   sizeof table_struct_with_uint32_sandwich_old_bytes,
                                   table_struct_with_uint32_sandwich_v1_bytes,
                                   sizeof table_struct_with_uint32_sandwich_v1_bytes));
  END_TEST;
}

bool test_table_struct_with_uint32_sandwich_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_Table_StructWithUint32SandwichStructTable,
      table_struct_with_uint32_sandwich_v1_bytes, sizeof table_struct_with_uint32_sandwich_v1_bytes,
      table_struct_with_uint32_sandwich_old_bytes,
      sizeof table_struct_with_uint32_sandwich_old_bytes));
  END_TEST;
}

bool test_table_union_with_vector_reserved_sandwich_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1,
                                   &conformance_Table_UnionWithVector_ReservedSandwichStructTable,
                                   table_union_with_vector_reserved_sandwich_old_bytes,
                                   sizeof table_union_with_vector_reserved_sandwich_old_bytes,
                                   table_union_with_vector_reserved_sandwich_v1_bytes,
                                   sizeof table_union_with_vector_reserved_sandwich_v1_bytes));
  END_TEST;
}

bool test_table_union_with_vector_reserved_sandwich_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(
      check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD,
                           &v1_conformance_Table_UnionWithVector_ReservedSandwichStructTable,
                           table_union_with_vector_reserved_sandwich_v1_bytes,
                           sizeof table_union_with_vector_reserved_sandwich_v1_bytes,
                           table_union_with_vector_reserved_sandwich_old_bytes,
                           sizeof table_union_with_vector_reserved_sandwich_old_bytes));
  END_TEST;
}

bool test_table_union_with_vector_struct_sandwich_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1,
                                   &conformance_Table_UnionWithVector_StructSandwichStructTable,
                                   table_union_with_vector_struct_sandwich_old_bytes,
                                   sizeof table_union_with_vector_struct_sandwich_old_bytes,
                                   table_union_with_vector_struct_sandwich_v1_bytes,
                                   sizeof table_union_with_vector_struct_sandwich_v1_bytes));
  END_TEST;
}

bool test_table_union_with_vector_struct_sandwich_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD,
                                   &v1_conformance_Table_UnionWithVector_StructSandwichStructTable,
                                   table_union_with_vector_struct_sandwich_v1_bytes,
                                   sizeof table_union_with_vector_struct_sandwich_v1_bytes,
                                   table_union_with_vector_struct_sandwich_old_bytes,
                                   sizeof table_union_with_vector_struct_sandwich_old_bytes));
  END_TEST;
}

bool test_x_union_with_struct_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(
      check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_XUnionWithStructStructTable,
                           x_union_with_struct_old_bytes, sizeof x_union_with_struct_old_bytes,
                           x_union_with_struct_v1_bytes, sizeof x_union_with_struct_v1_bytes));
  END_TEST;
}

bool test_x_union_with_struct_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(
      FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_XUnionWithStructStructTable,
      x_union_with_struct_v1_bytes, sizeof x_union_with_struct_v1_bytes,
      x_union_with_struct_old_bytes, sizeof x_union_with_struct_old_bytes));
  END_TEST;
}

bool test_array_struct_old_to_v1() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_OLD_TO_V1, &conformance_ArrayStructTable,
                                   array_struct_old_bytes, sizeof array_struct_old_bytes,
                                   array_struct_v1_bytes, sizeof array_struct_v1_bytes));
  END_TEST;
}

bool test_array_struct_v1_to_old() {
  BEGIN_TEST;
  ASSERT_TRUE(check_fidl_transform(FIDL_TRANSFORMATION_V1_TO_OLD, &v1_conformance_ArrayStructTable,
                                   array_struct_v1_bytes, sizeof array_struct_v1_bytes,
                                   array_struct_old_bytes, sizeof array_struct_old_bytes));
  END_TEST;
}

}  // namespace

BEGIN_TEST_CASE(transformer_conformance)

RUN_TEST(test_sandwich1_case1_old_to_v1)
RUN_TEST(test_sandwich1_case1_v1_to_old)

RUN_TEST(test_sandwich1_with_opt_union_present_old_to_v1)
RUN_TEST(test_sandwich1_with_opt_union_present_v1_to_old)

RUN_TEST(test_sandwich1_with_opt_union_absent_old_to_v1)
RUN_TEST(test_sandwich1_with_opt_union_absent_v1_to_old)

RUN_TEST(test_sandwich2_case1_old_to_v1)
RUN_TEST(test_sandwich2_case1_v1_to_old)

RUN_TEST(test_sandwich3_case1_old_to_v1)
RUN_TEST(test_sandwich3_case1_v1_to_old)

RUN_TEST(test_sandwich4_case1_old_to_v1)
RUN_TEST(test_sandwich4_case1_v1_to_old)

RUN_TEST(test_sandwich5_case1_old_to_v1)
RUN_TEST(test_sandwich5_case1_v1_to_old)

RUN_TEST(test_sandwich5_case2_old_to_v1)
RUN_TEST(test_sandwich5_case2_v1_to_old)

RUN_TEST(test_sandwich6_case1_old_to_v1)
RUN_TEST(test_sandwich6_case1_v1_to_old)

RUN_TEST(test_sandwich6_case1_absent_vector_old_to_v1)
RUN_TEST(test_sandwich6_case1_absent_vector_v1_to_old)

RUN_TEST(test_sandwich6_case2_old_to_v1)
RUN_TEST(test_sandwich6_case2_v1_to_old)

RUN_TEST(test_sandwich6_case3_old_to_v1)
RUN_TEST(test_sandwich6_case3_v1_to_old)

RUN_TEST(test_sandwich6_case4_old_to_v1)
RUN_TEST(test_sandwich6_case4_v1_to_old)

RUN_TEST(test_sandwich6_case5_old_to_v1)
RUN_TEST(test_sandwich6_case5_v1_to_old)

RUN_TEST(test_sandwich6_case6_old_to_v1)
RUN_TEST(test_sandwich6_case6_v1_to_old)

RUN_TEST(test_sandwich6_case7_old_to_v1)
RUN_TEST(test_sandwich6_case7_v1_to_old)

RUN_TEST(test_sandwich6_case8_old_to_v1)
RUN_TEST(test_sandwich6_case8_v1_to_old)

RUN_TEST(test_sandwich7_case1_old_to_v1)
RUN_TEST(test_sandwich7_case1_v1_to_old)

RUN_TEST(test_sandwich7_case2_old_to_v1)
RUN_TEST(test_sandwich7_case2_v1_to_old)

RUN_TEST(test_regression1_old_to_v1)
RUN_TEST(test_regression1_v1_to_old)

RUN_TEST(test_regression2_old_to_v1)
RUN_TEST(test_regression2_v1_to_old)

RUN_TEST(test_regression3_absent_old_to_v1)
RUN_TEST(test_regression3_absent_v1_to_old)

RUN_TEST(test_regression3_present_old_to_v1)
RUN_TEST(test_regression3_present_v1_to_old)

RUN_TEST(test_size5_alignment1_array_old_to_v1)
RUN_TEST(test_size5_alignment1_array_v1_to_old)

RUN_TEST(test_size5_alignment4_array_old_to_v1)
RUN_TEST(test_size5_alignment4_array_v1_to_old)

RUN_TEST(test_size5_alignment1_vector_old_to_v1)
RUN_TEST(test_size5_alignment1_vector_v1_to_old)

RUN_TEST(test_size5_alignment4_vector_old_to_v1)
RUN_TEST(test_size5_alignment4_vector_v1_to_old)

RUN_TEST(test_table_struct_with_reserved_sandwich_old_to_v1)
RUN_TEST(test_table_struct_with_reserved_sandwich_v1_to_old)

RUN_TEST(test_table_struct_with_uint32_sandwich_old_to_v1)
RUN_TEST(test_table_struct_with_uint32_sandwich_v1_to_old)

RUN_TEST(test_table_union_with_vector_reserved_sandwich_old_to_v1)
RUN_TEST(test_table_union_with_vector_reserved_sandwich_v1_to_old)

RUN_TEST(test_table_union_with_vector_struct_sandwich_old_to_v1)
RUN_TEST(test_table_union_with_vector_struct_sandwich_v1_to_old)

RUN_TEST(test_x_union_with_struct_old_to_v1)
RUN_TEST(test_x_union_with_struct_v1_to_old)

RUN_TEST(test_array_struct_old_to_v1)
RUN_TEST(test_array_struct_v1_to_old)

END_TEST_CASE(transformer_conformance)
