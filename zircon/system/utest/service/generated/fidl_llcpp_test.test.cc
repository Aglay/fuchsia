// WARNING: This file is machine generated by fidlgen.

#include <fidl_llcpp_test.test.h>
#include <memory>

namespace llcpp {

namespace fidl {
namespace service {
namespace test {

namespace {

[[maybe_unused]]
constexpr uint64_t kEcho_EchoString_Ordinal = 0x503b9f2a00000000lu;
[[maybe_unused]]
constexpr uint64_t kEcho_EchoString_GenOrdinal = 0xd966a2bafde7462lu;
extern "C" const fidl_type_t fidl_service_test_EchoEchoStringRequestTable;
extern "C" const fidl_type_t fidl_service_test_EchoEchoStringResponseTable;
extern "C" const fidl_type_t v1_fidl_service_test_EchoEchoStringResponseTable;

}  // namespace
template <>
Echo::ResultOf::EchoString_Impl<Echo::EchoStringResponse>::EchoString_Impl(::zx::unowned_channel _client_end, ::fidl::StringView value) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EchoStringRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  EchoStringRequest _request = {};
  _request.value = std::move(value);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<EchoStringRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Echo::InPlace::EchoString(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Echo::ResultOf::EchoString Echo::SyncClient::EchoString(::fidl::StringView value) {
    return ResultOf::EchoString(::zx::unowned_channel(this->channel_), std::move(value));
}

Echo::ResultOf::EchoString Echo::Call::EchoString(::zx::unowned_channel _client_end, ::fidl::StringView value) {
  return ResultOf::EchoString(std::move(_client_end), std::move(value));
}

template <>
Echo::UnownedResultOf::EchoString_Impl<Echo::EchoStringResponse>::EchoString_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView value, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < EchoStringRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<EchoStringResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  EchoStringRequest _request = {};
  _request.value = std::move(value);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<EchoStringRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Echo::InPlace::EchoString(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Echo::UnownedResultOf::EchoString Echo::SyncClient::EchoString(::fidl::BytePart _request_buffer, ::fidl::StringView value, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::EchoString(::zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(value), std::move(_response_buffer));
}

Echo::UnownedResultOf::EchoString Echo::Call::EchoString(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView value, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::EchoString(std::move(_client_end), std::move(_request_buffer), std::move(value), std::move(_response_buffer));
}

::fidl::DecodeResult<Echo::EchoStringResponse> Echo::InPlace::EchoString(::zx::unowned_channel _client_end, ::fidl::DecodedMessage<EchoStringRequest> params, ::fidl::BytePart response_buffer) {
  Echo::SetTransactionHeaderFor::EchoStringRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Echo::EchoStringResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<EchoStringRequest, EchoStringResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Echo::EchoStringResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Echo::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kEcho_EchoString_Ordinal:
    case kEcho_EchoString_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<EchoStringRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->EchoString(std::move(message->value),
          Interface::EchoStringCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Echo::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Echo::Interface::EchoStringCompleterBase::Reply(::fidl::StringView response) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EchoStringResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  EchoStringResponse _response = {};
  Echo::SetTransactionHeaderFor::EchoStringResponse(
      ::fidl::DecodedMessage<EchoStringResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              EchoStringResponse::PrimarySize,
              EchoStringResponse::PrimarySize)));
  _response.response = std::move(response);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Echo::Interface::EchoStringCompleterBase::Reply(::fidl::BytePart _buffer, ::fidl::StringView response) {
  if (_buffer.capacity() < EchoStringResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  EchoStringResponse _response = {};
  Echo::SetTransactionHeaderFor::EchoStringResponse(
      ::fidl::DecodedMessage<EchoStringResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              EchoStringResponse::PrimarySize,
              EchoStringResponse::PrimarySize)));
  _response.response = std::move(response);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Echo::Interface::EchoStringCompleterBase::Reply(::fidl::DecodedMessage<EchoStringResponse> params) {
  Echo::SetTransactionHeaderFor::EchoStringResponse(params);
  CompleterBase::SendReply(std::move(params));
}



void Echo::SetTransactionHeaderFor::EchoStringRequest(const ::fidl::DecodedMessage<Echo::EchoStringRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kEcho_EchoString_Ordinal);
}
void Echo::SetTransactionHeaderFor::EchoStringResponse(const ::fidl::DecodedMessage<Echo::EchoStringResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kEcho_EchoString_Ordinal);
}

}  // namespace test
}  // namespace service
}  // namespace fidl
}  // namespace llcpp
