// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SYSROOT_ZIRCON_DEVICE_SYSMEM_H_
#define SYSROOT_ZIRCON_DEVICE_SYSMEM_H_

#include <fuchsia/sysmem/c/fidl.h>

#include <ddk/metadata.h>

// "SyM"
#define SYSMEM_METADATA (0x53794d00 | DEVICE_METADATA_PRIVATE)

typedef struct {
  uint32_t vid;
  uint32_t pid;

  // protected_memory_size
  // contiguous_memory_size
  //
  // Positive values are interpreted as bytes, and are aligned up to next
  // ZX_PAGE_SIZE.
  //
  // Negative values are interpreted as a percentage of physical memory (after
  // negation), and resulting size in bytes is aligned up to next ZX_PAGE_SIZE.

  // protected_memory_size
  //
  // Size of the protected memory pool.  See above for how this value is
  // interpreted.
  //
  // 0 means there is no protected memory pool.
  int64_t protected_memory_size;

  // contiguous_memory_size
  //
  // Size of the pool used to allocate contiguous memory.  See above for how
  // this value is interpreted.
  //
  // Zero means no space is reserved up front, which will end up using
  // zx::vmo::create_contiguous() for each allocation instead of allocating up
  // front, which can be prone to failure when physical memory becomes
  // fragmented.
  //
  // There is no fallback from pre-reserved to zx::vmo::create_contiguous().
  // If we're pre-reserving memory, we should reserve enough.
  int64_t contiguous_memory_size;
} sysmem_metadata_t;

// TODO(fxbug.dev/32526): Deleting this file is blocked by banjo being able to consume
// code generated by fidl.
typedef fuchsia_sysmem_BufferCollectionInfo buffer_collection_info_t;
typedef fuchsia_sysmem_BufferCollectionInfo_2 buffer_collection_info_2_t;
typedef fuchsia_sysmem_ImageFormat image_format_t;
typedef fuchsia_sysmem_ImageFormat_2 image_format_2_t;

#endif  // SYSROOT_ZIRCON_DEVICE_SYSMEM_H_
