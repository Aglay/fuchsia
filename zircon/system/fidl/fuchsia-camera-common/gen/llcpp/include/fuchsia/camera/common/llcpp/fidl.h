// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

#include <fuchsia/sysmem/llcpp/fidl.h>

namespace fuchsia {
namespace camera {
namespace common {

struct Metadata;
enum class FrameStatus : uint32_t {
  OK = 1u,
  ERROR_FRAME = 2u,
  ERROR_BUFFER_FULL = 3u,
};


struct FrameAvailableEvent;
class Stream;
struct FrameRate;
struct VideoFormat;



// Extra information associated with the frame.
struct Metadata {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  int64_t timestamp{};
};



// Sent by the driver to the client when a frame is available for processing,
// or an error occurred.
struct FrameAvailableEvent {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  // Non zero if an error occurred.
  FrameStatus frame_status{};

  // The index of the buffer in the buffer collection.
  uint32_t buffer_id{};

  // Any associated metadata such as timestamp.
  Metadata metadata{};
};

extern "C" const fidl_type_t fuchsia_camera_common_StreamReleaseFrameRequestTable;

// Protocol shared between the driver and the consumer.
class Stream final {
 public:

  using StartRequest = ::fidl::AnyZeroArgMessage;

  using StopRequest = ::fidl::AnyZeroArgMessage;

  struct ReleaseFrameRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t buffer_id;

    static constexpr const fidl_type_t* Type = &fuchsia_camera_common_StreamReleaseFrameRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct OnFrameAvailableResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    FrameAvailableEvent frame;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventHandlers {
    // Sent by the driver to the client when a frame is available for processing,
    // or an error occurred.
    fit::function<zx_status_t(FrameAvailableEvent frame)> on_frame_available;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    ~SyncClient() {}

    // Starts the streaming of frames.
    zx_status_t Start();

    // Stops the streaming of frames.
    zx_status_t Stop();

    // Unlocks the specified frame, allowing the driver to reuse the memory.
    zx_status_t ReleaseFrame(uint32_t buffer_id);

    // Unlocks the specified frame, allowing the driver to reuse the memory.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t ReleaseFrame(::fidl::BytePart _request_buffer, uint32_t buffer_id);

    // Unlocks the specified frame, allowing the driver to reuse the memory.
    // Messages are encoded and decoded in-place.
    zx_status_t ReleaseFrame(::fidl::DecodedMessage<ReleaseFrameRequest> params);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    zx_status_t HandleEvents(EventHandlers handlers);
   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    // Starts the streaming of frames.
    static zx_status_t Start(zx::unowned_channel _client_end);

    // Stops the streaming of frames.
    static zx_status_t Stop(zx::unowned_channel _client_end);

    // Unlocks the specified frame, allowing the driver to reuse the memory.
    static zx_status_t ReleaseFrame(zx::unowned_channel _client_end, uint32_t buffer_id);

    // Unlocks the specified frame, allowing the driver to reuse the memory.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static zx_status_t ReleaseFrame(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t buffer_id);

    // Unlocks the specified frame, allowing the driver to reuse the memory.
    // Messages are encoded and decoded in-place.
    static zx_status_t ReleaseFrame(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ReleaseFrameRequest> params);

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the corresponding handler
    // defined in |EventHandlers|. The return status of the handler function is folded with any
    // transport-level errors and returned.
    static zx_status_t HandleEvents(zx::unowned_channel client_end, EventHandlers handlers);
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Stream;
    using _Base = ::fidl::CompleterBase;

    using StartCompleter = ::fidl::Completer<>;

    virtual void Start(StartCompleter::Sync _completer) = 0;

    using StopCompleter = ::fidl::Completer<>;

    virtual void Stop(StopCompleter::Sync _completer) = 0;

    using ReleaseFrameCompleter = ::fidl::Completer<>;

    virtual void ReleaseFrame(uint32_t buffer_id, ReleaseFrameCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  // Sent by the driver to the client when a frame is available for processing,
  // or an error occurred.
  static zx_status_t SendOnFrameAvailableEvent(::zx::unowned_channel _chan, FrameAvailableEvent frame);

  // Sent by the driver to the client when a frame is available for processing,
  // or an error occurred.
  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendOnFrameAvailableEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, FrameAvailableEvent frame);

  // Sent by the driver to the client when a frame is available for processing,
  // or an error occurred.
  // Messages are encoded in-place.
  static zx_status_t SendOnFrameAvailableEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<OnFrameAvailableResponse> params);

};



// The number of frames being produced every second.
struct FrameRate {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  // The frame rate is frames_per_sec_numerator / frames_per_sec_denominator.
  uint32_t frames_per_sec_numerator{};

  uint32_t frames_per_sec_denominator{};
};

extern "C" const fidl_type_t fuchsia_camera_common_VideoFormatTable;

// Video format includes the image format and frame rate of frames being produced.
struct VideoFormat {
  static constexpr const fidl_type_t* Type = &fuchsia_camera_common_VideoFormatTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 80;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  ::fuchsia::sysmem::ImageFormat format{};

  FrameRate rate{};
};

}  // namespace common
}  // namespace camera
}  // namespace fuchsia

namespace fidl {

template <>
struct IsFidlType<::fuchsia::camera::common::Metadata> : public std::true_type {};
static_assert(std::is_standard_layout_v<::fuchsia::camera::common::Metadata>);
static_assert(offsetof(::fuchsia::camera::common::Metadata, timestamp) == 0);
static_assert(sizeof(::fuchsia::camera::common::Metadata) == ::fuchsia::camera::common::Metadata::PrimarySize);

template <>
struct IsFidlType<::fuchsia::camera::common::FrameAvailableEvent> : public std::true_type {};
static_assert(std::is_standard_layout_v<::fuchsia::camera::common::FrameAvailableEvent>);
static_assert(offsetof(::fuchsia::camera::common::FrameAvailableEvent, frame_status) == 0);
static_assert(offsetof(::fuchsia::camera::common::FrameAvailableEvent, buffer_id) == 4);
static_assert(offsetof(::fuchsia::camera::common::FrameAvailableEvent, metadata) == 8);
static_assert(sizeof(::fuchsia::camera::common::FrameAvailableEvent) == ::fuchsia::camera::common::FrameAvailableEvent::PrimarySize);

template <>
struct IsFidlType<::fuchsia::camera::common::Stream::ReleaseFrameRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::fuchsia::camera::common::Stream::ReleaseFrameRequest> : public std::true_type {};
static_assert(sizeof(::fuchsia::camera::common::Stream::ReleaseFrameRequest)
    == ::fuchsia::camera::common::Stream::ReleaseFrameRequest::PrimarySize);
static_assert(offsetof(::fuchsia::camera::common::Stream::ReleaseFrameRequest, buffer_id) == 16);

template <>
struct IsFidlType<::fuchsia::camera::common::Stream::OnFrameAvailableResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::fuchsia::camera::common::Stream::OnFrameAvailableResponse> : public std::true_type {};
static_assert(sizeof(::fuchsia::camera::common::Stream::OnFrameAvailableResponse)
    == ::fuchsia::camera::common::Stream::OnFrameAvailableResponse::PrimarySize);
static_assert(offsetof(::fuchsia::camera::common::Stream::OnFrameAvailableResponse, frame) == 16);

template <>
struct IsFidlType<::fuchsia::camera::common::FrameRate> : public std::true_type {};
static_assert(std::is_standard_layout_v<::fuchsia::camera::common::FrameRate>);
static_assert(offsetof(::fuchsia::camera::common::FrameRate, frames_per_sec_numerator) == 0);
static_assert(offsetof(::fuchsia::camera::common::FrameRate, frames_per_sec_denominator) == 4);
static_assert(sizeof(::fuchsia::camera::common::FrameRate) == ::fuchsia::camera::common::FrameRate::PrimarySize);

template <>
struct IsFidlType<::fuchsia::camera::common::VideoFormat> : public std::true_type {};
static_assert(std::is_standard_layout_v<::fuchsia::camera::common::VideoFormat>);
static_assert(offsetof(::fuchsia::camera::common::VideoFormat, format) == 0);
static_assert(offsetof(::fuchsia::camera::common::VideoFormat, rate) == 72);
static_assert(sizeof(::fuchsia::camera::common::VideoFormat) == ::fuchsia::camera::common::VideoFormat::PrimarySize);

}  // namespace fidl
