// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/hardware/cpu/ctrl/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace cpu {
namespace ctrl {

void ::llcpp::fuchsia::hardware::cpu::ctrl::Device_GetPerformanceStateInfo_Result::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Device_GetPerformanceStateInfo_Result) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Device_GetPerformanceStateInfo_Result, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Device_GetPerformanceStateInfo_Result, envelope_) == offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]]
constexpr uint64_t kDevice_GetPerformanceStateInfo_Ordinal = 0x71d641d000000000lu;
[[maybe_unused]]
constexpr uint64_t kDevice_GetPerformanceStateInfo_GenOrdinal = 0x2b34810b1fd3416elu;
extern "C" const fidl_type_t fuchsia_hardware_cpu_ctrl_DeviceGetPerformanceStateInfoRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_cpu_ctrl_DeviceGetPerformanceStateInfoResponseTable;
extern "C" const fidl_type_t v1_fuchsia_hardware_cpu_ctrl_DeviceGetPerformanceStateInfoResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetNumLogicalCores_Ordinal = 0x1d5aec6800000000lu;
[[maybe_unused]]
constexpr uint64_t kDevice_GetNumLogicalCores_GenOrdinal = 0x74e304c90ca165c5lu;
extern "C" const fidl_type_t fuchsia_hardware_cpu_ctrl_DeviceGetNumLogicalCoresRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_cpu_ctrl_DeviceGetNumLogicalCoresResponseTable;
extern "C" const fidl_type_t v1_fuchsia_hardware_cpu_ctrl_DeviceGetNumLogicalCoresResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetLogicalCoreId_Ordinal = 0x458d073700000000lu;
[[maybe_unused]]
constexpr uint64_t kDevice_GetLogicalCoreId_GenOrdinal = 0x7168f98ddbd26058lu;
extern "C" const fidl_type_t fuchsia_hardware_cpu_ctrl_DeviceGetLogicalCoreIdRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_cpu_ctrl_DeviceGetLogicalCoreIdResponseTable;
extern "C" const fidl_type_t v1_fuchsia_hardware_cpu_ctrl_DeviceGetLogicalCoreIdResponseTable;

}  // namespace
template <>
Device::ResultOf::GetPerformanceStateInfo_Impl<Device::GetPerformanceStateInfoResponse>::GetPerformanceStateInfo_Impl(::zx::unowned_channel _client_end, uint32_t state) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetPerformanceStateInfoRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetPerformanceStateInfoRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetPerformanceStateInfoRequest*>(_write_bytes);
  _request.state = std::move(state);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetPerformanceStateInfoRequest));
  ::fidl::DecodedMessage<GetPerformanceStateInfoRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetPerformanceStateInfo(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::GetPerformanceStateInfo Device::SyncClient::GetPerformanceStateInfo(uint32_t state) {
    return ResultOf::GetPerformanceStateInfo(::zx::unowned_channel(this->channel_), std::move(state));
}

Device::ResultOf::GetPerformanceStateInfo Device::Call::GetPerformanceStateInfo(::zx::unowned_channel _client_end, uint32_t state) {
  return ResultOf::GetPerformanceStateInfo(std::move(_client_end), std::move(state));
}

template <>
Device::UnownedResultOf::GetPerformanceStateInfo_Impl<Device::GetPerformanceStateInfoResponse>::GetPerformanceStateInfo_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t state, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetPerformanceStateInfoRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetPerformanceStateInfoResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetPerformanceStateInfoRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetPerformanceStateInfoRequest*>(_request_buffer.data());
  _request.state = std::move(state);
  _request_buffer.set_actual(sizeof(GetPerformanceStateInfoRequest));
  ::fidl::DecodedMessage<GetPerformanceStateInfoRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetPerformanceStateInfo(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetPerformanceStateInfo Device::SyncClient::GetPerformanceStateInfo(::fidl::BytePart _request_buffer, uint32_t state, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetPerformanceStateInfo(::zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(state), std::move(_response_buffer));
}

Device::UnownedResultOf::GetPerformanceStateInfo Device::Call::GetPerformanceStateInfo(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t state, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetPerformanceStateInfo(std::move(_client_end), std::move(_request_buffer), std::move(state), std::move(_response_buffer));
}

::fidl::DecodeResult<Device::GetPerformanceStateInfoResponse> Device::InPlace::GetPerformanceStateInfo(::zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetPerformanceStateInfoRequest> params, ::fidl::BytePart response_buffer) {
  Device::SetTransactionHeaderFor::GetPerformanceStateInfoRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetPerformanceStateInfoResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetPerformanceStateInfoRequest, GetPerformanceStateInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetPerformanceStateInfoResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetNumLogicalCores_Impl<Device::GetNumLogicalCoresResponse>::GetNumLogicalCores_Impl(::zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetNumLogicalCoresRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetNumLogicalCoresRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetNumLogicalCoresRequest));
  ::fidl::DecodedMessage<GetNumLogicalCoresRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetNumLogicalCores(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetNumLogicalCores Device::SyncClient::GetNumLogicalCores() {
    return ResultOf::GetNumLogicalCores(::zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetNumLogicalCores Device::Call::GetNumLogicalCores(::zx::unowned_channel _client_end) {
  return ResultOf::GetNumLogicalCores(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetNumLogicalCores_Impl<Device::GetNumLogicalCoresResponse>::GetNumLogicalCores_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetNumLogicalCoresRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetNumLogicalCoresRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetNumLogicalCoresRequest));
  ::fidl::DecodedMessage<GetNumLogicalCoresRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetNumLogicalCores(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetNumLogicalCores Device::SyncClient::GetNumLogicalCores(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetNumLogicalCores(::zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetNumLogicalCores Device::Call::GetNumLogicalCores(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetNumLogicalCores(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Device::GetNumLogicalCoresResponse> Device::InPlace::GetNumLogicalCores(::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetNumLogicalCoresRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetNumLogicalCoresRequest> params(std::move(_request_buffer));
  Device::SetTransactionHeaderFor::GetNumLogicalCoresRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetNumLogicalCoresResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetNumLogicalCoresRequest, GetNumLogicalCoresResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetNumLogicalCoresResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetLogicalCoreId_Impl<Device::GetLogicalCoreIdResponse>::GetLogicalCoreId_Impl(::zx::unowned_channel _client_end, uint64_t index) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetLogicalCoreIdRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetLogicalCoreIdRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetLogicalCoreIdRequest*>(_write_bytes);
  _request.index = std::move(index);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetLogicalCoreIdRequest));
  ::fidl::DecodedMessage<GetLogicalCoreIdRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetLogicalCoreId(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::GetLogicalCoreId Device::SyncClient::GetLogicalCoreId(uint64_t index) {
    return ResultOf::GetLogicalCoreId(::zx::unowned_channel(this->channel_), std::move(index));
}

Device::ResultOf::GetLogicalCoreId Device::Call::GetLogicalCoreId(::zx::unowned_channel _client_end, uint64_t index) {
  return ResultOf::GetLogicalCoreId(std::move(_client_end), std::move(index));
}

template <>
Device::UnownedResultOf::GetLogicalCoreId_Impl<Device::GetLogicalCoreIdResponse>::GetLogicalCoreId_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint64_t index, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetLogicalCoreIdRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetLogicalCoreIdResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetLogicalCoreIdRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetLogicalCoreIdRequest*>(_request_buffer.data());
  _request.index = std::move(index);
  _request_buffer.set_actual(sizeof(GetLogicalCoreIdRequest));
  ::fidl::DecodedMessage<GetLogicalCoreIdRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetLogicalCoreId(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetLogicalCoreId Device::SyncClient::GetLogicalCoreId(::fidl::BytePart _request_buffer, uint64_t index, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetLogicalCoreId(::zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(index), std::move(_response_buffer));
}

Device::UnownedResultOf::GetLogicalCoreId Device::Call::GetLogicalCoreId(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint64_t index, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetLogicalCoreId(std::move(_client_end), std::move(_request_buffer), std::move(index), std::move(_response_buffer));
}

::fidl::DecodeResult<Device::GetLogicalCoreIdResponse> Device::InPlace::GetLogicalCoreId(::zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetLogicalCoreIdRequest> params, ::fidl::BytePart response_buffer) {
  Device::SetTransactionHeaderFor::GetLogicalCoreIdRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetLogicalCoreIdResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetLogicalCoreIdRequest, GetLogicalCoreIdResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetLogicalCoreIdResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Device::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kDevice_GetPerformanceStateInfo_Ordinal:
    case kDevice_GetPerformanceStateInfo_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetPerformanceStateInfoRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetPerformanceStateInfo(std::move(message->state),
          Interface::GetPerformanceStateInfoCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetNumLogicalCores_Ordinal:
    case kDevice_GetNumLogicalCores_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetNumLogicalCoresRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetNumLogicalCores(
          Interface::GetNumLogicalCoresCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetLogicalCoreId_Ordinal:
    case kDevice_GetLogicalCoreId_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetLogicalCoreIdRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetLogicalCoreId(std::move(message->index),
          Interface::GetLogicalCoreIdCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Device::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Device::Interface::GetPerformanceStateInfoCompleterBase::Reply(::llcpp::fuchsia::hardware::cpu::ctrl::Device_GetPerformanceStateInfo_Result result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetPerformanceStateInfoResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize];
  GetPerformanceStateInfoResponse _response = {};
  Device::SetTransactionHeaderFor::GetPerformanceStateInfoResponse(
      ::fidl::DecodedMessage<GetPerformanceStateInfoResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetPerformanceStateInfoResponse::PrimarySize,
              GetPerformanceStateInfoResponse::PrimarySize)));
  _response.result = std::move(result);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}
void Device::Interface::GetPerformanceStateInfoCompleterBase::ReplySuccess(::llcpp::fuchsia::hardware::cpu::ctrl::CpuPerformanceStateInfo info) {
  Device_GetPerformanceStateInfo_Response response;
  response.info = std::move(info);

  Reply(Device_GetPerformanceStateInfo_Result::WithResponse(&response));
}
void Device::Interface::GetPerformanceStateInfoCompleterBase::ReplyError(int32_t error) {
  Reply(Device_GetPerformanceStateInfo_Result::WithErr(&error));
}

void Device::Interface::GetPerformanceStateInfoCompleterBase::Reply(::fidl::BytePart _buffer, ::llcpp::fuchsia::hardware::cpu::ctrl::Device_GetPerformanceStateInfo_Result result) {
  if (_buffer.capacity() < GetPerformanceStateInfoResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetPerformanceStateInfoResponse _response = {};
  Device::SetTransactionHeaderFor::GetPerformanceStateInfoResponse(
      ::fidl::DecodedMessage<GetPerformanceStateInfoResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetPerformanceStateInfoResponse::PrimarySize,
              GetPerformanceStateInfoResponse::PrimarySize)));
  _response.result = std::move(result);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}
void Device::Interface::GetPerformanceStateInfoCompleterBase::ReplySuccess(::fidl::BytePart _buffer, ::llcpp::fuchsia::hardware::cpu::ctrl::CpuPerformanceStateInfo info) {
  Device_GetPerformanceStateInfo_Response response;
  response.info = std::move(info);

  Reply(std::move(_buffer), Device_GetPerformanceStateInfo_Result::WithResponse(&response));
}

void Device::Interface::GetPerformanceStateInfoCompleterBase::Reply(::fidl::DecodedMessage<GetPerformanceStateInfoResponse> params) {
  Device::SetTransactionHeaderFor::GetPerformanceStateInfoResponse(params);
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetNumLogicalCoresCompleterBase::Reply(uint64_t count) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetNumLogicalCoresResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetNumLogicalCoresResponse*>(_write_bytes);
  Device::SetTransactionHeaderFor::GetNumLogicalCoresResponse(
      ::fidl::DecodedMessage<GetNumLogicalCoresResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetNumLogicalCoresResponse::PrimarySize,
              GetNumLogicalCoresResponse::PrimarySize)));
  _response.count = std::move(count);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetNumLogicalCoresResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetNumLogicalCoresResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetNumLogicalCoresCompleterBase::Reply(::fidl::BytePart _buffer, uint64_t count) {
  if (_buffer.capacity() < GetNumLogicalCoresResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetNumLogicalCoresResponse*>(_buffer.data());
  Device::SetTransactionHeaderFor::GetNumLogicalCoresResponse(
      ::fidl::DecodedMessage<GetNumLogicalCoresResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetNumLogicalCoresResponse::PrimarySize,
              GetNumLogicalCoresResponse::PrimarySize)));
  _response.count = std::move(count);
  _buffer.set_actual(sizeof(GetNumLogicalCoresResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetNumLogicalCoresResponse>(std::move(_buffer)));
}

void Device::Interface::GetNumLogicalCoresCompleterBase::Reply(::fidl::DecodedMessage<GetNumLogicalCoresResponse> params) {
  Device::SetTransactionHeaderFor::GetNumLogicalCoresResponse(params);
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetLogicalCoreIdCompleterBase::Reply(uint64_t id) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetLogicalCoreIdResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetLogicalCoreIdResponse*>(_write_bytes);
  Device::SetTransactionHeaderFor::GetLogicalCoreIdResponse(
      ::fidl::DecodedMessage<GetLogicalCoreIdResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetLogicalCoreIdResponse::PrimarySize,
              GetLogicalCoreIdResponse::PrimarySize)));
  _response.id = std::move(id);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetLogicalCoreIdResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetLogicalCoreIdResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetLogicalCoreIdCompleterBase::Reply(::fidl::BytePart _buffer, uint64_t id) {
  if (_buffer.capacity() < GetLogicalCoreIdResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetLogicalCoreIdResponse*>(_buffer.data());
  Device::SetTransactionHeaderFor::GetLogicalCoreIdResponse(
      ::fidl::DecodedMessage<GetLogicalCoreIdResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetLogicalCoreIdResponse::PrimarySize,
              GetLogicalCoreIdResponse::PrimarySize)));
  _response.id = std::move(id);
  _buffer.set_actual(sizeof(GetLogicalCoreIdResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetLogicalCoreIdResponse>(std::move(_buffer)));
}

void Device::Interface::GetLogicalCoreIdCompleterBase::Reply(::fidl::DecodedMessage<GetLogicalCoreIdResponse> params) {
  Device::SetTransactionHeaderFor::GetLogicalCoreIdResponse(params);
  CompleterBase::SendReply(std::move(params));
}



void Device::SetTransactionHeaderFor::GetPerformanceStateInfoRequest(const ::fidl::DecodedMessage<Device::GetPerformanceStateInfoRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kDevice_GetPerformanceStateInfo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Device::SetTransactionHeaderFor::GetPerformanceStateInfoResponse(const ::fidl::DecodedMessage<Device::GetPerformanceStateInfoResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kDevice_GetPerformanceStateInfo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

void Device::SetTransactionHeaderFor::GetNumLogicalCoresRequest(const ::fidl::DecodedMessage<Device::GetNumLogicalCoresRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kDevice_GetNumLogicalCores_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Device::SetTransactionHeaderFor::GetNumLogicalCoresResponse(const ::fidl::DecodedMessage<Device::GetNumLogicalCoresResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kDevice_GetNumLogicalCores_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

void Device::SetTransactionHeaderFor::GetLogicalCoreIdRequest(const ::fidl::DecodedMessage<Device::GetLogicalCoreIdRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kDevice_GetLogicalCoreId_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Device::SetTransactionHeaderFor::GetLogicalCoreIdResponse(const ::fidl::DecodedMessage<Device::GetLogicalCoreIdResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kDevice_GetLogicalCoreId_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

}  // namespace ctrl
}  // namespace cpu
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp
