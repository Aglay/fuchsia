// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

#include <fuchsia/storage/metrics/llcpp/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace minfs {

struct Metrics;
class Minfs;
struct BlockRegion;

extern "C" const fidl_type_t fuchsia_minfs_MetricsTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_MetricsTable;

struct Metrics {
  static constexpr const fidl_type_t* Type = &v1_fuchsia_minfs_MetricsTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 688;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  ::llcpp::fuchsia::storage::metrics::FsMetrics fs_metrics = {};

  uint64_t initialized_vmos = {};

  uint32_t init_dnum_count = {};

  uint32_t init_inum_count = {};

  uint32_t init_dinum_count = {};

  uint64_t init_user_data_size = {};

  uint64_t init_user_data_ticks = {};

  uint64_t vnodes_opened_cache_hit = {};
};

extern "C" const fidl_type_t fuchsia_minfs_MinfsGetMetricsRequestTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_MinfsGetMetricsRequestTable;
extern "C" const fidl_type_t fuchsia_minfs_MinfsGetMetricsResponseTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_MinfsGetMetricsResponseTable;
extern "C" const fidl_type_t fuchsia_minfs_MinfsToggleMetricsRequestTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_MinfsToggleMetricsRequestTable;
extern "C" const fidl_type_t fuchsia_minfs_MinfsToggleMetricsResponseTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_MinfsToggleMetricsResponseTable;
extern "C" const fidl_type_t fuchsia_minfs_MinfsGetAllocatedRegionsRequestTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_MinfsGetAllocatedRegionsRequestTable;
extern "C" const fidl_type_t fuchsia_minfs_MinfsGetAllocatedRegionsResponseTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_MinfsGetAllocatedRegionsResponseTable;

class Minfs final {
  Minfs() = delete;
 public:

  struct GetMetricsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::minfs::Metrics* metrics;

    static constexpr const fidl_type_t* Type = &v1_fuchsia_minfs_MinfsGetMetricsResponseTable;
    static constexpr const fidl_type_t* AltType = &fuchsia_minfs_MinfsGetMetricsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 688;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 688;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using GetMetricsRequest = ::fidl::AnyZeroArgMessage;

  struct ToggleMetricsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &v1_fuchsia_minfs_MinfsToggleMetricsResponseTable;
    static constexpr const fidl_type_t* AltType = &fuchsia_minfs_MinfsToggleMetricsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct ToggleMetricsRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    bool enable;

    static constexpr const fidl_type_t* Type = &v1_fuchsia_minfs_MinfsToggleMetricsRequestTable;
    static constexpr const fidl_type_t* AltType = &fuchsia_minfs_MinfsToggleMetricsRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ToggleMetricsResponse;
  };

  struct GetAllocatedRegionsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::zx::vmo regions;
    uint64_t count;

    static constexpr const fidl_type_t* Type = &v1_fuchsia_minfs_MinfsGetAllocatedRegionsResponseTable;
    static constexpr const fidl_type_t* AltType = &fuchsia_minfs_MinfsGetAllocatedRegionsResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using GetAllocatedRegionsRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class GetMetrics_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      GetMetrics_Impl(::zx::unowned_channel _client_end);
      ~GetMetrics_Impl() = default;
      GetMetrics_Impl(GetMetrics_Impl&& other) = default;
      GetMetrics_Impl& operator=(GetMetrics_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ToggleMetrics_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      ToggleMetrics_Impl(::zx::unowned_channel _client_end, bool enable);
      ~ToggleMetrics_Impl() = default;
      ToggleMetrics_Impl(ToggleMetrics_Impl&& other) = default;
      ToggleMetrics_Impl& operator=(ToggleMetrics_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetAllocatedRegions_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      GetAllocatedRegions_Impl(::zx::unowned_channel _client_end);
      ~GetAllocatedRegions_Impl() = default;
      GetAllocatedRegions_Impl(GetAllocatedRegions_Impl&& other) = default;
      GetAllocatedRegions_Impl& operator=(GetAllocatedRegions_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using GetMetrics = GetMetrics_Impl<GetMetricsResponse>;
    using ToggleMetrics = ToggleMetrics_Impl<ToggleMetricsResponse>;
    using GetAllocatedRegions = GetAllocatedRegions_Impl<GetAllocatedRegionsResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class GetMetrics_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      GetMetrics_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~GetMetrics_Impl() = default;
      GetMetrics_Impl(GetMetrics_Impl&& other) = default;
      GetMetrics_Impl& operator=(GetMetrics_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ToggleMetrics_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      ToggleMetrics_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, bool enable, ::fidl::BytePart _response_buffer);
      ~ToggleMetrics_Impl() = default;
      ToggleMetrics_Impl(ToggleMetrics_Impl&& other) = default;
      ToggleMetrics_Impl& operator=(ToggleMetrics_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetAllocatedRegions_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      GetAllocatedRegions_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~GetAllocatedRegions_Impl() = default;
      GetAllocatedRegions_Impl(GetAllocatedRegions_Impl&& other) = default;
      GetAllocatedRegions_Impl& operator=(GetAllocatedRegions_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using GetMetrics = GetMetrics_Impl<GetMetricsResponse>;
    using ToggleMetrics = ToggleMetrics_Impl<ToggleMetricsResponse>;
    using GetAllocatedRegions = GetAllocatedRegions_Impl<GetAllocatedRegionsResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 16 bytes of request buffer on the stack. Response is heap-allocated.
    ResultOf::GetMetrics GetMetrics();

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::GetMetrics GetMetrics(::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::ToggleMetrics ToggleMetrics(bool enable);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::ToggleMetrics ToggleMetrics(::fidl::BytePart _request_buffer, bool enable, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::GetAllocatedRegions GetAllocatedRegions();

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::GetAllocatedRegions GetAllocatedRegions(::fidl::BytePart _response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Allocates 16 bytes of request buffer on the stack. Response is heap-allocated.
    static ResultOf::GetMetrics GetMetrics(::zx::unowned_channel _client_end);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::GetMetrics GetMetrics(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::ToggleMetrics ToggleMetrics(::zx::unowned_channel _client_end, bool enable);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::ToggleMetrics ToggleMetrics(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, bool enable, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::GetAllocatedRegions GetAllocatedRegions(::zx::unowned_channel _client_end);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::GetAllocatedRegions GetAllocatedRegions(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    static ::fidl::DecodeResult<GetMetricsResponse> GetMetrics(::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<ToggleMetricsResponse> ToggleMetrics(::zx::unowned_channel _client_end, ::fidl::DecodedMessage<ToggleMetricsRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<GetAllocatedRegionsResponse> GetAllocatedRegions(::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Minfs;
    using _Base = ::fidl::CompleterBase;

    class GetMetricsCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::minfs::Metrics* metrics);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::minfs::Metrics* metrics);
      void Reply(::fidl::DecodedMessage<GetMetricsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetMetricsCompleter = ::fidl::Completer<GetMetricsCompleterBase>;

    virtual void GetMetrics(GetMetricsCompleter::Sync _completer) = 0;

    class ToggleMetricsCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<ToggleMetricsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ToggleMetricsCompleter = ::fidl::Completer<ToggleMetricsCompleterBase>;

    virtual void ToggleMetrics(bool enable, ToggleMetricsCompleter::Sync _completer) = 0;

    class GetAllocatedRegionsCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::zx::vmo regions, uint64_t count);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::zx::vmo regions, uint64_t count);
      void Reply(::fidl::DecodedMessage<GetAllocatedRegionsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetAllocatedRegionsCompleter = ::fidl::Completer<GetAllocatedRegionsCompleterBase>;

    virtual void GetAllocatedRegions(GetAllocatedRegionsCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }


  // Helper functions to fill in the transaction header in a |DecodedMessage<TransactionalMessage>|.
  class SetTransactionHeaderFor final {
    SetTransactionHeaderFor() = delete;
   public:
    static void GetMetricsRequest(const ::fidl::DecodedMessage<Minfs::GetMetricsRequest>& _msg);
    static void GetMetricsResponse(const ::fidl::DecodedMessage<Minfs::GetMetricsResponse>& _msg);
    static void ToggleMetricsRequest(const ::fidl::DecodedMessage<Minfs::ToggleMetricsRequest>& _msg);
    static void ToggleMetricsResponse(const ::fidl::DecodedMessage<Minfs::ToggleMetricsResponse>& _msg);
    static void GetAllocatedRegionsRequest(const ::fidl::DecodedMessage<Minfs::GetAllocatedRegionsRequest>& _msg);
    static void GetAllocatedRegionsResponse(const ::fidl::DecodedMessage<Minfs::GetAllocatedRegionsResponse>& _msg);
  };
};

extern "C" const fidl_type_t fuchsia_minfs_BlockRegionTable;
extern "C" const fidl_type_t v1_fuchsia_minfs_BlockRegionTable;

struct BlockRegion {
  static constexpr const fidl_type_t* Type = &v1_fuchsia_minfs_BlockRegionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint64_t offset = {};

  uint64_t length = {};
};

}  // namespace minfs
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::minfs::Metrics> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::minfs::Metrics>);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, fs_metrics) == 0);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, initialized_vmos) == 640);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, init_dnum_count) == 648);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, init_inum_count) == 652);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, init_dinum_count) == 656);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, init_user_data_size) == 664);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, init_user_data_ticks) == 672);
static_assert(offsetof(::llcpp::fuchsia::minfs::Metrics, vnodes_opened_cache_hit) == 680);
static_assert(sizeof(::llcpp::fuchsia::minfs::Metrics) == ::llcpp::fuchsia::minfs::Metrics::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::minfs::Minfs::GetMetricsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::minfs::Minfs::GetMetricsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::minfs::Minfs::GetMetricsResponse)
    == ::llcpp::fuchsia::minfs::Minfs::GetMetricsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::minfs::Minfs::GetMetricsResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::minfs::Minfs::GetMetricsResponse, metrics) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::minfs::Minfs::ToggleMetricsRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::minfs::Minfs::ToggleMetricsRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::minfs::Minfs::ToggleMetricsRequest)
    == ::llcpp::fuchsia::minfs::Minfs::ToggleMetricsRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::minfs::Minfs::ToggleMetricsRequest, enable) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::minfs::Minfs::ToggleMetricsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::minfs::Minfs::ToggleMetricsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::minfs::Minfs::ToggleMetricsResponse)
    == ::llcpp::fuchsia::minfs::Minfs::ToggleMetricsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::minfs::Minfs::ToggleMetricsResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::minfs::Minfs::GetAllocatedRegionsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::minfs::Minfs::GetAllocatedRegionsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::minfs::Minfs::GetAllocatedRegionsResponse)
    == ::llcpp::fuchsia::minfs::Minfs::GetAllocatedRegionsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::minfs::Minfs::GetAllocatedRegionsResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::minfs::Minfs::GetAllocatedRegionsResponse, regions) == 20);
static_assert(offsetof(::llcpp::fuchsia::minfs::Minfs::GetAllocatedRegionsResponse, count) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::minfs::BlockRegion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::minfs::BlockRegion>);
static_assert(offsetof(::llcpp::fuchsia::minfs::BlockRegion, offset) == 0);
static_assert(offsetof(::llcpp::fuchsia::minfs::BlockRegion, length) == 8);
static_assert(sizeof(::llcpp::fuchsia::minfs::BlockRegion) == ::llcpp::fuchsia::minfs::BlockRegion::PrimarySize);

}  // namespace fidl
