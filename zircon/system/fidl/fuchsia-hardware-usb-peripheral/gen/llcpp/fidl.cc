// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/hardware/usb/peripheral/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace usb {
namespace peripheral {

namespace {

[[maybe_unused]]
constexpr uint64_t kEvents_FunctionRegistered_GenOrdinal = 0x48ca785200000000lu;

}  // namespace
template <>
Events::ResultOf::FunctionRegistered_Impl<Events::FunctionRegisteredResponse>::FunctionRegistered_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<FunctionRegisteredRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, FunctionRegisteredRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(FunctionRegisteredRequest));
  ::fidl::DecodedMessage<FunctionRegisteredRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Events::InPlace::FunctionRegistered(std::move(_client_end), Super::response_buffer()));
}

Events::ResultOf::FunctionRegistered Events::SyncClient::FunctionRegistered() {
  return ResultOf::FunctionRegistered(zx::unowned_channel(this->channel_));
}

Events::ResultOf::FunctionRegistered Events::Call::FunctionRegistered(zx::unowned_channel _client_end) {
  return ResultOf::FunctionRegistered(std::move(_client_end));
}

zx_status_t Events::SyncClient::FunctionRegistered_Deprecated() {
  return Events::Call::FunctionRegistered_Deprecated(zx::unowned_channel(this->channel_));
}

zx_status_t Events::Call::FunctionRegistered_Deprecated(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<FunctionRegisteredRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<FunctionRegisteredRequest*>(_write_bytes);
  _request._hdr.ordinal = kEvents_FunctionRegistered_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(FunctionRegisteredRequest));
  ::fidl::DecodedMessage<FunctionRegisteredRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<FunctionRegisteredResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<FunctionRegisteredRequest, FunctionRegisteredResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  return ZX_OK;
}

::fidl::DecodeResult<Events::FunctionRegisteredResponse> Events::InPlace::FunctionRegistered(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(FunctionRegisteredRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<FunctionRegisteredRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kEvents_FunctionRegistered_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Events::FunctionRegisteredResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<FunctionRegisteredRequest, FunctionRegisteredResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Events::FunctionRegisteredResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Events::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kEvents_FunctionRegistered_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<FunctionRegisteredRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->FunctionRegistered(
        Interface::FunctionRegisteredCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Events::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Events::Interface::FunctionRegisteredCompleterBase::Reply() {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<FunctionRegisteredResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<FunctionRegisteredResponse*>(_write_bytes);
  _response._hdr.ordinal = kEvents_FunctionRegistered_GenOrdinal;
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(FunctionRegisteredResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<FunctionRegisteredResponse>(std::move(_response_bytes)));
}


namespace {

[[maybe_unused]]
constexpr uint64_t kDevice_SetDeviceDescriptor_GenOrdinal = 0x7f05597300000000lu;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetDeviceDescriptorResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_AllocStringDesc_GenOrdinal = 0x5186c0a400000000lu;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAllocStringDescRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAllocStringDescResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_AddFunction_GenOrdinal = 0x62bfc25100000000lu;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAddFunctionRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAddFunctionResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_BindFunctions_GenOrdinal = 0x121f0e7600000000lu;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceBindFunctionsResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_ClearFunctions_GenOrdinal = 0x4e0ef30000000000lu;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceClearFunctionsResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_GetMode_GenOrdinal = 0x688816eb00000000lu;
[[maybe_unused]]
constexpr uint64_t kDevice_SetMode_GenOrdinal = 0x50c21c1c00000000lu;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetModeRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetModeResponseTable;
[[maybe_unused]]
constexpr uint64_t kDevice_SetStateChangeListener_GenOrdinal = 0x4409dd700000000lu;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetStateChangeListenerRequestTable;

}  // namespace
template <>
Device::ResultOf::SetDeviceDescriptor_Impl<Device::SetDeviceDescriptorResponse>::SetDeviceDescriptor_Impl(zx::unowned_channel _client_end, DeviceDescriptor desc) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetDeviceDescriptorRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SetDeviceDescriptorRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetDeviceDescriptorRequest*>(_write_bytes);
  _request.desc = std::move(desc);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetDeviceDescriptorRequest));
  ::fidl::DecodedMessage<SetDeviceDescriptorRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::SetDeviceDescriptor(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::SetDeviceDescriptor Device::SyncClient::SetDeviceDescriptor(DeviceDescriptor desc) {
  return ResultOf::SetDeviceDescriptor(zx::unowned_channel(this->channel_), std::move(desc));
}

Device::ResultOf::SetDeviceDescriptor Device::Call::SetDeviceDescriptor(zx::unowned_channel _client_end, DeviceDescriptor desc) {
  return ResultOf::SetDeviceDescriptor(std::move(_client_end), std::move(desc));
}

template <>
Device::UnownedResultOf::SetDeviceDescriptor_Impl<Device::SetDeviceDescriptorResponse>::SetDeviceDescriptor_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SetDeviceDescriptorRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SetDeviceDescriptorResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, SetDeviceDescriptorRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetDeviceDescriptorRequest*>(_request_buffer.data());
  _request.desc = std::move(desc);
  _request_buffer.set_actual(sizeof(SetDeviceDescriptorRequest));
  ::fidl::DecodedMessage<SetDeviceDescriptorRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::SetDeviceDescriptor(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::SetDeviceDescriptor Device::SyncClient::SetDeviceDescriptor(::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetDeviceDescriptor(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(desc), std::move(_response_buffer));
}

Device::UnownedResultOf::SetDeviceDescriptor Device::Call::SetDeviceDescriptor(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetDeviceDescriptor(std::move(_client_end), std::move(_request_buffer), std::move(desc), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::SetDeviceDescriptor_Deprecated(DeviceDescriptor desc, int32_t* out_s) {
  return Device::Call::SetDeviceDescriptor_Deprecated(zx::unowned_channel(this->channel_), std::move(desc), out_s);
}

zx_status_t Device::Call::SetDeviceDescriptor_Deprecated(zx::unowned_channel _client_end, DeviceDescriptor desc, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetDeviceDescriptorRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<SetDeviceDescriptorRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_SetDeviceDescriptor_GenOrdinal;
  _request.desc = std::move(desc);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetDeviceDescriptorRequest));
  ::fidl::DecodedMessage<SetDeviceDescriptorRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<SetDeviceDescriptorResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<SetDeviceDescriptorRequest, SetDeviceDescriptorResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Device::SetDeviceDescriptorResponse> Device::SyncClient::SetDeviceDescriptor_Deprecated(::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Device::Call::SetDeviceDescriptor_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(desc), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Device::SetDeviceDescriptorResponse> Device::Call::SetDeviceDescriptor_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  if (_request_buffer.capacity() < SetDeviceDescriptorRequest::PrimarySize) {
    return ::fidl::DecodeResult<SetDeviceDescriptorResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<SetDeviceDescriptorRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_SetDeviceDescriptor_GenOrdinal;
  _request.desc = std::move(desc);
  _request_buffer.set_actual(sizeof(SetDeviceDescriptorRequest));
  ::fidl::DecodedMessage<SetDeviceDescriptorRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetDeviceDescriptorResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<SetDeviceDescriptorRequest, SetDeviceDescriptorResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetDeviceDescriptorResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Device::SetDeviceDescriptorResponse> Device::InPlace::SetDeviceDescriptor(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetDeviceDescriptorRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetDeviceDescriptor_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::SetDeviceDescriptorResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SetDeviceDescriptorRequest, SetDeviceDescriptorResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::SetDeviceDescriptorResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::AllocStringDesc_Impl<Device::AllocStringDescResponse>::AllocStringDesc_Impl(zx::unowned_channel _client_end, ::fidl::StringView name) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AllocStringDescRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  AllocStringDescRequest _request = {};
  _request.name = std::move(name);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<AllocStringDescRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Device::InPlace::AllocStringDesc(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::AllocStringDesc Device::SyncClient::AllocStringDesc(::fidl::StringView name) {
  return ResultOf::AllocStringDesc(zx::unowned_channel(this->channel_), std::move(name));
}

Device::ResultOf::AllocStringDesc Device::Call::AllocStringDesc(zx::unowned_channel _client_end, ::fidl::StringView name) {
  return ResultOf::AllocStringDesc(std::move(_client_end), std::move(name));
}

template <>
Device::UnownedResultOf::AllocStringDesc_Impl<Device::AllocStringDescResponse>::AllocStringDesc_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < AllocStringDescRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<AllocStringDescResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  AllocStringDescRequest _request = {};
  _request.name = std::move(name);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<AllocStringDescRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      Device::InPlace::AllocStringDesc(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::AllocStringDesc Device::SyncClient::AllocStringDesc(::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::AllocStringDesc(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(name), std::move(_response_buffer));
}

Device::UnownedResultOf::AllocStringDesc Device::Call::AllocStringDesc(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::AllocStringDesc(std::move(_client_end), std::move(_request_buffer), std::move(name), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::AllocStringDesc_Deprecated(::fidl::StringView name, int32_t* out_s, uint8_t* out_index) {
  return Device::Call::AllocStringDesc_Deprecated(zx::unowned_channel(this->channel_), std::move(name), out_s, out_index);
}

zx_status_t Device::Call::AllocStringDesc_Deprecated(zx::unowned_channel _client_end, ::fidl::StringView name, int32_t* out_s, uint8_t* out_index) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AllocStringDescRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize];
  AllocStringDescRequest _request = {};
  _request._hdr.ordinal = kDevice_AllocStringDesc_GenOrdinal;
  _request.name = std::move(name);
  auto _linearize_result = ::fidl::Linearize(&_request, ::fidl::BytePart(_write_bytes,
                                                                         _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    return _linearize_result.status;
  }
  ::fidl::DecodedMessage<AllocStringDescRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<AllocStringDescResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<AllocStringDescRequest, AllocStringDescResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  *out_index = std::move(_response.index);
  return ZX_OK;
}

::fidl::DecodeResult<Device::AllocStringDescResponse> Device::SyncClient::AllocStringDesc_Deprecated(::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer, int32_t* out_s, uint8_t* out_index) {
  return Device::Call::AllocStringDesc_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(name), std::move(_response_buffer), out_s, out_index);
}

::fidl::DecodeResult<Device::AllocStringDescResponse> Device::Call::AllocStringDesc_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer, int32_t* out_s, uint8_t* out_index) {
  if (_request_buffer.capacity() < AllocStringDescRequest::PrimarySize) {
    return ::fidl::DecodeResult<AllocStringDescResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  AllocStringDescRequest _request = {};
  _request._hdr.ordinal = kDevice_AllocStringDesc_GenOrdinal;
  _request.name = std::move(name);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return ::fidl::DecodeResult<AllocStringDescResponse>(_linearize_result.status, _linearize_result.error);
  }
  ::fidl::DecodedMessage<AllocStringDescRequest> _decoded_request = std::move(_linearize_result.message);
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<AllocStringDescResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<AllocStringDescRequest, AllocStringDescResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<AllocStringDescResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  *out_index = std::move(_response.index);
  return _decode_result;
}

::fidl::DecodeResult<Device::AllocStringDescResponse> Device::InPlace::AllocStringDesc(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AllocStringDescRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_AllocStringDesc_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::AllocStringDescResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<AllocStringDescRequest, AllocStringDescResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::AllocStringDescResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::AddFunction_Impl<Device::AddFunctionResponse>::AddFunction_Impl(zx::unowned_channel _client_end, FunctionDescriptor desc) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AddFunctionRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, AddFunctionRequest::PrimarySize);
  auto& _request = *reinterpret_cast<AddFunctionRequest*>(_write_bytes);
  _request.desc = std::move(desc);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(AddFunctionRequest));
  ::fidl::DecodedMessage<AddFunctionRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::AddFunction(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::AddFunction Device::SyncClient::AddFunction(FunctionDescriptor desc) {
  return ResultOf::AddFunction(zx::unowned_channel(this->channel_), std::move(desc));
}

Device::ResultOf::AddFunction Device::Call::AddFunction(zx::unowned_channel _client_end, FunctionDescriptor desc) {
  return ResultOf::AddFunction(std::move(_client_end), std::move(desc));
}

template <>
Device::UnownedResultOf::AddFunction_Impl<Device::AddFunctionResponse>::AddFunction_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < AddFunctionRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<AddFunctionResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, AddFunctionRequest::PrimarySize);
  auto& _request = *reinterpret_cast<AddFunctionRequest*>(_request_buffer.data());
  _request.desc = std::move(desc);
  _request_buffer.set_actual(sizeof(AddFunctionRequest));
  ::fidl::DecodedMessage<AddFunctionRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::AddFunction(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::AddFunction Device::SyncClient::AddFunction(::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::AddFunction(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(desc), std::move(_response_buffer));
}

Device::UnownedResultOf::AddFunction Device::Call::AddFunction(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::AddFunction(std::move(_client_end), std::move(_request_buffer), std::move(desc), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::AddFunction_Deprecated(FunctionDescriptor desc, int32_t* out_s) {
  return Device::Call::AddFunction_Deprecated(zx::unowned_channel(this->channel_), std::move(desc), out_s);
}

zx_status_t Device::Call::AddFunction_Deprecated(zx::unowned_channel _client_end, FunctionDescriptor desc, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AddFunctionRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<AddFunctionRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_AddFunction_GenOrdinal;
  _request.desc = std::move(desc);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(AddFunctionRequest));
  ::fidl::DecodedMessage<AddFunctionRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<AddFunctionResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<AddFunctionRequest, AddFunctionResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Device::AddFunctionResponse> Device::SyncClient::AddFunction_Deprecated(::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Device::Call::AddFunction_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(desc), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Device::AddFunctionResponse> Device::Call::AddFunction_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  if (_request_buffer.capacity() < AddFunctionRequest::PrimarySize) {
    return ::fidl::DecodeResult<AddFunctionResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<AddFunctionRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_AddFunction_GenOrdinal;
  _request.desc = std::move(desc);
  _request_buffer.set_actual(sizeof(AddFunctionRequest));
  ::fidl::DecodedMessage<AddFunctionRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<AddFunctionResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<AddFunctionRequest, AddFunctionResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<AddFunctionResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Device::AddFunctionResponse> Device::InPlace::AddFunction(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AddFunctionRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_AddFunction_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::AddFunctionResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<AddFunctionRequest, AddFunctionResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::AddFunctionResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::BindFunctions_Impl<Device::BindFunctionsResponse>::BindFunctions_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<BindFunctionsRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, BindFunctionsRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(BindFunctionsRequest));
  ::fidl::DecodedMessage<BindFunctionsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::BindFunctions(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::BindFunctions Device::SyncClient::BindFunctions() {
  return ResultOf::BindFunctions(zx::unowned_channel(this->channel_));
}

Device::ResultOf::BindFunctions Device::Call::BindFunctions(zx::unowned_channel _client_end) {
  return ResultOf::BindFunctions(std::move(_client_end));
}

template <>
Device::UnownedResultOf::BindFunctions_Impl<Device::BindFunctionsResponse>::BindFunctions_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(BindFunctionsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, BindFunctionsRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(BindFunctionsRequest));
  ::fidl::DecodedMessage<BindFunctionsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::BindFunctions(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::BindFunctions Device::SyncClient::BindFunctions(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::BindFunctions(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::BindFunctions Device::Call::BindFunctions(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::BindFunctions(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::BindFunctions_Deprecated(int32_t* out_s) {
  return Device::Call::BindFunctions_Deprecated(zx::unowned_channel(this->channel_), out_s);
}

zx_status_t Device::Call::BindFunctions_Deprecated(zx::unowned_channel _client_end, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<BindFunctionsRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<BindFunctionsRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_BindFunctions_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(BindFunctionsRequest));
  ::fidl::DecodedMessage<BindFunctionsRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<BindFunctionsResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<BindFunctionsRequest, BindFunctionsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Device::BindFunctionsResponse> Device::SyncClient::BindFunctions_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Device::Call::BindFunctions_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Device::BindFunctionsResponse> Device::Call::BindFunctions_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(BindFunctionsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<BindFunctionsRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_BindFunctions_GenOrdinal;
  _request_buffer.set_actual(sizeof(BindFunctionsRequest));
  ::fidl::DecodedMessage<BindFunctionsRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<BindFunctionsResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<BindFunctionsRequest, BindFunctionsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<BindFunctionsResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Device::BindFunctionsResponse> Device::InPlace::BindFunctions(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(BindFunctionsRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<BindFunctionsRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_BindFunctions_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::BindFunctionsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<BindFunctionsRequest, BindFunctionsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::BindFunctionsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::ClearFunctions_Impl<Device::ClearFunctionsResponse>::ClearFunctions_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ClearFunctionsRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, ClearFunctionsRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(ClearFunctionsRequest));
  ::fidl::DecodedMessage<ClearFunctionsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::ClearFunctions(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::ClearFunctions Device::SyncClient::ClearFunctions() {
  return ResultOf::ClearFunctions(zx::unowned_channel(this->channel_));
}

Device::ResultOf::ClearFunctions Device::Call::ClearFunctions(zx::unowned_channel _client_end) {
  return ResultOf::ClearFunctions(std::move(_client_end));
}

template <>
Device::UnownedResultOf::ClearFunctions_Impl<Device::ClearFunctionsResponse>::ClearFunctions_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(ClearFunctionsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, ClearFunctionsRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(ClearFunctionsRequest));
  ::fidl::DecodedMessage<ClearFunctionsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::ClearFunctions(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::ClearFunctions Device::SyncClient::ClearFunctions(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::ClearFunctions(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::ClearFunctions Device::Call::ClearFunctions(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::ClearFunctions(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::ClearFunctions_Deprecated(int32_t* out_s) {
  return Device::Call::ClearFunctions_Deprecated(zx::unowned_channel(this->channel_), out_s);
}

zx_status_t Device::Call::ClearFunctions_Deprecated(zx::unowned_channel _client_end, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ClearFunctionsRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<ClearFunctionsRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_ClearFunctions_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(ClearFunctionsRequest));
  ::fidl::DecodedMessage<ClearFunctionsRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<ClearFunctionsResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<ClearFunctionsRequest, ClearFunctionsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Device::ClearFunctionsResponse> Device::SyncClient::ClearFunctions_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Device::Call::ClearFunctions_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Device::ClearFunctionsResponse> Device::Call::ClearFunctions_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(ClearFunctionsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<ClearFunctionsRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_ClearFunctions_GenOrdinal;
  _request_buffer.set_actual(sizeof(ClearFunctionsRequest));
  ::fidl::DecodedMessage<ClearFunctionsRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ClearFunctionsResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<ClearFunctionsRequest, ClearFunctionsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ClearFunctionsResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Device::ClearFunctionsResponse> Device::InPlace::ClearFunctions(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(ClearFunctionsRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<ClearFunctionsRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_ClearFunctions_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::ClearFunctionsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<ClearFunctionsRequest, ClearFunctionsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::ClearFunctionsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::GetMode_Impl<Device::GetModeResponse>::GetMode_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetModeRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetModeRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetModeRequest));
  ::fidl::DecodedMessage<GetModeRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::GetMode(std::move(_client_end), Super::response_buffer()));
}

Device::ResultOf::GetMode Device::SyncClient::GetMode() {
  return ResultOf::GetMode(zx::unowned_channel(this->channel_));
}

Device::ResultOf::GetMode Device::Call::GetMode(zx::unowned_channel _client_end) {
  return ResultOf::GetMode(std::move(_client_end));
}

template <>
Device::UnownedResultOf::GetMode_Impl<Device::GetModeResponse>::GetMode_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetModeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetModeRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetModeRequest));
  ::fidl::DecodedMessage<GetModeRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::GetMode(std::move(_client_end), std::move(_response_buffer)));
}

Device::UnownedResultOf::GetMode Device::SyncClient::GetMode(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetMode(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Device::UnownedResultOf::GetMode Device::Call::GetMode(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetMode(std::move(_client_end), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::GetMode_Deprecated(int32_t* out_s, uint32_t* out_mode) {
  return Device::Call::GetMode_Deprecated(zx::unowned_channel(this->channel_), out_s, out_mode);
}

zx_status_t Device::Call::GetMode_Deprecated(zx::unowned_channel _client_end, int32_t* out_s, uint32_t* out_mode) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetModeRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<GetModeRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_GetMode_GenOrdinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetModeRequest));
  ::fidl::DecodedMessage<GetModeRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<GetModeResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<GetModeRequest, GetModeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  *out_mode = std::move(_response.mode);
  return ZX_OK;
}

::fidl::DecodeResult<Device::GetModeResponse> Device::SyncClient::GetMode_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_s, uint32_t* out_mode) {
  return Device::Call::GetMode_Deprecated(zx::unowned_channel(this->channel_), std::move(_response_buffer), out_s, out_mode);
}

::fidl::DecodeResult<Device::GetModeResponse> Device::Call::GetMode_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_s, uint32_t* out_mode) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetModeRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  auto& _request = *reinterpret_cast<GetModeRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_GetMode_GenOrdinal;
  _request_buffer.set_actual(sizeof(GetModeRequest));
  ::fidl::DecodedMessage<GetModeRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetModeResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<GetModeRequest, GetModeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<GetModeResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  *out_mode = std::move(_response.mode);
  return _decode_result;
}

::fidl::DecodeResult<Device::GetModeResponse> Device::InPlace::GetMode(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetModeRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetModeRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetMode_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetModeResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetModeRequest, GetModeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::GetModeResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Device::ResultOf::SetMode_Impl<Device::SetModeResponse>::SetMode_Impl(zx::unowned_channel _client_end, uint32_t mode) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetModeRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SetModeRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetModeRequest*>(_write_bytes);
  _request.mode = std::move(mode);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetModeRequest));
  ::fidl::DecodedMessage<SetModeRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Device::InPlace::SetMode(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Device::ResultOf::SetMode Device::SyncClient::SetMode(uint32_t mode) {
  return ResultOf::SetMode(zx::unowned_channel(this->channel_), std::move(mode));
}

Device::ResultOf::SetMode Device::Call::SetMode(zx::unowned_channel _client_end, uint32_t mode) {
  return ResultOf::SetMode(std::move(_client_end), std::move(mode));
}

template <>
Device::UnownedResultOf::SetMode_Impl<Device::SetModeResponse>::SetMode_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SetModeRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SetModeResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, SetModeRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetModeRequest*>(_request_buffer.data());
  _request.mode = std::move(mode);
  _request_buffer.set_actual(sizeof(SetModeRequest));
  ::fidl::DecodedMessage<SetModeRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Device::InPlace::SetMode(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Device::UnownedResultOf::SetMode Device::SyncClient::SetMode(::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetMode(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(mode), std::move(_response_buffer));
}

Device::UnownedResultOf::SetMode Device::Call::SetMode(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetMode(std::move(_client_end), std::move(_request_buffer), std::move(mode), std::move(_response_buffer));
}

zx_status_t Device::SyncClient::SetMode_Deprecated(uint32_t mode, int32_t* out_s) {
  return Device::Call::SetMode_Deprecated(zx::unowned_channel(this->channel_), std::move(mode), out_s);
}

zx_status_t Device::Call::SetMode_Deprecated(zx::unowned_channel _client_end, uint32_t mode, int32_t* out_s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetModeRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<SetModeRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_SetMode_GenOrdinal;
  _request.mode = std::move(mode);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetModeRequest));
  ::fidl::DecodedMessage<SetModeRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<SetModeResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<SetModeRequest, SetModeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return ZX_OK;
}

::fidl::DecodeResult<Device::SetModeResponse> Device::SyncClient::SetMode_Deprecated(::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  return Device::Call::SetMode_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(mode), std::move(_response_buffer), out_s);
}

::fidl::DecodeResult<Device::SetModeResponse> Device::Call::SetMode_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer, int32_t* out_s) {
  if (_request_buffer.capacity() < SetModeRequest::PrimarySize) {
    return ::fidl::DecodeResult<SetModeResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall);
  }
  auto& _request = *reinterpret_cast<SetModeRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_SetMode_GenOrdinal;
  _request.mode = std::move(mode);
  _request_buffer.set_actual(sizeof(SetModeRequest));
  ::fidl::DecodedMessage<SetModeRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetModeResponse>(_encode_request_result.status, _encode_request_result.error);
  }
  auto _call_result = ::fidl::Call<SetModeRequest, SetModeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SetModeResponse>(_call_result.status, _call_result.error);
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result;
  }
  auto& _response = *_decode_result.message.message();
  *out_s = std::move(_response.s);
  return _decode_result;
}

::fidl::DecodeResult<Device::SetModeResponse> Device::InPlace::SetMode(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetModeRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetMode_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::SetModeResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SetModeRequest, SetModeResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Device::SetModeResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


Device::ResultOf::SetStateChangeListener_Impl::SetStateChangeListener_Impl(zx::unowned_channel _client_end, ::zx::channel listener) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetStateChangeListenerRequest>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SetStateChangeListenerRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetStateChangeListenerRequest*>(_write_bytes);
  _request.listener = std::move(listener);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetStateChangeListenerRequest));
  ::fidl::DecodedMessage<SetStateChangeListenerRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      Device::InPlace::SetStateChangeListener(std::move(_client_end), std::move(_decoded_request)));
}

Device::ResultOf::SetStateChangeListener Device::SyncClient::SetStateChangeListener(::zx::channel listener) {
  return ResultOf::SetStateChangeListener(zx::unowned_channel(this->channel_), std::move(listener));
}

Device::ResultOf::SetStateChangeListener Device::Call::SetStateChangeListener(zx::unowned_channel _client_end, ::zx::channel listener) {
  return ResultOf::SetStateChangeListener(std::move(_client_end), std::move(listener));
}


Device::UnownedResultOf::SetStateChangeListener_Impl::SetStateChangeListener_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel listener) {
  if (_request_buffer.capacity() < SetStateChangeListenerRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, SetStateChangeListenerRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetStateChangeListenerRequest*>(_request_buffer.data());
  _request.listener = std::move(listener);
  _request_buffer.set_actual(sizeof(SetStateChangeListenerRequest));
  ::fidl::DecodedMessage<SetStateChangeListenerRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      Device::InPlace::SetStateChangeListener(std::move(_client_end), std::move(_decoded_request)));
}

Device::UnownedResultOf::SetStateChangeListener Device::SyncClient::SetStateChangeListener(::fidl::BytePart _request_buffer, ::zx::channel listener) {
  return UnownedResultOf::SetStateChangeListener(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(listener));
}

Device::UnownedResultOf::SetStateChangeListener Device::Call::SetStateChangeListener(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel listener) {
  return UnownedResultOf::SetStateChangeListener(std::move(_client_end), std::move(_request_buffer), std::move(listener));
}

zx_status_t Device::SyncClient::SetStateChangeListener_Deprecated(::zx::channel listener) {
  return Device::Call::SetStateChangeListener_Deprecated(zx::unowned_channel(this->channel_), std::move(listener));
}

zx_status_t Device::Call::SetStateChangeListener_Deprecated(zx::unowned_channel _client_end, ::zx::channel listener) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetStateChangeListenerRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<SetStateChangeListenerRequest*>(_write_bytes);
  _request._hdr.ordinal = kDevice_SetStateChangeListener_GenOrdinal;
  _request.listener = std::move(listener);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetStateChangeListenerRequest));
  ::fidl::DecodedMessage<SetStateChangeListenerRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

zx_status_t Device::SyncClient::SetStateChangeListener_Deprecated(::fidl::BytePart _request_buffer, ::zx::channel listener) {
  return Device::Call::SetStateChangeListener_Deprecated(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(listener));
}

zx_status_t Device::Call::SetStateChangeListener_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel listener) {
  if (_request_buffer.capacity() < SetStateChangeListenerRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<SetStateChangeListenerRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kDevice_SetStateChangeListener_GenOrdinal;
  _request.listener = std::move(listener);
  _request_buffer.set_actual(sizeof(SetStateChangeListenerRequest));
  ::fidl::DecodedMessage<SetStateChangeListenerRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Device::InPlace::SetStateChangeListener(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetStateChangeListenerRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetStateChangeListener_GenOrdinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}


bool Device::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kDevice_SetDeviceDescriptor_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SetDeviceDescriptorRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetDeviceDescriptor(std::move(message->desc),
        Interface::SetDeviceDescriptorCompleter::Sync(txn));
      return true;
    }
    case kDevice_AllocStringDesc_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<AllocStringDescRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->AllocStringDesc(std::move(message->name),
        Interface::AllocStringDescCompleter::Sync(txn));
      return true;
    }
    case kDevice_AddFunction_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<AddFunctionRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->AddFunction(std::move(message->desc),
        Interface::AddFunctionCompleter::Sync(txn));
      return true;
    }
    case kDevice_BindFunctions_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<BindFunctionsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->BindFunctions(
        Interface::BindFunctionsCompleter::Sync(txn));
      return true;
    }
    case kDevice_ClearFunctions_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<ClearFunctionsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->ClearFunctions(
        Interface::ClearFunctionsCompleter::Sync(txn));
      return true;
    }
    case kDevice_GetMode_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetModeRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetMode(
        Interface::GetModeCompleter::Sync(txn));
      return true;
    }
    case kDevice_SetMode_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SetModeRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetMode(std::move(message->mode),
        Interface::SetModeCompleter::Sync(txn));
      return true;
    }
    case kDevice_SetStateChangeListener_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<SetStateChangeListenerRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetStateChangeListener(std::move(message->listener),
        Interface::SetStateChangeListenerCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Device::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Device::Interface::SetDeviceDescriptorCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetDeviceDescriptorResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SetDeviceDescriptorResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_SetDeviceDescriptor_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetDeviceDescriptorResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetDeviceDescriptorResponse>(std::move(_response_bytes)));
}

void Device::Interface::SetDeviceDescriptorCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < SetDeviceDescriptorResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SetDeviceDescriptorResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_SetDeviceDescriptor_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(SetDeviceDescriptorResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetDeviceDescriptorResponse>(std::move(_buffer)));
}

void Device::Interface::SetDeviceDescriptorCompleterBase::Reply(::fidl::DecodedMessage<SetDeviceDescriptorResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetDeviceDescriptor_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::AllocStringDescCompleterBase::Reply(int32_t s, uint8_t index) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AllocStringDescResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<AllocStringDescResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_AllocStringDesc_GenOrdinal;
  _response.s = std::move(s);
  _response.index = std::move(index);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(AllocStringDescResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<AllocStringDescResponse>(std::move(_response_bytes)));
}

void Device::Interface::AllocStringDescCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s, uint8_t index) {
  if (_buffer.capacity() < AllocStringDescResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<AllocStringDescResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_AllocStringDesc_GenOrdinal;
  _response.s = std::move(s);
  _response.index = std::move(index);
  _buffer.set_actual(sizeof(AllocStringDescResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<AllocStringDescResponse>(std::move(_buffer)));
}

void Device::Interface::AllocStringDescCompleterBase::Reply(::fidl::DecodedMessage<AllocStringDescResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_AllocStringDesc_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::AddFunctionCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<AddFunctionResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<AddFunctionResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_AddFunction_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(AddFunctionResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<AddFunctionResponse>(std::move(_response_bytes)));
}

void Device::Interface::AddFunctionCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < AddFunctionResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<AddFunctionResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_AddFunction_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(AddFunctionResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<AddFunctionResponse>(std::move(_buffer)));
}

void Device::Interface::AddFunctionCompleterBase::Reply(::fidl::DecodedMessage<AddFunctionResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_AddFunction_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::BindFunctionsCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<BindFunctionsResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<BindFunctionsResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_BindFunctions_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(BindFunctionsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<BindFunctionsResponse>(std::move(_response_bytes)));
}

void Device::Interface::BindFunctionsCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < BindFunctionsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<BindFunctionsResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_BindFunctions_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(BindFunctionsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<BindFunctionsResponse>(std::move(_buffer)));
}

void Device::Interface::BindFunctionsCompleterBase::Reply(::fidl::DecodedMessage<BindFunctionsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_BindFunctions_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::ClearFunctionsCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ClearFunctionsResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<ClearFunctionsResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_ClearFunctions_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(ClearFunctionsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<ClearFunctionsResponse>(std::move(_response_bytes)));
}

void Device::Interface::ClearFunctionsCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < ClearFunctionsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<ClearFunctionsResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_ClearFunctions_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(ClearFunctionsResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<ClearFunctionsResponse>(std::move(_buffer)));
}

void Device::Interface::ClearFunctionsCompleterBase::Reply(::fidl::DecodedMessage<ClearFunctionsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_ClearFunctions_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::GetModeCompleterBase::Reply(int32_t s, uint32_t mode) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetModeResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetModeResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_GetMode_GenOrdinal;
  _response.s = std::move(s);
  _response.mode = std::move(mode);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetModeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetModeResponse>(std::move(_response_bytes)));
}

void Device::Interface::GetModeCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s, uint32_t mode) {
  if (_buffer.capacity() < GetModeResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetModeResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_GetMode_GenOrdinal;
  _response.s = std::move(s);
  _response.mode = std::move(mode);
  _buffer.set_actual(sizeof(GetModeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetModeResponse>(std::move(_buffer)));
}

void Device::Interface::GetModeCompleterBase::Reply(::fidl::DecodedMessage<GetModeResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_GetMode_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


void Device::Interface::SetModeCompleterBase::Reply(int32_t s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetModeResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SetModeResponse*>(_write_bytes);
  _response._hdr.ordinal = kDevice_SetMode_GenOrdinal;
  _response.s = std::move(s);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetModeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetModeResponse>(std::move(_response_bytes)));
}

void Device::Interface::SetModeCompleterBase::Reply(::fidl::BytePart _buffer, int32_t s) {
  if (_buffer.capacity() < SetModeResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SetModeResponse*>(_buffer.data());
  _response._hdr.ordinal = kDevice_SetMode_GenOrdinal;
  _response.s = std::move(s);
  _buffer.set_actual(sizeof(SetModeResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetModeResponse>(std::move(_buffer)));
}

void Device::Interface::SetModeCompleterBase::Reply(::fidl::DecodedMessage<SetModeResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDevice_SetMode_GenOrdinal;
  CompleterBase::SendReply(std::move(params));
}


}  // namespace peripheral
}  // namespace usb
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp
