// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace usb {
namespace peripheral {

class Events;
struct FunctionDescriptor;
struct DeviceDescriptor;
class Device;

// Events protocol that is used as a callback to inform the client
// of the completion of various server-side events.
// This callback interface can be registered using the SetStateChangeListener
// method on the Device protocol.
class Events final {
  Events() = delete;
 public:

  using FunctionRegisteredResponse = ::fidl::AnyZeroArgMessage;
  using FunctionRegisteredRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class FunctionRegistered_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      FunctionRegistered_Impl(zx::unowned_channel _client_end);
      ~FunctionRegistered_Impl() = default;
      FunctionRegistered_Impl(FunctionRegistered_Impl&& other) = default;
      FunctionRegistered_Impl& operator=(FunctionRegistered_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using FunctionRegistered = FunctionRegistered_Impl<FunctionRegisteredResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class FunctionRegistered_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      FunctionRegistered_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~FunctionRegistered_Impl() = default;
      FunctionRegistered_Impl(FunctionRegistered_Impl&& other) = default;
      FunctionRegistered_Impl& operator=(FunctionRegistered_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using FunctionRegistered = FunctionRegistered_Impl<FunctionRegisteredResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::FunctionRegistered FunctionRegistered();


    zx_status_t FunctionRegistered_Deprecated();

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Allocates 32 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::FunctionRegistered FunctionRegistered(zx::unowned_channel _client_end);


    static zx_status_t FunctionRegistered_Deprecated(zx::unowned_channel _client_end);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    static ::fidl::DecodeResult<FunctionRegisteredResponse> FunctionRegistered(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Events;
    using _Base = ::fidl::CompleterBase;

    class FunctionRegisteredCompleterBase : public _Base {
     public:
      void Reply();

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using FunctionRegisteredCompleter = ::fidl::Completer<FunctionRegisteredCompleterBase>;

    virtual void FunctionRegistered(FunctionRegisteredCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

constexpr uint32_t MAX_STRING_LENGTH = 127u;



struct FunctionDescriptor {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 3;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint8_t interface_class = {};

  uint8_t interface_subclass = {};

  uint8_t interface_protocol = {};
};



// The fields in DeviceDescriptor match those in usb_descriptor_t in the USB specification.
struct DeviceDescriptor {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint16_t bcdUSB = {};

  uint8_t bDeviceClass = {};

  uint8_t bDeviceSubClass = {};

  uint8_t bDeviceProtocol = {};

  uint8_t bMaxPacketSize0 = {};

  uint16_t idVendor = {};

  uint16_t idProduct = {};

  uint16_t bcdDevice = {};

  uint8_t iManufacturer = {};

  uint8_t iProduct = {};

  uint8_t iSerialNumber = {};

  uint8_t bNumConfigurations = {};
};

extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetDeviceDescriptorResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAllocStringDescRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAllocStringDescResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAddFunctionRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceAddFunctionResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceBindFunctionsResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceClearFunctionsResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetModeRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetModeResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_usb_peripheral_DeviceSetStateChangeListenerRequestTable;

class Device final {
  Device() = delete;
 public:

  struct SetDeviceDescriptorResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceSetDeviceDescriptorResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct SetDeviceDescriptorRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    DeviceDescriptor desc;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = SetDeviceDescriptorResponse;
  };

  struct AllocStringDescResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    uint8_t index;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceAllocStringDescResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct AllocStringDescRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView name;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceAllocStringDescRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 128;
    using ResponseType = AllocStringDescResponse;
  };

  struct AddFunctionResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceAddFunctionResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct AddFunctionRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    FunctionDescriptor desc;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceAddFunctionRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = AddFunctionResponse;
  };

  struct BindFunctionsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceBindFunctionsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using BindFunctionsRequest = ::fidl::AnyZeroArgMessage;

  struct ClearFunctionsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceClearFunctionsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using ClearFunctionsRequest = ::fidl::AnyZeroArgMessage;

  struct GetModeResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    uint32_t mode;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using GetModeRequest = ::fidl::AnyZeroArgMessage;

  struct SetModeResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceSetModeResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct SetModeRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t mode;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceSetModeRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = SetModeResponse;
  };

  struct SetStateChangeListenerRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel listener;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_usb_peripheral_DeviceSetStateChangeListenerRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class SetDeviceDescriptor_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      SetDeviceDescriptor_Impl(zx::unowned_channel _client_end, DeviceDescriptor desc);
      ~SetDeviceDescriptor_Impl() = default;
      SetDeviceDescriptor_Impl(SetDeviceDescriptor_Impl&& other) = default;
      SetDeviceDescriptor_Impl& operator=(SetDeviceDescriptor_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class AllocStringDesc_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      AllocStringDesc_Impl(zx::unowned_channel _client_end, ::fidl::StringView name);
      ~AllocStringDesc_Impl() = default;
      AllocStringDesc_Impl(AllocStringDesc_Impl&& other) = default;
      AllocStringDesc_Impl& operator=(AllocStringDesc_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class AddFunction_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      AddFunction_Impl(zx::unowned_channel _client_end, FunctionDescriptor desc);
      ~AddFunction_Impl() = default;
      AddFunction_Impl(AddFunction_Impl&& other) = default;
      AddFunction_Impl& operator=(AddFunction_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class BindFunctions_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      BindFunctions_Impl(zx::unowned_channel _client_end);
      ~BindFunctions_Impl() = default;
      BindFunctions_Impl(BindFunctions_Impl&& other) = default;
      BindFunctions_Impl& operator=(BindFunctions_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ClearFunctions_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      ClearFunctions_Impl(zx::unowned_channel _client_end);
      ~ClearFunctions_Impl() = default;
      ClearFunctions_Impl(ClearFunctions_Impl&& other) = default;
      ClearFunctions_Impl& operator=(ClearFunctions_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetMode_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      GetMode_Impl(zx::unowned_channel _client_end);
      ~GetMode_Impl() = default;
      GetMode_Impl(GetMode_Impl&& other) = default;
      GetMode_Impl& operator=(GetMode_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetMode_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      SetMode_Impl(zx::unowned_channel _client_end, uint32_t mode);
      ~SetMode_Impl() = default;
      SetMode_Impl(SetMode_Impl&& other) = default;
      SetMode_Impl& operator=(SetMode_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    class SetStateChangeListener_Impl final : private ::fidl::internal::StatusAndError {
      using Super = ::fidl::internal::StatusAndError;
     public:
      SetStateChangeListener_Impl(zx::unowned_channel _client_end, ::zx::channel listener);
      ~SetStateChangeListener_Impl() = default;
      SetStateChangeListener_Impl(SetStateChangeListener_Impl&& other) = default;
      SetStateChangeListener_Impl& operator=(SetStateChangeListener_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
    };

   public:
    using SetDeviceDescriptor = SetDeviceDescriptor_Impl<SetDeviceDescriptorResponse>;
    using AllocStringDesc = AllocStringDesc_Impl<AllocStringDescResponse>;
    using AddFunction = AddFunction_Impl<AddFunctionResponse>;
    using BindFunctions = BindFunctions_Impl<BindFunctionsResponse>;
    using ClearFunctions = ClearFunctions_Impl<ClearFunctionsResponse>;
    using GetMode = GetMode_Impl<GetModeResponse>;
    using SetMode = SetMode_Impl<SetModeResponse>;
    using SetStateChangeListener = SetStateChangeListener_Impl;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class SetDeviceDescriptor_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      SetDeviceDescriptor_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer);
      ~SetDeviceDescriptor_Impl() = default;
      SetDeviceDescriptor_Impl(SetDeviceDescriptor_Impl&& other) = default;
      SetDeviceDescriptor_Impl& operator=(SetDeviceDescriptor_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class AllocStringDesc_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      AllocStringDesc_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer);
      ~AllocStringDesc_Impl() = default;
      AllocStringDesc_Impl(AllocStringDesc_Impl&& other) = default;
      AllocStringDesc_Impl& operator=(AllocStringDesc_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class AddFunction_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      AddFunction_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer);
      ~AddFunction_Impl() = default;
      AddFunction_Impl(AddFunction_Impl&& other) = default;
      AddFunction_Impl& operator=(AddFunction_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class BindFunctions_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      BindFunctions_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~BindFunctions_Impl() = default;
      BindFunctions_Impl(BindFunctions_Impl&& other) = default;
      BindFunctions_Impl& operator=(BindFunctions_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ClearFunctions_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      ClearFunctions_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~ClearFunctions_Impl() = default;
      ClearFunctions_Impl(ClearFunctions_Impl&& other) = default;
      ClearFunctions_Impl& operator=(ClearFunctions_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetMode_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      GetMode_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~GetMode_Impl() = default;
      GetMode_Impl(GetMode_Impl&& other) = default;
      GetMode_Impl& operator=(GetMode_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetMode_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      SetMode_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer);
      ~SetMode_Impl() = default;
      SetMode_Impl(SetMode_Impl&& other) = default;
      SetMode_Impl& operator=(SetMode_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    class SetStateChangeListener_Impl final : private ::fidl::internal::StatusAndError {
      using Super = ::fidl::internal::StatusAndError;
     public:
      SetStateChangeListener_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel listener);
      ~SetStateChangeListener_Impl() = default;
      SetStateChangeListener_Impl(SetStateChangeListener_Impl&& other) = default;
      SetStateChangeListener_Impl& operator=(SetStateChangeListener_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
    };

   public:
    using SetDeviceDescriptor = SetDeviceDescriptor_Impl<SetDeviceDescriptorResponse>;
    using AllocStringDesc = AllocStringDesc_Impl<AllocStringDescResponse>;
    using AddFunction = AddFunction_Impl<AddFunctionResponse>;
    using BindFunctions = BindFunctions_Impl<BindFunctionsResponse>;
    using ClearFunctions = ClearFunctions_Impl<ClearFunctionsResponse>;
    using GetMode = GetMode_Impl<GetModeResponse>;
    using SetMode = SetMode_Impl<SetModeResponse>;
    using SetStateChangeListener = SetStateChangeListener_Impl;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Sets the device's USB device descriptor.
    // Allocates 56 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetDeviceDescriptor SetDeviceDescriptor(DeviceDescriptor desc);

    // Sets the device's USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetDeviceDescriptor SetDeviceDescriptor(::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer);

    // Sets the device's USB device descriptor.
    zx_status_t SetDeviceDescriptor_Deprecated(DeviceDescriptor desc, int32_t* out_status);

    // Sets the device's USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<SetDeviceDescriptorResponse> SetDeviceDescriptor_Deprecated(::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Sets a string descriptor a string in the USB device descriptor.
    // Allocates 184 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::AllocStringDesc AllocStringDesc(::fidl::StringView name);

    // Sets a string descriptor a string in the USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::AllocStringDesc AllocStringDesc(::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer);

    // Sets a string descriptor a string in the USB device descriptor.
    zx_status_t AllocStringDesc_Deprecated(::fidl::StringView name, int32_t* out_status, uint8_t* out_index);

    // Sets a string descriptor a string in the USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<AllocStringDescResponse> AllocStringDesc_Deprecated(::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer, int32_t* out_status, uint8_t* out_index);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::AddFunction AddFunction(FunctionDescriptor desc);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::AddFunction AddFunction(::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    zx_status_t AddFunction_Deprecated(FunctionDescriptor desc, int32_t* out_status);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<AddFunctionResponse> AddFunction_Deprecated(::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Tells the device to create child devices for the configuration's interfaces.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::BindFunctions BindFunctions();

    // Tells the device to create child devices for the configuration's interfaces.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::BindFunctions BindFunctions(::fidl::BytePart _response_buffer);

    // Tells the device to create child devices for the configuration's interfaces.
    zx_status_t BindFunctions_Deprecated(int32_t* out_status);

    // Tells the device to create child devices for the configuration's interfaces.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<BindFunctionsResponse> BindFunctions_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::ClearFunctions ClearFunctions();

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::ClearFunctions ClearFunctions(::fidl::BytePart _response_buffer);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    zx_status_t ClearFunctions_Deprecated(int32_t* out_status);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ClearFunctionsResponse> ClearFunctions_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Returns the current USB mode.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::GetMode GetMode();

    // Returns the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::GetMode GetMode(::fidl::BytePart _response_buffer);

    // Returns the current USB mode.
    zx_status_t GetMode_Deprecated(int32_t* out_status, uint32_t* out_mode);

    // Returns the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetModeResponse> GetMode_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status, uint32_t* out_mode);

    // Sets the current USB mode.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetMode SetMode(uint32_t mode);

    // Sets the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetMode SetMode(::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer);

    // Sets the current USB mode.
    zx_status_t SetMode_Deprecated(uint32_t mode, int32_t* out_status);

    // Sets the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<SetModeResponse> SetMode_Deprecated(::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Adds a state change listener that is invoked when a state change completes.
    // Allocates 24 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetStateChangeListener SetStateChangeListener(::zx::channel listener);

    // Adds a state change listener that is invoked when a state change completes.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetStateChangeListener SetStateChangeListener(::fidl::BytePart _request_buffer, ::zx::channel listener);

    // Adds a state change listener that is invoked when a state change completes.
    zx_status_t SetStateChangeListener_Deprecated(::zx::channel listener);

    // Adds a state change listener that is invoked when a state change completes.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t SetStateChangeListener_Deprecated(::fidl::BytePart _request_buffer, ::zx::channel listener);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Sets the device's USB device descriptor.
    // Allocates 56 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetDeviceDescriptor SetDeviceDescriptor(zx::unowned_channel _client_end, DeviceDescriptor desc);

    // Sets the device's USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetDeviceDescriptor SetDeviceDescriptor(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer);

    // Sets the device's USB device descriptor.
    static zx_status_t SetDeviceDescriptor_Deprecated(zx::unowned_channel _client_end, DeviceDescriptor desc, int32_t* out_status);

    // Sets the device's USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<SetDeviceDescriptorResponse> SetDeviceDescriptor_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, DeviceDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Sets a string descriptor a string in the USB device descriptor.
    // Allocates 184 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::AllocStringDesc AllocStringDesc(zx::unowned_channel _client_end, ::fidl::StringView name);

    // Sets a string descriptor a string in the USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::AllocStringDesc AllocStringDesc(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer);

    // Sets a string descriptor a string in the USB device descriptor.
    static zx_status_t AllocStringDesc_Deprecated(zx::unowned_channel _client_end, ::fidl::StringView name, int32_t* out_status, uint8_t* out_index);

    // Sets a string descriptor a string in the USB device descriptor.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<AllocStringDescResponse> AllocStringDesc_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView name, ::fidl::BytePart _response_buffer, int32_t* out_status, uint8_t* out_index);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::AddFunction AddFunction(zx::unowned_channel _client_end, FunctionDescriptor desc);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::AddFunction AddFunction(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    static zx_status_t AddFunction_Deprecated(zx::unowned_channel _client_end, FunctionDescriptor desc, int32_t* out_status);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<AddFunctionResponse> AddFunction_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, FunctionDescriptor desc, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Tells the device to create child devices for the configuration's interfaces.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::BindFunctions BindFunctions(zx::unowned_channel _client_end);

    // Tells the device to create child devices for the configuration's interfaces.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::BindFunctions BindFunctions(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Tells the device to create child devices for the configuration's interfaces.
    static zx_status_t BindFunctions_Deprecated(zx::unowned_channel _client_end, int32_t* out_status);

    // Tells the device to create child devices for the configuration's interfaces.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<BindFunctionsResponse> BindFunctions_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::ClearFunctions ClearFunctions(zx::unowned_channel _client_end);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::ClearFunctions ClearFunctions(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    static zx_status_t ClearFunctions_Deprecated(zx::unowned_channel _client_end, int32_t* out_status);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ClearFunctionsResponse> ClearFunctions_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Returns the current USB mode.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::GetMode GetMode(zx::unowned_channel _client_end);

    // Returns the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::GetMode GetMode(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Returns the current USB mode.
    static zx_status_t GetMode_Deprecated(zx::unowned_channel _client_end, int32_t* out_status, uint32_t* out_mode);

    // Returns the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetModeResponse> GetMode_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, uint32_t* out_mode);

    // Sets the current USB mode.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetMode SetMode(zx::unowned_channel _client_end, uint32_t mode);

    // Sets the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetMode SetMode(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer);

    // Sets the current USB mode.
    static zx_status_t SetMode_Deprecated(zx::unowned_channel _client_end, uint32_t mode, int32_t* out_status);

    // Sets the current USB mode.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<SetModeResponse> SetMode_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t mode, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Adds a state change listener that is invoked when a state change completes.
    // Allocates 24 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetStateChangeListener SetStateChangeListener(zx::unowned_channel _client_end, ::zx::channel listener);

    // Adds a state change listener that is invoked when a state change completes.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetStateChangeListener SetStateChangeListener(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel listener);

    // Adds a state change listener that is invoked when a state change completes.
    static zx_status_t SetStateChangeListener_Deprecated(zx::unowned_channel _client_end, ::zx::channel listener);

    // Adds a state change listener that is invoked when a state change completes.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static zx_status_t SetStateChangeListener_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel listener);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Sets the device's USB device descriptor.
    static ::fidl::DecodeResult<SetDeviceDescriptorResponse> SetDeviceDescriptor(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetDeviceDescriptorRequest> params, ::fidl::BytePart response_buffer);

    // Sets a string descriptor a string in the USB device descriptor.
    static ::fidl::DecodeResult<AllocStringDescResponse> AllocStringDesc(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AllocStringDescRequest> params, ::fidl::BytePart response_buffer);

    // Adds a new function to the USB current configuration.
    // Must be called before BindFunctions or after ClearFunctions.
    static ::fidl::DecodeResult<AddFunctionResponse> AddFunction(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AddFunctionRequest> params, ::fidl::BytePart response_buffer);

    // Tells the device to create child devices for the configuration's interfaces.
    static ::fidl::DecodeResult<BindFunctionsResponse> BindFunctions(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Tells the device to remove the child devices for the configuration's interfaces
    // and reset the list of functions to empty.
    static ::fidl::DecodeResult<ClearFunctionsResponse> ClearFunctions(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Returns the current USB mode.
    static ::fidl::DecodeResult<GetModeResponse> GetMode(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Sets the current USB mode.
    static ::fidl::DecodeResult<SetModeResponse> SetMode(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetModeRequest> params, ::fidl::BytePart response_buffer);

    // Adds a state change listener that is invoked when a state change completes.
    static ::fidl::internal::StatusAndError SetStateChangeListener(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetStateChangeListenerRequest> params);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Device;
    using _Base = ::fidl::CompleterBase;

    class SetDeviceDescriptorCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetDeviceDescriptorResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetDeviceDescriptorCompleter = ::fidl::Completer<SetDeviceDescriptorCompleterBase>;

    virtual void SetDeviceDescriptor(DeviceDescriptor desc, SetDeviceDescriptorCompleter::Sync _completer) = 0;

    class AllocStringDescCompleterBase : public _Base {
     public:
      void Reply(int32_t status, uint8_t index);
      void Reply(::fidl::BytePart _buffer, int32_t status, uint8_t index);
      void Reply(::fidl::DecodedMessage<AllocStringDescResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using AllocStringDescCompleter = ::fidl::Completer<AllocStringDescCompleterBase>;

    virtual void AllocStringDesc(::fidl::StringView name, AllocStringDescCompleter::Sync _completer) = 0;

    class AddFunctionCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<AddFunctionResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using AddFunctionCompleter = ::fidl::Completer<AddFunctionCompleterBase>;

    virtual void AddFunction(FunctionDescriptor desc, AddFunctionCompleter::Sync _completer) = 0;

    class BindFunctionsCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<BindFunctionsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using BindFunctionsCompleter = ::fidl::Completer<BindFunctionsCompleterBase>;

    virtual void BindFunctions(BindFunctionsCompleter::Sync _completer) = 0;

    class ClearFunctionsCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<ClearFunctionsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ClearFunctionsCompleter = ::fidl::Completer<ClearFunctionsCompleterBase>;

    virtual void ClearFunctions(ClearFunctionsCompleter::Sync _completer) = 0;

    class GetModeCompleterBase : public _Base {
     public:
      void Reply(int32_t status, uint32_t mode);
      void Reply(::fidl::BytePart _buffer, int32_t status, uint32_t mode);
      void Reply(::fidl::DecodedMessage<GetModeResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetModeCompleter = ::fidl::Completer<GetModeCompleterBase>;

    virtual void GetMode(GetModeCompleter::Sync _completer) = 0;

    class SetModeCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetModeResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetModeCompleter = ::fidl::Completer<SetModeCompleterBase>;

    virtual void SetMode(uint32_t mode, SetModeCompleter::Sync _completer) = 0;

    using SetStateChangeListenerCompleter = ::fidl::Completer<>;

    virtual void SetStateChangeListener(::zx::channel listener, SetStateChangeListenerCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace peripheral
}  // namespace usb
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::FunctionDescriptor> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::hardware::usb::peripheral::FunctionDescriptor>);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::FunctionDescriptor, interface_class) == 0);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::FunctionDescriptor, interface_subclass) == 1);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::FunctionDescriptor, interface_protocol) == 2);
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::FunctionDescriptor) == ::llcpp::fuchsia::hardware::usb::peripheral::FunctionDescriptor::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor>);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, bcdUSB) == 0);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, bDeviceClass) == 2);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, bDeviceSubClass) == 3);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, bDeviceProtocol) == 4);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, bMaxPacketSize0) == 5);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, idVendor) == 6);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, idProduct) == 8);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, bcdDevice) == 10);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, iManufacturer) == 12);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, iProduct) == 13);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, iSerialNumber) == 14);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor, bNumConfigurations) == 15);
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor) == ::llcpp::fuchsia::hardware::usb::peripheral::DeviceDescriptor::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorRequest)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorRequest, desc) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorResponse)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetDeviceDescriptorResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescRequest)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescRequest, name) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescResponse)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AllocStringDescResponse, index) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionRequest)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionRequest, desc) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionResponse)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::AddFunctionResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::BindFunctionsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::BindFunctionsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::BindFunctionsResponse)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::BindFunctionsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::BindFunctionsResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::ClearFunctionsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::ClearFunctionsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::ClearFunctionsResponse)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::ClearFunctionsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::ClearFunctionsResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::GetModeResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::GetModeResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::GetModeResponse)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::GetModeResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::GetModeResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::GetModeResponse, mode) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeRequest)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeRequest, mode) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeResponse)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetModeResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetStateChangeListenerRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::usb::peripheral::Device::SetStateChangeListenerRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetStateChangeListenerRequest)
    == ::llcpp::fuchsia::hardware::usb::peripheral::Device::SetStateChangeListenerRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::usb::peripheral::Device::SetStateChangeListenerRequest, listener) == 16);

}  // namespace fidl
