// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

#include <fuchsia/hardware/block/llcpp/fidl.h>
#include <fuchsia/io/llcpp/fidl.h>
#include <fuchsia/mem/llcpp/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace paver {

struct ReadInfo;
struct ReadResult;
class PayloadStream;
enum class ConfigurationStatus : uint32_t {
  HEALTHY = 1u,
  PENDING = 2u,
  UNBOOTABLE = 3u,
};


struct Paver_QueryConfigurationStatus_Response;
struct Paver_QueryConfigurationStatus_Result;
enum class Configuration : uint32_t {
  A = 1u,
  B = 2u,
  RECOVERY = 3u,
};


struct Paver_QueryActiveConfiguration_Response;
struct Paver_QueryActiveConfiguration_Result;
enum class Asset : uint32_t {
  KERNEL = 1u,
  VERIFIED_BOOT_METADATA = 2u,
};


struct Paver_ReadAsset_Response;
struct Paver_ReadAsset_Result;
class Paver;



struct ReadInfo {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  // Offset into VMO where read data starts.
  uint64_t offset = {};

  // Size of read data.
  uint64_t size = {};
};

extern "C" const fidl_type_t fuchsia_paver_ReadResultTable;

struct ReadResult {
  enum class Tag : fidl_union_tag_t {
    kErr = 0,
    kEof = 1,
    kInfo = 2,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  ReadResult();
  ~ReadResult();

  ReadResult(ReadResult&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  ReadResult& operator=(ReadResult&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_err() const { return tag_ == Tag::kErr; }

  static ReadResult WithErr(int32_t&& val) {
    ReadResult result;
    result.set_err(std::move(val));
    return result;
  }

  // Error encountered while reading data.
  int32_t& mutable_err();

  // Error encountered while reading data.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  // Error encountered while reading data.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  // Error encountered while reading data.
  int32_t const & err() const { return err_; }

  bool is_eof() const { return tag_ == Tag::kEof; }

  static ReadResult WithEof(bool&& val) {
    ReadResult result;
    result.set_eof(std::move(val));
    return result;
  }

  // End of file reached.
  bool& mutable_eof();

  // End of file reached.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, bool>::value && std::is_copy_assignable<T>::value>
  set_eof(const T& v) {
    mutable_eof() = v;
  }

  // End of file reached.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, bool>::value && std::is_move_assignable<T>::value>
  set_eof(T&& v) {
    mutable_eof() = std::move(v);
  }

  // End of file reached.
  bool const & eof() const { return eof_; }

  bool is_info() const { return tag_ == Tag::kInfo; }

  static ReadResult WithInfo(::llcpp::fuchsia::paver::ReadInfo&& val) {
    ReadResult result;
    result.set_info(std::move(val));
    return result;
  }

  // Information about location of successfully read data within pre-registered VMO.
  ::llcpp::fuchsia::paver::ReadInfo& mutable_info();

  // Information about location of successfully read data within pre-registered VMO.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::ReadInfo>::value && std::is_copy_assignable<T>::value>
  set_info(const T& v) {
    mutable_info() = v;
  }

  // Information about location of successfully read data within pre-registered VMO.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::ReadInfo>::value && std::is_move_assignable<T>::value>
  set_info(T&& v) {
    mutable_info() = std::move(v);
  }

  // Information about location of successfully read data within pre-registered VMO.
  ::llcpp::fuchsia::paver::ReadInfo const & info() const { return info_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &fuchsia_paver_ReadResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(ReadResult&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    int32_t err_;
    bool eof_;
    ::llcpp::fuchsia::paver::ReadInfo info_;
  };
};

extern "C" const fidl_type_t fuchsia_paver_PayloadStreamRegisterVmoRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PayloadStreamRegisterVmoResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PayloadStreamReadDataResponseTable;

// Protocol for streaming the FVM payload.
class PayloadStream final {
  PayloadStream() = delete;
 public:

  struct RegisterVmoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PayloadStreamRegisterVmoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct RegisterVmoRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::vmo vmo;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PayloadStreamRegisterVmoRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = RegisterVmoResponse;
  };

  struct ReadDataResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::ReadResult result;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PayloadStreamReadDataResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using ReadDataRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class RegisterVmo_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      RegisterVmo_Impl(zx::unowned_channel _client_end, ::zx::vmo vmo);
      ~RegisterVmo_Impl() = default;
      RegisterVmo_Impl(RegisterVmo_Impl&& other) = default;
      RegisterVmo_Impl& operator=(RegisterVmo_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ReadData_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      ReadData_Impl(zx::unowned_channel _client_end);
      ~ReadData_Impl() = default;
      ReadData_Impl(ReadData_Impl&& other) = default;
      ReadData_Impl& operator=(ReadData_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using RegisterVmo = RegisterVmo_Impl<RegisterVmoResponse>;
    using ReadData = ReadData_Impl<ReadDataResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class RegisterVmo_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      RegisterVmo_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer);
      ~RegisterVmo_Impl() = default;
      RegisterVmo_Impl(RegisterVmo_Impl&& other) = default;
      RegisterVmo_Impl& operator=(RegisterVmo_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ReadData_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      ReadData_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~ReadData_Impl() = default;
      ReadData_Impl(ReadData_Impl&& other) = default;
      ReadData_Impl& operator=(ReadData_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using RegisterVmo = RegisterVmo_Impl<RegisterVmoResponse>;
    using ReadData = ReadData_Impl<ReadDataResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Registers a VMO to stream into.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::RegisterVmo RegisterVmo(::zx::vmo vmo);

    // Registers a VMO to stream into.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::RegisterVmo RegisterVmo(::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer);

    // Reads data into the pre-registered vmo.
    // Allocates 56 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::ReadData ReadData();

    // Reads data into the pre-registered vmo.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::ReadData ReadData(::fidl::BytePart _response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Registers a VMO to stream into.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::RegisterVmo RegisterVmo(zx::unowned_channel _client_end, ::zx::vmo vmo);

    // Registers a VMO to stream into.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::RegisterVmo RegisterVmo(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer);

    // Reads data into the pre-registered vmo.
    // Allocates 56 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::ReadData ReadData(zx::unowned_channel _client_end);

    // Reads data into the pre-registered vmo.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::ReadData ReadData(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Registers a VMO to stream into.
    static ::fidl::DecodeResult<RegisterVmoResponse> RegisterVmo(zx::unowned_channel _client_end, ::fidl::DecodedMessage<RegisterVmoRequest> params, ::fidl::BytePart response_buffer);

    // Reads data into the pre-registered vmo.
    static ::fidl::DecodeResult<ReadDataResponse> ReadData(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = PayloadStream;
    using _Base = ::fidl::CompleterBase;

    class RegisterVmoCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<RegisterVmoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using RegisterVmoCompleter = ::fidl::Completer<RegisterVmoCompleterBase>;

    virtual void RegisterVmo(::zx::vmo vmo, RegisterVmoCompleter::Sync _completer) = 0;

    class ReadDataCompleterBase : public _Base {
     public:
      void Reply(::llcpp::fuchsia::paver::ReadResult result);
      void Reply(::fidl::BytePart _buffer, ::llcpp::fuchsia::paver::ReadResult result);
      void Reply(::fidl::DecodedMessage<ReadDataResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ReadDataCompleter = ::fidl::Completer<ReadDataCompleterBase>;

    virtual void ReadData(ReadDataCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};



struct Paver_QueryConfigurationStatus_Response {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  ::llcpp::fuchsia::paver::ConfigurationStatus status = {};
};

extern "C" const fidl_type_t fuchsia_paver_Paver_QueryConfigurationStatus_ResultTable;

struct Paver_QueryConfigurationStatus_Result {
  enum class Tag : fidl_union_tag_t {
    kResponse = 0,
    kErr = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  Paver_QueryConfigurationStatus_Result();
  ~Paver_QueryConfigurationStatus_Result();

  Paver_QueryConfigurationStatus_Result(Paver_QueryConfigurationStatus_Result&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  Paver_QueryConfigurationStatus_Result& operator=(Paver_QueryConfigurationStatus_Result&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_response() const { return tag_ == Tag::kResponse; }

  static Paver_QueryConfigurationStatus_Result WithResponse(::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response&& val) {
    Paver_QueryConfigurationStatus_Result result;
    result.set_response(std::move(val));
    return result;
  }

  ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response& mutable_response();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response>::value && std::is_copy_assignable<T>::value>
  set_response(const T& v) {
    mutable_response() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response>::value && std::is_move_assignable<T>::value>
  set_response(T&& v) {
    mutable_response() = std::move(v);
  }

  ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response const & response() const { return response_; }

  bool is_err() const { return tag_ == Tag::kErr; }

  static Paver_QueryConfigurationStatus_Result WithErr(int32_t&& val) {
    Paver_QueryConfigurationStatus_Result result;
    result.set_err(std::move(val));
    return result;
  }

  int32_t& mutable_err();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  int32_t const & err() const { return err_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &fuchsia_paver_Paver_QueryConfigurationStatus_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(Paver_QueryConfigurationStatus_Result&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response response_;
    int32_t err_;
  };
};



struct Paver_QueryActiveConfiguration_Response {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  ::llcpp::fuchsia::paver::Configuration configuration = {};
};

extern "C" const fidl_type_t fuchsia_paver_Paver_QueryActiveConfiguration_ResultTable;

struct Paver_QueryActiveConfiguration_Result {
  enum class Tag : fidl_union_tag_t {
    kResponse = 0,
    kErr = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  Paver_QueryActiveConfiguration_Result();
  ~Paver_QueryActiveConfiguration_Result();

  Paver_QueryActiveConfiguration_Result(Paver_QueryActiveConfiguration_Result&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  Paver_QueryActiveConfiguration_Result& operator=(Paver_QueryActiveConfiguration_Result&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_response() const { return tag_ == Tag::kResponse; }

  static Paver_QueryActiveConfiguration_Result WithResponse(::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response&& val) {
    Paver_QueryActiveConfiguration_Result result;
    result.set_response(std::move(val));
    return result;
  }

  ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response& mutable_response();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response>::value && std::is_copy_assignable<T>::value>
  set_response(const T& v) {
    mutable_response() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response>::value && std::is_move_assignable<T>::value>
  set_response(T&& v) {
    mutable_response() = std::move(v);
  }

  ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response const & response() const { return response_; }

  bool is_err() const { return tag_ == Tag::kErr; }

  static Paver_QueryActiveConfiguration_Result WithErr(int32_t&& val) {
    Paver_QueryActiveConfiguration_Result result;
    result.set_err(std::move(val));
    return result;
  }

  int32_t& mutable_err();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  int32_t const & err() const { return err_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &fuchsia_paver_Paver_QueryActiveConfiguration_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(Paver_QueryActiveConfiguration_Result&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response response_;
    int32_t err_;
  };
};

extern "C" const fidl_type_t fuchsia_paver_Paver_ReadAsset_ResponseTable;

struct Paver_ReadAsset_Response {
  static constexpr const fidl_type_t* Type = &fuchsia_paver_Paver_ReadAsset_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  ::llcpp::fuchsia::mem::Buffer asset = {};
};

extern "C" const fidl_type_t fuchsia_paver_Paver_ReadAsset_ResultTable;

struct Paver_ReadAsset_Result {
  enum class Tag : fidl_union_tag_t {
    kResponse = 0,
    kErr = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  Paver_ReadAsset_Result();
  ~Paver_ReadAsset_Result();

  Paver_ReadAsset_Result(Paver_ReadAsset_Result&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  Paver_ReadAsset_Result& operator=(Paver_ReadAsset_Result&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_response() const { return tag_ == Tag::kResponse; }

  static Paver_ReadAsset_Result WithResponse(::llcpp::fuchsia::paver::Paver_ReadAsset_Response&& val) {
    Paver_ReadAsset_Result result;
    result.set_response(std::move(val));
    return result;
  }

  ::llcpp::fuchsia::paver::Paver_ReadAsset_Response& mutable_response();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::Paver_ReadAsset_Response>::value && std::is_copy_assignable<T>::value>
  set_response(const T& v) {
    mutable_response() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::fuchsia::paver::Paver_ReadAsset_Response>::value && std::is_move_assignable<T>::value>
  set_response(T&& v) {
    mutable_response() = std::move(v);
  }

  ::llcpp::fuchsia::paver::Paver_ReadAsset_Response const & response() const { return response_; }

  bool is_err() const { return tag_ == Tag::kErr; }

  static Paver_ReadAsset_Result WithErr(int32_t&& val) {
    Paver_ReadAsset_Result result;
    result.set_err(std::move(val));
    return result;
  }

  int32_t& mutable_err();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_err(const T& v) {
    mutable_err() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_err(T&& v) {
    mutable_err() = std::move(v);
  }

  int32_t const & err() const { return err_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &fuchsia_paver_Paver_ReadAsset_ResultTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

 private:
  void Destroy();
  void MoveImpl_(Paver_ReadAsset_Result&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    ::llcpp::fuchsia::paver::Paver_ReadAsset_Response response_;
    int32_t err_;
  };
};

extern "C" const fidl_type_t fuchsia_paver_PaverInitializeAbrResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverQueryConfigurationStatusRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverSetConfigurationActiveRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverSetConfigurationActiveResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverSetConfigurationUnbootableRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverSetConfigurationUnbootableResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverSetActiveConfigurationHealthyResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverReadAssetResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteAssetRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteAssetResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteVolumesRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteVolumesResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteBootloaderRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteBootloaderResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteDataFileRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWriteDataFileResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWipeVolumesRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWipeVolumesResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverInitializePartitionTablesRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverInitializePartitionTablesResponseTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWipePartitionTablesRequestTable;
extern "C" const fidl_type_t fuchsia_paver_PaverWipePartitionTablesResponseTable;

// Protocol for managing boot partitions.
//
// Most of the protocol methods rely on auto-discovery of the storage device
// which will be paved. If the device has no pre-initialized storage devices or
// multiple, the methods will fail. For devices with dynamic partitions (i.e. GPT),
// |InitializePartitionTables| and |WipeVolumes| can be used to control which device is
// paved to.
class Paver final {
  Paver() = delete;
 public:
  static constexpr char Name[] = "fuchsia.paver.Paver";

  struct InitializeAbrResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverInitializeAbrResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using InitializeAbrRequest = ::fidl::AnyZeroArgMessage;

  struct QueryActiveConfigurationResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Result result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using QueryActiveConfigurationRequest = ::fidl::AnyZeroArgMessage;

  struct QueryConfigurationStatusResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Result result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct QueryConfigurationStatusRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Configuration configuration;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverQueryConfigurationStatusRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = QueryConfigurationStatusResponse;
  };

  struct SetConfigurationActiveResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverSetConfigurationActiveResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct SetConfigurationActiveRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Configuration configuration;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverSetConfigurationActiveRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = SetConfigurationActiveResponse;
  };

  struct SetConfigurationUnbootableResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverSetConfigurationUnbootableResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct SetConfigurationUnbootableRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Configuration configuration;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverSetConfigurationUnbootableRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = SetConfigurationUnbootableResponse;
  };

  struct SetActiveConfigurationHealthyResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverSetActiveConfigurationHealthyResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using SetActiveConfigurationHealthyRequest = ::fidl::AnyZeroArgMessage;

  struct ReadAssetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Paver_ReadAsset_Result result;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverReadAssetResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct ReadAssetRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Configuration configuration;
    ::llcpp::fuchsia::paver::Asset asset;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ReadAssetResponse;
  };

  struct WriteAssetResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteAssetResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct WriteAssetRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::paver::Configuration configuration;
    ::llcpp::fuchsia::paver::Asset asset;
    ::llcpp::fuchsia::mem::Buffer payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteAssetRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = WriteAssetResponse;
  };

  struct WriteVolumesResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteVolumesResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct WriteVolumesRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteVolumesRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = WriteVolumesResponse;
  };

  struct WriteBootloaderResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteBootloaderResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct WriteBootloaderRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::mem::Buffer payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteBootloaderRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = WriteBootloaderResponse;
  };

  struct WriteDataFileResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteDataFileResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct WriteDataFileRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView filename;
    ::llcpp::fuchsia::mem::Buffer payload;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWriteDataFileRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 48;
    static constexpr uint32_t MaxOutOfLine = 4096;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = WriteDataFileResponse;
  };

  struct WipeVolumesResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWipeVolumesResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct WipeVolumesRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel block_device;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWipeVolumesRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = WipeVolumesResponse;
  };

  struct InitializePartitionTablesResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverInitializePartitionTablesResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct InitializePartitionTablesRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel gpt_block_device;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverInitializePartitionTablesRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = InitializePartitionTablesResponse;
  };

  struct WipePartitionTablesResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWipePartitionTablesResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct WipePartitionTablesRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel block_device;

    static constexpr const fidl_type_t* Type = &fuchsia_paver_PaverWipePartitionTablesRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = WipePartitionTablesResponse;
  };


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class InitializeAbr_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      InitializeAbr_Impl(zx::unowned_channel _client_end);
      ~InitializeAbr_Impl() = default;
      InitializeAbr_Impl(InitializeAbr_Impl&& other) = default;
      InitializeAbr_Impl& operator=(InitializeAbr_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class QueryActiveConfiguration_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      QueryActiveConfiguration_Impl(zx::unowned_channel _client_end);
      ~QueryActiveConfiguration_Impl() = default;
      QueryActiveConfiguration_Impl(QueryActiveConfiguration_Impl&& other) = default;
      QueryActiveConfiguration_Impl& operator=(QueryActiveConfiguration_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class QueryConfigurationStatus_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      QueryConfigurationStatus_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration);
      ~QueryConfigurationStatus_Impl() = default;
      QueryConfigurationStatus_Impl(QueryConfigurationStatus_Impl&& other) = default;
      QueryConfigurationStatus_Impl& operator=(QueryConfigurationStatus_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetConfigurationActive_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      SetConfigurationActive_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration);
      ~SetConfigurationActive_Impl() = default;
      SetConfigurationActive_Impl(SetConfigurationActive_Impl&& other) = default;
      SetConfigurationActive_Impl& operator=(SetConfigurationActive_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetConfigurationUnbootable_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      SetConfigurationUnbootable_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration);
      ~SetConfigurationUnbootable_Impl() = default;
      SetConfigurationUnbootable_Impl(SetConfigurationUnbootable_Impl&& other) = default;
      SetConfigurationUnbootable_Impl& operator=(SetConfigurationUnbootable_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetActiveConfigurationHealthy_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      SetActiveConfigurationHealthy_Impl(zx::unowned_channel _client_end);
      ~SetActiveConfigurationHealthy_Impl() = default;
      SetActiveConfigurationHealthy_Impl(SetActiveConfigurationHealthy_Impl&& other) = default;
      SetActiveConfigurationHealthy_Impl& operator=(SetActiveConfigurationHealthy_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ReadAsset_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      ReadAsset_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset);
      ~ReadAsset_Impl() = default;
      ReadAsset_Impl(ReadAsset_Impl&& other) = default;
      ReadAsset_Impl& operator=(ReadAsset_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteAsset_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      WriteAsset_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::llcpp::fuchsia::mem::Buffer payload);
      ~WriteAsset_Impl() = default;
      WriteAsset_Impl(WriteAsset_Impl&& other) = default;
      WriteAsset_Impl& operator=(WriteAsset_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteVolumes_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      WriteVolumes_Impl(zx::unowned_channel _client_end, ::zx::channel payload);
      ~WriteVolumes_Impl() = default;
      WriteVolumes_Impl(WriteVolumes_Impl&& other) = default;
      WriteVolumes_Impl& operator=(WriteVolumes_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteBootloader_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      WriteBootloader_Impl(zx::unowned_channel _client_end, ::llcpp::fuchsia::mem::Buffer payload);
      ~WriteBootloader_Impl() = default;
      WriteBootloader_Impl(WriteBootloader_Impl&& other) = default;
      WriteBootloader_Impl& operator=(WriteBootloader_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteDataFile_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      WriteDataFile_Impl(zx::unowned_channel _client_end, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload);
      ~WriteDataFile_Impl() = default;
      WriteDataFile_Impl(WriteDataFile_Impl&& other) = default;
      WriteDataFile_Impl& operator=(WriteDataFile_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WipeVolumes_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      WipeVolumes_Impl(zx::unowned_channel _client_end, ::zx::channel block_device);
      ~WipeVolumes_Impl() = default;
      WipeVolumes_Impl(WipeVolumes_Impl&& other) = default;
      WipeVolumes_Impl& operator=(WipeVolumes_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class InitializePartitionTables_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      InitializePartitionTables_Impl(zx::unowned_channel _client_end, ::zx::channel gpt_block_device);
      ~InitializePartitionTables_Impl() = default;
      InitializePartitionTables_Impl(InitializePartitionTables_Impl&& other) = default;
      InitializePartitionTables_Impl& operator=(InitializePartitionTables_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WipePartitionTables_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      WipePartitionTables_Impl(zx::unowned_channel _client_end, ::zx::channel block_device);
      ~WipePartitionTables_Impl() = default;
      WipePartitionTables_Impl(WipePartitionTables_Impl&& other) = default;
      WipePartitionTables_Impl& operator=(WipePartitionTables_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using InitializeAbr = InitializeAbr_Impl<InitializeAbrResponse>;
    using QueryActiveConfiguration = QueryActiveConfiguration_Impl<QueryActiveConfigurationResponse>;
    using QueryConfigurationStatus = QueryConfigurationStatus_Impl<QueryConfigurationStatusResponse>;
    using SetConfigurationActive = SetConfigurationActive_Impl<SetConfigurationActiveResponse>;
    using SetConfigurationUnbootable = SetConfigurationUnbootable_Impl<SetConfigurationUnbootableResponse>;
    using SetActiveConfigurationHealthy = SetActiveConfigurationHealthy_Impl<SetActiveConfigurationHealthyResponse>;
    using ReadAsset = ReadAsset_Impl<ReadAssetResponse>;
    using WriteAsset = WriteAsset_Impl<WriteAssetResponse>;
    using WriteVolumes = WriteVolumes_Impl<WriteVolumesResponse>;
    using WriteBootloader = WriteBootloader_Impl<WriteBootloaderResponse>;
    using WriteDataFile = WriteDataFile_Impl<WriteDataFileResponse>;
    using WipeVolumes = WipeVolumes_Impl<WipeVolumesResponse>;
    using InitializePartitionTables = InitializePartitionTables_Impl<InitializePartitionTablesResponse>;
    using WipePartitionTables = WipePartitionTables_Impl<WipePartitionTablesResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class InitializeAbr_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      InitializeAbr_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~InitializeAbr_Impl() = default;
      InitializeAbr_Impl(InitializeAbr_Impl&& other) = default;
      InitializeAbr_Impl& operator=(InitializeAbr_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class QueryActiveConfiguration_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      QueryActiveConfiguration_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~QueryActiveConfiguration_Impl() = default;
      QueryActiveConfiguration_Impl(QueryActiveConfiguration_Impl&& other) = default;
      QueryActiveConfiguration_Impl& operator=(QueryActiveConfiguration_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class QueryConfigurationStatus_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      QueryConfigurationStatus_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);
      ~QueryConfigurationStatus_Impl() = default;
      QueryConfigurationStatus_Impl(QueryConfigurationStatus_Impl&& other) = default;
      QueryConfigurationStatus_Impl& operator=(QueryConfigurationStatus_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetConfigurationActive_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      SetConfigurationActive_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);
      ~SetConfigurationActive_Impl() = default;
      SetConfigurationActive_Impl(SetConfigurationActive_Impl&& other) = default;
      SetConfigurationActive_Impl& operator=(SetConfigurationActive_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetConfigurationUnbootable_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      SetConfigurationUnbootable_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);
      ~SetConfigurationUnbootable_Impl() = default;
      SetConfigurationUnbootable_Impl(SetConfigurationUnbootable_Impl&& other) = default;
      SetConfigurationUnbootable_Impl& operator=(SetConfigurationUnbootable_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetActiveConfigurationHealthy_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      SetActiveConfigurationHealthy_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~SetActiveConfigurationHealthy_Impl() = default;
      SetActiveConfigurationHealthy_Impl(SetActiveConfigurationHealthy_Impl&& other) = default;
      SetActiveConfigurationHealthy_Impl& operator=(SetActiveConfigurationHealthy_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class ReadAsset_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      ReadAsset_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::fidl::BytePart _response_buffer);
      ~ReadAsset_Impl() = default;
      ReadAsset_Impl(ReadAsset_Impl&& other) = default;
      ReadAsset_Impl& operator=(ReadAsset_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteAsset_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      WriteAsset_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);
      ~WriteAsset_Impl() = default;
      WriteAsset_Impl(WriteAsset_Impl&& other) = default;
      WriteAsset_Impl& operator=(WriteAsset_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteVolumes_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      WriteVolumes_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel payload, ::fidl::BytePart _response_buffer);
      ~WriteVolumes_Impl() = default;
      WriteVolumes_Impl(WriteVolumes_Impl&& other) = default;
      WriteVolumes_Impl& operator=(WriteVolumes_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteBootloader_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      WriteBootloader_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);
      ~WriteBootloader_Impl() = default;
      WriteBootloader_Impl(WriteBootloader_Impl&& other) = default;
      WriteBootloader_Impl& operator=(WriteBootloader_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WriteDataFile_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      WriteDataFile_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);
      ~WriteDataFile_Impl() = default;
      WriteDataFile_Impl(WriteDataFile_Impl&& other) = default;
      WriteDataFile_Impl& operator=(WriteDataFile_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WipeVolumes_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      WipeVolumes_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel block_device, ::fidl::BytePart _response_buffer);
      ~WipeVolumes_Impl() = default;
      WipeVolumes_Impl(WipeVolumes_Impl&& other) = default;
      WipeVolumes_Impl& operator=(WipeVolumes_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class InitializePartitionTables_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      InitializePartitionTables_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel gpt_block_device, ::fidl::BytePart _response_buffer);
      ~InitializePartitionTables_Impl() = default;
      InitializePartitionTables_Impl(InitializePartitionTables_Impl&& other) = default;
      InitializePartitionTables_Impl& operator=(InitializePartitionTables_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class WipePartitionTables_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      WipePartitionTables_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel block_device, ::fidl::BytePart _response_buffer);
      ~WipePartitionTables_Impl() = default;
      WipePartitionTables_Impl(WipePartitionTables_Impl&& other) = default;
      WipePartitionTables_Impl& operator=(WipePartitionTables_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using InitializeAbr = InitializeAbr_Impl<InitializeAbrResponse>;
    using QueryActiveConfiguration = QueryActiveConfiguration_Impl<QueryActiveConfigurationResponse>;
    using QueryConfigurationStatus = QueryConfigurationStatus_Impl<QueryConfigurationStatusResponse>;
    using SetConfigurationActive = SetConfigurationActive_Impl<SetConfigurationActiveResponse>;
    using SetConfigurationUnbootable = SetConfigurationUnbootable_Impl<SetConfigurationUnbootableResponse>;
    using SetActiveConfigurationHealthy = SetActiveConfigurationHealthy_Impl<SetActiveConfigurationHealthyResponse>;
    using ReadAsset = ReadAsset_Impl<ReadAssetResponse>;
    using WriteAsset = WriteAsset_Impl<WriteAssetResponse>;
    using WriteVolumes = WriteVolumes_Impl<WriteVolumesResponse>;
    using WriteBootloader = WriteBootloader_Impl<WriteBootloaderResponse>;
    using WriteDataFile = WriteDataFile_Impl<WriteDataFileResponse>;
    using WipeVolumes = WipeVolumes_Impl<WipeVolumesResponse>;
    using InitializePartitionTables = InitializePartitionTables_Impl<InitializePartitionTablesResponse>;
    using WipePartitionTables = WipePartitionTables_Impl<WipePartitionTablesResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Initializes ABR metadata. Should only be called to initialize ABR
    // metadata for the first time (i.e. it should not be called every boot),
    // or recover from corrupted ABR metadata.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::InitializeAbr InitializeAbr();

    // Initializes ABR metadata. Should only be called to initialize ABR
    // metadata for the first time (i.e. it should not be called every boot),
    // or recover from corrupted ABR metadata.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::InitializeAbr InitializeAbr(::fidl::BytePart _response_buffer);

    // Queries active configuration.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::QueryActiveConfiguration QueryActiveConfiguration();

    // Queries active configuration.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::QueryActiveConfiguration QueryActiveConfiguration(::fidl::BytePart _response_buffer);

    // Queries status of |configuration|.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::QueryConfigurationStatus QueryConfigurationStatus(::llcpp::fuchsia::paver::Configuration configuration);

    // Queries status of |configuration|.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::QueryConfigurationStatus QueryConfigurationStatus(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetConfigurationActive SetConfigurationActive(::llcpp::fuchsia::paver::Configuration configuration);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetConfigurationActive SetConfigurationActive(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);

    // Updates persistent metadata identifying whether |configuration| is bootable.
    // Should only be called in the following situations:
    // * Before `KERNEL` as well as optional `VERIFIED_BOOT_METADATA` assets for specified
    //   |configuration| are written.
    // * After successfully booting from a new configuration and marking it healthy. This method
    //   would be then called on the old configuration.
    // * After "successfully" booting from a new configuration, but encountering an unrecoverable
    //   error during health check. This method would be then called on the new configuration.
    //
    // If the configuration is unbootable, no action is taken.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetConfigurationUnbootable SetConfigurationUnbootable(::llcpp::fuchsia::paver::Configuration configuration);

    // Updates persistent metadata identifying whether |configuration| is bootable.
    // Should only be called in the following situations:
    // * Before `KERNEL` as well as optional `VERIFIED_BOOT_METADATA` assets for specified
    //   |configuration| are written.
    // * After successfully booting from a new configuration and marking it healthy. This method
    //   would be then called on the old configuration.
    // * After "successfully" booting from a new configuration, but encountering an unrecoverable
    //   error during health check. This method would be then called on the new configuration.
    //
    // If the configuration is unbootable, no action is taken.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetConfigurationUnbootable SetConfigurationUnbootable(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called. Will return error if active
    // configuration is currently unbootable.
    //
    // If the configuration is already marked healthy, no action is taken.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetActiveConfigurationHealthy SetActiveConfigurationHealthy();

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called. Will return error if active
    // configuration is currently unbootable.
    //
    // If the configuration is already marked healthy, no action is taken.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetActiveConfigurationHealthy SetActiveConfigurationHealthy(::fidl::BytePart _response_buffer);

    // Reads partition corresponding to |configuration| and |asset| into a
    // vmo and returns it.
    // Allocates 64 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::ReadAsset ReadAsset(::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset);

    // Reads partition corresponding to |configuration| and |asset| into a
    // vmo and returns it.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::ReadAsset ReadAsset(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::fidl::BytePart _response_buffer);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`. Will zero out rest of the partition if `payload` is smaller
    // than the size of the partition being written.
    //
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `configuration` specifies active configuration.
    // Allocates 64 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::WriteAsset WriteAsset(::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::llcpp::fuchsia::mem::Buffer payload);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`. Will zero out rest of the partition if `payload` is smaller
    // than the size of the partition being written.
    //
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `configuration` specifies active configuration.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::WriteAsset WriteAsset(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::WriteVolumes WriteVolumes(::zx::channel payload);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::WriteVolumes WriteVolumes(::fidl::BytePart _request_buffer, ::zx::channel payload, ::fidl::BytePart _response_buffer);

    // Writes bootloader partition with data from `payload`.
    //
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`.
    // Allocates 56 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::WriteBootloader WriteBootloader(::llcpp::fuchsia::mem::Buffer payload);

    // Writes bootloader partition with data from `payload`.
    //
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::WriteBootloader WriteBootloader(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Allocates 24 bytes of response buffer on the stack. Request is heap-allocated.
    ResultOf::WriteDataFile WriteDataFile(::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::WriteDataFile WriteDataFile(::fidl::BytePart _request_buffer, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::WipeVolumes WipeVolumes(::zx::channel block_device);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::WipeVolumes WipeVolumes(::fidl::BytePart _request_buffer, ::zx::channel block_device, ::fidl::BytePart _response_buffer);

    // Initializes GPT on given block device and then adds an FVM partition.
    //
    // |gpt_block_device| specifies the block device to use. It assumed that channel
    // backing |gpt_block_device| also implements `fuchsia.io.Node` for now.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::InitializePartitionTables InitializePartitionTables(::zx::channel gpt_block_device);

    // Initializes GPT on given block device and then adds an FVM partition.
    //
    // |gpt_block_device| specifies the block device to use. It assumed that channel
    // backing |gpt_block_device| also implements `fuchsia.io.Node` for now.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::InitializePartitionTables InitializePartitionTables(::fidl::BytePart _request_buffer, ::zx::channel gpt_block_device, ::fidl::BytePart _response_buffer);

    // Wipes all entries from the partition table of the specified block device.
    // Currently only supported on devices with a GPT.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    //
    // *WARNING*: This API may destructively remove non-fuchsia maintained partitions from
    // the block device.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::WipePartitionTables WipePartitionTables(::zx::channel block_device);

    // Wipes all entries from the partition table of the specified block device.
    // Currently only supported on devices with a GPT.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    //
    // *WARNING*: This API may destructively remove non-fuchsia maintained partitions from
    // the block device.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::WipePartitionTables WipePartitionTables(::fidl::BytePart _request_buffer, ::zx::channel block_device, ::fidl::BytePart _response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Initializes ABR metadata. Should only be called to initialize ABR
    // metadata for the first time (i.e. it should not be called every boot),
    // or recover from corrupted ABR metadata.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::InitializeAbr InitializeAbr(zx::unowned_channel _client_end);

    // Initializes ABR metadata. Should only be called to initialize ABR
    // metadata for the first time (i.e. it should not be called every boot),
    // or recover from corrupted ABR metadata.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::InitializeAbr InitializeAbr(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Queries active configuration.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::QueryActiveConfiguration QueryActiveConfiguration(zx::unowned_channel _client_end);

    // Queries active configuration.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::QueryActiveConfiguration QueryActiveConfiguration(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Queries status of |configuration|.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::QueryConfigurationStatus QueryConfigurationStatus(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration);

    // Queries status of |configuration|.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::QueryConfigurationStatus QueryConfigurationStatus(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetConfigurationActive SetConfigurationActive(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetConfigurationActive SetConfigurationActive(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);

    // Updates persistent metadata identifying whether |configuration| is bootable.
    // Should only be called in the following situations:
    // * Before `KERNEL` as well as optional `VERIFIED_BOOT_METADATA` assets for specified
    //   |configuration| are written.
    // * After successfully booting from a new configuration and marking it healthy. This method
    //   would be then called on the old configuration.
    // * After "successfully" booting from a new configuration, but encountering an unrecoverable
    //   error during health check. This method would be then called on the new configuration.
    //
    // If the configuration is unbootable, no action is taken.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetConfigurationUnbootable SetConfigurationUnbootable(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration);

    // Updates persistent metadata identifying whether |configuration| is bootable.
    // Should only be called in the following situations:
    // * Before `KERNEL` as well as optional `VERIFIED_BOOT_METADATA` assets for specified
    //   |configuration| are written.
    // * After successfully booting from a new configuration and marking it healthy. This method
    //   would be then called on the old configuration.
    // * After "successfully" booting from a new configuration, but encountering an unrecoverable
    //   error during health check. This method would be then called on the new configuration.
    //
    // If the configuration is unbootable, no action is taken.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetConfigurationUnbootable SetConfigurationUnbootable(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::fidl::BytePart _response_buffer);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called. Will return error if active
    // configuration is currently unbootable.
    //
    // If the configuration is already marked healthy, no action is taken.
    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetActiveConfigurationHealthy SetActiveConfigurationHealthy(zx::unowned_channel _client_end);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called. Will return error if active
    // configuration is currently unbootable.
    //
    // If the configuration is already marked healthy, no action is taken.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetActiveConfigurationHealthy SetActiveConfigurationHealthy(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Reads partition corresponding to |configuration| and |asset| into a
    // vmo and returns it.
    // Allocates 64 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::ReadAsset ReadAsset(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset);

    // Reads partition corresponding to |configuration| and |asset| into a
    // vmo and returns it.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::ReadAsset ReadAsset(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::fidl::BytePart _response_buffer);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`. Will zero out rest of the partition if `payload` is smaller
    // than the size of the partition being written.
    //
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `configuration` specifies active configuration.
    // Allocates 64 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::WriteAsset WriteAsset(zx::unowned_channel _client_end, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::llcpp::fuchsia::mem::Buffer payload);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`. Will zero out rest of the partition if `payload` is smaller
    // than the size of the partition being written.
    //
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `configuration` specifies active configuration.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::WriteAsset WriteAsset(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::WriteVolumes WriteVolumes(zx::unowned_channel _client_end, ::zx::channel payload);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::WriteVolumes WriteVolumes(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel payload, ::fidl::BytePart _response_buffer);

    // Writes bootloader partition with data from `payload`.
    //
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`.
    // Allocates 56 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::WriteBootloader WriteBootloader(zx::unowned_channel _client_end, ::llcpp::fuchsia::mem::Buffer payload);

    // Writes bootloader partition with data from `payload`.
    //
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::WriteBootloader WriteBootloader(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Allocates 24 bytes of response buffer on the stack. Request is heap-allocated.
    static ResultOf::WriteDataFile WriteDataFile(zx::unowned_channel _client_end, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::WriteDataFile WriteDataFile(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, ::fidl::BytePart _response_buffer);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::WipeVolumes WipeVolumes(zx::unowned_channel _client_end, ::zx::channel block_device);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::WipeVolumes WipeVolumes(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel block_device, ::fidl::BytePart _response_buffer);

    // Initializes GPT on given block device and then adds an FVM partition.
    //
    // |gpt_block_device| specifies the block device to use. It assumed that channel
    // backing |gpt_block_device| also implements `fuchsia.io.Node` for now.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::InitializePartitionTables InitializePartitionTables(zx::unowned_channel _client_end, ::zx::channel gpt_block_device);

    // Initializes GPT on given block device and then adds an FVM partition.
    //
    // |gpt_block_device| specifies the block device to use. It assumed that channel
    // backing |gpt_block_device| also implements `fuchsia.io.Node` for now.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::InitializePartitionTables InitializePartitionTables(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel gpt_block_device, ::fidl::BytePart _response_buffer);

    // Wipes all entries from the partition table of the specified block device.
    // Currently only supported on devices with a GPT.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    //
    // *WARNING*: This API may destructively remove non-fuchsia maintained partitions from
    // the block device.
    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::WipePartitionTables WipePartitionTables(zx::unowned_channel _client_end, ::zx::channel block_device);

    // Wipes all entries from the partition table of the specified block device.
    // Currently only supported on devices with a GPT.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    //
    // *WARNING*: This API may destructively remove non-fuchsia maintained partitions from
    // the block device.
    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::WipePartitionTables WipePartitionTables(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel block_device, ::fidl::BytePart _response_buffer);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    // Initializes ABR metadata. Should only be called to initialize ABR
    // metadata for the first time (i.e. it should not be called every boot),
    // or recover from corrupted ABR metadata.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    static ::fidl::DecodeResult<InitializeAbrResponse> InitializeAbr(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Queries active configuration.
    //
    // Returns `ZX_ERR_NOT_SUPPORTED` if A/B partition scheme is not supported
    // and we always boot from configuration A.
    static ::fidl::DecodeResult<QueryActiveConfigurationResponse> QueryActiveConfiguration(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Queries status of |configuration|.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    static ::fidl::DecodeResult<QueryConfigurationStatusResponse> QueryConfigurationStatus(zx::unowned_channel _client_end, ::fidl::DecodedMessage<QueryConfigurationStatusRequest> params, ::fidl::BytePart response_buffer);

    // Updates persistent metadata identifying which configuration should be selected as 'primary'
    // for booting purposes. Should only be called after `KERNEL` as well as optional
    // `VERIFIED_BOOT_METADATA` assets for specified `configuration` were written successfully.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    static ::fidl::DecodeResult<SetConfigurationActiveResponse> SetConfigurationActive(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetConfigurationActiveRequest> params, ::fidl::BytePart response_buffer);

    // Updates persistent metadata identifying whether |configuration| is bootable.
    // Should only be called in the following situations:
    // * Before `KERNEL` as well as optional `VERIFIED_BOOT_METADATA` assets for specified
    //   |configuration| are written.
    // * After successfully booting from a new configuration and marking it healthy. This method
    //   would be then called on the old configuration.
    // * After "successfully" booting from a new configuration, but encountering an unrecoverable
    //   error during health check. This method would be then called on the new configuration.
    //
    // If the configuration is unbootable, no action is taken.
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `Configuration.RECOVERY` is passed in via |configuration|.
    static ::fidl::DecodeResult<SetConfigurationUnbootableResponse> SetConfigurationUnbootable(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetConfigurationUnbootableRequest> params, ::fidl::BytePart response_buffer);

    // Updates persistent metadata identifying that active configuration is stable. Used to signal
    // "rollback to previous slot" logic is not needed anymore. Meant to be called in subsequent
    // boot attempt after `SetActiveConfiguration` was called. Will return error if active
    // configuration is currently unbootable.
    //
    // If the configuration is already marked healthy, no action is taken.
    static ::fidl::DecodeResult<SetActiveConfigurationHealthyResponse> SetActiveConfigurationHealthy(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    // Reads partition corresponding to |configuration| and |asset| into a
    // vmo and returns it.
    static ::fidl::DecodeResult<ReadAssetResponse> ReadAsset(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ReadAssetRequest> params, ::fidl::BytePart response_buffer);

    // Writes partition corresponding to `configuration` and `asset` with data from `payload`.
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`. Will zero out rest of the partition if `payload` is smaller
    // than the size of the partition being written.
    //
    //
    // Returns `ZX_ERR_INVALID_ARGS` if `configuration` specifies active configuration.
    static ::fidl::DecodeResult<WriteAssetResponse> WriteAsset(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteAssetRequest> params, ::fidl::BytePart response_buffer);

    // Writes FVM with data from streamed via `payload`. This potentially affects all
    // configurations.
    static ::fidl::DecodeResult<WriteVolumesResponse> WriteVolumes(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteVolumesRequest> params, ::fidl::BytePart response_buffer);

    // Writes bootloader partition with data from `payload`.
    //
    // `payload` may need to be resized to the partition size, so the provided vmo must have
    // been created with `ZX_VMO_RESIZABLE` or must be a child VMO that was created with
    // `ZX_VMO_CHILD_RESIZABLE`.
    static ::fidl::DecodeResult<WriteBootloaderResponse> WriteBootloader(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteBootloaderRequest> params, ::fidl::BytePart response_buffer);

    // Writes /data/`filename` with data from `payload`. Overwrites file if it already exists.
    static ::fidl::DecodeResult<WriteDataFileResponse> WriteDataFile(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WriteDataFileRequest> params, ::fidl::BytePart response_buffer);

    // Wipes the FVM partition from the device. Should not be confused with factory reset, which
    // is less intrusive.
    //
    // Notable use cases include recovering from corrupted FVM as well as setting device to a
    // "clean" state for automation.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    static ::fidl::DecodeResult<WipeVolumesResponse> WipeVolumes(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WipeVolumesRequest> params, ::fidl::BytePart response_buffer);

    // Initializes GPT on given block device and then adds an FVM partition.
    //
    // |gpt_block_device| specifies the block device to use. It assumed that channel
    // backing |gpt_block_device| also implements `fuchsia.io.Node` for now.
    static ::fidl::DecodeResult<InitializePartitionTablesResponse> InitializePartitionTables(zx::unowned_channel _client_end, ::fidl::DecodedMessage<InitializePartitionTablesRequest> params, ::fidl::BytePart response_buffer);

    // Wipes all entries from the partition table of the specified block device.
    // Currently only supported on devices with a GPT.
    //
    // If |block_device| is not provided, the paver will perform a search for
    // the the FVM. If multiple block devices have valid GPT, |block_device| can be provided
    // to specify which one to target. It assumed that channel backing
    // |block_device| also implements `fuchsia.io.Node` for now.
    //
    // *WARNING*: This API may destructively remove non-fuchsia maintained partitions from
    // the block device.
    static ::fidl::DecodeResult<WipePartitionTablesResponse> WipePartitionTables(zx::unowned_channel _client_end, ::fidl::DecodedMessage<WipePartitionTablesRequest> params, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Paver;
    using _Base = ::fidl::CompleterBase;

    class InitializeAbrCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<InitializeAbrResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using InitializeAbrCompleter = ::fidl::Completer<InitializeAbrCompleterBase>;

    virtual void InitializeAbr(InitializeAbrCompleter::Sync _completer) = 0;

    class QueryActiveConfigurationCompleterBase : public _Base {
     public:
      void Reply(::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Result result);
      void ReplySuccess(::llcpp::fuchsia::paver::Configuration configuration);
      void ReplyError(int32_t error);
      void Reply(::fidl::BytePart _buffer, ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Result result);
      void ReplySuccess(::fidl::BytePart _buffer, ::llcpp::fuchsia::paver::Configuration configuration);
      void Reply(::fidl::DecodedMessage<QueryActiveConfigurationResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using QueryActiveConfigurationCompleter = ::fidl::Completer<QueryActiveConfigurationCompleterBase>;

    virtual void QueryActiveConfiguration(QueryActiveConfigurationCompleter::Sync _completer) = 0;

    class QueryConfigurationStatusCompleterBase : public _Base {
     public:
      void Reply(::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Result result);
      void ReplySuccess(::llcpp::fuchsia::paver::ConfigurationStatus status);
      void ReplyError(int32_t error);
      void Reply(::fidl::BytePart _buffer, ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Result result);
      void ReplySuccess(::fidl::BytePart _buffer, ::llcpp::fuchsia::paver::ConfigurationStatus status);
      void Reply(::fidl::DecodedMessage<QueryConfigurationStatusResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using QueryConfigurationStatusCompleter = ::fidl::Completer<QueryConfigurationStatusCompleterBase>;

    virtual void QueryConfigurationStatus(::llcpp::fuchsia::paver::Configuration configuration, QueryConfigurationStatusCompleter::Sync _completer) = 0;

    class SetConfigurationActiveCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetConfigurationActiveResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetConfigurationActiveCompleter = ::fidl::Completer<SetConfigurationActiveCompleterBase>;

    virtual void SetConfigurationActive(::llcpp::fuchsia::paver::Configuration configuration, SetConfigurationActiveCompleter::Sync _completer) = 0;

    class SetConfigurationUnbootableCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetConfigurationUnbootableResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetConfigurationUnbootableCompleter = ::fidl::Completer<SetConfigurationUnbootableCompleterBase>;

    virtual void SetConfigurationUnbootable(::llcpp::fuchsia::paver::Configuration configuration, SetConfigurationUnbootableCompleter::Sync _completer) = 0;

    class SetActiveConfigurationHealthyCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetActiveConfigurationHealthyResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetActiveConfigurationHealthyCompleter = ::fidl::Completer<SetActiveConfigurationHealthyCompleterBase>;

    virtual void SetActiveConfigurationHealthy(SetActiveConfigurationHealthyCompleter::Sync _completer) = 0;

    class ReadAssetCompleterBase : public _Base {
     public:
      void Reply(::llcpp::fuchsia::paver::Paver_ReadAsset_Result result);
      void ReplySuccess(::llcpp::fuchsia::mem::Buffer asset);
      void ReplyError(int32_t error);
      void Reply(::fidl::BytePart _buffer, ::llcpp::fuchsia::paver::Paver_ReadAsset_Result result);
      void ReplySuccess(::fidl::BytePart _buffer, ::llcpp::fuchsia::mem::Buffer asset);
      void Reply(::fidl::DecodedMessage<ReadAssetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ReadAssetCompleter = ::fidl::Completer<ReadAssetCompleterBase>;

    virtual void ReadAsset(::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ReadAssetCompleter::Sync _completer) = 0;

    class WriteAssetCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteAssetResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteAssetCompleter = ::fidl::Completer<WriteAssetCompleterBase>;

    virtual void WriteAsset(::llcpp::fuchsia::paver::Configuration configuration, ::llcpp::fuchsia::paver::Asset asset, ::llcpp::fuchsia::mem::Buffer payload, WriteAssetCompleter::Sync _completer) = 0;

    class WriteVolumesCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteVolumesResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteVolumesCompleter = ::fidl::Completer<WriteVolumesCompleterBase>;

    virtual void WriteVolumes(::zx::channel payload, WriteVolumesCompleter::Sync _completer) = 0;

    class WriteBootloaderCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteBootloaderResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteBootloaderCompleter = ::fidl::Completer<WriteBootloaderCompleterBase>;

    virtual void WriteBootloader(::llcpp::fuchsia::mem::Buffer payload, WriteBootloaderCompleter::Sync _completer) = 0;

    class WriteDataFileCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WriteDataFileResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WriteDataFileCompleter = ::fidl::Completer<WriteDataFileCompleterBase>;

    virtual void WriteDataFile(::fidl::StringView filename, ::llcpp::fuchsia::mem::Buffer payload, WriteDataFileCompleter::Sync _completer) = 0;

    class WipeVolumesCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WipeVolumesResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WipeVolumesCompleter = ::fidl::Completer<WipeVolumesCompleterBase>;

    virtual void WipeVolumes(::zx::channel block_device, WipeVolumesCompleter::Sync _completer) = 0;

    class InitializePartitionTablesCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<InitializePartitionTablesResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using InitializePartitionTablesCompleter = ::fidl::Completer<InitializePartitionTablesCompleterBase>;

    virtual void InitializePartitionTables(::zx::channel gpt_block_device, InitializePartitionTablesCompleter::Sync _completer) = 0;

    class WipePartitionTablesCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<WipePartitionTablesResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WipePartitionTablesCompleter = ::fidl::Completer<WipePartitionTablesCompleterBase>;

    virtual void WipePartitionTables(::zx::channel block_device, WipePartitionTablesCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace paver
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::paver::ReadInfo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::ReadInfo>);
static_assert(offsetof(::llcpp::fuchsia::paver::ReadInfo, offset) == 0);
static_assert(offsetof(::llcpp::fuchsia::paver::ReadInfo, size) == 8);
static_assert(sizeof(::llcpp::fuchsia::paver::ReadInfo) == ::llcpp::fuchsia::paver::ReadInfo::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::ReadResult> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::ReadResult>);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest)
    == ::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoRequest, vmo) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse)
    == ::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::PayloadStream::RegisterVmoResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse)
    == ::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::PayloadStream::ReadDataResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response>);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response, status) == 0);
static_assert(sizeof(::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response) == ::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Result> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_QueryConfigurationStatus_Result>);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response>);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response, configuration) == 0);
static_assert(sizeof(::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response) == ::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Result> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_QueryActiveConfiguration_Result>);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_ReadAsset_Response> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_ReadAsset_Response>);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver_ReadAsset_Response, asset) == 0);
static_assert(sizeof(::llcpp::fuchsia::paver::Paver_ReadAsset_Response) == ::llcpp::fuchsia::paver::Paver_ReadAsset_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver_ReadAsset_Result> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::paver::Paver_ReadAsset_Result>);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::InitializeAbrResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::InitializeAbrResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::InitializeAbrResponse)
    == ::llcpp::fuchsia::paver::Paver::InitializeAbrResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::InitializeAbrResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse)
    == ::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::QueryActiveConfigurationResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusRequest)
    == ::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusRequest, configuration) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusResponse)
    == ::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::QueryConfigurationStatusResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::SetConfigurationActiveRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::SetConfigurationActiveRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::SetConfigurationActiveRequest)
    == ::llcpp::fuchsia::paver::Paver::SetConfigurationActiveRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::SetConfigurationActiveRequest, configuration) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::SetConfigurationActiveResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::SetConfigurationActiveResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::SetConfigurationActiveResponse)
    == ::llcpp::fuchsia::paver::Paver::SetConfigurationActiveResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::SetConfigurationActiveResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableRequest)
    == ::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableRequest, configuration) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableResponse)
    == ::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::SetConfigurationUnbootableResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::SetActiveConfigurationHealthyResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::SetActiveConfigurationHealthyResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::SetActiveConfigurationHealthyResponse)
    == ::llcpp::fuchsia::paver::Paver::SetActiveConfigurationHealthyResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::SetActiveConfigurationHealthyResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::ReadAssetRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::ReadAssetRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::ReadAssetRequest)
    == ::llcpp::fuchsia::paver::Paver::ReadAssetRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::ReadAssetRequest, configuration) == 16);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::ReadAssetRequest, asset) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::ReadAssetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::ReadAssetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::ReadAssetResponse)
    == ::llcpp::fuchsia::paver::Paver::ReadAssetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::ReadAssetResponse, result) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteAssetRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteAssetRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteAssetRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest, configuration) == 16);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest, asset) == 20);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetRequest, payload) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteAssetResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteAssetResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteAssetResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteAssetResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteAssetResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteVolumesRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteVolumesRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteVolumesRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteVolumesRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteVolumesRequest, payload) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteVolumesResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteVolumesResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteVolumesResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteVolumesResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteVolumesResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteBootloaderRequest, payload) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteBootloaderResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteDataFileRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteDataFileRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteDataFileRequest)
    == ::llcpp::fuchsia::paver::Paver::WriteDataFileRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteDataFileRequest, filename) == 16);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteDataFileRequest, payload) == 32);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WriteDataFileResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WriteDataFileResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WriteDataFileResponse)
    == ::llcpp::fuchsia::paver::Paver::WriteDataFileResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WriteDataFileResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WipeVolumesRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WipeVolumesRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WipeVolumesRequest)
    == ::llcpp::fuchsia::paver::Paver::WipeVolumesRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WipeVolumesRequest, block_device) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WipeVolumesResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WipeVolumesResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WipeVolumesResponse)
    == ::llcpp::fuchsia::paver::Paver::WipeVolumesResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WipeVolumesResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::InitializePartitionTablesRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::InitializePartitionTablesRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::InitializePartitionTablesRequest)
    == ::llcpp::fuchsia::paver::Paver::InitializePartitionTablesRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::InitializePartitionTablesRequest, gpt_block_device) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::InitializePartitionTablesResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::InitializePartitionTablesResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::InitializePartitionTablesResponse)
    == ::llcpp::fuchsia::paver::Paver::InitializePartitionTablesResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::InitializePartitionTablesResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WipePartitionTablesRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WipePartitionTablesRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WipePartitionTablesRequest)
    == ::llcpp::fuchsia::paver::Paver::WipePartitionTablesRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WipePartitionTablesRequest, block_device) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::paver::Paver::WipePartitionTablesResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::paver::Paver::WipePartitionTablesResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::paver::Paver::WipePartitionTablesResponse)
    == ::llcpp::fuchsia::paver::Paver::WipePartitionTablesResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::paver::Paver::WipePartitionTablesResponse, status) == 16);

}  // namespace fidl
