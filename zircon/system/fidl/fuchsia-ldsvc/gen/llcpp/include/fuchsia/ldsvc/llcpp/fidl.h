// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace ldsvc {

class Loader;

extern "C" const fidl_type_t fuchsia_ldsvc_LoaderLoadObjectRequestTable;
extern "C" const fidl_type_t fuchsia_ldsvc_LoaderLoadObjectResponseTable;
extern "C" const fidl_type_t fuchsia_ldsvc_LoaderConfigRequestTable;
extern "C" const fidl_type_t fuchsia_ldsvc_LoaderConfigResponseTable;
extern "C" const fidl_type_t fuchsia_ldsvc_LoaderCloneRequestTable;
extern "C" const fidl_type_t fuchsia_ldsvc_LoaderCloneResponseTable;

class Loader final {
  Loader() = delete;
 public:

  using DoneRequest = ::fidl::AnyZeroArgMessage;

  struct LoadObjectResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t rv;
    ::zx::vmo object;

    static constexpr const fidl_type_t* Type = &fuchsia_ldsvc_LoaderLoadObjectResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct LoadObjectRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView object_name;

    static constexpr const fidl_type_t* Type = &fuchsia_ldsvc_LoaderLoadObjectRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 1024;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = LoadObjectResponse;
  };

  struct ConfigResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t rv;

    static constexpr const fidl_type_t* Type = &fuchsia_ldsvc_LoaderConfigResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct ConfigRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView config;

    static constexpr const fidl_type_t* Type = &fuchsia_ldsvc_LoaderConfigRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 1024;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ConfigResponse;
  };

  struct CloneResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t rv;

    static constexpr const fidl_type_t* Type = &fuchsia_ldsvc_LoaderCloneResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct CloneRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel loader;

    static constexpr const fidl_type_t* Type = &fuchsia_ldsvc_LoaderCloneRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = CloneResponse;
  };


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    class Done_Impl final : private ::fidl::internal::StatusAndError {
      using Super = ::fidl::internal::StatusAndError;
     public:
      Done_Impl(zx::unowned_channel _client_end);
      ~Done_Impl() = default;
      Done_Impl(Done_Impl&& other) = default;
      Done_Impl& operator=(Done_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
    };
    template <typename ResponseType>
    class LoadObject_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      LoadObject_Impl(zx::unowned_channel _client_end, ::fidl::StringView object_name);
      ~LoadObject_Impl() = default;
      LoadObject_Impl(LoadObject_Impl&& other) = default;
      LoadObject_Impl& operator=(LoadObject_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class Config_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Config_Impl(zx::unowned_channel _client_end, ::fidl::StringView config);
      ~Config_Impl() = default;
      Config_Impl(Config_Impl&& other) = default;
      Config_Impl& operator=(Config_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class Clone_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      Clone_Impl(zx::unowned_channel _client_end, ::zx::channel loader);
      ~Clone_Impl() = default;
      Clone_Impl(Clone_Impl&& other) = default;
      Clone_Impl& operator=(Clone_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Done = Done_Impl;
    using LoadObject = LoadObject_Impl<LoadObjectResponse>;
    using Config = Config_Impl<ConfigResponse>;
    using Clone = Clone_Impl<CloneResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    class Done_Impl final : private ::fidl::internal::StatusAndError {
      using Super = ::fidl::internal::StatusAndError;
     public:
      Done_Impl(zx::unowned_channel _client_end);
      ~Done_Impl() = default;
      Done_Impl(Done_Impl&& other) = default;
      Done_Impl& operator=(Done_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
    };
    template <typename ResponseType>
    class LoadObject_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      LoadObject_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView object_name, ::fidl::BytePart _response_buffer);
      ~LoadObject_Impl() = default;
      LoadObject_Impl(LoadObject_Impl&& other) = default;
      LoadObject_Impl& operator=(LoadObject_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class Config_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Config_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView config, ::fidl::BytePart _response_buffer);
      ~Config_Impl() = default;
      Config_Impl(Config_Impl&& other) = default;
      Config_Impl& operator=(Config_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class Clone_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      Clone_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel loader, ::fidl::BytePart _response_buffer);
      ~Clone_Impl() = default;
      Clone_Impl(Clone_Impl&& other) = default;
      Clone_Impl& operator=(Clone_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using Done = Done_Impl;
    using LoadObject = LoadObject_Impl<LoadObjectResponse>;
    using Config = Config_Impl<ConfigResponse>;
    using Clone = Clone_Impl<CloneResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 16 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Done Done();


    // Allocates 24 bytes of response buffer on the stack. Request is heap-allocated.
    ResultOf::LoadObject LoadObject(::fidl::StringView object_name);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::LoadObject LoadObject(::fidl::BytePart _request_buffer, ::fidl::StringView object_name, ::fidl::BytePart _response_buffer);

    // Allocates 24 bytes of response buffer on the stack. Request is heap-allocated.
    ResultOf::Config Config(::fidl::StringView config);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Config Config(::fidl::BytePart _request_buffer, ::fidl::StringView config, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::Clone Clone(::zx::channel loader);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::Clone Clone(::fidl::BytePart _request_buffer, ::zx::channel loader, ::fidl::BytePart _response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Allocates 16 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Done Done(zx::unowned_channel _client_end);


    // Allocates 24 bytes of response buffer on the stack. Request is heap-allocated.
    static ResultOf::LoadObject LoadObject(zx::unowned_channel _client_end, ::fidl::StringView object_name);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::LoadObject LoadObject(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView object_name, ::fidl::BytePart _response_buffer);

    // Allocates 24 bytes of response buffer on the stack. Request is heap-allocated.
    static ResultOf::Config Config(zx::unowned_channel _client_end, ::fidl::StringView config);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Config Config(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView config, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::Clone Clone(zx::unowned_channel _client_end, ::zx::channel loader);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::Clone Clone(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::channel loader, ::fidl::BytePart _response_buffer);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    static ::fidl::internal::StatusAndError Done(zx::unowned_channel _client_end);

    static ::fidl::DecodeResult<LoadObjectResponse> LoadObject(zx::unowned_channel _client_end, ::fidl::DecodedMessage<LoadObjectRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<ConfigResponse> Config(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ConfigRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<CloneResponse> Clone(zx::unowned_channel _client_end, ::fidl::DecodedMessage<CloneRequest> params, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Loader;
    using _Base = ::fidl::CompleterBase;

    using DoneCompleter = ::fidl::Completer<>;

    virtual void Done(DoneCompleter::Sync _completer) = 0;

    class LoadObjectCompleterBase : public _Base {
     public:
      void Reply(int32_t rv, ::zx::vmo object);
      void Reply(::fidl::BytePart _buffer, int32_t rv, ::zx::vmo object);
      void Reply(::fidl::DecodedMessage<LoadObjectResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using LoadObjectCompleter = ::fidl::Completer<LoadObjectCompleterBase>;

    virtual void LoadObject(::fidl::StringView object_name, LoadObjectCompleter::Sync _completer) = 0;

    class ConfigCompleterBase : public _Base {
     public:
      void Reply(int32_t rv);
      void Reply(::fidl::BytePart _buffer, int32_t rv);
      void Reply(::fidl::DecodedMessage<ConfigResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ConfigCompleter = ::fidl::Completer<ConfigCompleterBase>;

    virtual void Config(::fidl::StringView config, ConfigCompleter::Sync _completer) = 0;

    class CloneCompleterBase : public _Base {
     public:
      void Reply(int32_t rv);
      void Reply(::fidl::BytePart _buffer, int32_t rv);
      void Reply(::fidl::DecodedMessage<CloneResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using CloneCompleter = ::fidl::Completer<CloneCompleterBase>;

    virtual void Clone(::zx::channel loader, CloneCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace ldsvc
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::ldsvc::Loader::LoadObjectRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::ldsvc::Loader::LoadObjectRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::ldsvc::Loader::LoadObjectRequest)
    == ::llcpp::fuchsia::ldsvc::Loader::LoadObjectRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::ldsvc::Loader::LoadObjectRequest, object_name) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::ldsvc::Loader::LoadObjectResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::ldsvc::Loader::LoadObjectResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::ldsvc::Loader::LoadObjectResponse)
    == ::llcpp::fuchsia::ldsvc::Loader::LoadObjectResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::ldsvc::Loader::LoadObjectResponse, rv) == 16);
static_assert(offsetof(::llcpp::fuchsia::ldsvc::Loader::LoadObjectResponse, object) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::ldsvc::Loader::ConfigRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::ldsvc::Loader::ConfigRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::ldsvc::Loader::ConfigRequest)
    == ::llcpp::fuchsia::ldsvc::Loader::ConfigRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::ldsvc::Loader::ConfigRequest, config) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::ldsvc::Loader::ConfigResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::ldsvc::Loader::ConfigResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::ldsvc::Loader::ConfigResponse)
    == ::llcpp::fuchsia::ldsvc::Loader::ConfigResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::ldsvc::Loader::ConfigResponse, rv) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::ldsvc::Loader::CloneRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::ldsvc::Loader::CloneRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::ldsvc::Loader::CloneRequest)
    == ::llcpp::fuchsia::ldsvc::Loader::CloneRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::ldsvc::Loader::CloneRequest, loader) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::ldsvc::Loader::CloneResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::ldsvc::Loader::CloneResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::ldsvc::Loader::CloneResponse)
    == ::llcpp::fuchsia::ldsvc::Loader::CloneResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::ldsvc::Loader::CloneResponse, rv) == 16);

}  // namespace fidl
