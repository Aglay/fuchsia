// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/fs/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace fs {

namespace {

[[maybe_unused]]
constexpr uint64_t kAdmin_Shutdown_Ordinal = 0x2496c0000000000lu;
[[maybe_unused]]
constexpr uint64_t kAdmin_Shutdown_GenOrdinal = 0x5476abc45167ca8elu;
extern "C" const fidl_type_t v1_fuchsia_fs_AdminShutdownRequestTable;
extern "C" const fidl_type_t v1_fuchsia_fs_AdminShutdownResponseTable;

}  // namespace
template <>
Admin::ResultOf::Shutdown_Impl<Admin::ShutdownResponse>::Shutdown_Impl(::zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ShutdownRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, ShutdownRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(ShutdownRequest));
  ::fidl::DecodedMessage<ShutdownRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Admin::InPlace::Shutdown(std::move(_client_end), Super::response_buffer()));
}

Admin::ResultOf::Shutdown Admin::SyncClient::Shutdown() {
    return ResultOf::Shutdown(::zx::unowned_channel(this->channel_));
}

Admin::ResultOf::Shutdown Admin::Call::Shutdown(::zx::unowned_channel _client_end) {
  return ResultOf::Shutdown(std::move(_client_end));
}

::fidl::DecodeResult<Admin::ShutdownResponse> Admin::InPlace::Shutdown(::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(ShutdownRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<ShutdownRequest> params(std::move(_request_buffer));
  Admin::SetTransactionHeaderFor::ShutdownRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Admin::ShutdownResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<ShutdownRequest, ShutdownResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Admin::ShutdownResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Admin::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kAdmin_Shutdown_Ordinal:
    case kAdmin_Shutdown_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<ShutdownRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Shutdown(
          Interface::ShutdownCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Admin::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Admin::Interface::ShutdownCompleterBase::Reply() {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<ShutdownResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<ShutdownResponse*>(_write_bytes);
  Admin::SetTransactionHeaderFor::ShutdownResponse(
      ::fidl::DecodedMessage<ShutdownResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              ShutdownResponse::PrimarySize,
              ShutdownResponse::PrimarySize)));
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(ShutdownResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<ShutdownResponse>(std::move(_response_bytes)));
}



void Admin::SetTransactionHeaderFor::ShutdownRequest(const ::fidl::DecodedMessage<Admin::ShutdownRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kAdmin_Shutdown_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Admin::SetTransactionHeaderFor::ShutdownResponse(const ::fidl::DecodedMessage<Admin::ShutdownResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kAdmin_Shutdown_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

::llcpp::fuchsia::fs::FilesystemInfo::Builder FilesystemInfo::Build() {
  return FilesystemInfo::Builder();
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_total_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[1 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 1) {
    max_ordinal_ = 1;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_used_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[2 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 2) {
    max_ordinal_ = 2;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_total_nodes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[3 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 3) {
    max_ordinal_ = 3;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_used_nodes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[4 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 4) {
    max_ordinal_ = 4;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_free_shared_pool_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[5 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 5) {
    max_ordinal_ = 5;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_fs_id(::zx::event* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[6 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 6) {
    max_ordinal_ = 6;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_block_size(uint32_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[7 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 7) {
    max_ordinal_ = 7;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_max_node_name_size(uint32_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[8 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 8) {
    max_ordinal_ = 8;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_fs_type(::llcpp::fuchsia::fs::FsType* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[9 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 9) {
    max_ordinal_ = 9;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_name(::fidl::StringView* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[10 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 10) {
    max_ordinal_ = 10;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::fs::FilesystemInfo::Builder::set_device_path(::fidl::StringView* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[11 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 11) {
    max_ordinal_ = 11;
  }
  return std::move(*this);
}

void ::llcpp::fuchsia::fs::Query_GetInfo_Result::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Query_GetInfo_Result) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Query_GetInfo_Result, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Query_GetInfo_Result, envelope_) == offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]]
constexpr uint64_t kQuery_GetInfo_Ordinal = 0x7e34516a00000000lu;
[[maybe_unused]]
constexpr uint64_t kQuery_GetInfo_GenOrdinal = 0x2bb3720da231852alu;
extern "C" const fidl_type_t v1_fuchsia_fs_QueryGetInfoRequestTable;
extern "C" const fidl_type_t v1_fuchsia_fs_QueryGetInfoResponseTable;
[[maybe_unused]]
constexpr uint64_t kQuery_IsNodeInFilesystem_Ordinal = 0x2d124b00000000lu;
[[maybe_unused]]
constexpr uint64_t kQuery_IsNodeInFilesystem_GenOrdinal = 0x7dd26cb8c5e229elu;
extern "C" const fidl_type_t v1_fuchsia_fs_QueryIsNodeInFilesystemRequestTable;
extern "C" const fidl_type_t v1_fuchsia_fs_QueryIsNodeInFilesystemResponseTable;

}  // namespace
template <>
Query::ResultOf::GetInfo_Impl<Query::GetInfoResponse>::GetInfo_Impl(::zx::unowned_channel _client_end, ::llcpp::fuchsia::fs::FilesystemInfoQuery query) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetInfoRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetInfoRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetInfoRequest*>(_write_bytes);
  _request.query = std::move(query);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetInfoRequest));
  ::fidl::DecodedMessage<GetInfoRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Query::InPlace::GetInfo(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Query::ResultOf::GetInfo Query::SyncClient::GetInfo(::llcpp::fuchsia::fs::FilesystemInfoQuery query) {
    return ResultOf::GetInfo(::zx::unowned_channel(this->channel_), std::move(query));
}

Query::ResultOf::GetInfo Query::Call::GetInfo(::zx::unowned_channel _client_end, ::llcpp::fuchsia::fs::FilesystemInfoQuery query) {
  return ResultOf::GetInfo(std::move(_client_end), std::move(query));
}

template <>
Query::UnownedResultOf::GetInfo_Impl<Query::GetInfoResponse>::GetInfo_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::fs::FilesystemInfoQuery query, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < GetInfoRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<GetInfoResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, GetInfoRequest::PrimarySize);
  auto& _request = *reinterpret_cast<GetInfoRequest*>(_request_buffer.data());
  _request.query = std::move(query);
  _request_buffer.set_actual(sizeof(GetInfoRequest));
  ::fidl::DecodedMessage<GetInfoRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Query::InPlace::GetInfo(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Query::UnownedResultOf::GetInfo Query::SyncClient::GetInfo(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::fs::FilesystemInfoQuery query, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetInfo(::zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(query), std::move(_response_buffer));
}

Query::UnownedResultOf::GetInfo Query::Call::GetInfo(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::fs::FilesystemInfoQuery query, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetInfo(std::move(_client_end), std::move(_request_buffer), std::move(query), std::move(_response_buffer));
}

::fidl::DecodeResult<Query::GetInfoResponse> Query::InPlace::GetInfo(::zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetInfoRequest> params, ::fidl::BytePart response_buffer) {
  Query::SetTransactionHeaderFor::GetInfoRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Query::GetInfoResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetInfoRequest, GetInfoResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Query::GetInfoResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Query::ResultOf::IsNodeInFilesystem_Impl<Query::IsNodeInFilesystemResponse>::IsNodeInFilesystem_Impl(::zx::unowned_channel _client_end, ::zx::event token) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<IsNodeInFilesystemRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, IsNodeInFilesystemRequest::PrimarySize);
  auto& _request = *reinterpret_cast<IsNodeInFilesystemRequest*>(_write_bytes);
  _request.token = std::move(token);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(IsNodeInFilesystemRequest));
  ::fidl::DecodedMessage<IsNodeInFilesystemRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Query::InPlace::IsNodeInFilesystem(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

Query::ResultOf::IsNodeInFilesystem Query::SyncClient::IsNodeInFilesystem(::zx::event token) {
    return ResultOf::IsNodeInFilesystem(::zx::unowned_channel(this->channel_), std::move(token));
}

Query::ResultOf::IsNodeInFilesystem Query::Call::IsNodeInFilesystem(::zx::unowned_channel _client_end, ::zx::event token) {
  return ResultOf::IsNodeInFilesystem(std::move(_client_end), std::move(token));
}

template <>
Query::UnownedResultOf::IsNodeInFilesystem_Impl<Query::IsNodeInFilesystemResponse>::IsNodeInFilesystem_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::event token, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < IsNodeInFilesystemRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<IsNodeInFilesystemResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, IsNodeInFilesystemRequest::PrimarySize);
  auto& _request = *reinterpret_cast<IsNodeInFilesystemRequest*>(_request_buffer.data());
  _request.token = std::move(token);
  _request_buffer.set_actual(sizeof(IsNodeInFilesystemRequest));
  ::fidl::DecodedMessage<IsNodeInFilesystemRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Query::InPlace::IsNodeInFilesystem(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

Query::UnownedResultOf::IsNodeInFilesystem Query::SyncClient::IsNodeInFilesystem(::fidl::BytePart _request_buffer, ::zx::event token, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::IsNodeInFilesystem(::zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(token), std::move(_response_buffer));
}

Query::UnownedResultOf::IsNodeInFilesystem Query::Call::IsNodeInFilesystem(::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::event token, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::IsNodeInFilesystem(std::move(_client_end), std::move(_request_buffer), std::move(token), std::move(_response_buffer));
}

::fidl::DecodeResult<Query::IsNodeInFilesystemResponse> Query::InPlace::IsNodeInFilesystem(::zx::unowned_channel _client_end, ::fidl::DecodedMessage<IsNodeInFilesystemRequest> params, ::fidl::BytePart response_buffer) {
  Query::SetTransactionHeaderFor::IsNodeInFilesystemRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Query::IsNodeInFilesystemResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<IsNodeInFilesystemRequest, IsNodeInFilesystemResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Query::IsNodeInFilesystemResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Query::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kQuery_GetInfo_Ordinal:
    case kQuery_GetInfo_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetInfoRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->GetInfo(std::move(message->query),
          Interface::GetInfoCompleter::Sync(txn));
      return true;
    }
    case kQuery_IsNodeInFilesystem_Ordinal:
    case kQuery_IsNodeInFilesystem_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<IsNodeInFilesystemRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->IsNodeInFilesystem(std::move(message->token),
          Interface::IsNodeInFilesystemCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Query::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Query::Interface::GetInfoCompleterBase::Reply(::llcpp::fuchsia::fs::Query_GetInfo_Result result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetInfoResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetInfoResponse _response = {};
  Query::SetTransactionHeaderFor::GetInfoResponse(
      ::fidl::DecodedMessage<GetInfoResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetInfoResponse::PrimarySize,
              GetInfoResponse::PrimarySize)));
  _response.result = std::move(result);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}
void Query::Interface::GetInfoCompleterBase::ReplySuccess(::llcpp::fuchsia::fs::FilesystemInfo info) {
  Query_GetInfo_Response response;
  response.info = std::move(info);

  Reply(Query_GetInfo_Result::WithResponse(&response));
}
void Query::Interface::GetInfoCompleterBase::ReplyError(int32_t error) {
  Reply(Query_GetInfo_Result::WithErr(&error));
}

void Query::Interface::GetInfoCompleterBase::Reply(::fidl::BytePart _buffer, ::llcpp::fuchsia::fs::Query_GetInfo_Result result) {
  if (_buffer.capacity() < GetInfoResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetInfoResponse _response = {};
  Query::SetTransactionHeaderFor::GetInfoResponse(
      ::fidl::DecodedMessage<GetInfoResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetInfoResponse::PrimarySize,
              GetInfoResponse::PrimarySize)));
  _response.result = std::move(result);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}
void Query::Interface::GetInfoCompleterBase::ReplySuccess(::fidl::BytePart _buffer, ::llcpp::fuchsia::fs::FilesystemInfo info) {
  Query_GetInfo_Response response;
  response.info = std::move(info);

  Reply(std::move(_buffer), Query_GetInfo_Result::WithResponse(&response));
}

void Query::Interface::GetInfoCompleterBase::Reply(::fidl::DecodedMessage<GetInfoResponse> params) {
  Query::SetTransactionHeaderFor::GetInfoResponse(params);
  CompleterBase::SendReply(std::move(params));
}


void Query::Interface::IsNodeInFilesystemCompleterBase::Reply(bool is_in_filesystem) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<IsNodeInFilesystemResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<IsNodeInFilesystemResponse*>(_write_bytes);
  Query::SetTransactionHeaderFor::IsNodeInFilesystemResponse(
      ::fidl::DecodedMessage<IsNodeInFilesystemResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              IsNodeInFilesystemResponse::PrimarySize,
              IsNodeInFilesystemResponse::PrimarySize)));
  _response.is_in_filesystem = std::move(is_in_filesystem);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(IsNodeInFilesystemResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<IsNodeInFilesystemResponse>(std::move(_response_bytes)));
}

void Query::Interface::IsNodeInFilesystemCompleterBase::Reply(::fidl::BytePart _buffer, bool is_in_filesystem) {
  if (_buffer.capacity() < IsNodeInFilesystemResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<IsNodeInFilesystemResponse*>(_buffer.data());
  Query::SetTransactionHeaderFor::IsNodeInFilesystemResponse(
      ::fidl::DecodedMessage<IsNodeInFilesystemResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              IsNodeInFilesystemResponse::PrimarySize,
              IsNodeInFilesystemResponse::PrimarySize)));
  _response.is_in_filesystem = std::move(is_in_filesystem);
  _buffer.set_actual(sizeof(IsNodeInFilesystemResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<IsNodeInFilesystemResponse>(std::move(_buffer)));
}

void Query::Interface::IsNodeInFilesystemCompleterBase::Reply(::fidl::DecodedMessage<IsNodeInFilesystemResponse> params) {
  Query::SetTransactionHeaderFor::IsNodeInFilesystemResponse(params);
  CompleterBase::SendReply(std::move(params));
}



void Query::SetTransactionHeaderFor::GetInfoRequest(const ::fidl::DecodedMessage<Query::GetInfoRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kQuery_GetInfo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Query::SetTransactionHeaderFor::GetInfoResponse(const ::fidl::DecodedMessage<Query::GetInfoResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kQuery_GetInfo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

void Query::SetTransactionHeaderFor::IsNodeInFilesystemRequest(const ::fidl::DecodedMessage<Query::IsNodeInFilesystemRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kQuery_IsNodeInFilesystem_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Query::SetTransactionHeaderFor::IsNodeInFilesystemResponse(const ::fidl::DecodedMessage<Query::IsNodeInFilesystemResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kQuery_IsNodeInFilesystem_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

}  // namespace fs
}  // namespace fuchsia
}  // namespace llcpp
