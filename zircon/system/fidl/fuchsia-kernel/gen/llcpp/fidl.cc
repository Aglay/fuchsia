// WARNING: This file is machine generated by fidlgen.

#include <fuchsia/kernel/llcpp/fidl.h>
#include <memory>

namespace llcpp {

namespace fuchsia {
namespace kernel {

::llcpp::fuchsia::kernel::PerCpuStats::Builder PerCpuStats::Build() {
  return PerCpuStats::Builder();
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_cpu_number(uint32_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[1 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 1) {
    max_ordinal_ = 1;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_flags(uint32_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[2 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 2) {
    max_ordinal_ = 2;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_idle_time(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[3 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 3) {
    max_ordinal_ = 3;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_reschedules(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[4 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 4) {
    max_ordinal_ = 4;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_context_switches(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[5 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 5) {
    max_ordinal_ = 5;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_irq_preempts(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[6 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 6) {
    max_ordinal_ = 6;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_yields(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[7 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 7) {
    max_ordinal_ = 7;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_ints(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[8 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 8) {
    max_ordinal_ = 8;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_timer_ints(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[9 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 9) {
    max_ordinal_ = 9;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_timers(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[10 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 10) {
    max_ordinal_ = 10;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_page_faults(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[11 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 11) {
    max_ordinal_ = 11;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_exceptions(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[12 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 12) {
    max_ordinal_ = 12;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_syscalls(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[13 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 13) {
    max_ordinal_ = 13;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_reschedule_ipis(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[14 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 14) {
    max_ordinal_ = 14;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::PerCpuStats::Builder::set_generic_ipis(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[15 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 15) {
    max_ordinal_ = 15;
  }
  return std::move(*this);
}

namespace {

[[maybe_unused]]
constexpr uint64_t kMexecBroker_PerformMexec_Ordinal = 0x2db06f5f00000000lu;
extern "C" const fidl_type_t fuchsia_kernel_MexecBrokerPerformMexecRequestTable;

}  // namespace

MexecBroker::ResultOf::PerformMexec_Impl::PerformMexec_Impl(zx::unowned_channel _client_end, ::zx::vmo kernel, ::zx::vmo bootdata) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<PerformMexecRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, PerformMexecRequest::PrimarySize);
  auto& _request = *reinterpret_cast<PerformMexecRequest*>(_write_bytes);
  _request.kernel = std::move(kernel);
  _request.bootdata = std::move(bootdata);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(PerformMexecRequest));
  ::fidl::DecodedMessage<PerformMexecRequest> _decoded_request(std::move(_request_bytes));
  Super::operator=(
      MexecBroker::InPlace::PerformMexec(std::move(_client_end), std::move(_decoded_request)));
}

MexecBroker::ResultOf::PerformMexec MexecBroker::SyncClient::PerformMexec(::zx::vmo kernel, ::zx::vmo bootdata) {
  return ResultOf::PerformMexec(zx::unowned_channel(this->channel_), std::move(kernel), std::move(bootdata));
}

MexecBroker::ResultOf::PerformMexec MexecBroker::Call::PerformMexec(zx::unowned_channel _client_end, ::zx::vmo kernel, ::zx::vmo bootdata) {
  return ResultOf::PerformMexec(std::move(_client_end), std::move(kernel), std::move(bootdata));
}


MexecBroker::UnownedResultOf::PerformMexec_Impl::PerformMexec_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::vmo kernel, ::zx::vmo bootdata) {
  if (_request_buffer.capacity() < PerformMexecRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::internal::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, PerformMexecRequest::PrimarySize);
  auto& _request = *reinterpret_cast<PerformMexecRequest*>(_request_buffer.data());
  _request.kernel = std::move(kernel);
  _request.bootdata = std::move(bootdata);
  _request_buffer.set_actual(sizeof(PerformMexecRequest));
  ::fidl::DecodedMessage<PerformMexecRequest> _decoded_request(std::move(_request_buffer));
  Super::operator=(
      MexecBroker::InPlace::PerformMexec(std::move(_client_end), std::move(_decoded_request)));
}

MexecBroker::UnownedResultOf::PerformMexec MexecBroker::SyncClient::PerformMexec(::fidl::BytePart _request_buffer, ::zx::vmo kernel, ::zx::vmo bootdata) {
  return UnownedResultOf::PerformMexec(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(kernel), std::move(bootdata));
}

MexecBroker::UnownedResultOf::PerformMexec MexecBroker::Call::PerformMexec(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::vmo kernel, ::zx::vmo bootdata) {
  return UnownedResultOf::PerformMexec(std::move(_client_end), std::move(_request_buffer), std::move(kernel), std::move(bootdata));
}

::fidl::internal::StatusAndError MexecBroker::InPlace::PerformMexec(zx::unowned_channel _client_end, ::fidl::DecodedMessage<PerformMexecRequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kMexecBroker_PerformMexec_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status, ::fidl::internal::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}


bool MexecBroker::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kMexecBroker_PerformMexec_Ordinal:
    {
      auto result = ::fidl::DecodeAs<PerformMexecRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->PerformMexec(std::move(message->kernel), std::move(message->bootdata),
        Interface::PerformMexecCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool MexecBroker::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


namespace {

[[maybe_unused]]
constexpr uint64_t kDebugBroker_SendDebugCommand_Ordinal = 0x3f05f48400000000lu;
extern "C" const fidl_type_t fuchsia_kernel_DebugBrokerSendDebugCommandRequestTable;
extern "C" const fidl_type_t fuchsia_kernel_DebugBrokerSendDebugCommandResponseTable;
[[maybe_unused]]
constexpr uint64_t kDebugBroker_SetTracingEnabled_Ordinal = 0x273cf2d900000000lu;
extern "C" const fidl_type_t fuchsia_kernel_DebugBrokerSetTracingEnabledRequestTable;
extern "C" const fidl_type_t fuchsia_kernel_DebugBrokerSetTracingEnabledResponseTable;

}  // namespace
template <>
DebugBroker::ResultOf::SendDebugCommand_Impl<DebugBroker::SendDebugCommandResponse>::SendDebugCommand_Impl(zx::unowned_channel _client_end, ::fidl::StringView command) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SendDebugCommandRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed = std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  SendDebugCommandRequest _request = {};
  _request.command = std::move(command);
  auto _linearize_result = ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<SendDebugCommandRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      DebugBroker::InPlace::SendDebugCommand(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

DebugBroker::ResultOf::SendDebugCommand DebugBroker::SyncClient::SendDebugCommand(::fidl::StringView command) {
  return ResultOf::SendDebugCommand(zx::unowned_channel(this->channel_), std::move(command));
}

DebugBroker::ResultOf::SendDebugCommand DebugBroker::Call::SendDebugCommand(zx::unowned_channel _client_end, ::fidl::StringView command) {
  return ResultOf::SendDebugCommand(std::move(_client_end), std::move(command));
}

template <>
DebugBroker::UnownedResultOf::SendDebugCommand_Impl<DebugBroker::SendDebugCommandResponse>::SendDebugCommand_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView command, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SendDebugCommandRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SendDebugCommandResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  SendDebugCommandRequest _request = {};
  _request.command = std::move(command);
  auto _linearize_result = ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<SendDebugCommandRequest> _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(
      DebugBroker::InPlace::SendDebugCommand(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

DebugBroker::UnownedResultOf::SendDebugCommand DebugBroker::SyncClient::SendDebugCommand(::fidl::BytePart _request_buffer, ::fidl::StringView command, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SendDebugCommand(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(command), std::move(_response_buffer));
}

DebugBroker::UnownedResultOf::SendDebugCommand DebugBroker::Call::SendDebugCommand(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::StringView command, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SendDebugCommand(std::move(_client_end), std::move(_request_buffer), std::move(command), std::move(_response_buffer));
}

::fidl::DecodeResult<DebugBroker::SendDebugCommandResponse> DebugBroker::InPlace::SendDebugCommand(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SendDebugCommandRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDebugBroker_SendDebugCommand_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<DebugBroker::SendDebugCommandResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SendDebugCommandRequest, SendDebugCommandResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<DebugBroker::SendDebugCommandResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
DebugBroker::ResultOf::SetTracingEnabled_Impl<DebugBroker::SetTracingEnabledResponse>::SetTracingEnabled_Impl(zx::unowned_channel _client_end, bool enabled) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetTracingEnabledRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, SetTracingEnabledRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetTracingEnabledRequest*>(_write_bytes);
  _request.enabled = std::move(enabled);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetTracingEnabledRequest));
  ::fidl::DecodedMessage<SetTracingEnabledRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      DebugBroker::InPlace::SetTracingEnabled(std::move(_client_end), std::move(_decoded_request), Super::response_buffer()));
}

DebugBroker::ResultOf::SetTracingEnabled DebugBroker::SyncClient::SetTracingEnabled(bool enabled) {
  return ResultOf::SetTracingEnabled(zx::unowned_channel(this->channel_), std::move(enabled));
}

DebugBroker::ResultOf::SetTracingEnabled DebugBroker::Call::SetTracingEnabled(zx::unowned_channel _client_end, bool enabled) {
  return ResultOf::SetTracingEnabled(std::move(_client_end), std::move(enabled));
}

template <>
DebugBroker::UnownedResultOf::SetTracingEnabled_Impl<DebugBroker::SetTracingEnabledResponse>::SetTracingEnabled_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, bool enabled, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SetTracingEnabledRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SetTracingEnabledResponse>(ZX_ERR_BUFFER_TOO_SMALL, ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  memset(_request_buffer.data(), 0, SetTracingEnabledRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SetTracingEnabledRequest*>(_request_buffer.data());
  _request.enabled = std::move(enabled);
  _request_buffer.set_actual(sizeof(SetTracingEnabledRequest));
  ::fidl::DecodedMessage<SetTracingEnabledRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      DebugBroker::InPlace::SetTracingEnabled(std::move(_client_end), std::move(_decoded_request), std::move(_response_buffer)));
}

DebugBroker::UnownedResultOf::SetTracingEnabled DebugBroker::SyncClient::SetTracingEnabled(::fidl::BytePart _request_buffer, bool enabled, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetTracingEnabled(zx::unowned_channel(this->channel_), std::move(_request_buffer), std::move(enabled), std::move(_response_buffer));
}

DebugBroker::UnownedResultOf::SetTracingEnabled DebugBroker::Call::SetTracingEnabled(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, bool enabled, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SetTracingEnabled(std::move(_client_end), std::move(_request_buffer), std::move(enabled), std::move(_response_buffer));
}

::fidl::DecodeResult<DebugBroker::SetTracingEnabledResponse> DebugBroker::InPlace::SetTracingEnabled(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetTracingEnabledRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDebugBroker_SetTracingEnabled_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<DebugBroker::SetTracingEnabledResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<SetTracingEnabledRequest, SetTracingEnabledResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<DebugBroker::SetTracingEnabledResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool DebugBroker::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kDebugBroker_SendDebugCommand_Ordinal:
    {
      auto result = ::fidl::DecodeAs<SendDebugCommandRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SendDebugCommand(std::move(message->command),
        Interface::SendDebugCommandCompleter::Sync(txn));
      return true;
    }
    case kDebugBroker_SetTracingEnabled_Ordinal:
    {
      auto result = ::fidl::DecodeAs<SetTracingEnabledRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SetTracingEnabled(std::move(message->enabled),
        Interface::SetTracingEnabledCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool DebugBroker::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void DebugBroker::Interface::SendDebugCommandCompleterBase::Reply(int32_t status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SendDebugCommandResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SendDebugCommandResponse*>(_write_bytes);
  _response._hdr.ordinal = kDebugBroker_SendDebugCommand_Ordinal;
  _response.status = std::move(status);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SendDebugCommandResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SendDebugCommandResponse>(std::move(_response_bytes)));
}

void DebugBroker::Interface::SendDebugCommandCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status) {
  if (_buffer.capacity() < SendDebugCommandResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SendDebugCommandResponse*>(_buffer.data());
  _response._hdr.ordinal = kDebugBroker_SendDebugCommand_Ordinal;
  _response.status = std::move(status);
  _buffer.set_actual(sizeof(SendDebugCommandResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SendDebugCommandResponse>(std::move(_buffer)));
}

void DebugBroker::Interface::SendDebugCommandCompleterBase::Reply(::fidl::DecodedMessage<SendDebugCommandResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDebugBroker_SendDebugCommand_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


void DebugBroker::Interface::SetTracingEnabledCompleterBase::Reply(int32_t status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<SetTracingEnabledResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<SetTracingEnabledResponse*>(_write_bytes);
  _response._hdr.ordinal = kDebugBroker_SetTracingEnabled_Ordinal;
  _response.status = std::move(status);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(SetTracingEnabledResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetTracingEnabledResponse>(std::move(_response_bytes)));
}

void DebugBroker::Interface::SetTracingEnabledCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status) {
  if (_buffer.capacity() < SetTracingEnabledResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<SetTracingEnabledResponse*>(_buffer.data());
  _response._hdr.ordinal = kDebugBroker_SetTracingEnabled_Ordinal;
  _response.status = std::move(status);
  _buffer.set_actual(sizeof(SetTracingEnabledResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<SetTracingEnabledResponse>(std::move(_buffer)));
}

void DebugBroker::Interface::SetTracingEnabledCompleterBase::Reply(::fidl::DecodedMessage<SetTracingEnabledResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kDebugBroker_SetTracingEnabled_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


namespace {

[[maybe_unused]]
constexpr uint64_t kCounter_GetInspectVMO_Ordinal = 0x6d0e779600000000lu;
extern "C" const fidl_type_t fuchsia_kernel_CounterGetInspectVMOResponseTable;
[[maybe_unused]]
constexpr uint64_t kCounter_UpdateInspectVMO_Ordinal = 0x4844746000000000lu;
extern "C" const fidl_type_t fuchsia_kernel_CounterUpdateInspectVMOResponseTable;

}  // namespace
template <>
Counter::ResultOf::GetInspectVMO_Impl<Counter::GetInspectVMOResponse>::GetInspectVMO_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetInspectVMORequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetInspectVMORequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetInspectVMORequest));
  ::fidl::DecodedMessage<GetInspectVMORequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Counter::InPlace::GetInspectVMO(std::move(_client_end), Super::response_buffer()));
}

Counter::ResultOf::GetInspectVMO Counter::SyncClient::GetInspectVMO() {
  return ResultOf::GetInspectVMO(zx::unowned_channel(this->channel_));
}

Counter::ResultOf::GetInspectVMO Counter::Call::GetInspectVMO(zx::unowned_channel _client_end) {
  return ResultOf::GetInspectVMO(std::move(_client_end));
}

template <>
Counter::UnownedResultOf::GetInspectVMO_Impl<Counter::GetInspectVMOResponse>::GetInspectVMO_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetInspectVMORequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetInspectVMORequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetInspectVMORequest));
  ::fidl::DecodedMessage<GetInspectVMORequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Counter::InPlace::GetInspectVMO(std::move(_client_end), std::move(_response_buffer)));
}

Counter::UnownedResultOf::GetInspectVMO Counter::SyncClient::GetInspectVMO(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetInspectVMO(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Counter::UnownedResultOf::GetInspectVMO Counter::Call::GetInspectVMO(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetInspectVMO(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Counter::GetInspectVMOResponse> Counter::InPlace::GetInspectVMO(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetInspectVMORequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetInspectVMORequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kCounter_GetInspectVMO_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Counter::GetInspectVMOResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetInspectVMORequest, GetInspectVMOResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Counter::GetInspectVMOResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Counter::ResultOf::UpdateInspectVMO_Impl<Counter::UpdateInspectVMOResponse>::UpdateInspectVMO_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<UpdateInspectVMORequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, UpdateInspectVMORequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(UpdateInspectVMORequest));
  ::fidl::DecodedMessage<UpdateInspectVMORequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Counter::InPlace::UpdateInspectVMO(std::move(_client_end), Super::response_buffer()));
}

Counter::ResultOf::UpdateInspectVMO Counter::SyncClient::UpdateInspectVMO() {
  return ResultOf::UpdateInspectVMO(zx::unowned_channel(this->channel_));
}

Counter::ResultOf::UpdateInspectVMO Counter::Call::UpdateInspectVMO(zx::unowned_channel _client_end) {
  return ResultOf::UpdateInspectVMO(std::move(_client_end));
}

template <>
Counter::UnownedResultOf::UpdateInspectVMO_Impl<Counter::UpdateInspectVMOResponse>::UpdateInspectVMO_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(UpdateInspectVMORequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, UpdateInspectVMORequest::PrimarySize);
  _request_buffer.set_actual(sizeof(UpdateInspectVMORequest));
  ::fidl::DecodedMessage<UpdateInspectVMORequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Counter::InPlace::UpdateInspectVMO(std::move(_client_end), std::move(_response_buffer)));
}

Counter::UnownedResultOf::UpdateInspectVMO Counter::SyncClient::UpdateInspectVMO(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::UpdateInspectVMO(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Counter::UnownedResultOf::UpdateInspectVMO Counter::Call::UpdateInspectVMO(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::UpdateInspectVMO(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Counter::UpdateInspectVMOResponse> Counter::InPlace::UpdateInspectVMO(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(UpdateInspectVMORequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<UpdateInspectVMORequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kCounter_UpdateInspectVMO_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Counter::UpdateInspectVMOResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<UpdateInspectVMORequest, UpdateInspectVMOResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Counter::UpdateInspectVMOResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Counter::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kCounter_GetInspectVMO_Ordinal:
    {
      auto result = ::fidl::DecodeAs<GetInspectVMORequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetInspectVMO(
        Interface::GetInspectVMOCompleter::Sync(txn));
      return true;
    }
    case kCounter_UpdateInspectVMO_Ordinal:
    {
      auto result = ::fidl::DecodeAs<UpdateInspectVMORequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->UpdateInspectVMO(
        Interface::UpdateInspectVMOCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Counter::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Counter::Interface::GetInspectVMOCompleterBase::Reply(int32_t status, ::llcpp::fuchsia::mem::Buffer buffer) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetInspectVMOResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetInspectVMOResponse*>(_write_bytes);
  _response._hdr.ordinal = kCounter_GetInspectVMO_Ordinal;
  _response.status = std::move(status);
  _response.buffer = std::move(buffer);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetInspectVMOResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetInspectVMOResponse>(std::move(_response_bytes)));
}

void Counter::Interface::GetInspectVMOCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::mem::Buffer buffer) {
  if (_buffer.capacity() < GetInspectVMOResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetInspectVMOResponse*>(_buffer.data());
  _response._hdr.ordinal = kCounter_GetInspectVMO_Ordinal;
  _response.status = std::move(status);
  _response.buffer = std::move(buffer);
  _buffer.set_actual(sizeof(GetInspectVMOResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetInspectVMOResponse>(std::move(_buffer)));
}

void Counter::Interface::GetInspectVMOCompleterBase::Reply(::fidl::DecodedMessage<GetInspectVMOResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kCounter_GetInspectVMO_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


void Counter::Interface::UpdateInspectVMOCompleterBase::Reply(int32_t status) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<UpdateInspectVMOResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<UpdateInspectVMOResponse*>(_write_bytes);
  _response._hdr.ordinal = kCounter_UpdateInspectVMO_Ordinal;
  _response.status = std::move(status);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(UpdateInspectVMOResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<UpdateInspectVMOResponse>(std::move(_response_bytes)));
}

void Counter::Interface::UpdateInspectVMOCompleterBase::Reply(::fidl::BytePart _buffer, int32_t status) {
  if (_buffer.capacity() < UpdateInspectVMOResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<UpdateInspectVMOResponse*>(_buffer.data());
  _response._hdr.ordinal = kCounter_UpdateInspectVMO_Ordinal;
  _response.status = std::move(status);
  _buffer.set_actual(sizeof(UpdateInspectVMOResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<UpdateInspectVMOResponse>(std::move(_buffer)));
}

void Counter::Interface::UpdateInspectVMOCompleterBase::Reply(::fidl::DecodedMessage<UpdateInspectVMOResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kCounter_UpdateInspectVMO_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


::llcpp::fuchsia::kernel::MemoryStats::Builder MemoryStats::Build() {
  return MemoryStats::Builder();
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_total_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[1 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 1) {
    max_ordinal_ = 1;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_free_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[2 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 2) {
    max_ordinal_ = 2;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_wired_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[3 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 3) {
    max_ordinal_ = 3;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_total_heap_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[4 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 4) {
    max_ordinal_ = 4;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_free_heap_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[5 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 5) {
    max_ordinal_ = 5;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_vmo_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[6 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 6) {
    max_ordinal_ = 6;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_mmu_overhead_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[7 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 7) {
    max_ordinal_ = 7;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_ipc_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[8 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 8) {
    max_ordinal_ = 8;
  }
  return std::move(*this);
}

auto ::llcpp::fuchsia::kernel::MemoryStats::Builder::set_other_bytes(uint64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  envelopes_[9 - 1].data = static_cast<void*>(elem);
  if (max_ordinal_ < 9) {
    max_ordinal_ = 9;
  }
  return std::move(*this);
}

namespace {

[[maybe_unused]]
constexpr uint64_t kStats_GetMemoryStats_Ordinal = 0x3f74d35b00000000lu;
extern "C" const fidl_type_t fuchsia_kernel_StatsGetMemoryStatsResponseTable;
[[maybe_unused]]
constexpr uint64_t kStats_GetCpuStats_Ordinal = 0x34c546a700000000lu;
extern "C" const fidl_type_t fuchsia_kernel_StatsGetCpuStatsResponseTable;

}  // namespace
template <>
Stats::ResultOf::GetMemoryStats_Impl<Stats::GetMemoryStatsResponse>::GetMemoryStats_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetMemoryStatsRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetMemoryStatsRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetMemoryStatsRequest));
  ::fidl::DecodedMessage<GetMemoryStatsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Stats::InPlace::GetMemoryStats(std::move(_client_end), Super::response_buffer()));
}

Stats::ResultOf::GetMemoryStats Stats::SyncClient::GetMemoryStats() {
  return ResultOf::GetMemoryStats(zx::unowned_channel(this->channel_));
}

Stats::ResultOf::GetMemoryStats Stats::Call::GetMemoryStats(zx::unowned_channel _client_end) {
  return ResultOf::GetMemoryStats(std::move(_client_end));
}

template <>
Stats::UnownedResultOf::GetMemoryStats_Impl<Stats::GetMemoryStatsResponse>::GetMemoryStats_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetMemoryStatsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetMemoryStatsRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetMemoryStatsRequest));
  ::fidl::DecodedMessage<GetMemoryStatsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Stats::InPlace::GetMemoryStats(std::move(_client_end), std::move(_response_buffer)));
}

Stats::UnownedResultOf::GetMemoryStats Stats::SyncClient::GetMemoryStats(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetMemoryStats(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Stats::UnownedResultOf::GetMemoryStats Stats::Call::GetMemoryStats(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetMemoryStats(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Stats::GetMemoryStatsResponse> Stats::InPlace::GetMemoryStats(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetMemoryStatsRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetMemoryStatsRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStats_GetMemoryStats_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Stats::GetMemoryStatsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetMemoryStatsRequest, GetMemoryStatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Stats::GetMemoryStatsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Stats::ResultOf::GetCpuStats_Impl<Stats::GetCpuStatsResponse>::GetCpuStats_Impl(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetCpuStatsRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetCpuStatsRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetCpuStatsRequest));
  ::fidl::DecodedMessage<GetCpuStatsRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Stats::InPlace::GetCpuStats(std::move(_client_end), Super::response_buffer()));
}

Stats::ResultOf::GetCpuStats Stats::SyncClient::GetCpuStats() {
  return ResultOf::GetCpuStats(zx::unowned_channel(this->channel_));
}

Stats::ResultOf::GetCpuStats Stats::Call::GetCpuStats(zx::unowned_channel _client_end) {
  return ResultOf::GetCpuStats(std::move(_client_end));
}

template <>
Stats::UnownedResultOf::GetCpuStats_Impl<Stats::GetCpuStatsResponse>::GetCpuStats_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetCpuStatsRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetCpuStatsRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetCpuStatsRequest));
  ::fidl::DecodedMessage<GetCpuStatsRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Stats::InPlace::GetCpuStats(std::move(_client_end), std::move(_response_buffer)));
}

Stats::UnownedResultOf::GetCpuStats Stats::SyncClient::GetCpuStats(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetCpuStats(zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Stats::UnownedResultOf::GetCpuStats Stats::Call::GetCpuStats(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetCpuStats(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Stats::GetCpuStatsResponse> Stats::InPlace::GetCpuStats(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetCpuStatsRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetCpuStatsRequest> params(std::move(_request_buffer));
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStats_GetCpuStats_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Stats::GetCpuStatsResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetCpuStatsRequest, GetCpuStatsResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Stats::GetCpuStatsResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Stats::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kStats_GetMemoryStats_Ordinal:
    {
      auto result = ::fidl::DecodeAs<GetMemoryStatsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetMemoryStats(
        Interface::GetMemoryStatsCompleter::Sync(txn));
      return true;
    }
    case kStats_GetCpuStats_Ordinal:
    {
      auto result = ::fidl::DecodeAs<GetCpuStatsRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetCpuStats(
        Interface::GetCpuStatsCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Stats::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Stats::Interface::GetMemoryStatsCompleterBase::Reply(MemoryStats stats) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetMemoryStatsResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetMemoryStatsResponse _response = {};
  _response._hdr.ordinal = kStats_GetMemoryStats_Ordinal;
  _response.stats = std::move(stats);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Stats::Interface::GetMemoryStatsCompleterBase::Reply(::fidl::BytePart _buffer, MemoryStats stats) {
  if (_buffer.capacity() < GetMemoryStatsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetMemoryStatsResponse _response = {};
  _response._hdr.ordinal = kStats_GetMemoryStats_Ordinal;
  _response.stats = std::move(stats);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Stats::Interface::GetMemoryStatsCompleterBase::Reply(::fidl::DecodedMessage<GetMemoryStatsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStats_GetMemoryStats_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


void Stats::Interface::GetCpuStatsCompleterBase::Reply(CpuStats stats) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetCpuStatsResponse, ::fidl::MessageDirection::kSending>();
  std::unique_ptr<uint8_t[]> _write_bytes_unique_ptr(new uint8_t[_kWriteAllocSize]);
  uint8_t* _write_bytes = _write_bytes_unique_ptr.get();
  GetCpuStatsResponse _response = {};
  _response._hdr.ordinal = kStats_GetCpuStats_Ordinal;
  _response.stats = std::move(stats);
  auto _linearize_result = ::fidl::Linearize(&_response, ::fidl::BytePart(_write_bytes,
                                                                          _kWriteAllocSize));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Stats::Interface::GetCpuStatsCompleterBase::Reply(::fidl::BytePart _buffer, CpuStats stats) {
  if (_buffer.capacity() < GetCpuStatsResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  GetCpuStatsResponse _response = {};
  _response._hdr.ordinal = kStats_GetCpuStats_Ordinal;
  _response.stats = std::move(stats);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Stats::Interface::GetCpuStatsCompleterBase::Reply(::fidl::DecodedMessage<GetCpuStatsResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kStats_GetCpuStats_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


}  // namespace kernel
}  // namespace fuchsia
}  // namespace llcpp
