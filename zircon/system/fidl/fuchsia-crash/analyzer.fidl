// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.crash;

using fuchsia.mem;
using zx;

/// Analyzes string exceptions from managed runtimes.
[Discoverable, Layout = "Simple", Transitional = "deprecated in favor of fuchsia.feedback.CrashReporter"]
protocol Analyzer {
    /// Requests that the crash analyzer handles the exception thrown in the
    /// managed runtime.
    ///
    /// `component_url` is the full Fuchsia URL of the component that crashed.
    ///
    /// A typical implementation might print the exception message and stack
    /// trace to the system log or upload a crash report to a server.
    // The type of `component_url` will be changed to some component-specific
    // FIDL struct eventually.
    OnManagedRuntimeException(string:1024 component_url,
                              ManagedRuntimeException exception)
        -> () error zx.status;
};

/// Represents a managed runtime exception.
///
/// Only Dart is supported for this legacy protocol.
union ManagedRuntimeException {
    GenericException dart;
};

/// Represents a generic exception that works for many managed runtime languages.
// We use array<byte> instead of string because the protocol has a simple layout.
struct GenericException {
    /// Exception type, e.g., "FileSystemException".
    array<byte>:128 type;

    /// Exception message, e.g., "cannot open file".
    array<byte>:1024 message;

    /// Text representation of the stack trace.
    fuchsia.mem.Buffer stack_trace;
};
