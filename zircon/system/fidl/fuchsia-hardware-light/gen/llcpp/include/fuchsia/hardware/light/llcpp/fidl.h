// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace light {

struct Rgb;
enum class Capability : uint32_t {
  BRIGHTNESS = 0u,
  RGB = 1u,
};


class Light;

extern "C" const fidl_type_t fuchsia_hardware_light_RgbTable;

struct Rgb {
  static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_RgbTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 3;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint8_t red = {};

  uint8_t green = {};

  uint8_t blue = {};
};

constexpr uint8_t LIGHT_NAME_LEN = 32u;

extern "C" const fidl_type_t fuchsia_hardware_light_LightGetNameRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightGetNameResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightGetCountRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightGetCountResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightHasCapabilityRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightHasCapabilityResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightGetSimpleValueRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightGetSimpleValueResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightSetSimpleValueRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightSetSimpleValueResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightGetRgbValueRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightGetRgbValueResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightSetRgbValueRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_light_LightSetRgbValueResponseTable;

class Light final {
  Light() = delete;
 public:

  struct GetNameResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::fidl::StringView name;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightGetNameResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 32;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct GetNameRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t index;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightGetNameRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetNameResponse;
  };

  struct GetCountResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t count;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightGetCountResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using GetCountRequest = ::fidl::AnyZeroArgMessage;

  struct HasCapabilityResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    bool has;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightHasCapabilityResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct HasCapabilityRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t index;
    ::llcpp::fuchsia::hardware::light::Capability capability;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightHasCapabilityRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = HasCapabilityResponse;
  };

  struct GetSimpleValueResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    uint8_t value;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightGetSimpleValueResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct GetSimpleValueRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t index;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightGetSimpleValueRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetSimpleValueResponse;
  };

  struct SetSimpleValueResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightSetSimpleValueResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct SetSimpleValueRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t index;
    uint8_t value;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightSetSimpleValueRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = SetSimpleValueResponse;
  };

  struct GetRgbValueResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::light::Rgb value;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightGetRgbValueResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct GetRgbValueRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t index;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightGetRgbValueRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetRgbValueResponse;
  };

  struct SetRgbValueResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightSetRgbValueResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct SetRgbValueRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint32_t index;
    ::llcpp::fuchsia::hardware::light::Rgb value;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_light_LightSetRgbValueRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = SetRgbValueResponse;
  };


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class GetName_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      GetName_Impl(zx::unowned_channel _client_end, uint32_t index);
      ~GetName_Impl() = default;
      GetName_Impl(GetName_Impl&& other) = default;
      GetName_Impl& operator=(GetName_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetCount_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      GetCount_Impl(zx::unowned_channel _client_end);
      ~GetCount_Impl() = default;
      GetCount_Impl(GetCount_Impl&& other) = default;
      GetCount_Impl& operator=(GetCount_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class HasCapability_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      HasCapability_Impl(zx::unowned_channel _client_end, uint32_t index, ::llcpp::fuchsia::hardware::light::Capability capability);
      ~HasCapability_Impl() = default;
      HasCapability_Impl(HasCapability_Impl&& other) = default;
      HasCapability_Impl& operator=(HasCapability_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetSimpleValue_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      GetSimpleValue_Impl(zx::unowned_channel _client_end, uint32_t index);
      ~GetSimpleValue_Impl() = default;
      GetSimpleValue_Impl(GetSimpleValue_Impl&& other) = default;
      GetSimpleValue_Impl& operator=(GetSimpleValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetSimpleValue_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      SetSimpleValue_Impl(zx::unowned_channel _client_end, uint32_t index, uint8_t value);
      ~SetSimpleValue_Impl() = default;
      SetSimpleValue_Impl(SetSimpleValue_Impl&& other) = default;
      SetSimpleValue_Impl& operator=(SetSimpleValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetRgbValue_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      GetRgbValue_Impl(zx::unowned_channel _client_end, uint32_t index);
      ~GetRgbValue_Impl() = default;
      GetRgbValue_Impl(GetRgbValue_Impl&& other) = default;
      GetRgbValue_Impl& operator=(GetRgbValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetRgbValue_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      SetRgbValue_Impl(zx::unowned_channel _client_end, uint32_t index, ::llcpp::fuchsia::hardware::light::Rgb value);
      ~SetRgbValue_Impl() = default;
      SetRgbValue_Impl(SetRgbValue_Impl&& other) = default;
      SetRgbValue_Impl& operator=(SetRgbValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using GetName = GetName_Impl<GetNameResponse>;
    using GetCount = GetCount_Impl<GetCountResponse>;
    using HasCapability = HasCapability_Impl<HasCapabilityResponse>;
    using GetSimpleValue = GetSimpleValue_Impl<GetSimpleValueResponse>;
    using SetSimpleValue = SetSimpleValue_Impl<SetSimpleValueResponse>;
    using GetRgbValue = GetRgbValue_Impl<GetRgbValueResponse>;
    using SetRgbValue = SetRgbValue_Impl<SetRgbValueResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class GetName_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      GetName_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);
      ~GetName_Impl() = default;
      GetName_Impl(GetName_Impl&& other) = default;
      GetName_Impl& operator=(GetName_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetCount_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      GetCount_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~GetCount_Impl() = default;
      GetCount_Impl(GetCount_Impl&& other) = default;
      GetCount_Impl& operator=(GetCount_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class HasCapability_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      HasCapability_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::llcpp::fuchsia::hardware::light::Capability capability, ::fidl::BytePart _response_buffer);
      ~HasCapability_Impl() = default;
      HasCapability_Impl(HasCapability_Impl&& other) = default;
      HasCapability_Impl& operator=(HasCapability_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetSimpleValue_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      GetSimpleValue_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);
      ~GetSimpleValue_Impl() = default;
      GetSimpleValue_Impl(GetSimpleValue_Impl&& other) = default;
      GetSimpleValue_Impl& operator=(GetSimpleValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetSimpleValue_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      SetSimpleValue_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, uint8_t value, ::fidl::BytePart _response_buffer);
      ~SetSimpleValue_Impl() = default;
      SetSimpleValue_Impl(SetSimpleValue_Impl&& other) = default;
      SetSimpleValue_Impl& operator=(SetSimpleValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class GetRgbValue_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      GetRgbValue_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);
      ~GetRgbValue_Impl() = default;
      GetRgbValue_Impl(GetRgbValue_Impl&& other) = default;
      GetRgbValue_Impl& operator=(GetRgbValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class SetRgbValue_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      SetRgbValue_Impl(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::llcpp::fuchsia::hardware::light::Rgb value, ::fidl::BytePart _response_buffer);
      ~SetRgbValue_Impl() = default;
      SetRgbValue_Impl(SetRgbValue_Impl&& other) = default;
      SetRgbValue_Impl& operator=(SetRgbValue_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using GetName = GetName_Impl<GetNameResponse>;
    using GetCount = GetCount_Impl<GetCountResponse>;
    using HasCapability = HasCapability_Impl<HasCapabilityResponse>;
    using GetSimpleValue = GetSimpleValue_Impl<GetSimpleValueResponse>;
    using SetSimpleValue = SetSimpleValue_Impl<SetSimpleValueResponse>;
    using GetRgbValue = GetRgbValue_Impl<GetRgbValueResponse>;
    using SetRgbValue = SetRgbValue_Impl<SetRgbValueResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 96 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::GetName GetName(uint32_t index);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::GetName GetName(::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);

    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::GetCount GetCount();

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::GetCount GetCount(::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::HasCapability HasCapability(uint32_t index, ::llcpp::fuchsia::hardware::light::Capability capability);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::HasCapability HasCapability(::fidl::BytePart _request_buffer, uint32_t index, ::llcpp::fuchsia::hardware::light::Capability capability, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::GetSimpleValue GetSimpleValue(uint32_t index);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::GetSimpleValue GetSimpleValue(::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetSimpleValue SetSimpleValue(uint32_t index, uint8_t value);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetSimpleValue SetSimpleValue(::fidl::BytePart _request_buffer, uint32_t index, uint8_t value, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::GetRgbValue GetRgbValue(uint32_t index);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::GetRgbValue GetRgbValue(::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SetRgbValue SetRgbValue(uint32_t index, ::llcpp::fuchsia::hardware::light::Rgb value);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::SetRgbValue SetRgbValue(::fidl::BytePart _request_buffer, uint32_t index, ::llcpp::fuchsia::hardware::light::Rgb value, ::fidl::BytePart _response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Allocates 96 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::GetName GetName(zx::unowned_channel _client_end, uint32_t index);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::GetName GetName(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);

    // Allocates 40 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::GetCount GetCount(zx::unowned_channel _client_end);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::GetCount GetCount(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::HasCapability HasCapability(zx::unowned_channel _client_end, uint32_t index, ::llcpp::fuchsia::hardware::light::Capability capability);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::HasCapability HasCapability(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::llcpp::fuchsia::hardware::light::Capability capability, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::GetSimpleValue GetSimpleValue(zx::unowned_channel _client_end, uint32_t index);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::GetSimpleValue GetSimpleValue(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetSimpleValue SetSimpleValue(zx::unowned_channel _client_end, uint32_t index, uint8_t value);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetSimpleValue SetSimpleValue(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, uint8_t value, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::GetRgbValue GetRgbValue(zx::unowned_channel _client_end, uint32_t index);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::GetRgbValue GetRgbValue(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::fidl::BytePart _response_buffer);

    // Allocates 48 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SetRgbValue SetRgbValue(zx::unowned_channel _client_end, uint32_t index, ::llcpp::fuchsia::hardware::light::Rgb value);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::SetRgbValue SetRgbValue(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint32_t index, ::llcpp::fuchsia::hardware::light::Rgb value, ::fidl::BytePart _response_buffer);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    static ::fidl::DecodeResult<GetNameResponse> GetName(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetNameRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<GetCountResponse> GetCount(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<HasCapabilityResponse> HasCapability(zx::unowned_channel _client_end, ::fidl::DecodedMessage<HasCapabilityRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<GetSimpleValueResponse> GetSimpleValue(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetSimpleValueRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<SetSimpleValueResponse> SetSimpleValue(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetSimpleValueRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<GetRgbValueResponse> GetRgbValue(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetRgbValueRequest> params, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<SetRgbValueResponse> SetRgbValue(zx::unowned_channel _client_end, ::fidl::DecodedMessage<SetRgbValueRequest> params, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Light;
    using _Base = ::fidl::CompleterBase;

    class GetNameCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::fidl::StringView name);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::StringView name);
      void Reply(::fidl::DecodedMessage<GetNameResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetNameCompleter = ::fidl::Completer<GetNameCompleterBase>;

    virtual void GetName(uint32_t index, GetNameCompleter::Sync _completer) = 0;

    class GetCountCompleterBase : public _Base {
     public:
      void Reply(uint32_t count);
      void Reply(::fidl::BytePart _buffer, uint32_t count);
      void Reply(::fidl::DecodedMessage<GetCountResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetCountCompleter = ::fidl::Completer<GetCountCompleterBase>;

    virtual void GetCount(GetCountCompleter::Sync _completer) = 0;

    class HasCapabilityCompleterBase : public _Base {
     public:
      void Reply(int32_t status, bool has);
      void Reply(::fidl::BytePart _buffer, int32_t status, bool has);
      void Reply(::fidl::DecodedMessage<HasCapabilityResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using HasCapabilityCompleter = ::fidl::Completer<HasCapabilityCompleterBase>;

    virtual void HasCapability(uint32_t index, ::llcpp::fuchsia::hardware::light::Capability capability, HasCapabilityCompleter::Sync _completer) = 0;

    class GetSimpleValueCompleterBase : public _Base {
     public:
      void Reply(int32_t status, uint8_t value);
      void Reply(::fidl::BytePart _buffer, int32_t status, uint8_t value);
      void Reply(::fidl::DecodedMessage<GetSimpleValueResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetSimpleValueCompleter = ::fidl::Completer<GetSimpleValueCompleterBase>;

    virtual void GetSimpleValue(uint32_t index, GetSimpleValueCompleter::Sync _completer) = 0;

    class SetSimpleValueCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetSimpleValueResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetSimpleValueCompleter = ::fidl::Completer<SetSimpleValueCompleterBase>;

    virtual void SetSimpleValue(uint32_t index, uint8_t value, SetSimpleValueCompleter::Sync _completer) = 0;

    class GetRgbValueCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::light::Rgb value);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::light::Rgb value);
      void Reply(::fidl::DecodedMessage<GetRgbValueResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetRgbValueCompleter = ::fidl::Completer<GetRgbValueCompleterBase>;

    virtual void GetRgbValue(uint32_t index, GetRgbValueCompleter::Sync _completer) = 0;

    class SetRgbValueCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<SetRgbValueResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using SetRgbValueCompleter = ::fidl::Completer<SetRgbValueCompleterBase>;

    virtual void SetRgbValue(uint32_t index, ::llcpp::fuchsia::hardware::light::Rgb value, SetRgbValueCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }


  // Helper functions to fill in the transaction header in a |DecodedMessage<TransactionalMessage>|.
  class SetTransactionHeaderFor final {
    SetTransactionHeaderFor() = delete;
   public:
    static void GetNameRequest(const ::fidl::DecodedMessage<Light::GetNameRequest>& _msg);
    static void GetNameResponse(const ::fidl::DecodedMessage<Light::GetNameResponse>& _msg);
    static void GetCountRequest(const ::fidl::DecodedMessage<Light::GetCountRequest>& _msg);
    static void GetCountResponse(const ::fidl::DecodedMessage<Light::GetCountResponse>& _msg);
    static void HasCapabilityRequest(const ::fidl::DecodedMessage<Light::HasCapabilityRequest>& _msg);
    static void HasCapabilityResponse(const ::fidl::DecodedMessage<Light::HasCapabilityResponse>& _msg);
    static void GetSimpleValueRequest(const ::fidl::DecodedMessage<Light::GetSimpleValueRequest>& _msg);
    static void GetSimpleValueResponse(const ::fidl::DecodedMessage<Light::GetSimpleValueResponse>& _msg);
    static void SetSimpleValueRequest(const ::fidl::DecodedMessage<Light::SetSimpleValueRequest>& _msg);
    static void SetSimpleValueResponse(const ::fidl::DecodedMessage<Light::SetSimpleValueResponse>& _msg);
    static void GetRgbValueRequest(const ::fidl::DecodedMessage<Light::GetRgbValueRequest>& _msg);
    static void GetRgbValueResponse(const ::fidl::DecodedMessage<Light::GetRgbValueResponse>& _msg);
    static void SetRgbValueRequest(const ::fidl::DecodedMessage<Light::SetRgbValueRequest>& _msg);
    static void SetRgbValueResponse(const ::fidl::DecodedMessage<Light::SetRgbValueResponse>& _msg);
  };
};

}  // namespace light
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Rgb> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::hardware::light::Rgb>);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Rgb, red) == 0);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Rgb, green) == 1);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Rgb, blue) == 2);
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Rgb) == ::llcpp::fuchsia::hardware::light::Rgb::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::GetNameRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::GetNameRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::GetNameRequest)
    == ::llcpp::fuchsia::hardware::light::Light::GetNameRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetNameRequest, index) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::GetNameResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::GetNameResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::GetNameResponse)
    == ::llcpp::fuchsia::hardware::light::Light::GetNameResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetNameResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetNameResponse, name) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::GetCountResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::GetCountResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::GetCountResponse)
    == ::llcpp::fuchsia::hardware::light::Light::GetCountResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetCountResponse, count) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::HasCapabilityRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::HasCapabilityRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::HasCapabilityRequest)
    == ::llcpp::fuchsia::hardware::light::Light::HasCapabilityRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::HasCapabilityRequest, index) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::HasCapabilityRequest, capability) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::HasCapabilityResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::HasCapabilityResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::HasCapabilityResponse)
    == ::llcpp::fuchsia::hardware::light::Light::HasCapabilityResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::HasCapabilityResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::HasCapabilityResponse, has) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::GetSimpleValueRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::GetSimpleValueRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::GetSimpleValueRequest)
    == ::llcpp::fuchsia::hardware::light::Light::GetSimpleValueRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetSimpleValueRequest, index) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::GetSimpleValueResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::GetSimpleValueResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::GetSimpleValueResponse)
    == ::llcpp::fuchsia::hardware::light::Light::GetSimpleValueResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetSimpleValueResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetSimpleValueResponse, value) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::SetSimpleValueRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::SetSimpleValueRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::SetSimpleValueRequest)
    == ::llcpp::fuchsia::hardware::light::Light::SetSimpleValueRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::SetSimpleValueRequest, index) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::SetSimpleValueRequest, value) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::SetSimpleValueResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::SetSimpleValueResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::SetSimpleValueResponse)
    == ::llcpp::fuchsia::hardware::light::Light::SetSimpleValueResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::SetSimpleValueResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::GetRgbValueRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::GetRgbValueRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::GetRgbValueRequest)
    == ::llcpp::fuchsia::hardware::light::Light::GetRgbValueRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetRgbValueRequest, index) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::GetRgbValueResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::GetRgbValueResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::GetRgbValueResponse)
    == ::llcpp::fuchsia::hardware::light::Light::GetRgbValueResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetRgbValueResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::GetRgbValueResponse, value) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::SetRgbValueRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::SetRgbValueRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::SetRgbValueRequest)
    == ::llcpp::fuchsia::hardware::light::Light::SetRgbValueRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::SetRgbValueRequest, index) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::SetRgbValueRequest, value) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::light::Light::SetRgbValueResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::light::Light::SetRgbValueResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::light::Light::SetRgbValueResponse)
    == ::llcpp::fuchsia::hardware::light::Light::SetRgbValueResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::light::Light::SetRgbValueResponse, status) == 16);

}  // namespace fidl
