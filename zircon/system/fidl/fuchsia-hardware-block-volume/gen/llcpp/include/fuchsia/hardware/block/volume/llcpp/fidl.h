// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/fifo.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

#include <fuchsia/hardware/block/llcpp/fidl.h>
#include <fuchsia/hardware/block/partition/llcpp/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace block {
namespace volume {

struct VsliceRange;
struct VolumeInfo;
class Volume;
class VolumeManager;

extern "C" const fidl_type_t fuchsia_hardware_block_volume_VsliceRangeTable;

struct VsliceRange {
  static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VsliceRangeTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  bool allocated{};

  uint64_t count{};
};



struct VolumeInfo {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  uint64_t slice_size{};

  uint64_t vslice_count{};

  uint64_t pslice_total_count{};

  uint64_t pslice_allocated_count{};
};

constexpr uint32_t MAX_SLICE_REQUESTS = 16u;

constexpr uint32_t AllocatePartitionFlagInactive = 1u;

extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeGetInfoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeGetStatsRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeGetStatsResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeGetFifoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeAttachVmoRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeAttachVmoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeCloseFifoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeRebindDeviceResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeGetTypeGuidResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeGetInstanceGuidResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeGetNameResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeQueryResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeQuerySlicesRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeQuerySlicesResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeExtendResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeShrinkResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeDestroyResponseTable;

class Volume final {
 public:

  struct GetInfoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::BlockInfo* info;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeGetInfoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 24;
  };
  using GetInfoRequest = ::fidl::AnyZeroArgMessage;

  struct GetStatsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::BlockStats* stats;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeGetStatsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 48;
  };
  struct GetStatsRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    bool clear;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeGetStatsRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = GetStatsResponse;
  };

  struct GetFifoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::zx::fifo fifo;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeGetFifoResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using GetFifoRequest = ::fidl::AnyZeroArgMessage;

  struct AttachVmoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::VmoID* vmoid;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeAttachVmoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 8;
  };
  struct AttachVmoRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::vmo vmo;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeAttachVmoRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = AttachVmoResponse;
  };

  struct CloseFifoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeCloseFifoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using CloseFifoRequest = ::fidl::AnyZeroArgMessage;

  struct RebindDeviceResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeRebindDeviceResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using RebindDeviceRequest = ::fidl::AnyZeroArgMessage;

  struct GetTypeGuidResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::partition::GUID* guid;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeGetTypeGuidResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 16;
  };
  using GetTypeGuidRequest = ::fidl::AnyZeroArgMessage;

  struct GetInstanceGuidResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::partition::GUID* guid;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeGetInstanceGuidResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 16;
  };
  using GetInstanceGuidRequest = ::fidl::AnyZeroArgMessage;

  struct GetNameResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::fidl::StringView name;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeGetNameResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 128;
  };
  using GetNameRequest = ::fidl::AnyZeroArgMessage;

  struct QueryResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    VolumeInfo* info;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeQueryResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 32;
  };
  using QueryRequest = ::fidl::AnyZeroArgMessage;

  struct QuerySlicesResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::fidl::Array<VsliceRange, 16> response;
    uint64_t response_count;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeQuerySlicesResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 288;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct QuerySlicesRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::VectorView<uint64_t> start_slices;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeQuerySlicesRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 128;
    using ResponseType = QuerySlicesResponse;
  };

  struct ExtendResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeExtendResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct ExtendRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint64_t start_slice;
    uint64_t slice_count;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = ExtendResponse;
  };

  struct ShrinkResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeShrinkResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct ShrinkRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint64_t start_slice;
    uint64_t slice_count;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = ShrinkResponse;
  };

  struct DestroyResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeDestroyResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using DestroyRequest = ::fidl::AnyZeroArgMessage;


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetInfoResponse> GetInfo(::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockInfo** out_info);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetInfoResponse> GetInfo(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetStatsResponse> GetStats(::fidl::BytePart _request_buffer, bool clear, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockStats** out_stats);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetStatsResponse> GetStats(::fidl::DecodedMessage<GetStatsRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t GetFifo(int32_t* out_status, ::zx::fifo* out_fifo);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetFifoResponse> GetFifo(::fidl::BytePart _response_buffer, int32_t* out_status, ::zx::fifo* out_fifo);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetFifoResponse> GetFifo(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<AttachVmoResponse> AttachVmo(::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::VmoID** out_vmoid);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<AttachVmoResponse> AttachVmo(::fidl::DecodedMessage<AttachVmoRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t CloseFifo(int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<CloseFifoResponse> CloseFifo(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<CloseFifoResponse> CloseFifo(::fidl::BytePart response_buffer);

    zx_status_t RebindDevice(int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid(::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::partition::GUID** out_guid);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid(::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::partition::GUID** out_guid);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetNameResponse> GetName(::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_name);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetNameResponse> GetName(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<QueryResponse> Query(::fidl::BytePart _response_buffer, int32_t* out_status, VolumeInfo** out_info);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<QueryResponse> Query(::fidl::BytePart response_buffer);

    zx_status_t QuerySlices(::fidl::VectorView<uint64_t> start_slices, int32_t* out_status, ::fidl::Array<VsliceRange, 16>* out_response, uint64_t* out_response_count);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<QuerySlicesResponse> QuerySlices(::fidl::BytePart _request_buffer, ::fidl::VectorView<uint64_t> start_slices, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::Array<VsliceRange, 16>* out_response, uint64_t* out_response_count);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<QuerySlicesResponse> QuerySlices(::fidl::DecodedMessage<QuerySlicesRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t Extend(uint64_t start_slice, uint64_t slice_count, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ExtendResponse> Extend(::fidl::BytePart _request_buffer, uint64_t start_slice, uint64_t slice_count, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<ExtendResponse> Extend(::fidl::DecodedMessage<ExtendRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t Shrink(uint64_t start_slice, uint64_t slice_count, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ShrinkResponse> Shrink(::fidl::BytePart _request_buffer, uint64_t start_slice, uint64_t slice_count, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<ShrinkResponse> Shrink(::fidl::DecodedMessage<ShrinkRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t Destroy(int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<DestroyResponse> Destroy(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<DestroyResponse> Destroy(::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetInfoResponse> GetInfo(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockInfo** out_info);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetInfoResponse> GetInfo(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetStatsResponse> GetStats(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, bool clear, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockStats** out_stats);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetStatsResponse> GetStats(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetStatsRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t GetFifo(zx::unowned_channel _client_end, int32_t* out_status, ::zx::fifo* out_fifo);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetFifoResponse> GetFifo(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::zx::fifo* out_fifo);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetFifoResponse> GetFifo(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<AttachVmoResponse> AttachVmo(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::VmoID** out_vmoid);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<AttachVmoResponse> AttachVmo(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AttachVmoRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t CloseFifo(zx::unowned_channel _client_end, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<CloseFifoResponse> CloseFifo(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<CloseFifoResponse> CloseFifo(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static zx_status_t RebindDevice(zx::unowned_channel _client_end, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::partition::GUID** out_guid);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::partition::GUID** out_guid);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetNameResponse> GetName(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_name);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetNameResponse> GetName(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<QueryResponse> Query(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, VolumeInfo** out_info);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<QueryResponse> Query(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static zx_status_t QuerySlices(zx::unowned_channel _client_end, ::fidl::VectorView<uint64_t> start_slices, int32_t* out_status, ::fidl::Array<VsliceRange, 16>* out_response, uint64_t* out_response_count);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<QuerySlicesResponse> QuerySlices(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::fidl::VectorView<uint64_t> start_slices, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::Array<VsliceRange, 16>* out_response, uint64_t* out_response_count);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<QuerySlicesResponse> QuerySlices(zx::unowned_channel _client_end, ::fidl::DecodedMessage<QuerySlicesRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t Extend(zx::unowned_channel _client_end, uint64_t start_slice, uint64_t slice_count, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ExtendResponse> Extend(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint64_t start_slice, uint64_t slice_count, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<ExtendResponse> Extend(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ExtendRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t Shrink(zx::unowned_channel _client_end, uint64_t start_slice, uint64_t slice_count, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ShrinkResponse> Shrink(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint64_t start_slice, uint64_t slice_count, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<ShrinkResponse> Shrink(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ShrinkRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t Destroy(zx::unowned_channel _client_end, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<DestroyResponse> Destroy(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<DestroyResponse> Destroy(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Volume;
    using _Base = ::fidl::CompleterBase;

    class GetInfoCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::BlockInfo* info);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::BlockInfo* info);
      void Reply(::fidl::DecodedMessage<GetInfoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetInfoCompleter = ::fidl::Completer<GetInfoCompleterBase>;

    virtual void GetInfo(GetInfoCompleter::Sync _completer) = 0;

    class GetStatsCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::BlockStats* stats);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::BlockStats* stats);
      void Reply(::fidl::DecodedMessage<GetStatsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetStatsCompleter = ::fidl::Completer<GetStatsCompleterBase>;

    virtual void GetStats(bool clear, GetStatsCompleter::Sync _completer) = 0;

    class GetFifoCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::zx::fifo fifo);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::zx::fifo fifo);
      void Reply(::fidl::DecodedMessage<GetFifoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetFifoCompleter = ::fidl::Completer<GetFifoCompleterBase>;

    virtual void GetFifo(GetFifoCompleter::Sync _completer) = 0;

    class AttachVmoCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::VmoID* vmoid);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::VmoID* vmoid);
      void Reply(::fidl::DecodedMessage<AttachVmoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using AttachVmoCompleter = ::fidl::Completer<AttachVmoCompleterBase>;

    virtual void AttachVmo(::zx::vmo vmo, AttachVmoCompleter::Sync _completer) = 0;

    class CloseFifoCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<CloseFifoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using CloseFifoCompleter = ::fidl::Completer<CloseFifoCompleterBase>;

    virtual void CloseFifo(CloseFifoCompleter::Sync _completer) = 0;

    class RebindDeviceCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<RebindDeviceResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using RebindDeviceCompleter = ::fidl::Completer<RebindDeviceCompleterBase>;

    virtual void RebindDevice(RebindDeviceCompleter::Sync _completer) = 0;

    class GetTypeGuidCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::partition::GUID* guid);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::partition::GUID* guid);
      void Reply(::fidl::DecodedMessage<GetTypeGuidResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetTypeGuidCompleter = ::fidl::Completer<GetTypeGuidCompleterBase>;

    virtual void GetTypeGuid(GetTypeGuidCompleter::Sync _completer) = 0;

    class GetInstanceGuidCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::partition::GUID* guid);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::partition::GUID* guid);
      void Reply(::fidl::DecodedMessage<GetInstanceGuidResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetInstanceGuidCompleter = ::fidl::Completer<GetInstanceGuidCompleterBase>;

    virtual void GetInstanceGuid(GetInstanceGuidCompleter::Sync _completer) = 0;

    class GetNameCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::fidl::StringView name);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::StringView name);
      void Reply(::fidl::DecodedMessage<GetNameResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetNameCompleter = ::fidl::Completer<GetNameCompleterBase>;

    virtual void GetName(GetNameCompleter::Sync _completer) = 0;

    class QueryCompleterBase : public _Base {
     public:
      void Reply(int32_t status, VolumeInfo* info);
      void Reply(::fidl::BytePart _buffer, int32_t status, VolumeInfo* info);
      void Reply(::fidl::DecodedMessage<QueryResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using QueryCompleter = ::fidl::Completer<QueryCompleterBase>;

    virtual void Query(QueryCompleter::Sync _completer) = 0;

    class QuerySlicesCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::fidl::Array<VsliceRange, 16> response, uint64_t response_count);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::Array<VsliceRange, 16> response, uint64_t response_count);
      void Reply(::fidl::DecodedMessage<QuerySlicesResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using QuerySlicesCompleter = ::fidl::Completer<QuerySlicesCompleterBase>;

    virtual void QuerySlices(::fidl::VectorView<uint64_t> start_slices, QuerySlicesCompleter::Sync _completer) = 0;

    class ExtendCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<ExtendResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ExtendCompleter = ::fidl::Completer<ExtendCompleterBase>;

    virtual void Extend(uint64_t start_slice, uint64_t slice_count, ExtendCompleter::Sync _completer) = 0;

    class ShrinkCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<ShrinkResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ShrinkCompleter = ::fidl::Completer<ShrinkCompleterBase>;

    virtual void Shrink(uint64_t start_slice, uint64_t slice_count, ShrinkCompleter::Sync _completer) = 0;

    class DestroyCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<DestroyResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using DestroyCompleter = ::fidl::Completer<DestroyCompleterBase>;

    virtual void Destroy(DestroyCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeManagerAllocatePartitionRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeManagerAllocatePartitionResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeManagerQueryResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_volume_VolumeManagerActivateResponseTable;

class VolumeManager final {
 public:

  struct AllocatePartitionResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeManagerAllocatePartitionResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct AllocatePartitionRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    uint64_t slice_count;
    ::llcpp::fuchsia::hardware::block::partition::GUID type;
    ::llcpp::fuchsia::hardware::block::partition::GUID instance;
    ::fidl::StringView name;
    uint32_t flags;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeManagerAllocatePartitionRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 80;
    static constexpr uint32_t MaxOutOfLine = 128;
    using ResponseType = AllocatePartitionResponse;
  };

  struct QueryResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    VolumeInfo* info;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeManagerQueryResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 32;
  };
  using QueryRequest = ::fidl::AnyZeroArgMessage;

  struct ActivateResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_volume_VolumeManagerActivateResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct ActivateRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fuchsia::hardware::block::partition::GUID old_guid;
    ::llcpp::fuchsia::hardware::block::partition::GUID new_guid;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 48;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = ActivateResponse;
  };


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    zx_status_t AllocatePartition(uint64_t slice_count, ::llcpp::fuchsia::hardware::block::partition::GUID type, ::llcpp::fuchsia::hardware::block::partition::GUID instance, ::fidl::StringView name, uint32_t flags, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<AllocatePartitionResponse> AllocatePartition(::fidl::BytePart _request_buffer, uint64_t slice_count, ::llcpp::fuchsia::hardware::block::partition::GUID type, ::llcpp::fuchsia::hardware::block::partition::GUID instance, ::fidl::StringView name, uint32_t flags, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<AllocatePartitionResponse> AllocatePartition(::fidl::DecodedMessage<AllocatePartitionRequest> params, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<QueryResponse> Query(::fidl::BytePart _response_buffer, int32_t* out_status, VolumeInfo** out_info);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<QueryResponse> Query(::fidl::BytePart response_buffer);

    zx_status_t Activate(::llcpp::fuchsia::hardware::block::partition::GUID old_guid, ::llcpp::fuchsia::hardware::block::partition::GUID new_guid, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<ActivateResponse> Activate(::fidl::BytePart _request_buffer, ::llcpp::fuchsia::hardware::block::partition::GUID old_guid, ::llcpp::fuchsia::hardware::block::partition::GUID new_guid, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<ActivateResponse> Activate(::fidl::DecodedMessage<ActivateRequest> params, ::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:

    static zx_status_t AllocatePartition(zx::unowned_channel _client_end, uint64_t slice_count, ::llcpp::fuchsia::hardware::block::partition::GUID type, ::llcpp::fuchsia::hardware::block::partition::GUID instance, ::fidl::StringView name, uint32_t flags, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<AllocatePartitionResponse> AllocatePartition(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, uint64_t slice_count, ::llcpp::fuchsia::hardware::block::partition::GUID type, ::llcpp::fuchsia::hardware::block::partition::GUID instance, ::fidl::StringView name, uint32_t flags, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<AllocatePartitionResponse> AllocatePartition(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AllocatePartitionRequest> params, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<QueryResponse> Query(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, VolumeInfo** out_info);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<QueryResponse> Query(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static zx_status_t Activate(zx::unowned_channel _client_end, ::llcpp::fuchsia::hardware::block::partition::GUID old_guid, ::llcpp::fuchsia::hardware::block::partition::GUID new_guid, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<ActivateResponse> Activate(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::llcpp::fuchsia::hardware::block::partition::GUID old_guid, ::llcpp::fuchsia::hardware::block::partition::GUID new_guid, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<ActivateResponse> Activate(zx::unowned_channel _client_end, ::fidl::DecodedMessage<ActivateRequest> params, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = VolumeManager;
    using _Base = ::fidl::CompleterBase;

    class AllocatePartitionCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<AllocatePartitionResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using AllocatePartitionCompleter = ::fidl::Completer<AllocatePartitionCompleterBase>;

    virtual void AllocatePartition(uint64_t slice_count, ::llcpp::fuchsia::hardware::block::partition::GUID type, ::llcpp::fuchsia::hardware::block::partition::GUID instance, ::fidl::StringView name, uint32_t flags, AllocatePartitionCompleter::Sync _completer) = 0;

    class QueryCompleterBase : public _Base {
     public:
      void Reply(int32_t status, VolumeInfo* info);
      void Reply(::fidl::BytePart _buffer, int32_t status, VolumeInfo* info);
      void Reply(::fidl::DecodedMessage<QueryResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using QueryCompleter = ::fidl::Completer<QueryCompleterBase>;

    virtual void Query(QueryCompleter::Sync _completer) = 0;

    class ActivateCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<ActivateResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ActivateCompleter = ::fidl::Completer<ActivateCompleterBase>;

    virtual void Activate(::llcpp::fuchsia::hardware::block::partition::GUID old_guid, ::llcpp::fuchsia::hardware::block::partition::GUID new_guid, ActivateCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

}  // namespace volume
}  // namespace block
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::VsliceRange> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::hardware::block::volume::VsliceRange>);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VsliceRange, allocated) == 0);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VsliceRange, count) == 8);
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::VsliceRange) == ::llcpp::fuchsia::hardware::block::volume::VsliceRange::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::VolumeInfo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::hardware::block::volume::VolumeInfo>);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeInfo, slice_size) == 0);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeInfo, vslice_count) == 8);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeInfo, pslice_total_count) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeInfo, pslice_allocated_count) == 24);
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::VolumeInfo) == ::llcpp::fuchsia::hardware::block::volume::VolumeInfo::PrimarySize);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::GetInfoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::GetInfoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::GetInfoResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::GetInfoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetInfoResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetInfoResponse, info) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsRequest)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsRequest, clear) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetStatsResponse, stats) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::GetFifoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::GetFifoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::GetFifoResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::GetFifoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetFifoResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetFifoResponse, fifo) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoRequest)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoRequest, vmo) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::AttachVmoResponse, vmoid) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::CloseFifoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::CloseFifoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::CloseFifoResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::CloseFifoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::CloseFifoResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::RebindDeviceResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::RebindDeviceResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::RebindDeviceResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::RebindDeviceResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::RebindDeviceResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::GetTypeGuidResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::GetTypeGuidResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::GetTypeGuidResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::GetTypeGuidResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetTypeGuidResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetTypeGuidResponse, guid) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::GetInstanceGuidResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::GetInstanceGuidResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::GetInstanceGuidResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::GetInstanceGuidResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetInstanceGuidResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetInstanceGuidResponse, guid) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::GetNameResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::GetNameResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::GetNameResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::GetNameResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetNameResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::GetNameResponse, name) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::QueryResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::QueryResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::QueryResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::QueryResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::QueryResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::QueryResponse, info) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesRequest)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesRequest, start_slices) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesResponse, response) == 24);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::QuerySlicesResponse, response_count) == 280);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::ExtendRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::ExtendRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::ExtendRequest)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::ExtendRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::ExtendRequest, start_slice) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::ExtendRequest, slice_count) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::ExtendResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::ExtendResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::ExtendResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::ExtendResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::ExtendResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkRequest)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkRequest, start_slice) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkRequest, slice_count) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::ShrinkResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::Volume::DestroyResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::Volume::DestroyResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::Volume::DestroyResponse)
    == ::llcpp::fuchsia::hardware::block::volume::Volume::DestroyResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::Volume::DestroyResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest)
    == ::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest, slice_count) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest, type) == 24);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest, instance) == 40);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest, name) == 56);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionRequest, flags) == 72);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionResponse)
    == ::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::AllocatePartitionResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::VolumeManager::QueryResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::VolumeManager::QueryResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::QueryResponse)
    == ::llcpp::fuchsia::hardware::block::volume::VolumeManager::QueryResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::QueryResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::QueryResponse, info) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateRequest)
    == ::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateRequest, old_guid) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateRequest, new_guid) == 32);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateResponse)
    == ::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::volume::VolumeManager::ActivateResponse, status) == 16);

}  // namespace fidl
