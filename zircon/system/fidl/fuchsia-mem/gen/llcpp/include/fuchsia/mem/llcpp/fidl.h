// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

namespace fuchsia {
namespace mem {

struct Buffer;

extern "C" const fidl_type_t fuchsia_mem_BufferTable;

// A Buffer for data whose size is not necessarily a multiple of the page
// size.
//
// VMO objects have a physical size that is always a multiple of the page
// size. As such, VMO alone cannot serve as a buffer for arbitrarly sized
// data. |fuchsia.mem.Buffer| is a standard struct that aggregate the VMO
// and its size.
struct Buffer {
  static constexpr const fidl_type_t* Type = &fuchsia_mem_BufferTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  // The vmo.
  ::zx::vmo vmo{};

  // The size of the data in the vmo in bytes. This size must be smaller
  // than the physical size of the vmo.
  uint64_t size{};
};

}  // namespace mem
}  // namespace fuchsia

namespace fidl {

template <>
struct IsFidlType<::fuchsia::mem::Buffer> : public std::true_type {};
static_assert(std::is_standard_layout_v<::fuchsia::mem::Buffer>);
static_assert(offsetof(::fuchsia::mem::Buffer, vmo) == 0);
static_assert(offsetof(::fuchsia::mem::Buffer, size) == 8);
static_assert(sizeof(::fuchsia::mem::Buffer) == ::fuchsia::mem::Buffer::PrimarySize);

}  // namespace fidl
