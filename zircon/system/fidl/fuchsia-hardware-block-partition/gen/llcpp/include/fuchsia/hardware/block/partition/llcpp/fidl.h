// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <lib/zx/fifo.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

#include <fuchsia/hardware/block/llcpp/fidl.h>

namespace llcpp {

namespace fuchsia {
namespace hardware {
namespace block {
namespace partition {

class Partition;
struct GUID;

extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionGetInfoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionGetStatsRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionGetStatsResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionGetFifoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionAttachVmoRequestTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionAttachVmoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionCloseFifoResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionRebindDeviceResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionGetTypeGuidResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionGetInstanceGuidResponseTable;
extern "C" const fidl_type_t fuchsia_hardware_block_partition_PartitionGetNameResponseTable;

class Partition final {
 public:

  struct GetInfoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::BlockInfo* info;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionGetInfoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 24;
  };
  using GetInfoRequest = ::fidl::AnyZeroArgMessage;

  struct GetStatsResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::BlockStats* stats;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionGetStatsResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 48;
  };
  struct GetStatsRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    bool clear;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionGetStatsRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = GetStatsResponse;
  };

  struct GetFifoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::zx::fifo fifo;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionGetFifoResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using GetFifoRequest = ::fidl::AnyZeroArgMessage;

  struct AttachVmoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::llcpp::fuchsia::hardware::block::VmoID* vmoid;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionAttachVmoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 8;
  };
  struct AttachVmoRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::vmo vmo;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionAttachVmoRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = AttachVmoResponse;
  };

  struct CloseFifoResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionCloseFifoResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using CloseFifoRequest = ::fidl::AnyZeroArgMessage;

  struct RebindDeviceResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionRebindDeviceResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  using RebindDeviceRequest = ::fidl::AnyZeroArgMessage;

  struct GetTypeGuidResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    GUID* guid;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionGetTypeGuidResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 16;
  };
  using GetTypeGuidRequest = ::fidl::AnyZeroArgMessage;

  struct GetInstanceGuidResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    GUID* guid;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionGetInstanceGuidResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 16;
  };
  using GetInstanceGuidRequest = ::fidl::AnyZeroArgMessage;

  struct GetNameResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int32_t status;
    ::fidl::StringView name;

    static constexpr const fidl_type_t* Type = &fuchsia_hardware_block_partition_PartitionGetNameResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 128;
  };
  using GetNameRequest = ::fidl::AnyZeroArgMessage;


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    SyncClient(SyncClient&&) = default;

    SyncClient& operator=(SyncClient&&) = default;

    ~SyncClient() {}

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetInfoResponse> GetInfo_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockInfo** out_info);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetInfoResponse> GetInfo_Deprecated(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetStatsResponse> GetStats_Deprecated(::fidl::BytePart _request_buffer, bool clear, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockStats** out_stats);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetStatsResponse> GetStats_Deprecated(::fidl::DecodedMessage<GetStatsRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t GetFifo_Deprecated(int32_t* out_status, ::zx::fifo* out_fifo);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetFifoResponse> GetFifo_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status, ::zx::fifo* out_fifo);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetFifoResponse> GetFifo_Deprecated(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<AttachVmoResponse> AttachVmo_Deprecated(::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::VmoID** out_vmoid);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<AttachVmoResponse> AttachVmo_Deprecated(::fidl::DecodedMessage<AttachVmoRequest> params, ::fidl::BytePart response_buffer);

    zx_status_t CloseFifo_Deprecated(int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<CloseFifoResponse> CloseFifo_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<CloseFifoResponse> CloseFifo_Deprecated(::fidl::BytePart response_buffer);

    zx_status_t RebindDevice_Deprecated(int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice_Deprecated(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status, GUID** out_guid);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid_Deprecated(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status, GUID** out_guid);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid_Deprecated(::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    ::fidl::DecodeResult<GetNameResponse> GetName_Deprecated(::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_name);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<GetNameResponse> GetName_Deprecated(::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
   public:


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetInfoResponse> GetInfo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockInfo** out_info);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetInfoResponse> GetInfo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetStatsResponse> GetStats_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, bool clear, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::BlockStats** out_stats);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetStatsResponse> GetStats_Deprecated(zx::unowned_channel _client_end, ::fidl::DecodedMessage<GetStatsRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t GetFifo_Deprecated(zx::unowned_channel _client_end, int32_t* out_status, ::zx::fifo* out_fifo);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetFifoResponse> GetFifo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::zx::fifo* out_fifo);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetFifoResponse> GetFifo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<AttachVmoResponse> AttachVmo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer, ::zx::vmo vmo, ::fidl::BytePart _response_buffer, int32_t* out_status, ::llcpp::fuchsia::hardware::block::VmoID** out_vmoid);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<AttachVmoResponse> AttachVmo_Deprecated(zx::unowned_channel _client_end, ::fidl::DecodedMessage<AttachVmoRequest> params, ::fidl::BytePart response_buffer);

    static zx_status_t CloseFifo_Deprecated(zx::unowned_channel _client_end, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<CloseFifoResponse> CloseFifo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<CloseFifoResponse> CloseFifo_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static zx_status_t RebindDevice_Deprecated(zx::unowned_channel _client_end, int32_t* out_status);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<RebindDeviceResponse> RebindDevice_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, GUID** out_guid);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetTypeGuidResponse> GetTypeGuid_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, GUID** out_guid);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetInstanceGuidResponse> GetInstanceGuid_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);


    // Caller provides the backing storage for FIDL message via request and response buffers.
    // The lifetime of handles in the response, unless moved, is tied to the returned RAII object.
    static ::fidl::DecodeResult<GetNameResponse> GetName_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer, int32_t* out_status, ::fidl::StringView* out_name);

    // Messages are encoded and decoded in-place.
    static ::fidl::DecodeResult<GetNameResponse> GetName_Deprecated(zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Partition;
    using _Base = ::fidl::CompleterBase;

    class GetInfoCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::BlockInfo* info);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::BlockInfo* info);
      void Reply(::fidl::DecodedMessage<GetInfoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetInfoCompleter = ::fidl::Completer<GetInfoCompleterBase>;

    virtual void GetInfo(GetInfoCompleter::Sync _completer) = 0;

    class GetStatsCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::BlockStats* stats);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::BlockStats* stats);
      void Reply(::fidl::DecodedMessage<GetStatsResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetStatsCompleter = ::fidl::Completer<GetStatsCompleterBase>;

    virtual void GetStats(bool clear, GetStatsCompleter::Sync _completer) = 0;

    class GetFifoCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::zx::fifo fifo);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::zx::fifo fifo);
      void Reply(::fidl::DecodedMessage<GetFifoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetFifoCompleter = ::fidl::Completer<GetFifoCompleterBase>;

    virtual void GetFifo(GetFifoCompleter::Sync _completer) = 0;

    class AttachVmoCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::llcpp::fuchsia::hardware::block::VmoID* vmoid);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::llcpp::fuchsia::hardware::block::VmoID* vmoid);
      void Reply(::fidl::DecodedMessage<AttachVmoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using AttachVmoCompleter = ::fidl::Completer<AttachVmoCompleterBase>;

    virtual void AttachVmo(::zx::vmo vmo, AttachVmoCompleter::Sync _completer) = 0;

    class CloseFifoCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<CloseFifoResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using CloseFifoCompleter = ::fidl::Completer<CloseFifoCompleterBase>;

    virtual void CloseFifo(CloseFifoCompleter::Sync _completer) = 0;

    class RebindDeviceCompleterBase : public _Base {
     public:
      void Reply(int32_t status);
      void Reply(::fidl::BytePart _buffer, int32_t status);
      void Reply(::fidl::DecodedMessage<RebindDeviceResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using RebindDeviceCompleter = ::fidl::Completer<RebindDeviceCompleterBase>;

    virtual void RebindDevice(RebindDeviceCompleter::Sync _completer) = 0;

    class GetTypeGuidCompleterBase : public _Base {
     public:
      void Reply(int32_t status, GUID* guid);
      void Reply(::fidl::BytePart _buffer, int32_t status, GUID* guid);
      void Reply(::fidl::DecodedMessage<GetTypeGuidResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetTypeGuidCompleter = ::fidl::Completer<GetTypeGuidCompleterBase>;

    virtual void GetTypeGuid(GetTypeGuidCompleter::Sync _completer) = 0;

    class GetInstanceGuidCompleterBase : public _Base {
     public:
      void Reply(int32_t status, GUID* guid);
      void Reply(::fidl::BytePart _buffer, int32_t status, GUID* guid);
      void Reply(::fidl::DecodedMessage<GetInstanceGuidResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetInstanceGuidCompleter = ::fidl::Completer<GetInstanceGuidCompleterBase>;

    virtual void GetInstanceGuid(GetInstanceGuidCompleter::Sync _completer) = 0;

    class GetNameCompleterBase : public _Base {
     public:
      void Reply(int32_t status, ::fidl::StringView name);
      void Reply(::fidl::BytePart _buffer, int32_t status, ::fidl::StringView name);
      void Reply(::fidl::DecodedMessage<GetNameResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetNameCompleter = ::fidl::Completer<GetNameCompleterBase>;

    virtual void GetName(GetNameCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

};

constexpr uint32_t NAME_LENGTH = 128u;

constexpr uint32_t GUID_LENGTH = 16u;



struct GUID {
  static constexpr const fidl_type_t* Type = nullptr;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;

  ::fidl::Array<uint8_t, 16> value{};
};

}  // namespace partition
}  // namespace block
}  // namespace hardware
}  // namespace fuchsia
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::GetInfoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::GetInfoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::GetInfoResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::GetInfoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetInfoResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetInfoResponse, info) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsRequest)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsRequest, clear) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetStatsResponse, stats) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::GetFifoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::GetFifoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::GetFifoResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::GetFifoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetFifoResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetFifoResponse, fifo) == 20);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoRequest)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoRequest::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoRequest, vmo) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::AttachVmoResponse, vmoid) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::CloseFifoResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::CloseFifoResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::CloseFifoResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::CloseFifoResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::CloseFifoResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::RebindDeviceResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::RebindDeviceResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::RebindDeviceResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::RebindDeviceResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::RebindDeviceResponse, status) == 16);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::GetTypeGuidResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::GetTypeGuidResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::GetTypeGuidResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::GetTypeGuidResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetTypeGuidResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetTypeGuidResponse, guid) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::GetInstanceGuidResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::GetInstanceGuidResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::GetInstanceGuidResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::GetInstanceGuidResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetInstanceGuidResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetInstanceGuidResponse, guid) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::Partition::GetNameResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fuchsia::hardware::block::partition::Partition::GetNameResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::Partition::GetNameResponse)
    == ::llcpp::fuchsia::hardware::block::partition::Partition::GetNameResponse::PrimarySize);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetNameResponse, status) == 16);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::Partition::GetNameResponse, name) == 24);

template <>
struct IsFidlType<::llcpp::fuchsia::hardware::block::partition::GUID> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fuchsia::hardware::block::partition::GUID>);
static_assert(offsetof(::llcpp::fuchsia::hardware::block::partition::GUID, value) == 0);
static_assert(sizeof(::llcpp::fuchsia::hardware::block::partition::GUID) == ::llcpp::fuchsia::hardware::block::partition::GUID::PrimarySize);

}  // namespace fidl
