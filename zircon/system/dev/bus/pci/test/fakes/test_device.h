// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
#ifndef ZIRCON_SYSTEM_DEV_BUS_PCI_TEST_FAKES_TEST_DEVICE_H_
#define ZIRCON_SYSTEM_DEV_BUS_PCI_TEST_FAKES_TEST_DEVICE_H_

#include <cstdint>

#include <fbl/auto_call.h>

#include "../../common.h"

// clang-format off

// Standard config dump of an NVIDIA Quadro K2200 for testing because it has multiple bars
// and other values that can be used for tests. The Base Address registers have been modified
// to exercise different configurations in the tests, but keep the same size layout. An additional
// PciPowerMangement capability was added at 0xA0 followed by an additional PciExpress capability
// at 0xC2.
//
// If this configuration is changed then it's likely that some of the tests in
// protocol_test_driver.cpp will need to be updated.

constexpr uint8_t kFakeQuadroDeviceConfig[PCI_BASE_CONFIG_SIZE] = {
    0xde, 0x10, // Vendor Id
    0xba, 0x13, // Device Id
    0x07, 0x00, // Command
    0x10, 0x00, // Status
    0xa2, // Revision Id
    0x00, 0x00, 0x03, // Class Codes
    0x00, // Cacheline Size
    0x00, // Latency Timer
    0x80, // Header Type
    0x00, // BIST
    0x00, 0x00, 0x00, 0x00, // BAR 0 (32-bit mmio, non-pf, size 16M)
    0x08, 0x00, 0x00, 0x00, // BAR 1 (32-bit mmio, pf, size 256M)
    0x00, 0x00, 0x00, 0x00, // BAR 2 (MSI-X bar, size 1024)
    0x0c, 0x00, 0x00, 0x00, // BAR 3 (64-bit mmio, pf, size 32M)
    0x00, 0x00, 0x00, 0x00, // BAR 4 (Bar 3 second half)
    0x01, 0x20, 0x00, 0x00, // BAR 5 (I/O ports @ 0x2000, size 128)
    0x00, 0x00, 0x00, 0x00, // Cardbus CIS pointer
    0x3c, 0x10, // Subsystem VID
    0x97, 0x10, // Subsystem ID
    0x00, 0x00, 0x00, 0x00, // Expansion ROM Address
    0x60, // Capabilities PTR
    0x00, 0x00, 0x00, // Reserved
    0x00, 0x00, 0x00, 0x00, // Reserved
    0xff, // Interrupt Line
    0x01, // Interrupt Pin
    0x00, // Min_Gnt
    0x00, // Max_Lat
    // The rest of config space
    0x3c, 0x10, 0x97, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xce, 0xd6, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x68, 0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x78, 0x81, 0x00, 0xb8, 0x05, 0xe0, 0xfe,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xA0, 0x12, 0x00, 0xe1, 0x8d, 0x2c, 0x01,
    0x30, 0x31, 0x00, 0x00, 0x02, 0x3d, 0x45, 0x00, 0x40, 0x01, 0x01, 0x11, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x08, 0x04, 0x00,
    0x01, 0xC4, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x14, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x09, 0xC8, 0x00, 0x00, 0x09, 0xD0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x09, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x04, 0x80, 0x02, 0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};
static_assert(sizeof(kFakeQuadroDeviceConfig) == 256);

// BAR metadata for the fake Quadro. Refer to the BAR lines above for an
// explanation.
constexpr struct test_bar_info_t {
    bool is_upper_half;
    uint16_t address;
    uint32_t size;
} kTestDeviceBars[6] = {
    { .is_upper_half = false, .address = UINT16_MAX, .size = 16 * 1024 * 1024 },
    { .is_upper_half = false, .address = UINT16_MAX, .size = 256 * 1024 * 1024 },
    { .is_upper_half = false, .address = UINT16_MAX, .size = 1 * 1024 * 1024  },
    { .is_upper_half = false, .address = UINT16_MAX, .size = 32 * 1024 * 1024 },
    { .is_upper_half = true,  .address = UINT16_MAX, .size = 0 },
    { .is_upper_half = false, .address = 0x2000,     .size = 128 },
};

// This is the configuration space dump of a virtio-input device. It should
// contain an MSIX capability along with 5 Vendor capabilities.
constexpr uint8_t kFakeVirtioInputDeviceConfig[] = {
    0xf4, 0x1a, // Vendor Id
    0x52, 0x10, // Device Id
    0x07, 0x01, // Command
    0x10, 0x00, // Status
    0x01, // Revision Id
    0x00, 0x00, 0x09, // Class Codes
    0x00, // Cacheline Size
    0x00, // Latency Timer
    0x00, // Header Type
    0x00, // BIST
    0x00, 0x00, 0x00, 0x00, // BAR 0 (unused)
    0x00, 0x30, 0xbf, 0xfe, // BAR 1
    0x00, 0x00, 0x00, 0x00, // BAR 2 (unused)
    0x00, 0x00, 0x00, 0x00, // BAR 3 (unused)
    0x0c, 0xc0, 0x00, 0xfe, // BAR 4
    0x00, 0x00, 0x00, 0x00, // BAR 5 (unused)
    0x00, 0x00, 0x00, 0x00, // Cardbus CIS Pointer
    0xf4, 0x1a, // Subsystem Vid
    0x00, 0x11, // Subsystem Id
    0x00, 0x00, 0x00, 0x00, // Expansion ROM Address
    0x98, // Capabilities Ptr
    0x00, 0x00, 0x00, // Reserved
    0x00, 0x00, 0x00, 0x00, // Reserved
    0x0a, // Interrupt Line
    0x01, // Interrupt Pin
    0x00, // Min_Gnt
    0x00, // Min_Lat
    // The rest of config space
    0x09, 0x00, 0x10, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x09, 0x40, 0x10, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x09, 0x50, 0x10, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x09, 0x60, 0x14, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x09, 0x70, 0x14, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x84, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
static_assert(sizeof(kFakeVirtioInputDeviceConfig) == 256);

#endif  // ZIRCON_SYSTEM_DEV_BUS_PCI_TEST_FAKES_TEST_DEVICE_H_
