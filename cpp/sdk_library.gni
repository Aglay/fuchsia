# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/sdk/sdk_atom.gni")

# A set of C++ code exportable in an SDK.
#
# An equivalent to the built-in source_set which adds an SDK atom declaration to
# allow the set to be included in an SDK.
#
# Parameters
#
#   type (required)
#     GN template type for the library.
#
#   sdk_name (optional)
#     Name of the library in the SDK.
#     If not specified, the GN target's short name is used.
#
#   source_dir (optional)
#     If set, path to the base directory of the sources.
#     This is useful if the sources are generated and therefore not hosted
#     directly under the directory where the GN rules are declared.

template("sdk_library") {
  if (!defined(invoker.type)) {
    assert(false, "Must specify a library type")
  }
  library_type = invoker.type

  atom_name = target_name
  if (defined(invoker.sdk_name)) {
    atom_name = invoker.sdk_name
  }

  main_target_name = target_name
  sdk_target_name = "${target_name}_sdk"

  target(library_type, main_target_name) {
    forward_variables_from(invoker, "*", [
      "sdk_name",
      "source_dir",
      "type",
    ])

    if (defined(visibility)) {
      visibility += [
        ":$sdk_target_name",
      ]
    }
  }

  sdk_atom(sdk_target_name) {
    forward_variables_from(invoker, [
      "source_dir",
      "testonly",
    ])

    name = "cpp:$library_type:$atom_name"

    files = []
    if (defined(invoker.sources)) {
      foreach(source_file, invoker.sources) {
        files += [{
          source = source_file
        }]
      }
    }

    deps = []
    if (defined(invoker.public_deps)) {
      foreach(dep, invoker.public_deps) {
        full_label = get_label_info(dep, "label_no_toolchain")
        deps += [
          "${full_label}_sdk",
        ]
      }
    }

    non_sdk_deps = [
      ":$main_target_name",
    ]
    # Explicitly add non-public dependencies, in case some of the source files
    # are generated.
    if (defined(invoker.deps)) {
      non_sdk_deps += invoker.deps
    }
  }
}
