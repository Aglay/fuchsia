# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("boringssl.gni")

# See //third_party/boringssl/CMakeLists.txt

################################################################################
# Public targets

group("boringssl") {
  public_deps = [
    ":crypto",
    ":ssl",
  ]
}

##########################
# bssl command line tool #
##########################
if (is_fuchsia) {
  package("bssl") {
    deps = [
      ":crypto",
      ":ssl",
      "tool:bssl",
    ]
    binaries = [ {
          name = "bssl"
        } ]
  }
} else {
  group("bssl") {
    deps = [
      "tool:bssl",
    ]
  }
}

################
# libcrypto.so #
################
if (is_fuchsia) {
  package("libcrypto") {
    deps = [
      ":crypto",
    ]
    libraries = [ {
          name = "libcrypto.so"
        } ]
  }
  fuchsia_shared_library("crypto") {
    public_configs = [ ":boringssl_config" ]
    deps = [
      "crypto",
    ]
  }
} else {
  shared_library("crypto") {
    public_configs = [ ":boringssl_config" ]
    deps = [
      "crypto",
    ]
  }
}

#############
# libssl.so #
#############
if (is_fuchsia) {
  package("libssl") {
    deps = [
      ":ssl",
    ]
    libraries = [ {
          name = "libssl.so"
        } ]
    resources = [ {
          path = rebase_path("//third_party/root_certificates/certdata.pem")
          dest = "data/boringssl/cert.pem"
        } ]
  }
  fuchsia_shared_library("ssl") {
    public_configs = [ ":boringssl_config" ]
    deps = [
      "ssl",
    ]
  }
} else {
  shared_library("ssl") {
    public_configs = [ ":boringssl_config" ]
    deps = [
      ":crypto",
      "ssl",
    ]
  }
}

##############
# Unit tests #
##############
if (is_fuchsia) {
  package("boringssl_tests") {
    testonly = true
    deps = [
      "crypto:crypto_test",
      "ssl:ssl_test",
    ]
    tests = [
      {
        name = "crypto_test"
      },
      {
        name = "ssl_test"
      },
    ]
  }
} else {
  group("tests") {
    deps = [
      "crypto:crypto_test",
      "ssl:ssl_test",
    ]
  }
}

################################################################################
# Configs
config("boringssl_config") {
  include_dirs = [ "include" ]
  defines = [ "BORINGSSL_IMPLEMENTATION" ]
  if (defined(is_fuchsia) && is_fuchsia) {
    # rand_fuchsia uses a system call
    libs = [ "magenta" ]
  } else {
    # pthread_rwlock_t on host requires a feature flag.
    defines += [ "_XOPEN_SOURCE=700" ]
  }
}

config("internal_config") {
  visibility = [ "./*" ]
  defines = [
    "BORINGSSL_SHARED_LIBRARY",
    "BORINGSSL_NO_STATIC_INITIALIZER",
    "OPENSSL_SMALL",
  ]

  # TODO(aarongreen): Before we can enable the optimized assembly on ARM, we
  # need to have GN arguments or similar to indicate whether we have crypto
  # support.  When we don't, we should fall back to using OPENSSL_NO_ASM.  We
  # should be able to run on platforms without crypto support even when building
  # with it, since BoringSSL does the runtime check of 'OPENSSL_cpuid_setup',
  # but to do this we'll need to provide an equivalent implementation, e.g.
  # "crypto/cpu-aarch64-fuchsia.c".
  if (current_cpu == "arm64") {
    defines += [ "OPENSSL_NO_ASM" ]
  } else if (current_cpu == "x64") {
    # No-op
  } else {
    assert(false, "unsupported architecture: {{current_cpu}}")
  }
  cflags = [ "-Wno-unused-function" ]
  configs = [
    ":boringssl_config",
    "//build/config:shared_library_config",
  ]
}

config("test_config") {
  visibility = [ "./*" ]
  include_dirs = [
    "crypto/test",
    "ssl/test",
    "//third_party/gtest/include",
  ]
  configs = [ ":internal_config" ]
}

################################################################################
# Misc/other
go_run("util/embed_test_data.go") {
  sources = crypto_test_data
  output = "crypto/crypto_test_data.cc"
  args = sources
}
