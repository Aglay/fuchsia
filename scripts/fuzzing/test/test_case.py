#!/usr/bin/env python2.7
# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import unittest

import test_env
import lib.args
from factory_fake import FakeFactory
from process_fake import FakeProcess


class TestCase(unittest.TestCase):
    """TestCase that provides common test context, utilities, and assertions."""

    # Unit test "constructor"

    def setUp(self):
        super(TestCase, self).setUp()
        self._factory = None
        self._parser = None
        self._host = None
        self._device = None
        self._fuzzer = None
        self._next_pid = 10000

    # Unit test context, lazily instantiated.

    @property
    def factory(self):
        """The associated FakeFactory object."""
        if not self._factory:
            self._factory = FakeFactory()
        return self._factory

    @property
    def cli(self):
        """The associated FakeCLI object."""
        return self.factory.cli

    @property
    def parser(self):
        """The associated ArgParser object."""
        if not self._parser:
            self._parser = self.factory.create_parser()
        return self._parser

    @property
    def host(self):
        """The associated Host object."""
        if not self._host:
            self._host = self.factory.create_host()
        return self._host

    @property
    def device(self):
        """The associated FakeDevice object."""
        if not self._device:
            self._device = self.factory.create_device()
        return self._device

    @property
    def fuzzer(self):
        """The most recently created FakeFuzzer object."""
        assert self._fuzzer, 'No fuzzer created.'
        return self._fuzzer

    # Unit test utilities

    def _ssh_cmd(self, args):
        """Returns the command line arguments for an SSH commaned."""
        return ['ssh'] + self.device.ssh_opts() + [self.device.addr] + args

    def _scp_cmd(self, args):
        return ['scp'] + self.device.ssh_opts() + args

    def _get_process(self, args, ssh=False):
        cmd = self._ssh_cmd(args) if ssh else args
        return self.cli.create_process(cmd)

    def parse_args(self, *args):
        return self.parser.parse_args(args)

    def create_fuzzer(self, *args):
        args = self.parse_args(*args)
        self._fuzzer = self.factory.create_fuzzer(args)
        return self.fuzzer

    def set_outputs(self, args, output, ssh=False):
        process = self._get_process(args, ssh=ssh)
        process.stdout.truncate(0)
        process.stdout.write('\n'.join(output))
        process.stdout.flush()

    def set_running(self, package, executable, refresh=True):
        """Marks a packaged executable as running on device."""
        process = self._get_process(['cs'], ssh=True)

        # '  <exec>.cmx[<pid>]: fuchsia-pkg://fuchsia.com/<pkg>#meta/<exec>.cmx\n'
        for s in ['  ', executable, '.cmx[', str(self._next_pid),
                  ']: fuchsia-pkg://fuchsia.com/', package, '#meta/',
                  executable, '.cmx\n']:
            process.stdout.write(s)

        self._next_pid += 1
        if refresh:
            self.device._pids = None

    def stop_all(self, refresh=True):
        """Marks all executables as stopped on device."""
        self.set_outputs(['cs'], [], ssh=True)
        if refresh:
            self.device._pids = None

    def get_inputs(self, args, ssh=False):
        process = self._get_process(args, ssh=ssh)
        process.stdin.seek(0)
        return process.stdin.read().split('\n')

    # Unit test assertions

    def assertLogged(self, *logs):
        """Asserts logs were generated by calls to cli.echo or cli.error."""
        self.assertEqual(self.cli.log, list(logs))

    def assertRan(self, *args, **kwargs):
        """Asserts a previous call was made to cli.create_process."""
        self.assertIn(' '.join(args), self.cli.processes)

    def assertScpTo(self, *args):
        """Asserts a previous call was made to device.scp with args."""
        addr = '[{}]:'.format(self.device.addr)
        cmd = self._scp_cmd(list(args[:-1]) + [addr + args[-1]])
        self.assertRan(*cmd)

    def assertScpFrom(self, *args):
        """Asserts a previous call was made to device.scp with args."""
        addr = '[{}]:'.format(self.device.addr)
        cmd = self._scp_cmd([addr + arg for arg in args[:-1]] + [args[-1]])
        self.assertRan(*cmd)

    def assertSsh(self, *args):
        """Asserts a previous call was made to device.ssh with cmd."""
        cmd = self._ssh_cmd(list(args))
        self.assertRan(*cmd)
