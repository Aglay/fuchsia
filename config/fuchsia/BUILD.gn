# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/sysroot.gni")

assert(current_os == "fuchsia")

config("werror") {
  cflags = [ "-Werror" ]
}

config("compiler") {
  asmflags = []
  cflags = []
  cflags_c = []
  cflags_cc = []
  ldflags = []
  configs = []

  configs += [
    ":compiler_cpu",
    ":werror",
  ]

  if (is_clang) {
    cflags += [ "--sysroot=" + rebase_path(sysroot, root_build_dir) ]
    ldflags += [ "--sysroot=" + rebase_path(sysroot, root_build_dir) ]
  }

  cflags_c += [ "-std=c11" ]
  cflags_cc += [ "-std=c++14" ]

  asmflags += cflags
  asmflags += cflags_c
}

config("compiler_cpu") {
  cflags = []
  ldflags = []

  if (is_clang) {
    if (current_cpu == "arm64") {
      cflags += [ "--target=aarch64-fuchsia" ]
      ldflags += [ "--target=aarch64-fuchsia" ]
    } else if (current_cpu == "x64") {
      cflags += [ "--target=x86_64-fuchsia" ]
      ldflags += [ "--target=x86_64-fuchsia" ]
    } else {
      assert(false, "Unsupported architecture")
    }
  }
}

config("shared_library_config") {
}

config("executable_config") {
  libs = [
    "runtime",

    # TODO: Depending on mxio implicitly is wrong. This is currently needed so
    # printf() works, but we should wire that in explicitly and require
    # applications that want to use mxio declare their dependency explicitly.
    "mxio",
  ]
}
