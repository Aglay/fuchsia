# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//peridot/build/executable_package.gni")

executable_package("suggestion_engine") {
  resources = [
    {
      path = "resources/mod_pairs.json"
      dest = "ranking_data/mod_pairs.json"
    },
  ]

  sources = [
    "suggestion_engine_main.cc",
  ]

  deps = [
    ":debug",
    ":suggestion_engine_impl",
    "//peridot/public/lib:fidl",
    "//garnet/public/lib/app/cpp",
    "//peridot/public/lib/app_driver/cpp",
  ]
}

source_set("suggestion_engine_impl") {
  sources = [
    "auto_select_first_query_listener.cc",
    "auto_select_first_query_listener.h",
    "media_player.cc",
    "media_player.h",
    "next_processor.cc",
    "next_processor.h",
    "proposal_publisher_impl.cc",
    "proposal_publisher_impl.h",
    "query_processor.cc",
    "query_processor.h",
    "query_runner.cc",
    "query_runner.h",
    "suggestion_engine_helper.cc",
    "suggestion_engine_helper.h",
    "suggestion_engine_impl.cc",
    "suggestion_engine_impl.h",
  ]

  deps = [
    ":debug",
    ":decision_policies",
    ":filters",
    ":interruptions",
    ":models",
    ":ranking",
    ":state",
    ":timeline_stories_watcher",
    "//garnet/public/lib/fsl",
    "//garnet/public/lib/media/fidl",
    "//garnet/public/lib/media/timeline",
    "//peridot/lib/bound_set",
    "//peridot/lib/fidl:json_xdr",
    "//peridot/lib/util:rate_limited_retry",
    "//peridot/public/lib:fidl",
    "//peridot/public/lib/context/cpp:context_helper",
  ]
}

group("unittests") {
  testonly = true

  deps = [
    ":decision_policy_unittest",
    ":filters_unittest",
    ":ranking_unittest",
  ]
}

source_set("decision_policies") {
  sources = [
    "decision_policy.cc",
    "decision_policy.h",
    "decision_policies/rank_over_threshold_decision_policy.cc",
    "decision_policies/rank_over_threshold_decision_policy.h",
  ]

  deps = [
    ":models",
    ":rankers",
  ]
}

source_set("interruptions") {
  sources = [
    "interruptions_processor.cc",
    "interruptions_processor.h",
  ]

  deps = [
    ":decision_policies",
    ":models",
    ":ranking_features",
    "//peridot/public/lib:fidl",
  ]
}

source_set("ranking") {
  public_deps = [
    ":rankers",
    ":ranking_features",
  ]
}

source_set("rankers") {
  sources = [
    "ranker.cc",
    "ranker.h",
    "rankers/linear_ranker.cc",
    "rankers/linear_ranker.h",
  ]

  deps = [
    ":models",
    ":ranking_features",
    "//peridot/public/lib:fidl",
  ]
}

source_set("filters") {
  sources = [
    "filters/conjugate_ranked_passive_filter.cc",
    "filters/conjugate_ranked_passive_filter.h",
    "filters/ranked_active_filter.cc",
    "filters/ranked_active_filter.h",
    "suggestion_active_filter.cc",
    "suggestion_active_filter.h",
    "suggestion_passive_filter.cc",
    "suggestion_passive_filter.h",
  ]

  deps = [
    ":models",
    ":ranking",
  ]
}

source_set("ranking_features") {
  sources = [
    "ranking_feature.cc",
    "ranking_feature.h",
    "ranking_features/annoyance_ranking_feature.cc",
    "ranking_features/annoyance_ranking_feature.h",
    "ranking_features/focused_story_ranking_feature.cc",
    "ranking_features/focused_story_ranking_feature.h",
    "ranking_features/kronk_ranking_feature.cc",
    "ranking_features/kronk_ranking_feature.h",
    "ranking_features/mod_pair_ranking_feature.cc",
    "ranking_features/mod_pair_ranking_feature.h",
    "ranking_features/proposal_hint_ranking_feature.cc",
    "ranking_features/proposal_hint_ranking_feature.h",
    "ranking_features/query_match_ranking_feature.cc",
    "ranking_features/query_match_ranking_feature.h",
    "ranking_features/dead_story_ranking_feature.cc",
    "ranking_features/dead_story_ranking_feature.h",
  ]

  public_deps = [
    "//garnet/public/lib/fxl",
  ]

  deps = [
    ":models",
    "//garnet/public/lib/fsl",
    "//peridot/public/lib:fidl",
    "//peridot/public/lib/context/cpp:context_helper",
    "//third_party/rapidjson",
  ]
}

source_set("state") {
  sources = [
    "ranked_suggestions_list.cc",
    "ranked_suggestions_list.h",
  ]

  deps = [
    ":filters",
    ":models",
    ":ranking",
    "//garnet/public/lib/fxl",
    "//peridot/public/lib:fidl",
    "//peridot/public/lib/context/cpp:context_helper",
  ]
}

source_set("models") {
  sources = [
    "ranked_suggestion.cc",
    "ranked_suggestion.h",
    "suggestion_prototype.cc",
    "suggestion_prototype.h",
  ]

  deps = [
    "//garnet/public/lib/fxl",
  ]

  public_deps = [
    "//peridot/public/lib:fidl",
  ]
}

source_set("timeline_stories_watcher") {
  sources = [
    "timeline_stories_watcher.cc",
    "timeline_stories_watcher.h",
  ]

  deps = [
    "//garnet/public/lib/fxl",
    "//peridot/public/lib:fidl",
  ]
}

source_set("debug") {
  sources = [
    "debug.cc",
    "debug.h",
  ]

  deps = [
    ":models",
    ":state",
    "//garnet/public/lib/fxl",
    "//peridot/public/lib:fidl",
  ]

  public_deps = [
    "//peridot/lib/util:idle_waiter",
  ]
}

source_set("decision_policy_unittest") {
  testonly = true

  sources = [
    "decision_policies/rank_over_threshold_decision_policy_unittest.cc",
  ]

  deps = [
    ":rankers",
    ":decision_policies",
    "//garnet/public/lib/gtest",
    "//peridot/public/lib:fidl",
  ]
}

source_set("filters_unittest") {
  testonly = true

  sources = [
    "filters/conjugate_ranked_passive_filter_unittest.cc",
    "filters/ranked_active_filter_unittest.cc",
  ]

  deps = [
    ":filters",
    ":ranking",
    "//garnet/public/lib/gtest",
    "//peridot/public/lib:fidl",
  ]
}

source_set("ranking_unittest") {
  testonly = true

  sources = [
    "rankers/linear_ranker_unittest.cc",
    "ranking_features/annoyance_ranking_feature_unittest.cc",
    "ranking_features/focused_story_ranking_feature_unittest.cc",
    "ranking_features/kronk_ranking_feature_unittest.cc",
    "ranking_features/mod_pair_ranking_feature_unittest.cc",
    "ranking_features/proposal_hint_ranking_feature_unittest.cc",
    "ranking_features/query_match_ranking_feature_unittest.cc",
    "ranking_features/dead_story_ranking_feature_unittest.cc",
  ]

  deps = [
    ":ranking",
    "//garnet/public/lib/fxl",
    "//garnet/public/lib/gtest",
    "//third_party/googletest:gtest",
  ]
}
