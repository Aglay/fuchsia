# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

visibility = [ "//peridot/*" ]

package("ledger") {
  system_image = true

  deps = [
    "app",
  ]

  binaries = [
    {
      name = "ledger"
    },
  ]
}

package("ledger_tests") {
  testonly = true
  system_image = true

  deps = [
    ":ledger_unittests",
    "tests/benchmark",
    "tests/e2e_local",
    "tests/e2e_sync",
    "tests/integration",
    "//peridot/bin/cloud_provider_firebase:tests",
    "//peridot/bin/cloud_provider_firestore:tests",
    "//peridot/public/lib/cloud_provider/validation",
  ]

  binaries = [
    {
      name = "ledger_benchmark_backlog"
    },

    {
      name = "ledger_benchmark_get_page"
    },

    {
      name = "ledger_benchmark_delete_entry"
    },

    {
      name = "ledger_benchmark_convergence"
    },

    {
      name = "ledger_benchmark_fetch"
    },

    {
      name = "ledger_benchmark_put"
    },

    {
      name = "ledger_benchmark_sync"
    },

    {
      name = "ledger_benchmark_update_entry"
    },
  ]
  tests = [
    {
      name = "cloud_provider_firebase_unittests"
    },
    {
      name = "cloud_provider_firestore_unittests"
    },
    {
      name = "cloud_provider_validation_tests"

      # This test needs additional configuration and should not run by default.
      # Marking it as disabled puts the binary in /system/test/disabled/.
      disabled = true
    },
    {
      name = "launch_validation_tests_firebase"

      # This test needs additional configuration and should not run by default.
      # Marking it as disabled puts the binary in /system/test/disabled/.
      disabled = true
    },
    {
      name = "launch_validation_tests_firestore"

      # This test needs additional configuration and should not run by default.
      # Marking it as disabled puts the binary in /system/test/disabled/.
      disabled = true
    },
    {
      name = "ledger_integration_tests"
    },

    {
      name = "ledger_unittests"
    },

    {
      name = "ledger_e2e_local"
    },

    {
      name = "ledger_e2e_sync"

      # This test needs additional configuration and should not run by default.
      # Marking it as disabled puts the binary in /system/test/disabled/.
      disabled = true
    },
  ]

  resources = [
    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/get_page/add_new_page.tspec")
      dest = "ledger/benchmark/add_new_page.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/backlog/backlog.tspec")
      dest = "ledger/benchmark/backlog.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/backlog/backlog_big_entry.tspec")
      dest = "ledger/benchmark/backlog_big_entry.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/backlog/backlog_big_entry_updates.tspec")
      dest = "ledger/benchmark/backlog_big_entry_updates.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/backlog/backlog_many_big_entries.tspec")
      dest = "ledger/benchmark/backlog_many_big_entries.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/backlog/backlog_many_small_entries.tspec")
      dest = "ledger/benchmark/backlog_many_small_entries.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/backlog/backlog_small_entry_updates.tspec")
      dest = "ledger/benchmark/backlog_small_entry_updates.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/get_page/get_same_page.tspec")
      dest = "ledger/benchmark/get_same_page.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/convergence/convergence.tspec")
      dest = "ledger/benchmark/convergence.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/convergence/multidevice_convergence.tspec")
      dest = "ledger/benchmark/multidevice_convergence.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/put/transaction.tspec")
      dest = "ledger/benchmark/transaction.tspec"
    },

    {
      path = rebase_path("//peridot/bin/ledger/tests/benchmark/put/put.tspec")
      dest = "ledger/benchmark/put.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/put/put_as_reference.tspec")
      dest = "ledger/benchmark/put_as_reference.tspec"
    },

    {
      path = rebase_path("//peridot/bin/ledger/tests/benchmark/sync/sync.tspec")
      dest = "ledger/benchmark/sync.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/sync/sync_big_change.tspec")
      dest = "ledger/benchmark/sync_big_change.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/update_entry/update_entry.tspec")
      dest = "ledger/benchmark/update_entry.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/update_entry/update_entry_transactions.tspec")
      dest = "ledger/benchmark/update_entry_transactions.tspec"
    },

    {
      path =
          rebase_path("//peridot/bin/ledger/tests/benchmark/fetch/fetch.tspec")
      dest = "ledger/benchmark/fetch.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/fetch/fetch_partial.tspec")
      dest = "ledger/benchmark/fetch_partial.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/delete_entry/delete_entry.tspec")
      dest = "ledger/benchmark/delete_entry.tspec"
    },

    {
      path = rebase_path(
              "//peridot/bin/ledger/tests/benchmark/delete_entry/delete_entry_transaction.tspec")
      dest = "ledger/benchmark/delete_entry_transaction.tspec"
    },
  ]
}

config("ledger_config") {
  asmflags = []

  cflags = [
    # Remove when enabled globally by TO-99.
    "-Wunused-lambda-capture",

    # Remove when enabled globally by TO-100.
    "-Wuser-defined-warnings",

    # Warn about unreachable code.
    "-Wunreachable-code",
  ]

  ldflags = [
    # Use a 1M stack.
    "-Wl,-z,stack-size=0x100000",
  ]
}

executable("ledger_unittests") {
  testonly = true

  deps = [
    "//garnet/public/lib/fxl:fxl_printers",
    "//garnet/public/lib/test_runner/cpp:gtest_main",
    "//peridot/bin/ledger/app:unittests",
    "//peridot/bin/ledger/cache:unittests",
    "//peridot/bin/ledger/cloud_sync/impl:unittests",
    "//peridot/bin/ledger/coroutine:unittests",
    "//peridot/bin/ledger/coroutine/context:unittests",
    "//peridot/bin/ledger/encryption/impl:unittests",
    "//peridot/bin/ledger/encryption/primitives:unittests",
    "//peridot/bin/ledger/environment:unittests",
    "//peridot/bin/ledger/lock:unittests",
    "//peridot/bin/ledger/p2p_provider/impl:unittests",
    "//peridot/bin/ledger/p2p_sync/impl:unittests",
    "//peridot/bin/ledger/storage/impl:unittests",
    "//peridot/bin/ledger/storage/impl/btree:unittests",
    "//peridot/bin/ledger/storage/public:unittests",
    "//peridot/bin/ledger/testing:unittests",
  ]

  configs += [ ":ledger_config" ]
}
