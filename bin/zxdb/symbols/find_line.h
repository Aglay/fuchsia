// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#pragma once

#include <stdint.h>

#include <string>
#include <vector>

namespace llvm {
class DWARFUnit;
}

namespace zxdb {

class LineTable;
class Location;
class ModuleSymbolIndex;
struct ResolveOptions;
class SymbolContext;

struct LineMatch {
  uint64_t address = 0;
  int line = 0;

  // Absolute offset of the DIE containing the function for this address or 0
  // if there is no function for it. This is used so we don't accidentally
  // treat duplicate line entries in different functions as the same.
  uint32_t function_die_offset = 0;
};

// Searches the given line table for the given file/line. Returns all matches
// where the line table is an exact match for the file/line in question, or
// there is a transition from a line before the line in question to a line
// after the line in question.
std::vector<LineMatch> GetAllLineTableMatchesInUnit(
    const LineTable& line_table, const std::string& full_path, int line);

// Filters the list of line matches (generated by GetAllLineTableMatchesInUnit)
// to remove matches being in the same function or inline.
//
// We expect to have few results in the vector so vector performance should be
// good enough. Returning a new copy keeps the code a little simpler than
// mutating in place.
std::vector<LineMatch> FilterUnitLineMatches(
    const std::vector<LineMatch>& matches);

// Filters the set of matches to get all instances of the closest match for the
// line. LineMatches are only generated for lines that cross the line in
// question, so the closest LineMatch for this function is the one with the
// smallest line number.
std::vector<LineMatch> GetClosestLineMatches(
    const std::vector<LineMatch>& matches);

}  // namespace zxdb
