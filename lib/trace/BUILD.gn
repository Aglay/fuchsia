# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Declares common trace data types.
source_set("types") {
  sources = [
    "ctypes.h",
    "ticks.h",
    "types.h",
  ]

  deps = [
    "//garnet/public/lib/fxl",
  ]

  if (!is_fuchsia) {
    # If not built on a Fuchsia system, we need to manually tell the compiler
    # where to find magenta headers.
    public_deps = [ "//magenta/system/public" ]
  }
}

# Declares the trace macros and writer API and offers only a do-nothing stub
# implementation with weak linkage.
#
# To enable tracing in your application also include the 'provider' target
# in your application and make sure to register a TraceProvider when your
# application starts up.
#
# This target only depends on fxl, standard library, and system headers
# so that it can safely be referenced from most low-level libraries with
# minimum impact.
source_set("trace") {
  sources = [
    "cevent.h",
    "cwriter.h",
    "cwriter_stub.cc",
    "event.h",
    "internal/cevent_helpers.cc",
    "internal/cevent_helpers.h",
    "internal/event_helpers.cc",
    "internal/event_helpers.h",
    "writer.h",
    "writer_stub.cc",
  ]

  deps = [
    ":internal_fields",
    "//garnet/public/lib/fxl",
  ]

  public_deps = [
    ":types",
    "//garnet/public/lib/app/cpp",
    "//magenta/system/ulib/mx",
  ]
}

# Implements the trace writer API.
# This target includes the trace engine which needs a message loop to operate.
source_set("writer") {
  sources = [
    "cwriter.cc",
    "internal/trace_engine.cc",
    "internal/trace_engine.h",
    "writer.cc",
  ]

  deps = [
    "//garnet/public/lib/fxl",
    "//garnet/public/lib/fsl",
  ]

  public_deps = [
    ":trace",
  ]
}

# Implements the trace provider API.
# This target includes the fidl-based TraceProvider front-end together
# with the trace writer.
source_set("provider") {
  sources = [
    "dump.cc",
    "dump.h",
    "internal/trace_provider_impl.cc",
    "internal/trace_provider_impl.h",
    "provider.cc",
    "provider.h",
    "settings.cc",
    "settings.h",
  ]

  deps = [
    "//garnet/public/lib/app/cpp",
    "//apps/tracing/services",
    "//garnet/public/lib/fxl",
    "//garnet/public/lib/fsl",
  ]

  public_deps = [
    ":writer",
  ]
}

# Implements the trace reader API.
source_set("reader") {
  sources = [
    "reader.cc",
    "reader.h",
  ]

  deps = [
    ":internal_fields",
    "//garnet/public/lib/fxl",
  ]

  public_deps = [
    ":types",
  ]
}

# Declares internal fields which describe the trace format.
source_set("internal_fields") {
  sources = [
    "internal/fields.h",
  ]

  public_deps = [
    ":types",
  ]
}

source_set("unittests") {
  testonly = true

  sources = [
    "tests/cevent_test_harness.cc",
    "tests/cevent_unittest.c",
    "tests/cevent_unittest.h",
    "tests/ctrace_test_harness.h",
    "tests/cwriter_test_harness.cc",
    "tests/cwriter_unittest.c",
    "tests/cwriter_unittest.h",
    "tests/event_unittest.cc",
    "tests/fields_unittest.cc",
    "tests/settings_unittest.cc",
    "tests/writer_unittest.cc",
  ]

  deps = [
    ":internal_fields",
    ":provider",
    ":reader",
    ":trace",
    ":types",
    "//apps/tracing/services",
    "//garnet/public/lib/fsl",
    "//third_party/gtest",
    "//third_party/rapidjson",
  ]
}

executable("trace_stub_tests") {
  testonly = true

  sources = [
    "tests/writer_stub_unittest.cc",
  ]

  deps = [
    ":trace",
    "//garnet/public/lib/fsl/test",
    "//third_party/gtest",
  ]
}

executable("ctrace_stub_tests") {
  testonly = true

  sources = [
    "tests/cwriter_stub_unittest.cc",
  ]

  deps = [
    ":trace",
    "//garnet/public/lib/fsl/test",
    "//third_party/gtest",
  ]
}
