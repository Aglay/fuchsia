// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.guest.device;

using fuchsia.guest;
using fuchsia.io;
using zx;

// Contains the details of a device trap.
struct Trap {
    // The address of the device trap. This must be page-aligned.
    zx.gpaddr addr;

    // The size of the device trap. This must be a multiple of the page size.
    uint64 size;
};

// Contains the basic information required to start execution of a device.
struct StartInfo {
    // The trap associated with a device. It is up to the device to set this
    // trap during device setup.
    Trap trap;

    // The guest associated with a device. This handle should be used to setup
    // device traps, and then be released before device operation begins.
    handle<guest>? guest;

    // The event associated with a device interrupt. This is how the device will
    // notify the guest of events it should process.
    handle<event> event;

    // The VMO used to represent guest physical memory.
    handle<vmo> vmo;
};

[FragileBase]
interface VirtioDevice {
    // Configure a |queue| for the device. This specifies the |size| and the
    // guest physical addresses of the queue: |desc|, |avail|, and |used|.
    0x80000001: ConfigureQueue(uint16 queue, uint16 size, zx.gpaddr desc,
                               zx.gpaddr avail, zx.gpaddr used);

    // Notify a |queue| for the device. Primarily used for black-box testing.
    0x80000002: NotifyQueue(uint16 queue);

    // Ready a device. This provides the set of |negotiated_features| that the
    // driver and device have agreed upon.
    0x80000003: Ready(uint32 negotiated_features);
};

[Discoverable]
interface VirtioBalloon : VirtioDevice {
    // Start the balloon device. Set |demand_page| to true, if demand paging is
    // preferred over the deflate queue.
    0x81000001: Start(StartInfo start_info, bool demand_page);

    // Get memory statistics from the balloon device.
    0x81000002: GetMemStats()
                    -> (zx.status status,
                        vector<fuchsia.guest.MemStat>? mem_stats);
};

const uint64 MAX_ID_SIZE = 20;

// Data format of the file backing a block device.
enum BlockFormat {
    // Raw IO. All reads and writes go directly to disk.
    RAW = 0;
    // QCOW image. All reads and writes go to a QCOW image.
    QCOW = 1;
};

// Mode of the file backing a block device.
enum BlockMode {
    // Reads and writes are allowed.
    READ_WRITE = 0;
    // Only reads are allowed.
    READ_ONLY = 1;
    // Writes are allowed, but are stored in memory, not to disk.
    VOLATILE_WRITE = 2;
};

[Discoverable]
interface VirtioBlock : VirtioDevice {
    // Start the block device.
    0x81000001: Start(StartInfo start_info, string:MAX_ID_SIZE id,
                      BlockMode mode, BlockFormat format, fuchsia.io.File file)
                    -> (uint64 size);
};

[Discoverable]
interface VirtioConsole : VirtioDevice {
    // Start the console device. This uses |socket| to handle input and output.
    0x81000001: Start(StartInfo start_info, handle<socket> socket);
};

[Discoverable]
interface VirtioInput : VirtioDevice {
    // Start the input device.
    0x81000001: Start(StartInfo start_info);
};

[Discoverable]
interface VirtioRng : VirtioDevice {
    // Start the RNG device.
    0x81000001: Start(StartInfo start_info);
};
