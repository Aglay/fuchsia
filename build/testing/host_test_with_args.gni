# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/testing/host_test_data.gni")
import("//build/testing/test_spec.gni")

# Declares a host test that requires arguments.
#
# Since the testing infrastructure doesn't handle tests with arguments, this
# template will generate a script that encapsulates the arguments and build the
# relevant test_spec target. This can be used to build data driven tests by
# invoking a host tool with a test specification.
#
# Note: The tool and any data dependencies it has (including files referred to
# by the arguments) MUST be declared by using the host_test_data template.
#
# Parameters
#
#   tool (required)
#     [path]: Path to the tool the test should invoke.
#
#   args (required)
#     [list of strings]: Arguments to pass to the tool
#
#   target (optional)
#     [label]: The test target. Defaults to target_name.
#
#   deps, public_deps, visibility
#     Forwarded from invoker.
#
if (is_host) {
  template("host_test_with_args") {
    assert(defined(invoker.tool), "Requires a tool")
    assert(defined(invoker.args), "Requires a list of arguments")

    _test_data_target = "${target_name}_script_data"
    _script_file_target = "${target_name}_test_script"
    _script_file = "${target_out_dir}/${target_name}.sh"

    host_test_data(_test_data_target) {
      sources = [ _script_file ]
      deps = [ ":${_script_file_target}" ]
    }

    action(_script_file_target) {
      testonly = true
      script = "//build/testing/create_test.sh"
      args = [
        rebase_path(_script_file, root_build_dir),
        "${invoker.tool}",
      ]
      args += invoker.args
      outputs = [ "${_script_file}" ]

      forward_variables_from(invoker,
                             [
                               "public_deps",
                               "visibility",
                             ])

      if (defined(invoker.deps)) {
        deps = invoker.deps
      }
    }

    test_spec(target_name) {
      if (defined(invoker.target)) {
        target = "${invoker.target}"
      } else {
        target = "${target_name}"
      }
      path = _script_file
      command = [ rebase_path(_script_file, root_build_dir) ]
      deps = [
        ":${_script_file_target}",
        ":${_test_data_target}",
      ]
    }
  }
}
