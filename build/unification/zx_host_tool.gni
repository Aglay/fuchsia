# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/host.gni")
import("//build/sdk/sdk_atom.gni")

template("zx_host_tool") {
  # NOTE: |is_linux| is required because some //vendor/ targets depend on
  # //zircon/tools/zbi(//build/toolchain:linux_x64), and that toolchain
  # doesn't set `is_host` to true.
  if (is_host || is_linux) {
    tool_name = target_name

    # NOTE: The executable needs to be built, but it also needs to be copied
    # into $root_build_dir/host-tools/ to be picked up by various shell scripts
    # outside of the build itself.

    # The target used to build the executable itself.
    executable_target = "_executable.$tool_name"

    # The target used to install it to $root_build_dir/host-tools/
    install_target = "_install.$tool_name"

    group(tool_name) {
      public_deps = [
        ":$executable_target",
        ":$install_target",
      ]
    }

    # Compute the output path of the executable target.
    _output_name = tool_name
    if (defined(invoker.output_name)) {
      _output_name = invoker.output_name
    }
    if (defined(invoker.output_extension)) {
      _output_extension = invoker.output_extension
    } else {
      _output_extension = ""
      if (current_os == "win") {
        _output_extension = "exe"
      }
    }
    _output_dir = root_out_dir
    if (defined(invoker.output_dir)) {
      _output_dir = invoker.output_dir
    }
    if (_output_extension != "") {
      _output_name += _output_extension
    }
    _output_file = "$_output_dir/$_output_name"

    not_needed(invoker, [ "sdk_migrated" ])
    executable(executable_target) {
      output_name = tool_name
      forward_variables_from(invoker,
                             "*",
                             [
                               "sdk_migrated",
                               "target_name",
                               "testonly",
                               "visibility",
                             ])
      forward_variables_from(invoker, [ "testonly" ])
    }

    install_host_tools(install_target) {
      deps = [ ":$executable_target" ]
      outputs = [ _output_name ]
    }

    file_base = "tools/$tool_name"
    tool_src = _output_file

    # TODO(fxbug.dev/42999): remove extra atom
    if (current_cpu == host_cpu) {
      sdk_atom("${target_name}_sdk_legacy") {
        id = "sdk://$file_base"
        category = "partner"

        meta = {
          dest = "$file_base-meta.json"
          schema = "host_tool"
          value = {
            type = "host_tool"
            name = tool_name
            root = "tools"
            files = [ file_base ]
          }
        }

        files = [
          {
            source = tool_src
            dest = file_base
          },
        ]
        non_sdk_deps = [ ":${executable_target}" ]
      }
    }

    if (host_os == "linux" || host_os == "mac") {
      file_base = "tools/$current_cpu/$tool_name"
    }

    sdk_atom("${tool_name}_sdk") {
      id = "sdk://$file_base"
      category = "partner"

      meta = {
        dest = "$file_base-meta.json"
        schema = "host_tool"
        value = {
          type = "host_tool"
          name = tool_name
          root = "tools"
          files = [ file_base ]
        }
      }

      files = [
        {
          source = tool_src
          dest = file_base
        },
      ]
      non_sdk_deps = [ ":${executable_target}" ]
    }
  } else {
    # Not on host, don't compile anything.
    not_needed(invoker, "*")
    not_needed([ "target_name" ])
  }
}

set_defaults("zx_host_tool") {
  configs = default_executable_configs
}

template("zx_host_tool_action") {
  assert(defined(invoker.tool), "tool must be defined for $target_name")
  compiled_action(target_name) {
    tool = invoker.tool
    forward_variables_from(invoker, "*", [ "tool" ])
  }
}

template("zx_host_tool_action_foreach") {
  assert(defined(invoker.tool), "tool must be defined for $target_name")
  compiled_action_foreach(target_name) {
    tool = invoker.tool
    forward_variables_from(invoker, "*", [ "tool" ])
  }
}
