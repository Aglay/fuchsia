# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/images/args.gni")
import("//build/images/bootfs_manifest_additions.gni")
import("//build/images/ta.gni")
import("//build/images/zedboot/zedboot_args.gni")
import("//build/images/zxcrypt.gni")
import("//build/unification/future/images/devmgr_config.gni")
import("//build/unification/future/images/verify_zbi.gni")
import("//build/unification/future/images/zedboot.gni")
import("//build/unification/images/common_image_contents.gni")
import("//build/unification/images/common_test_contents.gni")
import("//build/unification/zbi/generated_resource.gni")
import("//build/unification/zbi/migrated_zbi.gni")
import("//build/unification/zbi/resource.gni")
import("//build/unification/zbi/zbi_input.gni")
import("//src/sys/cmc/build/cml.gni")

import("legacy_zircon_objects.gni")

# This file contains ZBI targets which mirror the ones under //build/images.
# Ultimately the file will disappear and its contents will be progressively
# dispatched to //build/images.
# In the meantime, the `verify_xxx` targets below ensure that the ZBI targets
# remain in sync with the originals under //build/images.

group("images") {
  testonly = true

  if (!bootfs_only) {
    deps = [
      # netboot zbi's are not built by default as they get too big under certain
      # configurations.
      # ":verify_netboot",
      ":verify_zedboot",
    ]
  }
}

# Verification targets.

verify_zbi("verify_netboot") {
  testonly = true

  original = "$root_out_dir/netboot.zbi"

  updated = "$target_out_dir/netboot.zbi"

  deps = [
    ":netboot",
    "//build/images:netboot",
  ]
}

verify_zbi("verify_zedboot") {
  testonly = true

  original = "$root_out_dir/zedboot.zbi"

  updated = "$target_out_dir/zedboot.zbi"

  deps = [
    ":zedboot",
    "//build/images/zedboot:zbi",
  ]
}

generated_resource("zxcrypt") {
  outputs = [ "config/zxcrypt" ]
  contents = zxcrypt_key_source
}

# Configuration files for devmgr.

devmgr_config("fuchsia_devmgr_config") {
  label = "//build/images:devmgr_config.txt"
}

devmgr_config("zedboot_devmgr_config") {
  label = "//build/images/zedboot:devmgr_config.txt"
}

# Other supporting targes.

zbi_input("fuchsia_kernel_cmdline") {
  type = "cmdline"
  args = []
  foreach(arg, kernel_cmdline_args + board_kernel_cmdline_args) {
    args += [ "--entry=$arg" ]
  }
  sources = kernel_cmdline_files
}

ta_deps = []
foreach(ta_uuid, fuchsia_ta_uuids) {
  resource("ta_$ta_uuid") {
    sources = [ "${ta_path}/${ta_uuid}${ta_src_suffix}" ]
    outputs = [ "lib/firmware/${ta_uuid}${ta_dest_suffix}" ]
  }

  ta_deps += [ ":ta_$ta_uuid" ]
}

group("ta") {
  deps = ta_deps
}

zedboot_cmdline = [
                    "console.shell=true",
                    "netsvc.disable=false",
                    "kernel.enable-debugging-syscalls=true",
                    "kernel.enable-serial-syscalls=true",
                  ] + zedboot_cmdline_args + board_zedboot_cmdline_args

zbi_input("zedboot_kernel_cmdline") {
  type = "cmdline"
  args = []
  foreach(arg, zedboot_cmdline) {
    args += [ "--entry=$arg" ]
  }
  sources = zedboot_cmdline_files
}

zedboot_ta_deps = []
foreach(ta_uuid, zedboot_ta_uuids) {
  resource("zedboot_ta_$ta_uuid") {
    sources = [ "${ta_path}/${ta_uuid}${ta_src_suffix}" ]
    outputs = [ "lib/firmware/${ta_uuid}${ta_dest_suffix}" ]
  }

  zedboot_ta_deps += [ ":zedboot_ta_$ta_uuid" ]
}

group("zedboot_ta") {
  deps = zedboot_ta_deps
}

legacy_zircon_objects("legacy_tests") {
  deps = [ "//build/unification/images:legacy-tests" ]
}

zbi_input("fvm.blk_ramdisk") {
  testonly = true

  type = "ramdisk"

  # Use data_deps and not deps so that the contents of the fvm don't get
  # included in the zbi.
  data_deps = [ "//build/images:fvm.blk" ]

  _out_dir = get_label_info(data_deps[0], "target_out_dir")
  sources = [ "$_out_dir/fvm.blk" ]
}

# ZBI's.

migrated_zbi("netboot") {
  testonly = true

  deps = [ "//build/unification/zbi:kernel" ]
  deps += [ ":fvm.blk_ramdisk" ]
  deps += [
    ":fuchsia_devmgr_config",
    ":fuchsia_kernel_cmdline",
    ":ta",
    ":zxcrypt",
  ]
  deps += bootfs_manifest_additions
  deps += common_image_contents
}

migrated_zbi("zedboot") {
  testonly = true

  deps = [ "//build/unification/zbi:kernel" ]
  deps += [
    ":zedboot_devmgr_config",
    ":zedboot_kernel_cmdline",
    ":zedboot_ta",
    ":zxcrypt",
  ]
  deps += zedboot_deps
  deps += bootfs_manifest_additions
}
