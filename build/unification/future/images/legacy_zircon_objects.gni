# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Converts some data encoded in a Zircon manifest into a format that makes it
# consumable by a distribution_manifest target.
#
# Parameters
#
#   deps (required)
#     List of GN labels referring to ZN artifacts, i.e. zircon_artifact or
#     aggregate_manifest targets.

template("legacy_zircon_objects") {
  assert(defined(invoker.deps), "The 'deps' attribute is required.")

  action(target_name) {
    script =
        "//build/unification/future/images/write_zn_distribution_entries.py"

    deps = invoker.deps

    inputs = []
    outputs = [ "$target_gen_dir/$target_name.legacy_entries.json" ]
    args = [
      "--output",
      rebase_path(outputs[0], root_build_dir),
    ]

    foreach(dep, invoker.deps) {
      out_dir = get_label_info(dep, "target_out_dir")
      name = get_label_info(dep, "name")
      manifest = "$out_dir/$name.unification.manifest"
      inputs += [ manifest ]
      args += [
        "--file",
        rebase_path(manifest, root_build_dir),
      ]
    }

    metadata = {
      # Used by the distribution_manifest template.
      distribution_entries_barrier = []
      distribution_entries_files = [
        {
          file = rebase_path(outputs[0], root_build_dir)

          # NOTE: not including the toolchain here as this target can be reached
          # from different paths due to its hacky nature, and label stability is
          # key to ensure the build does not fail due to a bogus duplicate.
          # This will go away naturally when the targets represented in the data_deps
          # are handled directly in the GN build.
          label = get_label_info(":$target_name", "label_no_toolchain")
        },
      ]
    }
  }
}
