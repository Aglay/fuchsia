#!/usr/bin/env python2.7
# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
'''Reads the contents of a manifest file generated by the build and expands file
   references within, converting to JSON (see dist_schema.json) in the process.
   '''

import argparse
import json


def expand(manifest):
    with open(manifest, 'r') as manifest_file:
        lines = manifest_file.readlines()
    result = []
    for line in lines:
        # Format: foo/bar=path/on/disk/for/bar
        if '=' in line:
            result.append(line.strip())
            continue
        # Format: path/on/disk/for/manifest
        # That manifest contains lines of the above format.
        result.extend(expand(line.strip()))
    return list(set(result))


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        '--input', help='Path to original manifest', required=True)
    parser.add_argument(
        '--output', help='Path to the updated manifest', required=True)
    args = parser.parse_args()

    all_lines = expand(args.input)
    values = [l.split('=', 1) + [''] for l in all_lines]
    objects = [dict(zip(['destination', 'source', 'label'], v)) for v in values]

    with open(args.output, 'w') as output_file:
        json.dump(
            sorted(objects),
            output_file,
            indent=2,
            sort_keys=True,
            separators=(',', ': '))


if __name__ == '__main__':
    main()
