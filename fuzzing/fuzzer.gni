# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")

# Declare a fuzzed executable target.
#
# Creates an instrumented executable file for fuzzing with a sanitizer.  Do not
# use directly; instead, use 'fuzz-target' with an associated 'fuzz-package'
# specifying the supported sanitizers.
#
# Takes all the same parameters as executable().
template("_fuzzed_executable") {
  executable(target_name) {
    _target_type = "fuzzed_executable"

    # Explicitly forward visibility, implicitly forward everything else.
    # See comment in //build/config/BUILDCONFIG.gn for details on this pattern.
    forward_variables_from(invoker, [ "visibility" ])
    forward_variables_from(invoker,
                           "*",
                           [
                             "visibility",
                             "_target_type",
                           ])
  }
}

# Defines a fuzz target binary
#
# The fuzz_target template is used to create binaries which leverage LLVM's
# libFuzzer to perform fuzz testing.
#
# Parameters
#
#   options (optional)
#     [list of strings] Each option is of the form "key=value" and indicates
#     command line options that the fuzzer should be invoked with. Valid keys
#     are libFuzzer options (https://llvm.org/docs/LibFuzzer.html#options).
#
#   dictionary (optional)
#     [file] If specified, a file containing inputs, one per line, that the
#     fuzzer will use to generate new mutations.
#
#   corpora (optional)
#     [list of strings] One or more locations from which to get a fuzzing
#     corpus, e.g. a project path to a directory of artifacts, a project
#     path to a CIPD ensure file, or a GCS URL.
#
#   sources (optional)
#     [list of files] The C++ sources required to build the fuzzer binary. With
#     the exception of the "zircon_fuzzers" targets, this list must be present
#     and include a file defining `LLVMFuzzerTestOneInput`.  It will typically
#     be a single file (with deps including the software under test).
#
template("fuzz_target") {
  assert(defined(invoker.sources), "`sources` must be defined for $target_name")
  _fuzzed_executable(target_name) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "corpora",
                             "dictionary",
                             "options",
                             "output_name",
                           ])
    testonly = true
  }

  # The following rules ensure the fuzzer resources are present (even if empty)
  # and in known locations.  This is needed as the fuzz_package has no way of
  # knowing the original file names when building the package manifest.  These
  # files only need to be written once, so only do it in the base toolchain.
  if (current_toolchain == toolchain_variant.base) {
    # Copy the corpora available for the fuzzer
    data = []
    if (defined(invoker.corpora)) {
      data += invoker.corpora
    }
    write_file("${target_gen_dir}/${target_name}/corpora", data)

    # Copy the fuzzer dictionary
    data = []
    if (defined(invoker.dictionary)) {
      data = read_file(invoker.dictionary, "list lines")
    }
    write_file("${target_gen_dir}/${target_name}/dictionary", data)

    # Copy the options the fuzzer should be invoked with
    data = []
    if (defined(invoker.options)) {
      data += invoker.options
    }
    write_file("${target_gen_dir}/${target_name}/options", data)
  } else {
    not_needed(invoker, "*")
  }
}

set_defaults("fuzz_target") {
  configs = default_executable_configs
}

# Defines a package of fuzz target binaries
#
# The fuzz_package template is used to bundle several fuzz_targets and their
# associated data into a single Fuchsia package.
#
# Parameters
#
#   targets (required)
#     [list of labels] The fuzz_target() targets to include in this package.
#
#   sanitizers (required)
#     [list of variants] A set of sanitizer variants.  The resulting package
#     will contain binaries for each sanitizer/target combination.
#
#   binaries (optional)
#   data_deps (optional)
#   deps (optional)
#   public_deps (optional)
#   extra (optional)
#   loadable_modules (optional)
#   meta (optional)
#   resources (optional)
#     Passed through to the normal package template.

template("fuzz_package") {
  assert(defined(invoker.targets), "targets must be defined for $target_name}")
  assert(defined(invoker.sanitizers),
         "sanitizers must be defined for $target_name")

  # Only assemble the package once; handle the specific sanitizers in the loop below
  if (current_toolchain == toolchain_variant.base) {
    fuzz = {
      binaries = []
      deps = []
      resources = []
      forward_variables_from(invoker,
                             [
                               "binaries",
                               "data_deps",
                               "deps",
                               "public_deps",
                               "extra",
                               "loadable_modules",
                               "meta",
                               "resources",
                               "targets",
                               "sanitizers",
                             ])
    }

    foreach(fuzz_target, fuzz.targets) {
      fuzz_name = get_label_info(fuzz_target, "name")

      # Find the executable variant for the sanitized fuzzer
      selected = false
      sanitized_target = ""
      foreach(sanitizer, fuzz.sanitizers) {
        if (!selected) {
          foreach(selector, select_variant_canonical) {
            if (selector.variant == "${sanitizer}-fuzzer") {
              selector_target_type = []
              if (defined(selector.target_type)) {
                selector_target_type = selector.target_type
                if (selector_target_type[0] == "fuzzed_executable") {
                  selected = true
                }
              }
              selector_name = []
              if (defined(selector.name)) {
                selector_name = selector.name
                if (selector_name[0] == fuzz_name) {
                  selected = true
                }
              }
              selector_output_name = []
              if (defined(selector.output_name)) {
                selector_output_name = selector.output_name
                if (selector_output_name[0] == fuzz_name) {
                  selected = true
                }
              }
              if (selected) {
                sanitized_target = "${fuzz_target}(${toolchain_variant.base}-${sanitizer}-fuzzer)"
              }
            }
          }
        }
      }

      # If enabled, add fuzz target to package
      if (sanitized_target != "") {
        fuzz_out_dir = get_label_info(sanitized_target, "root_out_dir")
        fuzz.binaries += [
          {
            name = fuzz_name
            source = "${fuzz_out_dir}/${fuzz_name}"
            dest = fuzz_name
          },
        ]

        fuzz.deps += [ sanitized_target ]

        fuzz_gen_dir =
            get_label_info(fuzz_target, "target_gen_dir") + "/${fuzz_name}"
        fuzz.resources += [
          {
            path = "${fuzz_gen_dir}/corpora"
            dest = "${fuzz_name}/corpora"
          },
          {
            path = "${fuzz_gen_dir}/dictionary"
            dest = "${fuzz_name}/dictionary"
          },
          {
            path = "${fuzz_gen_dir}/options"
            dest = "${fuzz_name}/options"
          },
        ]
      } else {
        not_needed([ "fuzz_name" ])
      }
    }

    # Build the actual package
    package(target_name) {
      testonly = true
      forward_variables_from(fuzz, "*")
    }
  } else {
    not_needed(invoker, "*")
  }
}
