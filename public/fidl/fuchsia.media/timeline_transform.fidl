// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.media;

// Used as a placeholder for unspecified time values.
const int64 kUnspecifiedTime = 0x7fffffffffffffff;

// Minimum time value.
const int64 kMinTime = -0x7fffffffffffffff;

// Maximum time value.
const int64 kMaxTime = 0x7ffffffffffffffe;

// Represents the relationship between a subject timeline and a reference
// timeline.
//
// To translate a reference timeline value r to the subject timeline, apply
// the following formula:
//
//   (r - reference_time) * subject_delta / reference_delta + subject_time
//
// To translate a subject timeline value s to the reference timeline, apply
// this formula provided subject_delta isn't zero:
//
//   (s - subject_time) * reference_delta / subject_delta + reference_time
//
struct TimelineTransform {
  // A value from the subject timeline that correlates to reference_time. When
  // TimelineTransform is used in TimelineConsumer.SetTimelineTransform,
  // subject_time may be kUnspecifiedTime to indicate that the transition
  // should be first-order continuous. That is, kUnspecifiedTime indicates that
  // the consumer should use the previous timeline transform to calculate the
  // correct subject_time from the reference_time (if specified) or the
  // reference time chosen by the timeline consumer if reference_time is not
  // specified.
  int64 subject_time = 0;

  // A value from the reference timeline that correlates to subject_time.
  // When TimelineTransform is used in TimelineConsumer.SetTimelineTransform,
  // reference_time is also the effective time at which the transform should
  // be applied. In that case, it may be kUnspecifiedTime, to indicate that the
  // transform should be applied as soon as possible.
  int64 reference_time = 0;

  // The change in the subject timeline corresponding to reference_delta.
  uint32 subject_delta = 0;

  // The change in the reference timeline corresponding to subject_delta.
  // Cannot be zero.
  uint32 reference_delta = 1;
};
