// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.bluetooth.control;

using fuchsia.bluetooth;

// Input and Output Capabilities for pairing exchanges.
// See Volume 3, Part C, Table 5.3 and 5.4
enum InputCapabilityType {
  NONE = 0;
  CONFIRMATION = 1;
  KEYBOARD = 2;
};

// Different types required by the Security Manager for pairing methods.
// Bluetooth SIG has different requirements for different device capabilities.
enum PairRequestType {
  PASSKEY_DISPLAY = 0;
  PASSKEY_ENTRY = 1;
  CONSENT = 2;
};

enum OutputCapabilityType {
  NONE = 0;
  DISPLAY = 1;
};

interface PairingDelegate {
  // Called if the pairing procedure is interrupted (e.g. due to cancellation by the peer
  // or disconnection). Any active pairing dialog should be dismissed.
  1: OnPairingCanceled(RemoteDevice device);

  // Called for most pairing requests. The delegate must respond with “true” or “false” to
  // either accept or reject the pairing request. If the the pairing method requires a passkey
  // this is returned as well.
  //
  // Any response from this method will be ignored if the OnPairingCanceled event is sent.
  2: OnPairingRequest(RemoteDevice device, PairRequestType type, string? displayed_passkey) -> (bool accept, string? entered_passkey);

  // Called when the “Passkey Display” method was selected, OutputCapabilityType.NUMERIC was
  // specified, and the peer has the “KeyboardOnly” I/O capability.
  //
  // This event is used to provide key press events to the delegate for a responsive user
  // experience as the user types the passkey on the peer device. This event will be called
  // once for each key-press.
  //
  // |passkey| is the passkey that the user needs to enter on the peer and must be displayed
  // to the user. |input| is the combination of keypresses that the user has entered so far.
  // It is up to the delegate implementation to update its user interface on each new
  // keypress.
  //
  // Once passkey entry has completed, a final confirmation request will be sent via the
  // OnPairingRequest method. If the pairing procedure is interrupted, the OnPairingCanceled
  // method will be called.
  3: OnRemotePasskeyEntry(RemoteDevice device, string passkey, string input);
};
