// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.modular;

using fuchsia.mem;

// A multi-typed data entity.
interface Entity {
    // Returns the types associated with this entity. Each entry in |type|
    // references a well-known content type.
    1: GetTypes() -> (vector<string> types);

   // Given one of the types returned from |GetTypes()| above, returns
   // associated short-form data as bytes, or null if the type is absent from
   // |GetTypes()|.
   2: GetData(string type) -> (fuchsia.mem.Buffer? data);

   // Sets the data for a particular type variant. This will precipitate an
   // |OnUpdate| event with all variants.
   3: WriteData(EntityData data) -> (EntityWriteStatus status);

   // Gets the entity reference for this entity, which can be persisted and
   // then later used to locate this entity. These references are weak
   // references and are not sufficient to keep the entity alive.
   4: GetReference() -> (string entity_reference);

   // Fires on data updates, with a snapshot of the current data. Upon
   // subscription, fires with the current state.
   5: -> OnUpdate(vector<EntityData> updated_data);
};

struct EntityData {
  string type;
  fuchsia.mem.Buffer data;
};

enum EntityWriteStatus {
  OK = 0;
  // Entity providers are not necessarily required to support entity mutation.
  READ_ONLY = 1;
};
