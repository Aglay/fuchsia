// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.modular;

using fuchsia.auth;
using fuchsia.modular.auth;
using fuchsia.ui.policy;

// This interface is implemented by a device shell. Dependencies and parameters
// are passed to it in Initialize() on startup. The device shell is also
// expected to implement Lifecycle in order to receive a Terminate() call on
// teardown.
//
// In one component instance there can only be one DeviceShell service instance.
// The ViewOwner request is sent to the separate ViewProvider service. This way,
// the device shell may be implemented as a flutter component.
//
// Teardown may be initiated by the device shell calling
// DeviceShellContext.Shutdown(), or by the system shutting down.
[Discoverable]
interface DeviceShell {
  1: Initialize(DeviceShellContext device_shell_context,
                DeviceShellParams device_shell_params);

  // This method may be invoked by the device runner to request an
  // AuthenticationContext associated with |username|. |request| will then be
  // used to request the device shell to show login screen during a
  // UserProvider.AddUser() or if a token needs to be refreshed.
  //
  // A |request| is tied to a |username| because the device runner allows
  // multiple users to be logged in at the same time.
  // @Deprecated
  2: GetAuthenticationContext(string username,
                              request<fuchsia.modular.auth.AuthenticationContext> @request);

  // This method may be invoked by the device runner to request an
  // AuthenticationUIContext. |request| will then be used to request the device
  // shell to show login screen during a UserProvider.AddUser() or if a token
  // needs to be refreshed.
  3: GetAuthenticationUIContext(request<fuchsia.auth.AuthenticationUIContext> @request);
};

// This interface allows the |DeviceShell| to request capabilities from the
// |DeviceRunner| in a way that is more explicit about the services that are
// offered than a generic |ServiceProvider|.
interface DeviceShellContext {
  1: GetUserProvider(request<UserProvider> @request);

  // This requests the shutdown of the device runner.
  2: Shutdown();
};

// These params are passed to |DeviceShell.Initialize|.
struct DeviceShellParams {
  // TODO(jjosh): make this non-optional, if feasible.
  fuchsia.ui.policy.Presentation? presentation;
};
