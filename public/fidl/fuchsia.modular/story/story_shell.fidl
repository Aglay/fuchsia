// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.modular;

// This interface is implemented by a story shell. Dependencies are passed to it
// in Initialize() on startup. The story shell is also expected to implement
// Lifecycle in order to receive a Terminate() call on teardown.
//
// In one component instance there can only be one StoryShell service instance.
// The ViewOwner request is sent to the separate ViewProvider service. This way,
// the story shell may be implemented as a flutter component.
//
// Teardown may be initiated by the user shell calling StoryController.Stop(),
// by the user runner being terminated, or by the system shutting down.
[Discoverable]  // Created by story shell applications.
interface StoryShell {
  // TODO(mesch): In analogy to DeviceShellContext, UserShellContext,
  // ModuleContext, AgentContext, this should be called StoryShellContext.
  1: Initialize(StoryContext story_context);

  // Adds a new View to be displayed by the StoryShell, creating a new
  // StoryShell Surface. More context that allows the story shell to decide how
  // to layout will be added later. Also, interface to influence life cycle and
  // focus is obviously missing.
  2: AddView(fuchsia.ui.viewsv1token.ViewOwner owner, string view_id, string parent_id,
                 SurfaceRelation? surface_relation, ModuleManifest? module_manifest);

  // Focuses the view with view_id, bringing it to the foreground. Optionally
  // provide a relative_view_id to focus relative to another view instead of
  // absolutely.
  3: FocusView(string view_id, string? relative_view_id);

  // Defocuses the view with view_id, dismissing it to the background.
  4: DefocusView(string view_id) -> ();

  // Adds a container, with corresponding container layouts to the story.
  // Optionally provide a parent_id to connect to, if omitted adds the
  // Container node as the root of a new tree in the Story
  5: AddContainer(string containerName, string? parentId,
                  SurfaceRelation relation, // relation of container to parent
                  vector<ContainerLayout> layout,
                  vector<ContainerRelationEntry> relationships,
                  vector<ContainerView> views);
};

// Maps the node_name to the specific mozart view resulting from resolving and
// launching the intent specified in a Container node
struct ContainerView {
  // Name by which this container node is referenced in container layout and
  // surface relationship specifications (cf. container.fidl)
  string node_name;

  // The new view resolved from the intent corresponding to node_name
  fuchsia.ui.viewsv1token.ViewOwner owner;
};

// This interface provides the StoryShell instance with everything it needs to
// know or be able to do about the Story. Not much right now, but we expect this
// to increase.
interface StoryContext {
  // Requests a Presentation connection from the UserShell. See
  // UserShellPresenationProvider in user_shell.fidl.
  1: GetPresentation(request<fuchsia.ui.policy.Presentation> @request);

  // Starts watching Story shell's visual state.
  2: WatchVisualState(StoryVisualStateWatcher watcher);
};

// Implemented by StoryShell to get notified about visual state changes.
interface StoryVisualStateWatcher {
  1: OnVisualStateChange(StoryVisualState visual_state);
};

// Defines the visual state of the Story shell.
enum StoryVisualState {
  MINIMIZED = 0;
  MAXIMIZED = 1;
  MAXIMIZED_OVERLAYED = 2;
};
