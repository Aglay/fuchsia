// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module tracing;

import "apps/tracing/services/trace_provider.fidl";

// The registration interface implemented by Trace Manager.
[ServiceName="tracing::TraceRegistry"]
interface TraceRegistry {
  // Registers the trace provider.
  // To unregister, simply close the TraceProvider pipe.
  //
  // |label| is a human-readable name to assign to the trace provider.
  //
  // |categories| is a map of trace event categories which are published
  // by this provider.  Each entry is a pair category name -> short description
  // (in English).
  //
  // The maximum length of labels and category names is 31 characters each.
  RegisterTraceProvider(TraceProvider provider, string label,
    map<string, string> categories);
};

// The controller interface implemented by Trace Manager.
[ServiceName="tracing::TraceController"]
interface TraceController {
  // Requests to start tracing the specified categories.
  //
  // The trace controller emits trace data to |output| as a sequence of
  // binary formatted trace records.  Traces obtained from different providers
  // are delimited by metadata records within the stream.
  //
  // The trace controller is responsible for lightly validating the structure of
  // trace records as it copies them from trace buffers into the output.
  // In particular, it must verify the size of each record header to ensure
  // that the framing of trace records in the data stream is maintained.
  //
  // The trace controller does not validate the contents of the trace records
  // themselves.  For example, it should not try to check argument lengths in
  // events.  This ensures that the trace format can be extended without needing
  // to modify the trace controller.
  StartTracing(array<string> categories, handle<socket> output);

  // Requests to stop tracing.
  //
  // The trace controller continues to transfer any remaining data to the
  // output until finished, then closes the output.
  StopTracing();
};