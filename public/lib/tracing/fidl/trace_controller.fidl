// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module tracing;

// The controller interface used by the trace tool to start/stop tracing.
[ServiceName="tracing::TraceController"]
interface TraceController {
  // Requests to start tracing the specified categories.
  //
  // The trace controller emits trace data to |output| as a sequence of
  // binary formatted trace records.  Traces obtained from different providers
  // are delimited by metadata records within the stream.
  //
  // The trace controller is responsible for lightly validating the structure of
  // trace records as it copies them from trace buffers into the output.
  // In particular, it must verify the size of each record header to ensure
  // that the framing of trace records in the data stream is maintained.
  //
  // The trace controller does not validate the contents of the trace records
  // themselves.  For example, it should not try to check argument lengths in
  // events.  This ensures that the trace format can be extended without needing
  // to modify the trace controller.
  StartTracing(array<string> categories, handle<socket> output);

  // Requests to stop tracing.
  //
  // The trace controller continues to transfer any remaining data to the
  // output until finished, then closes the output.
  StopTracing();

  // Gets the known categories, as a mapping of name -> description.
  GetKnownCategories() => (map<string, string> categories);

  // Gets the list of registered providers.
  GetRegisteredProviders() => (array<TraceProviderInfo> providers);
};

// Information about a registered trace provider.
struct TraceProviderInfo {
  // The provider's id.
  uint32 id;

  // The trace provider's label.
  string label;
};
