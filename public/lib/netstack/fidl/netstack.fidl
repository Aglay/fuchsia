// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module netstack;

import "lib/netstack/fidl/net_address.fidl";

enum Protocol {
  UNSPECIFIED,
  UDP,
  TCP,
};

struct NetInterfaceStats {
  // Placeholder for all statistics regarding the network interface,
  // including, but not limited to traffic itself.

  int64  up_since;  // Unix epoch.

  // See network interface stats in Linux for future ideas:
  // https://chromium.googlesource.com/native_client/linux-headers-for-nacl/+/2dc04f8190a54defc0d59e693fa6cff3e8a916a9/include/linux/if_link.h#7
  uint32 rx_pkts_total;
  uint32 rx_bytes_total;

  uint32 tx_pkts_total;
  uint32 tx_bytes_total;
};

// https://linux.die.net/man/7/netdevice
struct NetInterface {
  uint32 id;
  uint32 flags;
  string name;
  NetAddress addr;
  NetAddress netmask;
  NetAddress broadaddr;
  array<Subnet> ipv6addrs;
  array<uint8> hwaddr;
};

// Flags for NetInterface.flags.
const uint32 NetInterfaceFlagUp = 0x1;  // Set if the interface is up.

[ServiceName="netstack::Netstack"]
interface Netstack {
  // Finds the port number from a given service name and protocol. [service] can be a
  // number like "42", or a service name like "http". If [protocol] is UNSPECIFIED,
  // the service is checked for TCP first, then UDP.
  GetPortForService(string service, Protocol protocol) => (uint16 port);

  // Finds the IP address for a given host name and port. This may issue network
  // requests via DNS to look up domain names. E.g.
  // GetAddress("example.com", 80) => [{142.42.42.1}]
  GetAddress(string address, uint16 port) => (array<SocketAddress> addresses);

  // Returns the list of registered network interfaces.
  GetInterfaces() => (array<NetInterface> interfaces);

  // Returns the netstack's node name.
  GetNodeName() => (string node_name);

  // TODO (porce): Separate interfaces.
  GetStats(uint32 nicid) => (NetInterfaceStats stats);
};
