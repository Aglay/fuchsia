// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library modular;

// This service is implemented by an application that is meant to be run under a
// ModuleContext in a Story.
//
// When ModuleContext.StartModule() is invoked, the Module instance is requested
// from its component and its dependent services and parameters are passed to it
// by Initialize().
//
// If a Module component implements the |Lifecycle| interface, then invocation
// of the Terminate() method on its |Lifecycle| service is a signal that it
// should stop. If the Module application does not implement the |Lifecycle|
// interface, the component instance is simply terminated in order to stop it.
//
// A Module instance may be stopped for the following reasons:
//
// (1) StoryController.Stop() is called to stop the whole story. A plausible
//     occasion for this to happen is that the root module in the story has
//     signalled that it's Done(), that the UserShell dismisses the story, or
//     that the user logs out.
//
// (2) ModuleController.Stop() is called by the caller that started this Module
//     instance. A plausible occasion for this to happen is that the Module
//     instance has signalled that it's Done().
//
// Other connections the Module instance may hold, such as to Link, LinkWatcher,
// ModuleController of other Module instances, are closed after
// Lifecycle.Terminate() is called.
[ServiceName="modular.Module"]  // Created by each Module component.
interface Module {
  // The arguments to Initialize() are the ModuleContext instance that gives
  // access to Link instances, including those provided by the caller of
  // ModuleContext.StartModule().
  //
  // Link instances available from ModuleContext.GetLink() that were provided by
  // the calling Module instance are shared with the calling Module instance and
  // can be used to exchange data. It is expected that the calling module can
  // know Link names expected by the called module from Verb template published
  // by the called Module.
  //
  // Additionally, this Module instance may provide services to the calling
  // module by implementing |outgoing_services|.
  //
  // The ModuleContext instance can be used to start more Module instances, and
  // to create Link instances to share data with those Module instances.
  //
  // Calling ModuleContext.Done() signals this module requests to be stopped.
  //
  // TODO(vardhan,mesch): Provide outgoing services in the service namespace
  // instead.
  1: Initialize(ModuleContext module_context,
                request<component.ServiceProvider>? outgoing_services);
};
