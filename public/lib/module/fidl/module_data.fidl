// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library modular;

// Information about a Module instance in a story.
struct ModuleData {
  // The URL of the Module binary.
  string module_url;

  // The named path leading up to this Module instance. The last name in this
  // array is the name by which the Module was started by the parent Module
  // instance calling StartModule().
  vector<string> module_path;

  // Contains the information which Links of this Module instance are mapped
  // from Links under other Module instances.
  ChainData chain_data;

  // The name of the link the Module instance was started with. OBSOLETE.
  // Superseded by chain_data.
  LinkPath link_path;

  // The way in which this Module instance was first started in the story,
  // either by request from another Module instance, by request from outside the
  // story (i.e. by suggestion from an agent).
  ModuleSource module_source;

  // The |surface_relation| that was used to start this Module instance with.
  // The same is used when re-inflating the Module instance when the story is
  // resumed. A SurfaceRelation value of null represents an embedded Module
  // instance (started by EmbedModule()) that is not managed by the story shell.
  SurfaceRelation? surface_relation;

  // True if an externally-started module has called ModuleContext.Done() and
  // has been stopped by the story runner, or if an internally-started module
  // was stopped by its parent module using ModuleController.Stop().
  bool module_stopped;

  // The intent that was issued to start add this Module instance to the story.
  // Some Module instances may have been added not by an Intent, for example as
  // the initial module of a story or using AddModuleDeprecated(). For those the
  // field may be null.
  Intent? intent;

  // The manifest data of the module, resolved from the Daisy above. If the
  // Module instance was not added with an Intent, or an Intent that contained a
  // module URL directly, then there is no manifest and this field is null.
  ModuleManifest? module_manifest;
};

enum ModuleSource {
  // Module that was started from within the story by another module via
  // ModuleContext.StartModuleDeprecated() and ModuleContext.StartModuleInShell().
  INTERNAL = 0;

  // Module that was started from outside the story by Maxwell / UserShell via
  // StoryController.AddModule() or StoryController.CreateStory() as first
  // module.
  EXTERNAL = 1;
};

struct ChainData {
  // For each key in the Chain, what Link does it point to?
  vector<ChainKeyToLinkData> key_to_link_map;
};

struct ChainKeyToLinkData {
  // A null key is allowed for backwards compatibility with default links.
  // MI4-739
  string? key;
  LinkPath link_path;
};
