// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.modular;

// This interface is used by the caller of ModuleContext.StartModule() to
// control the started Module instance.
//
// Closing this connection affects neither its ModuleWatchers nor its Module
// instance; it just relinquishes the ability of the caller to control the
// Module instance.
interface ModuleController {
  // Registers a watcher that is notified when the module is done or otherwise
  // stops.
  1: Watch(ModuleWatcher watcher);

  // Requests that this module become the focused module in the story.
  2: Focus();

  // Requests that this module be hidden in the story.
  3: Defocus();

  // Requests the Module instance to stop (see Module.Stop() for how).
  4: Stop() -> ();
};

// This interface is implemented by the client calling ModuleController.Watch().
interface ModuleWatcher {
  // Called with the current state right after registration, and subsequently
  // when the state changes.
  1: OnStateChange(ModuleState new_state);
};
