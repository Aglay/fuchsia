// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "lib/module/fidl/module_state.fidl";

// This interface is used by the caller of ModuleContext.StartModuleDeprecated()
// to control the started Module instance.
//
// Closing this connection affects neither its ModuleWatchers nor its
// Module instance; it just relinquishes the ability of the caller to
// control the Module instance.
interface ModuleController {
  // Registers a watcher that is notified when the module is done or
  // otherwise stops.
  Watch@0(ModuleWatcher watcher);

  // Requests that this module become the focused module in the story.
  Focus@1();

  // Requests that this module be hidden in the story.
  Defocus@2();

  // Requests the Module instance to stop (see Module.Stop() for how).
  Stop@3() => ();
};

// This interface is implemented by the client calling
// ModuleController::Watch().
interface ModuleWatcher {
  // Called with the current state right after registration, and
  // subsequently when the state changes.
  OnStateChange@0(ModuleState new_state);
};
