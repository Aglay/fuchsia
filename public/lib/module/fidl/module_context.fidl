// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "lib/app/fidl/service_provider.fidl";
import "lib/user_intelligence/fidl/intelligence_services.fidl";
import "lib/component/fidl/component_context.fidl";
import "lib/story/fidl/link.fidl";
import "lib/surface/fidl/container.fidl";
import "lib/surface/fidl/surface.fidl";
import "lib/module/fidl/module_controller.fidl";
import "lib/daisy/fidl/daisy.fidl";
import "lib/ui/views/fidl/view_token.fidl";

// This interface is exposed to all modules in a story. It allows to
// create Link instances and run Module instances.
//
// Next ordinal: 13
[ServiceName="modular.ModuleContext"]
interface ModuleContext {
  // Gets a Link instance with the given name.
  //
  // The link instance has a name so that it can be recognized when
  // the story is resumed. The name is unique in the scope of the
  // Module instance. If the method is called again by the same Module
  // instance, a new connection to the same Link instance is obtained.
  // It's up to the Module instance to ensure the name is unique
  // within the scope of itself. A null |name| is allowed for backwards
  // compatibility reasons. MI4-739
  GetLink@0(string? name, Link& link);

  // Starts a new Module instance. The Module to execute is identified
  // by the URL of the application executable, and the Module instance
  // is given a |name| in the scope of the starting Module instance.
  // The |name|, together with the names of all ancestor modules, is
  // used to identify existing component message queues and links when
  // the Story is resumed.
  //
  // If |link_name| is null, then the parent module's default link is
  // passed to the new module. Otherwise, a reference to the parent
  // module's |link_name| is passed to the starting module as its
  // default link.
  //
  // If the method is called again with the same name by the same Module
  // instance, but with different arguments (or with non-null service exchange
  // arguments), the existing Module instance is restarted with the changed
  // arguments. If the other arguments don't change, just an additional module
  // controller connection is made, and the view_owner request is closed.
  //
  // The calling Module instance and the new Module instance may also
  // interact by exchanging ServiceProviders. The new Module
  // instance may implement |incoming_services|, if an interface
  // request is supplied.
  //
  // TODO(mesch): EmbedModule() should be used instead, and StartModuleInShell()
  // should be renamed to StartModule().
  StartModule@1(string name, string module_url, string? link_name,
                app.ServiceProvider&? incoming_services,
                ModuleController& module_controller,
                mozart.ViewOwner& view_owner);

  // Like StartModule(), but instead accepts a Daisy structure. See docs for
  // StartDaisyInShell().
  StartDaisy@2(string name, Daisy daisy, string? link_name,
               app.ServiceProvider&? incoming_services,
               ModuleController& module_controller,
               mozart.ViewOwner& view_owner) => (StartDaisyStatus status);

  // Like StartModule(), but the view of the newly started module is
  // sent to the story shell for display.
  //
  // Providing a |surface_relation| will advise the StoryShell how to
  // layout surfaces that the new module creates. If |surface_relation|
  // is null then a default relation is used.
  //
  // If |focused| is set to true, then the surface will also get focus.
  StartModuleInShell@3(string name, string module_url, string? link_name,
                       app.ServiceProvider&? incoming_services,
                       ModuleController& module_controller,
                       SurfaceRelation? surface_relation,
                       bool focused);

  // Like StartModuleInShell(), but instead accepts a Daisy structure. A Module
  // is selected based on a process called Module Resolution (see
  // docs/module_resolution.md). The child Module will see one Link per |daisy.nouns|
  // available through its ModuleContext.GetLink() call.
  //
  // TODO(thatguy): Add a return value that indicates success or error. Example
  // of error: no Modules could be resolved for |daisy|.
  StartDaisyInShell@4(string name, Daisy daisy, string? link_name,
                      app.ServiceProvider&? incoming_services,
                      ModuleController& module_controller,
                      SurfaceRelation? surface_relation)
                      => (StartDaisyStatus status);

  // Like StartModuleInShell(), but starts multiple modules simultaneously and
  // specifies a custom layout for them (aka container).
  //
  // There are multiple layouts specified, for different screen sizes etc.
  StartContainerInShell@13(string container_name,
                           array<ContainerLayout> layout,
                           array<ContainerRelationEntry> relationships,
                           array<ContainerNode> nodes);

  // Like StartModule(), used to embed the view of the requested module, but
  // also allows to obtain information of modules started transitively in the
  // story shell by the embedded module through the supplied EmbedModuleWatcher.
  //
  // The information about transitively started modules sent to the
  // EmbedModuleWatcher can be used to manage the display of the transitively
  // embedded modules in the story shell, specifically to Focus() and Defocus()
  // them through an EmbedModuleController.
  //
  // The EmbedModuleWatcher is registered directly here rather than on the
  // ModuleController to avoid the race condition between the registration
  // request being connected and the embedded module starting more modules. This
  // could also be addressed by sending catch up notifications. TBD.
  //
  // The EmbedModuleWatcher may be null, then EmbedModule() does exactly the
  // same as StartModule().
  //
  // TODO(mesch): There is no Daisy variant of this call yet. Specifying a
  // desired module by URL should just be expressible as a Daisy too, and then
  // the URL and Daisy variants of these calls should be merged.
  //
  // TODO(mesch): StartModule() should be renamed to EmbedModule(), and then
  // StartModuleInShell() should be renamed StartModule().
  EmbedModule@5(string name, string module_url, string? link_name,
                app.ServiceProvider&? incoming_services,
                ModuleController& module_controller,
                EmbedModuleWatcher? embed_module_watcher,
                mozart.ViewOwner& view_owner);

  // Gets the ComponentContext instance associated with this Module
  // instance. This ComponentContext instance is unique to this
  // particular Module instance.
  GetComponentContext@6(ComponentContext& context_request);

  // Gets the IntelligenceServices service vendor associated with this
  // module.
  GetIntelligenceServices@7(maxwell.IntelligenceServices& request);

  // Gets the id for this story which may be used to create a
  // suggestion proposal to resume this story.
  GetStoryId@8() => (string story_id);

  // Requests that the current story and module gain focus.
  // HACK(zbowling): This is temporary and ripe for abuse by modules authors.
  // Callers should be limited, possibly by policy, from taking user focus.
  RequestFocus@9();

  // The Module instance holding this handle to the ModuleContext
  // declares it's ready to run. The module context implementation
  // notifies all ModuleWatchers registered on the ModuleController by
  // calling OnStateChange(). See ModuleState for all states and
  // transitions.
  // TODO(vardhan): Deprecate this in favour of adding a return callback to
  // Module.Initialize().
  Ready@10();

  // The Module instance holding this handle to the ModuleContext
  // declares it's done and wants to be torn down. The module context
  // implementation notifies all ModuleWatchers registered on the
  // ModuleController by calling OnStateChange(). The receiver is free
  // to decide whether it's appropriate to Stop() the module. (It
  // might be appropriate for the receiver to call Done() on its own
  // instead.) See ModuleState for all states and transitions.
  Done@11();
};

// Implemented by a Module in order to receive information about modules started
// in the story shell by an embedded module (aka transitive embeds).
//
// The view ID information received this way can be used to manage focus in the
// story shell of the transitively embedded modules.
interface EmbedModuleWatcher {
  // Whenever a module is sent to the story shell from the embedded module, a
  // notification is sent here too. The EmbedModuleController connection to the
  // module controller allows to focus and defocus the module, but not to stop
  // or watch it.
  //
  // NOTE(mesch): This is EXPERIMENTAL and may change.
  //
  // TODO(mesch): TBD if surface relationship with embedded module and the
  // anchor view should be exposed too.
  //
  // TODO(mesch): Eventually we might expose the title of the embedded module,
  // which could be used to create a button to focus or unfocus it.
  OnStartModuleInShell@0(EmbedModuleController module_controller);
};

// Controls appearance in the story shell of modules that are transitively
// started from an embedded module. When the module is stopped, the connection
// is closed.
//
// This is a subset of ModuleController.
interface EmbedModuleController {
  // Requests that the module become the focused module in the story.
  Focus@0();

  // Requests that the module be hidden in the story.
  Defocus@1();
};

// Communicates the status of the daisy resolution
enum StartDaisyStatus {
  SUCCESS = 0,
  NO_MODULES_FOUND = 1
};