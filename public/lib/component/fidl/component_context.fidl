// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library modular;

struct TypeToDataEntry {
  string type;
  string data;
};

// Provided to all components in their respective intialization methods by the
// framework. For example, a Module gets it in Module::Initialize() and an Agent
// gets it in Agent::Initialize().
[Discoverable]
interface ComponentContext {
  // Gets the Ledger associated with this component. This ledger instance
  // is unique to this component under this user.
  1: GetLedger(request<ledger.Ledger> @request) -> (ledger.Status @status);

  // Used to start a new agent in the user scope and connect to it.
  2: ConnectToAgent(string url, request<component.ServiceProvider> incoming_services,
                   request<AgentController> controller);

  // Used to create / delete a message queue or retrieve an existing queue
  // identified by |name|. |name| has to be unique only within the scope of the
  // calling component instance.
  3: ObtainMessageQueue(string name, request<MessageQueue> queue);
  4: DeleteMessageQueue(string name);

  // Gets a MessageSender service that can be used to send a message to a queue
  // identified by |queue_token|. Token for a MessageQueue is obtained from its
  // GetToken() method and the token is unique within the scope of the user.
  5: GetMessageSender(string queue_token, request<MessageSender> sender);

  // Gets the EntityResolver service, which can be used to resolve an entity
  // reference to an Entity interface.
  6: GetEntityResolver(request<EntityResolver> @request);

  // Creates a new entity from |type_to_data| such that duplicate types are
  // overriden by subsequent entries.
  // This is a useful way to represent small immutable entities without having
  // to provide the entity using an Agent. The types and data together must be
  // within 16KB in size.
  7: CreateEntityWithData(vector<TypeToDataEntry> type_to_data)
      -> (string? entity_reference);

  // Gets the package name of this component.
  // TODO(vardhan): MI4-939. This information should likely be exposed by a
  // lower level (component-level, or application level). This information is
  // most meant for a component to identify itself automatically when publishing
  // metrics.
  8: GetPackageName() -> (string package_name);
};
