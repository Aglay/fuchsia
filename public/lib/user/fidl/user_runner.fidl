// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library modular;

// import "peridot/bin/ledger/fidl/internal.fidl";
// import "lib/auth/fidl/account_provider.fidl";
// import "lib/auth/fidl/account/account.fidl";
// import "lib/config/fidl/config.fidl";
// import "lib/ui/presentation/fidl/presentation.fidl";
// import "lib/ui/views/fidl/view_token.fidl";

// The device_runner application (there is no |DeviceRunner| service) requests
// an instance of this service in order to launch and display a |UserRunner| per
// user.
[ServiceName="modular.UserRunner"]  // Created by user_runner application.
interface UserRunner {
  // Launches a user runner instance for a user identified by |user_id|.
  // TODO(alhaad): Fold paramters into |UserContext|.
  1: Initialize(auth.Account? account,
               AppConfig user_shell,
               AppConfig story_shell,
               auth.TokenProviderFactory token_provider_factory,
               UserContext user_context,
               request<views_v1_token.ViewOwner>? view_owner);

  2: SwapUserShell(AppConfig user_shell) -> ();
};

// This interface is provided by device runner to |UserRunner|.
interface UserContext {
  // See detailed comments in UserShellContext.Logout().
  1: Logout();

  2: GetPresentation(request<presentation.Presentation> presentation);
};

// For development purposes only.
// This is implemented by user runner and used to expose some debug information.
// TODO(alhaad): This should not be a FIDL method but rather exposed directly
// via the outgoing directory. The reason that we can't do that now is because
// VFS doesn't currently support asynchronous operations and getting debug data
// within user runner synchronously is hard.
[ServiceName="modular.UserRunnerDebug"]  // Created by user_runner application.
interface UserRunnerDebug {
  // TODO(alhaad): We might be limited by FIDL message size. Consider using vmo.
  1: DumpState() -> (string debug_state);
};
