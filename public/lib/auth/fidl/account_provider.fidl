// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library modular_auth;

// import "lib/auth/fidl/account/account.fidl";
// import "lib/auth/fidl/token_provider.fidl";
// import "lib/device/fidl/device_shell.fidl";

// This is only meant to be used by the Framework.
// An interface that allows the Framework to talk to the token manager service
// to add new accounts or be able to get a |TokenProviderFactory| that can
// be used to provide specialized instances of |TokenProvider| to third party
// agents.
[ServiceName="modular.auth.AccountProvider"]
interface AccountProvider {
  // Called by the Framework once, right after starting up a token manager
  // application.
  1: Initialize(AccountProviderContext account_provider_context);

  // Adds a new user account. This involves talking to the identity provider and
  // fetching profile attributes.
  2: AddAccount(IdentityProvider identity_provider)
       -> (Account? account, string? error_code);

  // Removes an existing user account. This involves talking to account's
  // identity provider and revoking user credentials both locally and remotely.
  // This operation also deletes cached tokens for the given account.
  // TODO(ukode): Modify this api to take account_id and IDP as input once the
  // Account struct is cleaned up.
  //
  // If |revoke_all| is set to true, then all device credentials are revoked
  // both locally and remotely on the backend server and user is logged out from
  // all devices. If |revoke_all| is set to false, then credentials stored
  // locally are wiped. This includes cached tokens such as access/id and
  // firebase tokens and the locally persisted refresh token. By default,
  // |revoke_all| is set to false and deletes account only from that given
  // device.
  3: RemoveAccount(Account account, bool revoke_all) -> (AuthErr @status);

  // Get a |TokenProviderFactory| associated with an |account_id|. It is used
  // by the Framework to provide a specialized instances of |TokenProvider| to
  // third party agents.
  4: GetTokenProviderFactory(string account_id,
                            request<TokenProviderFactory> @request);

  // This signals |AccountProvider| to teardown itself. After the
  // AccountProvider responds by closing its handle, the caller may terminate
  // the |AccountProvider| application if it hasn't already exited.
  5: Terminate();
};

// This interface is implemented by device shell. It is used to notify the
// device shell that a view for login needs to be started / stopped.
// The device shell can close this connection if it wants to cancel the current
// authentication flow.
interface AuthenticationContext {
  // Requests device shell to display |view_owner| for authentication. Note that
  // another call to StartOverlay() will not be made until StopOverlay() has
  // been called.
  1: StartOverlay(views_v1_token.ViewOwner view_owner);

  // Requests device shell to stop displaying the auth view.
  2: StopOverlay();
};
// Implemented by device runner and provided to AccountProvider.Initialize().
// It is used by the token mangager application to @request the Framework to
// display a view to the user.
interface AccountProviderContext {
  1: GetAuthenticationContext(string account_id, request<AuthenticationContext> @request);
};

interface TokenProviderFactory {
  1: GetTokenProvider(string application_url, request<TokenProvider> @request);
};
