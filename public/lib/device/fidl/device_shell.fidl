// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module modular;

import "lib/device/fidl/user_provider.fidl";
import "lib/ui/presentation/fidl/presentation.fidl";
import "lib/ui/views/fidl/view_token.fidl";

// This interface is implemented by a device shell. Dependencies and parameters
// are passed to it in Initialize() on startup. The device shell is also
// expected to implement Lifecycle in order to receive a Terminate() call on
// teardown.
//
// In one component instance there can only be one DeviceShell service instance.
// The ViewOwner request is sent to the separate ViewProvider service. This way,
// the device shell may be implemented as a flutter component.
//
// Teardown may be initiated by the device shell calling
// DeviceShellContext.Shutdown(), or by the system shutting down.
[ServiceName="modular.DeviceShell"]
interface DeviceShell {
  Initialize@0(DeviceShellContext device_shell_context,
               DeviceShellParams device_shell_params);

  // This method may be invoked by the device runner to request an
  // AuthenticationContext associated with |username|. |request| will then be
  // used to request the device shell to show login screen during a
  // UserProvider.AddUser() or if a token needs to be refreshed.
  //
  // A |request| is tied to a |username| because the device runner allows
  // multiple users to be logged in at the same time.
  GetAuthenticationContext@1(string username,
                             AuthenticationContext& request);
};

// This interface allows the |DeviceShell| to request capabilities from the
// |DeviceRunner| in a way that is more explicit about the services that are
// offered than a generic |ServiceProvider|.
interface DeviceShellContext {
  GetUserProvider@0(UserProvider& request);

  // This requests the shutdown of the device runner.
  Shutdown@1();
};

// These params are passed to |DeviceShell.Initialize|.
struct DeviceShellParams {
  // TODO(jjosh): make this non-optional, if feasible.
  mozart.Presentation? presentation;
};

// This interface is implemented by device shell. It is used to notify the
// device shell that a view for login needs to be started / stopped.
// The device shell can close this connection if it wants to cancel the current
// authentication flow.
interface AuthenticationContext {
  // Requests device shell to display |view_owner| for authentication. Note that
  // another call to StartOverlay() will not be made until StopOverlay() has
  // been called.
  StartOverlay@0(mozart.ViewOwner view_owner);

  // Requests device shell to stop displaying the auth view.
  StopOverlay@1();
};
