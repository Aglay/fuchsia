// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module cobalt;

// Cobalt is a service to record and report on metrics. This file contains
// interfaces that allow clients to send metrics to Cobalt.

// To use Cobalt, you must have a project id, metric id and encoding id
// registered with the Cobalt system. In the current verison of Cobalt
// registration consists of entries in the files registered_encodings.txt
// and registered_metrics.txt in //cobalt/config/production. Since
// the Cobalt servers also read these files, for now it is necessary to
// contact cobalt-hackers@google.com in order to register additional projects,
// metrics and encodings. We plan to build an online self-registration system
// in the future.

// Usage: First use CobaltEncoderFactory to get a CobaltEncoder for your
// project. Then, you can add observations. Observations are accumulated on the
// CobaltEncoder until they are successfully sent via SendObservations().

// Response codes for Cobalt encoder operations.
enum Status {
  OK = 0,

  // For example the supplied metric id, encoding id or observation value is
  // invalid.
  INVALID_ARGUMENTS,

  // Sending observations failed too many times or with an unrecoverable error
  // Try the send again later.
  SEND_FAILED,

  // The attempted operation failed because some precondition was not met.
  FAILED_PRECONDITION,

  // Catch-all for unexpected errors.
  INTERNAL_ERROR = -1
};

[ServiceName="cobalt.CobaltEncoderFactory"]
// CobaltEncoderFactory creates a CobaltEncoder for a particular project.
interface CobaltEncoderFactory {
  // Creates a CobaltEncoder for the specified project.
  // |project_id| Should be a project ID registered with the Cobalt system.
  GetEncoder(int32 project_id, CobaltEncoder& encoder);
};

// CobaltEncoder accumulates and sends observations. An instance of
// CobaltEncoder is associated with a particular Cobalt project ID.
interface CobaltEncoder {
  // Add a string observation.
  // |metric_id| Must be a metric ID registered with the Cobalt system and
  //             associated with this encoder's project ID.
  // |encoding_id| Must be an encoding ID registered with the Cobalt system
  //               and associated with this encoder's project ID.
  // |observation| The string value to be encoded. Must be consistent with
  //               the definition of the metric and encoding. Some encodings
  //               restrict the set of values to a pre-defined list.
  AddStringObservation(uint32 metric_id, uint32 encoding_id, string observation)
      => (Status status);

  // Send the observations that have been added to the encoder since the last
  // send. Unless SendObservations returns OK, the observations remain enqueued.
  // Will fail with FAILED_PRECONDITION if no observations are ready to be sent.
  SendObservations() => (Status status);
};
