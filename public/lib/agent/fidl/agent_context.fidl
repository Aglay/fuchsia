// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library modular;

// This interface is exposed to all agents. It allows to schedule tasks to occur
// in response to triggers which are conditions like a message arriving on a
// MessageQueue.
[Discoverable]
interface AgentContext {
  // |context| is the ComponentContext which this AgentContext is a part of.
  1: GetComponentContext(request<ComponentContext> @request);

  // |token_provider| is scoped to this agent.
  2: GetTokenProvider(request<modular_auth.TokenProvider> @request);

  // Returns the IntelligenceServices container specific to this Agent.
  3: GetIntelligenceServices(request<IntelligenceServices> @request);

  // Returns an EntityReferenceFactory for making entity references for this
  // Agent.
  4: GetEntityReferenceFactory(request<EntityReferenceFactory> @request);

  // Schedules a task described in |task_info|. When this task is scheduled to
  // run, Agent::RunTask() gets called.
  5: ScheduleTask(TaskInfo task_info);
  // No new runs of this task will be scheduled.
  6: DeleteTask(string task_id);

  // Declares that this agent is done, and wants to be torn down. Agent::Stop()
  // will be called as a result of this.
  7: Done();
};

// Used to describe a task to the framework.
struct TaskInfo {
  // An agent provided task id that can be used later to refer to this task.
  string task_id;
  // The condition that would cause this task to get scheduled.
  TriggerCondition trigger_condition;
  // If set to true, the trigger condition will be persisted on the user's
  // ledger and will be available across reboots and devices.
  bool persistent;
};

union TriggerCondition {
  // Receiving any message on the queue |queue_name| will satisfy this trigger
  // condition. Note that |queue_name| is scoped to the Agent that created this
  // queue in the first place.
  string queue_name;

  // Fires an inexact repeating alarm every |alarm_in_seconds| seconds that'll
  // satisfy this trigger condition. The first alarm fires in
  // |alarm_in_seconds| seconds.
  uint32 alarm_in_seconds;
};
