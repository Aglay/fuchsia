// Copyright 2018 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library modular;

// Enables control of a session. A session, conceptually, is a single
// full-screen experience of a Fuchsia device. A device can run multiple
// sessions (ie, when one device powers multiple kiosks); that said, sessions
// are siloed from each other.
//
// A session, concretely, is a collection of stories, their state, the modules
// within them, any agents that run to support the mods and the various UI
// shells (session and story shells).
interface PuppetMaster {
  // Requests a capability to control a story. If |story_id| is not specified,
  // a new story is created. New stories are not created (not committed to
  // session state) until StoryPuppetMaster.Execute() is called and returns OK.
  // The story id (either that of the new story or |story_id|) is returned in
  // ExecuteResult.
  //
  // |request| is closed if control cannot be granted.
  1: ControlStory(string? story_id, request<StoryPuppetMaster> @request);

  // Events on the session will be sent to |watcher| as long as |watcher| is
  // alive. |params| specifies filters and policy about which events are sent
  // to |watcher|.
  2: WatchSession(WatchSessionParams params, SessionWatcher watcher) -> ();
};

struct WatchSessionParams {
  // If null, all stories are watched. If non-null, only events for
  // matching stories are returned.
  vector<string>? filter_story_ids;
};

interface StoryPuppetMaster {
  // Enqueues the given |commands| in the order they are given.
  // Can be called as many times as necessary to specify the full
  // set of changes to the story.
  //
  // To execute all enqueued commands, call Execute().
  1: Enqueue(vector<StoryCommand> commands);

  // Executes the commands enqueued so far by Enqueue() in order and as
  // a batch: no other commands from other clients will be interleaved.
  //
  // If an error occurs, execution is stopped and an error code
  // and message are returned.
  2: Execute() -> (ExecuteResult result);
};

enum ExecuteStatus {
  OK = 0;
  // Encountered an invalid command.
  INVALID_COMMAND = 1;

  // The |story_id| provided does not exist or is not visible
  // to this client.
  INVALID_STORY_ID = 2;

  // A story must contain at least one mod, and the commands given
  // either don't add one, or remove the last one.
  STORY_MUST_HAVE_MODS = 3;

  // The mod specified in AddMod, RemoveMod or SendModCommand
  // was not found.
  INVALID_MOD = 4;
};

struct ExecuteResult {
  ExecuteStatus @status;
  string? error_message;

  // Set to the story id of the controlled story. Equal to ControlStory()'s
  // |story_id|, if it was provided.
  //
  // If an error occurred, this may be null.
  string? story_id;
};