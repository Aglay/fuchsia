// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.modular;

// UserRunner passes a connection to this service to the UserShell so it can
// operate on stories for the user. It is also passed to other services that
// monitor or manipulate stories, specifically the maxwell services.
//
// Closing a |StoryProvider| connection has no effect on the state of the
// framework.
interface StoryProvider {
  // Creates a new story. If |module_url| is supplied, adds it to the story as
  // the first module. The returned |story_id| can be used to obtain a
  // StoryController connection to perform actions on the newly created story,
  // specifically starting it.
  //
  // Providing |module_url| is deprecated. It is preferred to GetController()
  // and call StoryController.AddModule().
  1: CreateStory(string? module_url) -> (string story_id);

  // Like CreateStory(), but with extra info and with values for the root link
  // atomically set.
  //
  // Providing |module_url| is deprecated. It is preferred to GetController()
  // and call StoryController.AddModule().
  2: CreateStoryWithInfo(string? module_url,
                        vector<StoryInfoExtraEntry>? extra_info,
                        string? root_json) -> (string story_id);

  // Deletes an existing story from the list of known stories. Returns when the
  // delete notification is received from the Ledger. If the story to be deleted
  // is running, it is first stopped and its story controller disconnected. If
  // the story ID doesn't exist, it silently does nothing and returns.
  3: DeleteStory(string story_id) -> ();

  // Requests detailed information about the given story. If the story doesn't
  // exist, returns null. GetStoryInfo() called immediately after DeleteStory()
  // (even before DeleteStory() returns) returns null.
  4: GetStoryInfo(string story_id) -> (StoryInfo? story_info);

  // Obtains a controller for a previously created story identified by its story
  // ID. Obtaining the controller doesn't run it yet. If the story doesn't
  // exist, the interface request is closed.
  5: GetController(string story_id, request<StoryController> @request);

  // Returns info of known stories.
  6: PreviousStories() -> (vector<StoryInfo> story_infos);

  // Returns IDs of stories on the current device that are not STOPPED. More
  // information about the stories can be retrieved using GetStoryInfo(), or by
  // GetController(), then StoryController.GetInfo().
  7: RunningStories() -> (vector<string> story_ids);

  // Registers a watcher for changes in the story collection.
  8: Watch(StoryProviderWatcher watcher);

  // EXPERIMENTAL. Registers a watcher for ongoing story activity. See
  // StoryActivityWatcher for motivations.
  9: WatchActivity(StoryActivityWatcher watcher);

  // Creates a duplicate connection to this StoryProvider.
  11: Duplicate(request<StoryProvider> @request);

  // Obtains a connection to a Link that behaves for the purpose of sending
  // updates to it as if the updates come from another device. This is available
  // only in developer mode and is mainly useful for testing. Note right now
  // there is only developer mode, i.e. this is always available.
  //
  // DEPRECATED: This is slated for removal. MI4-1085
  12: GetLinkPeer(string story_id, vector<string>? module_path, string link_name,
                  request<Link> @request);

  // Creates a "kind-of" proto story. The story won't be returned by
  // PreviousStories().
  // EXPERIMENTAL
  13: CreateKindOfProtoStory() -> (string story_id);

  // Promotes a "kind-of" proto story to a regular story. After calling this,
  // the StoryInfo of |story_id| will be returned in PreviousStories().
  // EXPERIMENTAL
  14: PromoteKindOfProtoStory(string story_id);
};

// Implemented by clients of StoryProvider.
interface StoryProviderWatcher {
  // Called in three different situations:
  //
  //  * Immediately when a new watcher is registered with one OnChange()
  //    invocation with the current infor and state of each story known on the
  //    current device.
  //
  //  * Every time a change to StoryInfo is applied to the record of the story
  //    kept on the current device, including a new story created on another
  //    device becoming known on this device for the first time.
  //
  //  * Every time the StoryState of the story changes on this device. The
  //    StoryState on another device of a story known on this device is not made
  //    known on this device.
  //
  //    I.e. if the story is started or stopped on *another* device, it does
  //    *not* cause an OnChange() call on *this* device. Cf. OnDelete() below.
  //
  // The ID of the story the notifications are about are part of StoryInfo.
  //
  // |story_state| is STOPPED if the story was just created or just became known
  // on this device and was not yet started on the current device. It's RUNNING
  // when the story is started on the current device.
  1: OnChange(StoryInfo story_info, StoryState story_state);

  // Called in two different situations:
  //
  // * After the story record of a story is deleted from the current device by
  //   an invocation of StoryProvider.DeleteStory() on the current device.
  //
  // * When the information reaches the current device through Ledger
  //   synchronization that the story record of a story was deleted from another
  //   device by an invocation by StoryProvider.DeleteStory() there.
  //
  //   I.e. if the story is deleted on *another* device, it eventually *does*
  //   cause an OnDelete() call on *this* device. Cf. OnChange() above.
  //
  // Either way, if the story is running on this device at the time the deletion
  // becomes known to this device on this device, it is also stopped first. This
  // stopping of the story does not cause an OnChange() callback, only the
  // OnDelete() here.
  //
  // The OnDelete() call also happen when the story record is deleted while the
  // story is not running.
  2: OnDelete(string story_id);
};

// EXPERIMENTAL. Implemented by clients of StoryProvider in order to give them
// an idea about ongoing activity in stories. The details about how modules
// express this information are open for modification. A few guiding observations:
//
// * We express ongoing activity as an activity instead of as a state. This
//   makes it more likely that the expression is honest and correct, even though
//   it doesn't in itself prevent abuse or mistakes.
//
// * We don't currently have information about how long the activity will be
//   ongoing. This makes some sense, because "ongoingness" happens at a human
//   time scale. It makes no sense for a module to define an activity that takes
//   a milliscond to be "ongoing", ot to declare an activity that takes a day as
//   "ongoing". An activity is ongoing for something around a second, and
//   therefore a client can reasonably expect something to be inactive only
//   after waiting for about a second. This mamkes sense too, because the client
//   can use this information only when its own user is not active in the first
//   place, and to it has to apply a timeout anyway. (Canonical example is to
//   show an idle screen. This makes sense only when all stories are idle, but
//   also only when the user is idle.)
//
// * We could establish more concrete policy as to when a module is to be
//   considered active in the framework, but we don't know yet what the right
//   policy is. Right now the policy that emerges is that the module should not
//   lie (since we do not prescribe how a user shell uses the information, there
//   is no clear incentive for lying), which is a good start.
//
// * One obvious extension is to let modules tell the expected duration of the
//   ongoing activity, but processing this requires to maintain state per story,
//   and the current user shell doesn't need this information. It just resets
//   its own screen saver timeout whenever it sees activity from any story at
//   all, or from the focused story.
interface StoryActivityWatcher {
  // Called to notify that a module in the given story issued a
  // ModuleContext.Active() call.
  1: OnStoryActivity(string story_id);
};
