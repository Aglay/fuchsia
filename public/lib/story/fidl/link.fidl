// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file contains the definition of Link as well as the structure
// of the data it holds.

library modular;

// This interface is implemented by the story runner. The Story service instance
// acts as a factory for it.
//
// An instance of Link holds one of two types of values:
//
// (1) A JSON string that can be modified incrementally or completely
//     overwritten, depending on the use of Set() and Update(). The JSON string
//     is set to "null" when the Link is created.
//
// (2) An entity reference that can be set or retrieved with SetEntity() and
//     GetEntity().
//
// Each module receives one Link instance for each of the nouns in its verb
// template in its ModuleContext which it receives in Module.Initialize() or in
// its service namespace. It can access them by calling ModuleContext.GetLink()
// with the noun as the link name. These instances are shared with the parent
// Module if there is any, or with the StoryController client if the Module is a
// top level Module of a Story. A Module can create additional Link instances by
// calling ModuleContext.GetLink() with any other link name. Why would it do
// that? To share the new Link instance with Modules it requests to start in
// turn, or to record its own state in the story record, so that it is
// transferred to other devices that run the same story, or to persist it for
// later resumption of the story.
//
// A client may obtain another handle to the same Link instance by calling
// GetLink() with the same name again.
//
// A client of Link can set the JSON string stored in the instance and register
// a handler (an implementation of the LinkWatcher interface) to be notified of
// changes to the JSON string in the Link. A client may or may not be notified
// of changes it itself makes to the Link value, depending on whether it
// registers with WatchAll() or Watch(), respectively. If the client registers
// with Watch(), then it will not be notified of changes made through the same
// Link connection.
//
// TODO(jimbe) Add error reporting for JSON and Pointer errors.
//
// No service name: returned from ModuleContext.GetLink().
interface Link {
  // Sets the JSON schema that's used to validate changes to the Link.
  // Validation errors are not fatal. They are logged as a "Schema constraint
  // violation", then the mutation is applied and execution continues. Setting a
  // schema is optional. If no schema is set, then all changes are allowed.
  //
  // About JSON schema: http://json-schema.org/
  // Short ebook: https://spacetelescope.github.io/understanding-json-schema/
  // Quick schema generator: http://jsonschema.net/
  //
  // Note that the "additionalProperties" attribute is not being generated by
  // jsonschema.net. It's useful during development to set it to false to catch
  // typos in paths and property names.
  1: SetSchema(string json_schema);

  // Gets the value at the given |path|, which is represented using the JSON
  // Pointer specification (https://tools.ietf.org/html/rfc6901). Returns a null
  // fidl string if |path| does not exist. Returns the entire JSON as a string
  // if |path| is either null or an empty array. Returns the string "null" if
  // the link is empty.
  2: Get(vector<string>? path) -> (string? json);

  // Set() overwrites the value/object/array at the given |path|. Set also
  // overwrites any values or arrays as necessary to ensure that |path| exists.
  // The |json| parameter cannot be the empty string because that's not a legal
  // value. Either pass "null" to set the value to null, or use Erase to
  // completely remove a member of an object. To replace the root, pass null for
  // |path|.
  //
  // This call notifies Watchers, although this may be skipped if nothing
  // changed.
  3: Set(vector<string>? path, string json);

  // For each member of the object defined by |json|, set or overwrite the
  // same member of the object found at |path| with that member's value.
  //
  // For example:
  //
  // Object at |path|:
  //
  //   {"x":3,"name":"Joe"}
  //
  // |json|:
  //
  //    {"name":"Tom","y":5.9}
  //
  // Resulting object at |path| after UpdateObject():
  //
  //   {"x":3,"name":"Tom","y":5.9}
  //
  // If |path| points at a null value, the null value is overwritten with the
  // object in |json|. |path| will be created if it does not exist. Overwrites
  // any values or arrays as necessary to ensure that |path| exists. To set a
  // value or an array, use Set() instead. The string in |json| must represent
  // an object. To update the root (must be an object or null), pass "" for
  // |path|.
  //
  // This call notifies Watchers, although this may be skipped if nothing
  // changed.
  4: UpdateObject(vector<string>? path, string json);

  // Erases the object member at the given |path|. If the path is not found or
  // does not match the current structure of the JSON, the path will not be
  // created and the call is ignored. The |path| parameter cannot be null or
  // zero length because the root is a value, not a key. This call notifies
  // Watchers, although this may be skipped if nothing changed.
  5: Erase(vector<string> path);

  // Returns the entity reference in this link. If no entity reference is
  // present, returns a null fidl string.
  9: GetEntity() -> (string? entity_reference);

  // Sets this to be an Entity Link with the given |entity_reference|. The
  // existing value of the link is overwritten. If |entity_reference| is null,
  // then any existing value in the link is overwritten with the JSON string
  // "null".
  10: SetEntity(string? entity_reference);

  // Registers a watcher, which is notified whenever the document changes. This
  // watcher will not be invoked for changes caused by calls made on this
  // handle. The Notify() callback method will be immediately invoked with the
  // value in the Link, even if it's empty.
  //
  // The LinkWatcher connection survives the Link connection it was registered
  // on. However, once a Link instance has no connections it is deleted and its
  // watchers disconnected. There are two modes of use of a LinkWatcher:
  //
  // 1. For a client to obtain updates from a Link instance that is used by a
  //    client, the client must retain both the Link connection and the
  //    LinkWatcher connection, and reset both once the Link is no longer used.
  //    This mode is most appropriate for Modules.
  //
  // 2. For a client to obtain updates from a Link instance until it's no longer
  //    used by any other client, and be notified of that situation (by the
  //    LinkWatcher connection being closed), the client must not retain the
  //    Link connection and retain only the LinkWatcher connection. This mode is
  //    most appropriate for Agents that use the
  //    StoryController.GetActiveLinks() inspection API to keep track of
  //    activity in a story.
  //
  // With use 2, there obviously will be no updates to the Link value made
  // through the Link connection the LinkWatcher was registered on, so Watch()
  // and WatchAll(), below, have the same effect.
  //
  // All connections to a Link and LinkWatcher are closed once the story the
  // link belongs to is stopped.
  6: Watch(LinkWatcher watcher);

  // Like Watch(), but the watcher is notified also of changes made through the
  // same handle as the watcher is registered on.
  7: WatchAll(LinkWatcher watcher);

  // Allows to await completion of previously pipelined requests, to create
  // sequentiality across service instances without giving every operation an
  // empty return value. Used to gate an operation on another service that would
  // actually tear down this service on state being persistent.
  8: Sync() -> ();
};

// This interface is implemented by a client of Link.
//
// The Notify() method is invoked whenever the Link changes. The entire JSON
// string in the Link will be sent. In other words, this isn't an incremental
// notification. |json| cannot be null because an empty Link is the valid JSON
// document "null".
//
// No service name: created by Module.
interface LinkWatcher {
  1: Notify(string json);
};
