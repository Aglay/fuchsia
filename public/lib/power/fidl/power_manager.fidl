// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module power;

enum Status {
  OK,
  NotAvailable
};

// Provides battery status
struct BatteryStatus {
  // Error status
  Status status;

  // If battery is present
  bool batteryPresent;

  // If battery is charging
  bool charging;

  // If battery is dis-charging
  bool discharging;

  // If battery is at critical level
  bool critical;

  // If power cable is plugged in
  bool powerAdapterOnline;

  // To distinguish between latest and stale status
  int64 timestamp;

  // Battery level in percentage
  float level;

  // Remaining Battery life in hours. It is negative when battery is not discharging
  float remainingBatteryLife;
};

// Manager Interface used to manage power
[ServiceName="power::PowerManager"]
interface PowerManager {
  // Gets battery status
  GetBatteryStatus@0() => (BatteryStatus status);

  // watcher called when battery status changes
  Watch@1(PowerManagerWatcher watcher);
};

// Watcher on battery status
interface PowerManagerWatcher {
  OnChangeBatteryStatus@0(BatteryStatus battery_status);
};
