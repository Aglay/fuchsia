# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/fidl/toolchain.gni")

# Generates some C++ bindings for a FIDL library.
#
# The parameters for this template are defined in //build/fidl/fidl.gni. The
# relevant parameters in this template are:
#   - library_name;
#   - sources.

template("fidl_cpp") {
  assert(current_toolchain == target_toolchain ||
      current_toolchain == shlib_toolchain,
      "This template can only be used in these toolchains: " +
      "$target_toolchain, $shlib_toolchain.")

  main_target_name = target_name
  generation_target_name = "${target_name}_cpp_generate"
  c_generation_target_name = "${target_name}_c_generate"

  library_name = target_name
  if (defined(invoker.name)) {
    library_name = invoker.name
  }
  file_stem = "$target_gen_dir/$library_name.fidl"
  c_header = "$file_stem.c.h"

  fidl_target_gen_dir = get_label_info(":bogus($fidl_toolchain)", "target_gen_dir")
  json_representation = "$fidl_target_gen_dir/$target_name.fidl.json"

  compiled_action(generation_target_name) {
    visibility = [
      ":*",
    ]

    tool = "//garnet/go/src/fidl:fidl_backend"

    inputs = [
      json_representation,
    ]

    outputs = [
      "$file_stem.cc.h",
      "$file_stem.cc",
    ]

    args = [
      "-fidl-json",
      rebase_path(json_representation, root_build_dir),
      "-fidl-stem",
      rebase_path(file_stem, root_build_dir),
      "--root-gen-dir",
      rebase_path(root_gen_dir, root_build_dir),
      "-generators",
      "cpp",
    ]

    deps = [
      ":$main_target_name($fidl_toolchain)",
    ]
  }

  compiled_action(c_generation_target_name) {
    visibility = [
      ":*",
    ]

    tool = "//zircon/public/tool/fidl2"

    inputs = invoker.sources

    outputs = [
      c_header,
    ]

    args = [
      "--c-header",
      rebase_path(c_header, root_build_dir),
      "--files",
    ] + rebase_path(inputs, root_build_dir)
  }

  source_set(main_target_name) {
    forward_variables_from(invoker, [
      "testonly",
      "visibility",
    ])

    sources = [
      c_header,
      "$file_stem.cc.h",
      "$file_stem.cc",
    ]

    deps = [
      ":$c_generation_target_name",
      ":$generation_target_name",
      "//garnet/public/lib/fidl/cpp",
    ]
  }
}
