# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/compiled_action.gni")
import("//build/fidl/toolchain.gni")

# Generates some C++ bindings for a FIDL library.
#
# The parameters for this template are defined in //build/fidl/fidl.gni. The
# relevant parameters in this template are:
#   - name;
#   - sources.

template("fidl_cpp") {
  assert(current_base_toolchain == target_toolchain,
         "This template can only be used in $target_toolchain.")

  not_needed(invoker, [ "sdk_candidate", "sources" ])

  main_target_name = target_name
  generation_target_name = "${target_name}_cpp_generate"

  library_name = target_name
  if (defined(invoker.name)) {
    library_name = invoker.name
  }

  # Generate the source code just once in the base toolchain, even
  # if it gets compiled separately in multiple variant toolchains.
  base_gen_dir = get_label_info(":${target_name}(${current_base_toolchain})",
                                "target_gen_dir")

  file_stem = "$base_gen_dir/$library_name.fidl"

  fidl_target_gen_dir =
      get_label_info(":bogus($fidl_toolchain)", "target_gen_dir")
  coding_tables = "$fidl_target_gen_dir/$target_name.fidl.tables.cc"

  if (current_toolchain == current_base_toolchain) {
    json_representation = "$fidl_target_gen_dir/$target_name.fidl.json"

    compiled_action(generation_target_name) {
      visibility = [ ":*" ]

      tool = "//garnet/go/src/fidl:fidl_backend"

      inputs = [
        json_representation,
      ]

      outputs = [
        "$file_stem.cc.h",
        "$file_stem.cc",
      ]

      args = [
        "--fidl-json",
        rebase_path(json_representation, root_build_dir),
        "--fidl-stem",
        rebase_path(file_stem, root_build_dir),
        "--root-gen-dir",
        rebase_path(root_gen_dir, root_build_dir),
        "--generators",
        "cpp",
      ]

      deps = [
        ":$main_target_name($fidl_toolchain)",
      ]
    }
  } else {
    not_needed(invoker, "*")
  }

  source_set(main_target_name) {
    forward_variables_from(invoker,
                           [
                             "testonly",
                             "visibility",
                           ])

    sources = [
      "$file_stem.cc",
      "$file_stem.cc.h",
      coding_tables,
    ]

    deps = [
      ":${generation_target_name}(${current_base_toolchain})",
      ":$target_name($fidl_toolchain)",
      "//garnet/public/lib/fidl/cpp",
    ]

    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}
