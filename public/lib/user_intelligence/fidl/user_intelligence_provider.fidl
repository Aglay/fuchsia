// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module maxwell;

import "lib/app/fidl/application_launcher.fidl";
import "lib/resolver/fidl/resolver.fidl";
import "lib/speech/fidl/speech_to_text.fidl";
import "lib/suggestion/fidl/suggestion_provider.fidl";
import "lib/component/fidl/component_context.fidl";
import "lib/context/fidl/context_engine.fidl";
import "lib/story/fidl/story_provider.fidl";
import "lib/user/fidl/focus.fidl";

import "intelligence_services.fidl";
import "scope.fidl";

[ServiceName="maxwell.UserIntelligenceProviderFactory"]
interface UserIntelligenceProviderFactory {
  // Creates and returns a |UserIntelligenceProvider|.
  //
  // NOTE: Any future dependencies needed are provided here, and are assumed to
  // be scoped to the user.
  GetUserIntelligenceProvider@0(
      maxwell.ContextEngine context_engine,
      modular.StoryProvider story_provider,
      modular.FocusProvider focus_provider,
      modular.VisibleStoriesProvider visible_stories_provider,
      UserIntelligenceProvider& provider);
};

interface UserIntelligenceProvider {
  // Creates an |IntelligenceServices| scoped to a specific Component,
  // identified by |scope|.
  //
  // NOTE: Eventually |component_id| will become more complex, specifying
  // information needed to evaluate access-control policies for downstream
  // services.
  //
  // ANOTHER NOTE: |IntelligenceServices| is a short-term "big bucket" in which
  // to put any and all services that are to be exposed to Agents and Modules.
  // Once our understanding of the needs of Agents/Modules is clearer, we
  // should break the bucket apart.
  GetComponentIntelligenceServices@0(ComponentScope scope,
                                     IntelligenceServices& services);

  GetSuggestionProvider@1(SuggestionProvider& suggestion_provider);

  GetSpeechToText@2(speech.SpeechToText& speech_to_text);

  GetResolver@3(resolver.Resolver& resolver);

  // The |ComponentContext| is used to create agents and use message queues.
  StartAgents@4(modular.ComponentContext user_intelligence_context);

  // A standard set of services provided to all agents at startup.
  GetServicesForAgent(string url) => (component.ServiceList service_list);
};
