// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module maxwell;

import "lib/suggestion/fidl/suggestion_display.fidl";
import "lib/suggestion/fidl/user_input.fidl";

// Allows clients to subscribe to different Suggestion "channels" and iterate
// through the results. Supports both passive consumption of Suggestions based
// on contextual changes, as well as Suggestions derived from user-driven
// "Asks".
[ServiceName="maxwell.SuggestionProvider"]
interface SuggestionProvider {
  // Creates a subscription to the "interruptions" category of Suggestions.
  // Interruptions are delivered immediately once they become available, and are
  // potentially unlimited in number.
  //
  // Closing the |listener| pipe terminates the subscription.
  //
  // Any user interactions received by the client should be forwarded to the
  // SuggestionService by calling NotifyInteraction().
  SubscribeToInterruptions@0(InterruptionListener listener);

  // Creates a subscription to "Next" Suggestions, with changes sent to
  // |listener|. A maximum of |count| suggestions will be returned. To
  // change the count, call this method again with a new count.
  //
  // Closing the the |listener| pipe terminates the subscription.
  SubscribeToNext@1(NextListener listener, int32 count);

  // Must be called when the user initiates a query for suggestions, perhaps
  // as an “Ask” or a scoped suggestion. Results are sent to |listener|. Changes
  // to the query should be communicated by closing the previous |listener| and
  // calling the method again with the new query.
  //
  // Closing the |listener| pipe signals to the SuggestionService that the query
  // has been completed or canceled.
  Query@2(QueryListener listener, UserInput query, int32 count);

  // Notifies the suggestion engine that the user has interacted with the given
  // Suggestion in the manner described in |interaction|.
  NotifyInteraction@3(string suggestion_uuid, Interaction interaction);

  // *** Speech Section ***
  // TODO(jwnichols): Move these into a separate speech service.  It is
  // convenient to have them here now, but this is not a good long term
  // solution.

  // TODO(rosswang): remove this if/when FeedbackListener is merged into Ask.
  RegisterFeedbackListener@4(FeedbackListener speech_listener);
};

interface InterruptionListener {
  // Notifies the user interface to interrupt the user
  OnInterrupt@0(Suggestion suggestion);
};

interface NextListener {
  // Notifies the user interface that the passive suggestion results have been
  // updated. This is called every time the suggestion results change.
  OnNextResults@0(array<Suggestion> suggestions);

  // Notifies the user interface when processing is occurring on the passive
  // suggestions, which may result in additions or re-ranking.  The UI may
  // wish to show a spinner during this time.
  OnProcessingChange@1(bool processing);
};

interface QueryListener {
  // Notifies the user interface that new suggestion results are available.
  // This may be called multiple times if the suggestion results are updated.
  OnQueryResults@0(array<Suggestion> suggestions);

  // Notifies the user interface that query processing is completed.
  OnQueryComplete@1();
};

enum InteractionType {
  SELECTED,
  DISMISSED
  // SNOOZED
};

struct Interaction {
  InteractionType type;

  // TODO(thatguy): Include parameters for each type of interaction where
  // applicable. Consider making this a union in lieu of the struct/enum combo.
};

struct Suggestion {
  // Uniquely and globally identifies this Suggestion.
  string uuid;

  // The probability that a given suggestion would be selected if it were the
  // only suggestion shown to the user.
  float confidence;

  // Display properties of the Suggestion
  SuggestionDisplay display;

  // When the suggestion affects a specific story, the ID of that story will be
  // included here.
  string? story_id;
};

// *** Speech Section ***
// TODO(jwnichols): Move these into a separate speech service.  It is
// convenient to have them here now, but this is not a good long term
// solution.

// Encodes the valid states of an Ask, including spoken phases. States include
// those used for interpreting speech to text as well as for when the system is
// querying handlers or generating audio output.
//
// All state transitions are valid.
//
// TODO(rosswang): These states might be pertinent to non-speech flows as well.
// TODO(rosswang): |IDLE| vs. |PROCESSING| is going to become the
// |OnProcessingChanged| state event on |SuggestionHandler| soon.
enum SpeechStatus {
  // Exchange complete or not started
  IDLE,
  // Query sent, awaiting results
  PROCESSING,
  // System speaking
  RESPONDING
};

// TODO(rosswang): This is very temporary. Probably next week, OnStatusChanged
// will be split between the |TranscriptionListener| lifecycle and
// |SuggestionListener|'s |onProcessingChanged|. |OnTextResponse will probably
// be part of the callback on |Query|.
interface FeedbackListener {
  // Called every time the internal |SpeechStatus| changes.
  OnStatusChanged@0(SpeechStatus status);

  // TODO(rosswang): OnAudioResponse method (or fold it into OnTextResponse),
  // once it becomes trivial for SysUI to implement it. This would allow SysUI
  // to make a determination as to whether playback is warranted. For now, let
  // Suggestion Engine handle the playback. A possible next step could be to add
  // OnAudioResponse with a method to start playback.

  // Receives a text representation of the spoken response. This method is
  // called at the beginning of the |RESPONDING| phase.
  OnTextResponse@1(string response_text);
};
