// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.modular;

// For now, it is expected that the format must be known synchronously at
// response time, before connecting to the packet producer. If in the future
// this proves to be a performance bottleneck, we can add a second interface
// layer.
struct MediaResponse {
  fuchsia.media.MediaType media_type;
  fuchsia.media.MediaPacketProducer media_packet_producer;
};
struct QueryResponse {
  vector<Proposal> proposals;
  string? natural_language_response;
  // An optional voice/audio/media response to the query as answered by this
  // agent.
  MediaResponse? media_response;
};

// An interface enabling Agents and Modules to contribute Proposals reactively
// to the Suggestion engine based on a user query.
interface QueryHandler {
  // Produces a list of Proposals in response to a query. The query may be empty
  // in the case of an initial ask, and this method is called every time the
  // query changes.
  //
  // Proposals given in the callback have their lifecycle tied to this query.
  // After the query has completed, the proposals are dismissed. When the query
  // changes, any proposals missing from the subsequent callback are likewise
  // dismissed. These Proposals are distinct from Next/Interruption proposals,
  // even if they may share IDs.
  //
  // Alternately, the client is free to call Propose on its
  // ProposalPublisher to make persistent Proposals. However, these
  // proposals may be subject to more stringent filtering by the Suggestion
  // Engine. TODO(rosswang): spec/revisit.
  1: OnQuery(UserInput query) -> (QueryResponse response);
};
