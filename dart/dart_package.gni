# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Defines a Dart package
#
# Parameters
#
#   package_name (optional)
#     Name of the dart package. This is used as an identifier in code that
#     depends on this package. In general, this should correspond to the path to
#     the package.  I.e. a dart package in //foo/bar/baz should have the package
#     name "foo.bar.baz"
#
#   infer_package_name (optional)
#     Infer the package name based on the path to the package.
#
#     NOTE: Either package_name or infer_package_name must be set.
#
#   deps (optional)
#     List of labels for Dart packages this package depends on.
#
#   non_dart_deps (optional)
#     List of labels this package depends on that are not Dart packages. This
#     includes things like actions that generate Dart code. It typically doesn't
#     need to be set.
#
# Example of usage:
#
#   dart_package("baz") {
#     package_name = "foo.bar.baz"
#     deps = [
#       "//foo/bar/owl"
#     ]
#   }
template("dart_package") {
  if (defined(invoker.package_name)) {
    package_name = invoker.package_name
  } else if (defined(invoker.infer_package_name) && invoker.infer_package_name) {
    target_dir = get_label_info(target_name, "dir")
    package_name = exec_script("//build/dart/label_to_package_name.py",
                               [ target_dir ],
                               "trim string")
  } else {
    assert(false, "Must specify either a package_name or infer_package_name")
  }

  action(target_name) {
    script = "//build/dart/gen_dot_packages.py"

    dart_deps = []
    if (defined(invoker.deps)) {
      dart_deps += invoker.deps
    }

    deps = dart_deps
    if (defined(invoker.non_dart_deps)) {
      deps += invoker.non_dart_deps
    }

    dot_packages_file = "$target_gen_dir/$target_name.packages"

    outputs = [
      dot_packages_file,
    ]
    depfile = "$dot_packages_file.d"

    source_dir = "."
    if (defined(invoker.source_dir)) {
      source_dir = invoker.source_dir
    }

    args = [
             "--out",
             rebase_path(dot_packages_file, root_build_dir),
             "--source-dir",
             rebase_path(source_dir),
             "--root-build-dir",
             rebase_path(root_build_dir),
             "--package-name",
             package_name,
             "--depfile",
             rebase_path(depfile),
             "--deps",
           ] + dart_deps
  }
}
