# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")
import("//third_party/protobuf/proto_library.gni")

extras_image = "$target_out_dir/linux/extras.img"

declare_args() {
  # Default values for the guest network configuration.
  #
  # These are currently hard-coded to match what is setup in the virtio-net
  # device.
  #
  # See //garnet/bin/guest/vmm/device/virtio_net.cc for more details.
  linux_runner_ip = "10.0.0.2"
  linux_runner_gateway = "10.0.0.1"
  linux_runner_netmask = "255.255.255.0"

  # If `true`, the extras.img will be built and mounted inside the container
  # at /mnt/chromeos.
  #
  # This is useful for including some GN-built binaries into the guest image
  # without modifying the termina images.
  linux_runner_extras = false
}

config("linux_runner_net_config") {
  defines = [
    "LINUX_RUNNER_IP_DEFAULT=\"" + linux_runner_ip + "\"",
    "LINUX_RUNNER_GATEWAY_DEFAULT=\"" + linux_runner_gateway + "\"",
    "LINUX_RUNNER_NETMASK_DEFAULT=\"" + linux_runner_netmask + "\"",
  ]
}

source_set("lib") {
  sources = [
    "guest.cc",
    "guest.h",
    "linux_component.cc",
    "linux_component.h",
    "linux_runner.cc",
    "linux_runner.h",
    "log_collector.cc",
    "log_collector.h",
  ]
  public_configs = [ ":linux_runner_net_config" ]
  public_deps = [
    ":protos",
    "//garnet/public/lib/fsl",
    "//garnet/public/lib/guest",
    "//sdk/fidl/fuchsia.guest",
    "//sdk/fidl/fuchsia.sys",
    "//sdk/fidl/fuchsia.ui.app",
    "//sdk/fidl/fuchsia.wayland",
    "//sdk/lib/sys/cpp",
    "//src/lib/fxl",
    "//third_party/grpc:grpc++",
    "//third_party/protobuf:protobuf_lite",
    "//zircon/public/lib/async-loop-cpp",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/fs",
    "//zircon/public/lib/fzl",
    "//zircon/public/lib/trace-provider",
  ]
}

proto_library("protos") {
  sources = [
    "../third_party/protos/common.proto",
    "../third_party/protos/container_guest.proto",
    "../third_party/protos/container_host.proto",
    "../third_party/protos/tremplin.proto",
    "../third_party/protos/vm_guest.proto",
    "../third_party/protos/vm_host.proto",
  ]

  generate_python = false
  cc_generator_options = "lite"
  generator_plugin_suffix = ".grpc.pb"
  generator_plugin_label = "//third_party/grpc:grpc_cpp_plugin"

  import_dirs = [
    "//garnet/bin/guest/pkg/biscotti_guest/third_party/protos",
    "//third_party/protobuf/src",
  ]
  deps = [
    "//third_party/grpc:grpc++",
  ]
}

action("extras") {
  visibility = [ ":*" ]
  script = "mkextras.sh"

  deps = [
    "//garnet/lib/magma/tests_linux/unit_tests:magma_unit_tests_linux(//build/toolchain:linux_x64)",
  ]

  args = [
    rebase_path(extras_image),
    rebase_path("${root_build_dir}/linux_x64/magma_unit_tests_linux"),
  ]

  outputs = [
    extras_image,
  ]
}

executable("bin") {
  output_name = "linux_runner"

  sources = [
    "main.cc",
  ]

  deps = [
    ":lib",
  ]
}

package("linux_runner") {
  deps = [
    ":bin",
  ]

  binary = "linux_runner"

  meta = [
    {
      path = rebase_path("linux_runner.cmx")
      dest = "linux_runner.cmx"
    },
  ]

  if (linux_runner_extras) {
    deps += [ ":extras" ]
    resources = [
      {
        path = extras_image
        dest = "extras.img"
      },
    ]
  }
}
