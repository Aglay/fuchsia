// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.event.names.upper;
protocol DangerousEvents {
  -> ABSTRACT();
  -> ALIGNAS();
  -> ALIGNOF();
  -> AND();
  -> AND_EQ();
  -> AS();
  -> ASM();
  -> ASYNC();
  -> ATOMIC_CANCEL();
  -> ATOMIC_COMMIT();
  -> ATOMIC_NOEXCEPT();
  -> AUTO();
  -> AWAIT();
  -> BECOME();
  -> BITAND();
  -> BITOR();
  -> BOOL();
  -> BOX();
  -> BREAK();
  -> BYTE();
  -> CASE();
  -> CATCH();
  -> CHAN();
  -> CHAR();
  -> CHAR16_T();
  -> CHAR32_T();
  -> CLASS();
  -> CO_AWAIT();
  -> CO_RETURN();
  -> CO_YIELD();
  -> CODING_TRAITS();
  -> COMPL();
  -> CONCEPT();
  -> CONST();
  -> CONST_CAST();
  -> CONSTEXPR();
  -> CONTINUE();
  -> CONTROLLER();
  -> CRATE();
  -> DECLTYPE();
  -> DECODER();
  -> DEFAULT();
  -> DEFER();
  -> DELETE();
  -> DO();
  -> DOUBLE();
  -> DYNAMIC_CAST();
  -> ELSE();
  -> ENCODER();
  -> ENUM();
  -> ERR();
  -> EXPLICIT();
  -> EXPORT();
  -> EXTERN();
  -> FALLTHROUGH();
  -> FALSE();
  -> FIDL();
  -> FIDL_TYPE();
  -> FINAL();
  -> FLOAT();
  -> FN();
  -> FOR();
  -> FRIEND();
  -> FUNC();
  -> FUTURE();
  -> FUTURES();
  -> GO();
  -> GOTO();
  -> HAS_INVALID_TAG();
  -> IF();
  -> IMPL();
  -> IMPORT();
  -> IN();
  -> INLINE();
  -> INT();
  -> INT16();
  -> INT32();
  -> INT64();
  -> INT8();
  -> INTERFACE();
  -> LET();
  -> LHS();
  -> LIST();
  -> LONG();
  -> LOOP();
  -> MACRO();
  -> MAP();
  -> MATCH();
  -> MOD();
  -> MODULE();
  -> MOVE();
  -> MUT();
  -> MUTABLE();
  -> NAMESPACE();
  -> NEVER();
  -> NEW();
  -> NOEXCEPT();
  -> NONE();
  -> NOT();
  -> NOT_EQ();
  -> NULLPTR();
  -> OFFSET();
  -> OFFSETOF();
  -> OK();
  -> ON_OPEN();
  -> OPERATOR();
  -> OPTION();
  -> OR();
  -> OR_EQ();
  -> OVERRIDE();
  -> PACKAGE();
  -> PRIV();
  -> PRIVATE();
  -> PROC();
  -> PROTECTED();
  -> PROXY();
  -> PUB();
  -> PUBLIC();
  -> PURE();
  -> RANGE();
  -> REF();
  -> REGISTER();
  -> REINTERPRET_CAST();
  -> REQUIRES();
  -> RESULT();
  -> RETURN();
  -> RHS();
  -> RUNE();
  -> SELECT();
  -> SELF();
  -> SEND();
  -> SET_CONTROLLER();
  -> SHORT();
  -> SIGNED();
  -> SIZEOF();
  -> SOME();
  -> STATIC();
  -> STATIC_ASSERT();
  -> STATIC_CAST();
  -> STREAM();
  -> STRING();
  -> STRUCT();
  -> STUB();
  -> SUPER();
  -> SWITCH();
  -> SYNCHRONIZED();
  -> TAG();
  -> TEMPLATE();
  -> THIS();
  -> THREAD_LOCAL();
  -> THROW();
  -> TO_STRING();
  -> TRAIT();
  -> TRUE();
  -> TRY();
  -> TYPE();
  -> TYPEDEF();
  -> TYPEID();
  -> TYPENAME();
  -> TYPEOF();
  -> UINT16();
  -> UINT32();
  -> UINT64();
  -> UINT8();
  -> UNION();
  -> UNSAFE();
  -> UNSIGNED();
  -> UNSIZED();
  -> USE();
  -> USING();
  -> VALUE();
  -> VALUE_OF();
  -> VALUE_UNION();
  -> VALUES();
  -> VALUES_MAP();
  -> VAR();
  -> VEC();
  -> VIRTUAL();
  -> VOID();
  -> VOLATILE();
  -> WCHAR_T();
  -> WHERE();
  -> WHICH();
  -> WHILE();
  -> XOR();
  -> XOR_EQ();
  -> XUNION();
  -> YIELD();
  -> ZX();
};
