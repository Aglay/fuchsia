// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.method.request.arguments.lower;
using argtype = uint32;
protocol DangerousRequestArguments {
  Method0(argtype abstract);
  Method1(argtype alignas);
  Method2(argtype alignof);
  Method3(argtype and);
  Method4(argtype and_eq);
  Method5(argtype as);
  Method6(argtype asm);
  Method7(argtype async);
  Method8(argtype atomic_cancel);
  Method9(argtype atomic_commit);
  Method10(argtype atomic_noexcept);
  Method11(argtype auto);
  Method12(argtype await);
  Method13(argtype become);
  Method14(argtype bitand);
  Method15(argtype bitor);
  Method16(argtype bool);
  Method17(argtype box);
  Method18(argtype break);
  Method19(argtype byte);
  Method20(argtype case);
  Method21(argtype catch);
  Method22(argtype chan);
  Method23(argtype char);
  Method24(argtype char16_t);
  Method25(argtype char32_t);
  Method26(argtype class);
  Method27(argtype co_await);
  Method28(argtype co_return);
  Method29(argtype co_yield);
  Method30(argtype coding_traits);
  Method31(argtype compl);
  Method32(argtype concept);
  Method33(argtype const);
  Method34(argtype const_cast);
  Method35(argtype constexpr);
  Method36(argtype continue);
  Method37(argtype controller);
  Method38(argtype crate);
  Method39(argtype decltype);
  Method40(argtype decoder);
  Method41(argtype default);
  Method42(argtype defer);
  Method43(argtype delete);
  Method44(argtype do);
  Method45(argtype double);
  Method46(argtype dynamic_cast);
  Method47(argtype else);
  Method48(argtype encoder);
  Method49(argtype enum);
  Method50(argtype err);
  Method51(argtype explicit);
  Method52(argtype export);
  Method53(argtype extern);
  Method54(argtype fallthrough);
  Method55(argtype false);
  Method56(argtype fidl);
  Method57(argtype fidl_type);
  Method58(argtype final);
  Method59(argtype float);
  Method60(argtype fn);
  Method61(argtype for);
  Method62(argtype friend);
  Method63(argtype func);
  Method64(argtype future);
  Method65(argtype futures);
  Method66(argtype go);
  Method67(argtype goto);
  Method68(argtype has_invalid_tag);
  Method69(argtype if);
  Method70(argtype impl);
  Method71(argtype import);
  Method72(argtype in);
  Method73(argtype inline);
  Method74(argtype int);
  Method75(argtype int16);
  Method76(argtype int32);
  Method77(argtype int64);
  Method78(argtype int8);
  Method79(argtype interface);
  Method80(argtype let);
  Method81(argtype lhs);
  Method82(argtype list);
  Method83(argtype long);
  Method84(argtype loop);
  Method85(argtype macro);
  Method86(argtype map);
  Method87(argtype match);
  Method88(argtype mod);
  Method89(argtype module);
  Method90(argtype move);
  Method91(argtype mut);
  Method92(argtype mutable);
  Method93(argtype namespace);
  Method94(argtype never);
  Method95(argtype new);
  Method96(argtype noexcept);
  Method97(argtype none);
  Method98(argtype not);
  Method99(argtype not_eq);
  Method100(argtype nullptr);
  Method101(argtype offset);
  Method102(argtype offsetof);
  Method103(argtype ok);
  Method104(argtype on_open);
  Method105(argtype operator);
  Method106(argtype option);
  Method107(argtype or);
  Method108(argtype or_eq);
  Method109(argtype override);
  Method110(argtype package);
  Method111(argtype priv);
  Method112(argtype private);
  Method113(argtype proc);
  Method114(argtype protected);
  Method115(argtype proxy);
  Method116(argtype pub);
  Method117(argtype public);
  Method118(argtype pure);
  Method119(argtype range);
  Method120(argtype ref);
  Method121(argtype register);
  Method122(argtype reinterpret_cast);
  Method123(argtype requires);
  Method124(argtype result);
  Method125(argtype return);
  Method126(argtype rhs);
  Method127(argtype rune);
  Method128(argtype select);
  Method129(argtype self);
  Method130(argtype send);
  Method131(argtype set_controller);
  Method132(argtype short);
  Method133(argtype signed);
  Method134(argtype sizeof);
  Method135(argtype some);
  Method136(argtype static);
  Method137(argtype static_assert);
  Method138(argtype static_cast);
  Method139(argtype stream);
  Method140(argtype string);
  Method141(argtype struct);
  Method142(argtype stub);
  Method143(argtype super);
  Method144(argtype switch);
  Method145(argtype synchronized);
  Method146(argtype tag);
  Method147(argtype template);
  Method148(argtype this);
  Method149(argtype thread_local);
  Method150(argtype throw);
  Method151(argtype to_string);
  Method152(argtype trait);
  Method153(argtype true);
  Method154(argtype try);
  Method155(argtype type);
  Method156(argtype typedef);
  Method157(argtype typeid);
  Method158(argtype typename);
  Method159(argtype typeof);
  Method160(argtype uint16);
  Method161(argtype uint32);
  Method162(argtype uint64);
  Method163(argtype uint8);
  Method164(argtype union);
  Method165(argtype unsafe);
  Method166(argtype unsigned);
  Method167(argtype unsized);
  Method168(argtype use);
  Method169(argtype using);
  Method170(argtype value);
  Method171(argtype value_of);
  Method172(argtype value_union);
  Method173(argtype values);
  Method174(argtype values_map);
  Method175(argtype var);
  Method176(argtype vec);
  Method177(argtype virtual);
  Method178(argtype void);
  Method179(argtype volatile);
  Method180(argtype wchar_t);
  Method181(argtype where);
  Method182(argtype which);
  Method183(argtype while);
  Method184(argtype xor);
  Method185(argtype xor_eq);
  Method186(argtype xunion);
  Method187(argtype yield);
  Method188(argtype zx);
};
