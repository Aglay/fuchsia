// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.table.fields.camel;
table DangerousMembers {
  1: uint32 Abstract;
  2: uint32 Alignas;
  3: uint32 Alignof;
  4: uint32 And;
  5: uint32 AndEq;
  6: uint32 As;
  7: uint32 Asm;
  8: uint32 Async;
  9: uint32 AtomicCancel;
  10: uint32 AtomicCommit;
  11: uint32 AtomicNoexcept;
  12: uint32 Auto;
  13: uint32 Await;
  14: uint32 Become;
  15: uint32 Bitand;
  16: uint32 Bitor;
  17: uint32 Bool;
  18: uint32 Box;
  19: uint32 Break;
  20: uint32 Byte;
  21: uint32 Case;
  22: uint32 Catch;
  23: uint32 Chan;
  24: uint32 Char;
  25: uint32 Char16T;
  26: uint32 Char32T;
  27: uint32 Class;
  28: uint32 CoAwait;
  29: uint32 CoReturn;
  30: uint32 CoYield;
  31: uint32 CodingTraits;
  32: uint32 Compl;
  33: uint32 Concept;
  34: uint32 Const;
  35: uint32 ConstCast;
  36: uint32 Constexpr;
  37: uint32 Continue;
  38: uint32 Crate;
  39: uint32 Decltype;
  40: uint32 Decoder;
  41: uint32 Default;
  42: uint32 Defer;
  43: uint32 Delete;
  44: uint32 Do;
  45: uint32 Double;
  46: uint32 DynamicCast;
  47: uint32 Else;
  48: uint32 Encoder;
  49: uint32 Enum;
  50: uint32 Err;
  51: uint32 Explicit;
  52: uint32 Export;
  53: uint32 Extern;
  54: uint32 Fallthrough;
  55: uint32 False;
  56: uint32 Fidl;
  57: uint32 FidlType;
  58: uint32 Final;
  59: uint32 Float;
  60: uint32 Fn;
  61: uint32 For;
  62: uint32 Friend;
  63: uint32 Func;
  64: uint32 Future;
  65: uint32 Futures;
  66: uint32 Go;
  67: uint32 Goto;
  68: uint32 HasInvalidTag;
  69: uint32 If;
  70: uint32 Impl;
  71: uint32 Import;
  72: uint32 In;
  73: uint32 Inline;
  74: uint32 Int;
  75: uint32 Int16;
  76: uint32 Int32;
  77: uint32 Int64;
  78: uint32 Int8;
  79: uint32 Interface;
  80: uint32 Let;
  81: uint32 Lhs;
  82: uint32 Long;
  83: uint32 Loop;
  84: uint32 Macro;
  85: uint32 Map;
  86: uint32 Match;
  87: uint32 Mod;
  88: uint32 Module;
  89: uint32 Move;
  90: uint32 Mut;
  91: uint32 Mutable;
  92: uint32 Namespace;
  93: uint32 Never;
  94: uint32 New;
  95: uint32 Noexcept;
  96: uint32 None;
  97: uint32 Not;
  98: uint32 NotEq;
  99: uint32 Nullptr;
  100: uint32 Offset;
  101: uint32 Offsetof;
  102: uint32 Ok;
  103: uint32 OnOpen;
  104: uint32 Operator;
  105: uint32 Option;
  106: uint32 Or;
  107: uint32 OrEq;
  108: uint32 Override;
  109: uint32 Package;
  110: uint32 Priv;
  111: uint32 Private;
  112: uint32 Proc;
  113: uint32 Protected;
  114: uint32 Pub;
  115: uint32 Public;
  116: uint32 Pure;
  117: uint32 Range;
  118: uint32 Ref;
  119: uint32 Register;
  120: uint32 ReinterpretCast;
  121: uint32 Requires;
  122: uint32 Result;
  123: uint32 Return;
  124: uint32 Rhs;
  125: uint32 Rune;
  126: uint32 Select;
  127: uint32 Self;
  128: uint32 Send;
  129: uint32 Short;
  130: uint32 Signed;
  131: uint32 Sizeof;
  132: uint32 Some;
  133: uint32 Static;
  134: uint32 StaticAssert;
  135: uint32 StaticCast;
  136: uint32 Stream;
  137: uint32 String;
  138: uint32 Struct;
  139: uint32 Super;
  140: uint32 Switch;
  141: uint32 Synchronized;
  142: uint32 Tag;
  143: uint32 Template;
  144: uint32 This;
  145: uint32 ThreadLocal;
  146: uint32 Throw;
  147: uint32 Trait;
  148: uint32 True;
  149: uint32 Try;
  150: uint32 Type;
  151: uint32 Typedef;
  152: uint32 Typeid;
  153: uint32 Typename;
  154: uint32 Typeof;
  155: uint32 Uint16;
  156: uint32 Uint32;
  157: uint32 Uint64;
  158: uint32 Uint8;
  159: uint32 Union;
  160: uint32 Unsafe;
  161: uint32 Unsigned;
  162: uint32 Unsized;
  163: uint32 Use;
  164: uint32 Using;
  165: uint32 Value;
  166: uint32 ValueUnion;
  167: uint32 Var;
  168: uint32 Vec;
  169: uint32 Virtual;
  170: uint32 Void;
  171: uint32 Volatile;
  172: uint32 WcharT;
  173: uint32 Where;
  174: uint32 Which;
  175: uint32 While;
  176: uint32 Xor;
  177: uint32 XorEq;
  178: uint32 Xunion;
  179: uint32 Yield;
  180: uint32 Zx;
};
