// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.union.names.lower;
using membertype = uint32;
union abstract { membertype member; };
union alignas { membertype member; };
union alignof { membertype member; };
union and { membertype member; };
union and_eq { membertype member; };
union as { membertype member; };
union asm { membertype member; };
union async { membertype member; };
union atomic_cancel { membertype member; };
union atomic_commit { membertype member; };
union atomic_noexcept { membertype member; };
union auto { membertype member; };
union await { membertype member; };
union become { membertype member; };
union bitand { membertype member; };
union bitor { membertype member; };
union bool { membertype member; };
union box { membertype member; };
union break { membertype member; };
union byte { membertype member; };
union case { membertype member; };
union catch { membertype member; };
union chan { membertype member; };
union char { membertype member; };
union char16_t { membertype member; };
union char32_t { membertype member; };
union class { membertype member; };
union co_await { membertype member; };
union co_return { membertype member; };
union co_yield { membertype member; };
union coding_traits { membertype member; };
union compl { membertype member; };
union concept { membertype member; };
union const { membertype member; };
union const_cast { membertype member; };
union constexpr { membertype member; };
union continue { membertype member; };
union controller { membertype member; };
union crate { membertype member; };
union decltype { membertype member; };
union decoder { membertype member; };
union default { membertype member; };
union defer { membertype member; };
union delete { membertype member; };
union do { membertype member; };
union double { membertype member; };
union dynamic_cast { membertype member; };
union else { membertype member; };
union encoder { membertype member; };
union enum { membertype member; };
union err { membertype member; };
union explicit { membertype member; };
union export { membertype member; };
union extern { membertype member; };
union fallthrough { membertype member; };
union false { membertype member; };
union fidl { membertype member; };
union fidl_type { membertype member; };
union final { membertype member; };
union float { membertype member; };
union fn { membertype member; };
union for { membertype member; };
union friend { membertype member; };
union func { membertype member; };
union future { membertype member; };
union futures { membertype member; };
union go { membertype member; };
union goto { membertype member; };
union has_invalid_tag { membertype member; };
union if { membertype member; };
union impl { membertype member; };
union import { membertype member; };
union in { membertype member; };
union inline { membertype member; };
union int { membertype member; };
union int16 { membertype member; };
union int32 { membertype member; };
union int64 { membertype member; };
union int8 { membertype member; };
union interface { membertype member; };
union let { membertype member; };
union lhs { membertype member; };
union long { membertype member; };
union loop { membertype member; };
union macro { membertype member; };
union map { membertype member; };
union match { membertype member; };
union mod { membertype member; };
union module { membertype member; };
union move { membertype member; };
union mut { membertype member; };
union mutable { membertype member; };
union namespace { membertype member; };
union never { membertype member; };
union new { membertype member; };
union noexcept { membertype member; };
union none { membertype member; };
union not { membertype member; };
union not_eq { membertype member; };
union nullptr { membertype member; };
union offset { membertype member; };
union offsetof { membertype member; };
union ok { membertype member; };
union on_open { membertype member; };
union operator { membertype member; };
union option { membertype member; };
union or { membertype member; };
union or_eq { membertype member; };
union override { membertype member; };
union package { membertype member; };
union priv { membertype member; };
union private { membertype member; };
union proc { membertype member; };
union protected { membertype member; };
union proxy { membertype member; };
union pub { membertype member; };
union public { membertype member; };
union pure { membertype member; };
union range { membertype member; };
union ref { membertype member; };
union register { membertype member; };
union reinterpret_cast { membertype member; };
union requires { membertype member; };
union result { membertype member; };
union return { membertype member; };
union rhs { membertype member; };
union rune { membertype member; };
union select { membertype member; };
union self { membertype member; };
union send { membertype member; };
union set_controller { membertype member; };
union short { membertype member; };
union signed { membertype member; };
union sizeof { membertype member; };
union some { membertype member; };
union static { membertype member; };
union static_assert { membertype member; };
union static_cast { membertype member; };
union stream { membertype member; };
union string { membertype member; };
union struct { membertype member; };
union stub { membertype member; };
union super { membertype member; };
union switch { membertype member; };
union synchronized { membertype member; };
union tag { membertype member; };
union template { membertype member; };
union this { membertype member; };
union thread_local { membertype member; };
union throw { membertype member; };
union trait { membertype member; };
union true { membertype member; };
union try { membertype member; };
union type { membertype member; };
union typedef { membertype member; };
union typeid { membertype member; };
union typename { membertype member; };
union typeof { membertype member; };
union uint16 { membertype member; };
union uint32 { membertype member; };
union uint64 { membertype member; };
union uint8 { membertype member; };
union union { membertype member; };
union unsafe { membertype member; };
union unsigned { membertype member; };
union unsized { membertype member; };
union use { membertype member; };
union using { membertype member; };
union value { membertype member; };
union value_union { membertype member; };
union var { membertype member; };
union vec { membertype member; };
union virtual { membertype member; };
union void { membertype member; };
union volatile { membertype member; };
union wchar_t { membertype member; };
union where { membertype member; };
union which { membertype member; };
union while { membertype member; };
union xor { membertype member; };
union xor_eq { membertype member; };
union xunion { membertype member; };
union yield { membertype member; };
union zx { membertype member; };
union DangerousMembers {
  abstract f0;
  alignas f1;
  alignof f2;
  and f3;
  and_eq f4;
  as f5;
  asm f6;
  async f7;
  atomic_cancel f8;
  atomic_commit f9;
  atomic_noexcept f10;
  auto f11;
  await f12;
  become f13;
  bitand f14;
  bitor f15;
  bool f16;
  box f17;
  break f18;
  byte f19;
  case f20;
  catch f21;
  chan f22;
  char f23;
  char16_t f24;
  char32_t f25;
  class f26;
  co_await f27;
  co_return f28;
  co_yield f29;
  coding_traits f30;
  compl f31;
  concept f32;
  const f33;
  const_cast f34;
  constexpr f35;
  continue f36;
  controller f37;
  crate f38;
  decltype f39;
  decoder f40;
  default f41;
  defer f42;
  delete f43;
  do f44;
  double f45;
  dynamic_cast f46;
  else f47;
  encoder f48;
  enum f49;
  err f50;
  explicit f51;
  export f52;
  extern f53;
  fallthrough f54;
  false f55;
  fidl f56;
  fidl_type f57;
  final f58;
  float f59;
  fn f60;
  for f61;
  friend f62;
  func f63;
  future f64;
  futures f65;
  go f66;
  goto f67;
  has_invalid_tag f68;
  if f69;
  impl f70;
  import f71;
  in f72;
  inline f73;
  int f74;
  int16 f75;
  int32 f76;
  int64 f77;
  int8 f78;
  interface f79;
  let f80;
  lhs f81;
  long f82;
  loop f83;
  macro f84;
  map f85;
  match f86;
  mod f87;
  module f88;
  move f89;
  mut f90;
  mutable f91;
  namespace f92;
  never f93;
  new f94;
  noexcept f95;
  none f96;
  not f97;
  not_eq f98;
  nullptr f99;
  offset f100;
  offsetof f101;
  ok f102;
  on_open f103;
  operator f104;
  option f105;
  or f106;
  or_eq f107;
  override f108;
  package f109;
  priv f110;
  private f111;
  proc f112;
  protected f113;
  proxy f114;
  pub f115;
  public f116;
  pure f117;
  range f118;
  ref f119;
  register f120;
  reinterpret_cast f121;
  requires f122;
  result f123;
  return f124;
  rhs f125;
  rune f126;
  select f127;
  self f128;
  send f129;
  set_controller f130;
  short f131;
  signed f132;
  sizeof f133;
  some f134;
  static f135;
  static_assert f136;
  static_cast f137;
  stream f138;
  string f139;
  struct f140;
  stub f141;
  super f142;
  switch f143;
  synchronized f144;
  tag f145;
  template f146;
  this f147;
  thread_local f148;
  throw f149;
  trait f150;
  true f151;
  try f152;
  type f153;
  typedef f154;
  typeid f155;
  typename f156;
  typeof f157;
  uint16 f158;
  uint32 f159;
  uint64 f160;
  uint8 f161;
  union f162;
  unsafe f163;
  unsigned f164;
  unsized f165;
  use f166;
  using f167;
  value f168;
  value_union f169;
  var f170;
  vec f171;
  virtual f172;
  void f173;
  volatile f174;
  wchar_t f175;
  where f176;
  which f177;
  while f178;
  xor f179;
  xor_eq f180;
  xunion f181;
  yield f182;
  zx f183;
};
