// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.union.names.lower;
using membertype = uint32;
union abstract { membertype member; };
union alignas { membertype member; };
union alignof { membertype member; };
union and { membertype member; };
union and_eq { membertype member; };
union as { membertype member; };
union asm { membertype member; };
union async { membertype member; };
union atomic_cancel { membertype member; };
union atomic_commit { membertype member; };
union atomic_noexcept { membertype member; };
union auto { membertype member; };
union await { membertype member; };
union become { membertype member; };
union bitand { membertype member; };
union bitor { membertype member; };
union bool { membertype member; };
union box { membertype member; };
union break { membertype member; };
union byte { membertype member; };
union case { membertype member; };
union catch { membertype member; };
union chan { membertype member; };
union char { membertype member; };
union char16_t { membertype member; };
union char32_t { membertype member; };
union class { membertype member; };
union co_await { membertype member; };
union co_return { membertype member; };
union co_yield { membertype member; };
union coding_traits { membertype member; };
union compl { membertype member; };
union concept { membertype member; };
union const { membertype member; };
union const_cast { membertype member; };
union constexpr { membertype member; };
union continue { membertype member; };
union controller { membertype member; };
union crate { membertype member; };
union decltype { membertype member; };
union decoder { membertype member; };
union default { membertype member; };
union defer { membertype member; };
union delete { membertype member; };
union do { membertype member; };
union double { membertype member; };
union dynamic_cast { membertype member; };
union else { membertype member; };
union encoder { membertype member; };
union enum { membertype member; };
union err { membertype member; };
union explicit { membertype member; };
union export { membertype member; };
union extern { membertype member; };
union fallthrough { membertype member; };
union false { membertype member; };
union fidl { membertype member; };
union fidl_type { membertype member; };
union final { membertype member; };
union float { membertype member; };
union fn { membertype member; };
union for { membertype member; };
union friend { membertype member; };
union func { membertype member; };
union future { membertype member; };
union futures { membertype member; };
union go { membertype member; };
union goto { membertype member; };
union has_invalid_tag { membertype member; };
union if { membertype member; };
union impl { membertype member; };
union import { membertype member; };
union in { membertype member; };
union inline { membertype member; };
union int { membertype member; };
union int16 { membertype member; };
union int32 { membertype member; };
union int64 { membertype member; };
union int8 { membertype member; };
union interface { membertype member; };
union let { membertype member; };
union lhs { membertype member; };
union list { membertype member; };
union long { membertype member; };
union loop { membertype member; };
union macro { membertype member; };
union map { membertype member; };
union match { membertype member; };
union mod { membertype member; };
union module { membertype member; };
union move { membertype member; };
union mut { membertype member; };
union mutable { membertype member; };
union namespace { membertype member; };
union never { membertype member; };
union new { membertype member; };
union noexcept { membertype member; };
union none { membertype member; };
union not { membertype member; };
union not_eq { membertype member; };
union nullptr { membertype member; };
union offset { membertype member; };
union offsetof { membertype member; };
union ok { membertype member; };
union on_open { membertype member; };
union operator { membertype member; };
union option { membertype member; };
union or { membertype member; };
union or_eq { membertype member; };
union override { membertype member; };
union package { membertype member; };
union priv { membertype member; };
union private { membertype member; };
union proc { membertype member; };
union protected { membertype member; };
union proxy { membertype member; };
union pub { membertype member; };
union public { membertype member; };
union pure { membertype member; };
union range { membertype member; };
union ref { membertype member; };
union register { membertype member; };
union reinterpret_cast { membertype member; };
union requires { membertype member; };
union result { membertype member; };
union return { membertype member; };
union rhs { membertype member; };
union rune { membertype member; };
union select { membertype member; };
union self { membertype member; };
union send { membertype member; };
union set_controller { membertype member; };
union short { membertype member; };
union signed { membertype member; };
union sizeof { membertype member; };
union some { membertype member; };
union static { membertype member; };
union static_assert { membertype member; };
union static_cast { membertype member; };
union stream { membertype member; };
union string { membertype member; };
union struct { membertype member; };
union stub { membertype member; };
union super { membertype member; };
union switch { membertype member; };
union synchronized { membertype member; };
union tag { membertype member; };
union template { membertype member; };
union this { membertype member; };
union thread_local { membertype member; };
union throw { membertype member; };
union to_string { membertype member; };
union trait { membertype member; };
union true { membertype member; };
union try { membertype member; };
union type { membertype member; };
union typedef { membertype member; };
union typeid { membertype member; };
union typename { membertype member; };
union typeof { membertype member; };
union uint16 { membertype member; };
union uint32 { membertype member; };
union uint64 { membertype member; };
union uint8 { membertype member; };
union union { membertype member; };
union unsafe { membertype member; };
union unsigned { membertype member; };
union unsized { membertype member; };
union use { membertype member; };
union using { membertype member; };
union value { membertype member; };
union value_of { membertype member; };
union value_union { membertype member; };
union values { membertype member; };
union values_map { membertype member; };
union var { membertype member; };
union vec { membertype member; };
union virtual { membertype member; };
union void { membertype member; };
union volatile { membertype member; };
union wchar_t { membertype member; };
union where { membertype member; };
union which { membertype member; };
union while { membertype member; };
union xor { membertype member; };
union xor_eq { membertype member; };
union xunion { membertype member; };
union yield { membertype member; };
union zx { membertype member; };
union DangerousMembers {
  abstract f0;
  alignas f1;
  alignof f2;
  and f3;
  and_eq f4;
  as f5;
  asm f6;
  async f7;
  atomic_cancel f8;
  atomic_commit f9;
  atomic_noexcept f10;
  auto f11;
  await f12;
  become f13;
  bitand f14;
  bitor f15;
  bool f16;
  box f17;
  break f18;
  byte f19;
  case f20;
  catch f21;
  chan f22;
  char f23;
  char16_t f24;
  char32_t f25;
  class f26;
  co_await f27;
  co_return f28;
  co_yield f29;
  coding_traits f30;
  compl f31;
  concept f32;
  const f33;
  const_cast f34;
  constexpr f35;
  continue f36;
  controller f37;
  crate f38;
  decltype f39;
  decoder f40;
  default f41;
  defer f42;
  delete f43;
  do f44;
  double f45;
  dynamic_cast f46;
  else f47;
  encoder f48;
  enum f49;
  err f50;
  explicit f51;
  export f52;
  extern f53;
  fallthrough f54;
  false f55;
  fidl f56;
  fidl_type f57;
  final f58;
  float f59;
  fn f60;
  for f61;
  friend f62;
  func f63;
  future f64;
  futures f65;
  go f66;
  goto f67;
  has_invalid_tag f68;
  if f69;
  impl f70;
  import f71;
  in f72;
  inline f73;
  int f74;
  int16 f75;
  int32 f76;
  int64 f77;
  int8 f78;
  interface f79;
  let f80;
  lhs f81;
  list f82;
  long f83;
  loop f84;
  macro f85;
  map f86;
  match f87;
  mod f88;
  module f89;
  move f90;
  mut f91;
  mutable f92;
  namespace f93;
  never f94;
  new f95;
  noexcept f96;
  none f97;
  not f98;
  not_eq f99;
  nullptr f100;
  offset f101;
  offsetof f102;
  ok f103;
  on_open f104;
  operator f105;
  option f106;
  or f107;
  or_eq f108;
  override f109;
  package f110;
  priv f111;
  private f112;
  proc f113;
  protected f114;
  proxy f115;
  pub f116;
  public f117;
  pure f118;
  range f119;
  ref f120;
  register f121;
  reinterpret_cast f122;
  requires f123;
  result f124;
  return f125;
  rhs f126;
  rune f127;
  select f128;
  self f129;
  send f130;
  set_controller f131;
  short f132;
  signed f133;
  sizeof f134;
  some f135;
  static f136;
  static_assert f137;
  static_cast f138;
  stream f139;
  string f140;
  struct f141;
  stub f142;
  super f143;
  switch f144;
  synchronized f145;
  tag f146;
  template f147;
  this f148;
  thread_local f149;
  throw f150;
  to_string f151;
  trait f152;
  true f153;
  try f154;
  type f155;
  typedef f156;
  typeid f157;
  typename f158;
  typeof f159;
  uint16 f160;
  uint32 f161;
  uint64 f162;
  uint8 f163;
  union f164;
  unsafe f165;
  unsigned f166;
  unsized f167;
  use f168;
  using f169;
  value f170;
  value_of f171;
  value_union f172;
  values f173;
  values_map f174;
  var f175;
  vec f176;
  virtual f177;
  void f178;
  volatile f179;
  wchar_t f180;
  where f181;
  which f182;
  while f183;
  xor f184;
  xor_eq f185;
  xunion f186;
  yield f187;
  zx f188;
};
