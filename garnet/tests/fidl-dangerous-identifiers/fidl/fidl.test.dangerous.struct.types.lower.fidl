// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.struct.types.lower;
using membertype = uint32;
struct abstract { membertype member = 1; };
struct alignas { membertype member = 1; };
struct alignof { membertype member = 1; };
struct and { membertype member = 1; };
struct and_eq { membertype member = 1; };
struct as { membertype member = 1; };
struct asm { membertype member = 1; };
struct async { membertype member = 1; };
struct atomic_cancel { membertype member = 1; };
struct atomic_commit { membertype member = 1; };
struct atomic_noexcept { membertype member = 1; };
struct auto { membertype member = 1; };
struct await { membertype member = 1; };
struct become { membertype member = 1; };
struct bitand { membertype member = 1; };
struct bitor { membertype member = 1; };
struct bool { membertype member = 1; };
struct box { membertype member = 1; };
struct break { membertype member = 1; };
struct byte { membertype member = 1; };
struct case { membertype member = 1; };
struct catch { membertype member = 1; };
struct chan { membertype member = 1; };
struct char { membertype member = 1; };
struct char16_t { membertype member = 1; };
struct char32_t { membertype member = 1; };
struct class { membertype member = 1; };
struct co_await { membertype member = 1; };
struct co_return { membertype member = 1; };
struct co_yield { membertype member = 1; };
struct coding_traits { membertype member = 1; };
struct compl { membertype member = 1; };
struct concept { membertype member = 1; };
struct const { membertype member = 1; };
struct const_cast { membertype member = 1; };
struct constexpr { membertype member = 1; };
struct continue { membertype member = 1; };
struct crate { membertype member = 1; };
struct decltype { membertype member = 1; };
struct decoder { membertype member = 1; };
struct default { membertype member = 1; };
struct defer { membertype member = 1; };
struct delete { membertype member = 1; };
struct do { membertype member = 1; };
struct double { membertype member = 1; };
struct dynamic_cast { membertype member = 1; };
struct else { membertype member = 1; };
struct encoder { membertype member = 1; };
struct enum { membertype member = 1; };
struct err { membertype member = 1; };
struct explicit { membertype member = 1; };
struct export { membertype member = 1; };
struct extern { membertype member = 1; };
struct fallthrough { membertype member = 1; };
struct false { membertype member = 1; };
struct fidl { membertype member = 1; };
struct fidl_type { membertype member = 1; };
struct final { membertype member = 1; };
struct float { membertype member = 1; };
struct fn { membertype member = 1; };
struct for { membertype member = 1; };
struct friend { membertype member = 1; };
struct func { membertype member = 1; };
struct future { membertype member = 1; };
struct futures { membertype member = 1; };
struct go { membertype member = 1; };
struct goto { membertype member = 1; };
struct has_invalid_tag { membertype member = 1; };
struct if { membertype member = 1; };
struct impl { membertype member = 1; };
struct import { membertype member = 1; };
struct in { membertype member = 1; };
struct inline { membertype member = 1; };
struct int { membertype member = 1; };
struct int16 { membertype member = 1; };
struct int32 { membertype member = 1; };
struct int64 { membertype member = 1; };
struct int8 { membertype member = 1; };
struct interface { membertype member = 1; };
struct let { membertype member = 1; };
struct lhs { membertype member = 1; };
struct long { membertype member = 1; };
struct loop { membertype member = 1; };
struct macro { membertype member = 1; };
struct map { membertype member = 1; };
struct match { membertype member = 1; };
struct mod { membertype member = 1; };
struct module { membertype member = 1; };
struct move { membertype member = 1; };
struct mut { membertype member = 1; };
struct mutable { membertype member = 1; };
struct namespace { membertype member = 1; };
struct never { membertype member = 1; };
struct new { membertype member = 1; };
struct noexcept { membertype member = 1; };
struct none { membertype member = 1; };
struct not { membertype member = 1; };
struct not_eq { membertype member = 1; };
struct nullptr { membertype member = 1; };
struct offset { membertype member = 1; };
struct offsetof { membertype member = 1; };
struct ok { membertype member = 1; };
struct on_open { membertype member = 1; };
struct operator { membertype member = 1; };
struct option { membertype member = 1; };
struct or { membertype member = 1; };
struct or_eq { membertype member = 1; };
struct override { membertype member = 1; };
struct package { membertype member = 1; };
struct priv { membertype member = 1; };
struct private { membertype member = 1; };
struct proc { membertype member = 1; };
struct protected { membertype member = 1; };
struct pub { membertype member = 1; };
struct public { membertype member = 1; };
struct pure { membertype member = 1; };
struct range { membertype member = 1; };
struct ref { membertype member = 1; };
struct register { membertype member = 1; };
struct reinterpret_cast { membertype member = 1; };
struct requires { membertype member = 1; };
struct result { membertype member = 1; };
struct return { membertype member = 1; };
struct rhs { membertype member = 1; };
struct rune { membertype member = 1; };
struct select { membertype member = 1; };
struct self { membertype member = 1; };
struct send { membertype member = 1; };
struct short { membertype member = 1; };
struct signed { membertype member = 1; };
struct sizeof { membertype member = 1; };
struct some { membertype member = 1; };
struct static { membertype member = 1; };
struct static_assert { membertype member = 1; };
struct static_cast { membertype member = 1; };
struct stream { membertype member = 1; };
struct string { membertype member = 1; };
struct struct { membertype member = 1; };
struct super { membertype member = 1; };
struct switch { membertype member = 1; };
struct synchronized { membertype member = 1; };
struct tag { membertype member = 1; };
struct template { membertype member = 1; };
struct this { membertype member = 1; };
struct thread_local { membertype member = 1; };
struct throw { membertype member = 1; };
struct trait { membertype member = 1; };
struct true { membertype member = 1; };
struct try { membertype member = 1; };
struct type { membertype member = 1; };
struct typedef { membertype member = 1; };
struct typeid { membertype member = 1; };
struct typename { membertype member = 1; };
struct typeof { membertype member = 1; };
struct uint16 { membertype member = 1; };
struct uint32 { membertype member = 1; };
struct uint64 { membertype member = 1; };
struct uint8 { membertype member = 1; };
struct union { membertype member = 1; };
struct unsafe { membertype member = 1; };
struct unsigned { membertype member = 1; };
struct unsized { membertype member = 1; };
struct use { membertype member = 1; };
struct using { membertype member = 1; };
struct value { membertype member = 1; };
struct value_union { membertype member = 1; };
struct var { membertype member = 1; };
struct vec { membertype member = 1; };
struct virtual { membertype member = 1; };
struct void { membertype member = 1; };
struct volatile { membertype member = 1; };
struct wchar_t { membertype member = 1; };
struct where { membertype member = 1; };
struct which { membertype member = 1; };
struct while { membertype member = 1; };
struct xor { membertype member = 1; };
struct xor_eq { membertype member = 1; };
struct xunion { membertype member = 1; };
struct yield { membertype member = 1; };
struct zx { membertype member = 1; };
struct DangerousMembers {
  abstract f0;
  alignas f1;
  alignof f2;
  and f3;
  and_eq f4;
  as f5;
  asm f6;
  async f7;
  atomic_cancel f8;
  atomic_commit f9;
  atomic_noexcept f10;
  auto f11;
  await f12;
  become f13;
  bitand f14;
  bitor f15;
  bool f16;
  box f17;
  break f18;
  byte f19;
  case f20;
  catch f21;
  chan f22;
  char f23;
  char16_t f24;
  char32_t f25;
  class f26;
  co_await f27;
  co_return f28;
  co_yield f29;
  coding_traits f30;
  compl f31;
  concept f32;
  const f33;
  const_cast f34;
  constexpr f35;
  continue f36;
  crate f37;
  decltype f38;
  decoder f39;
  default f40;
  defer f41;
  delete f42;
  do f43;
  double f44;
  dynamic_cast f45;
  else f46;
  encoder f47;
  enum f48;
  err f49;
  explicit f50;
  export f51;
  extern f52;
  fallthrough f53;
  false f54;
  fidl f55;
  fidl_type f56;
  final f57;
  float f58;
  fn f59;
  for f60;
  friend f61;
  func f62;
  future f63;
  futures f64;
  go f65;
  goto f66;
  has_invalid_tag f67;
  if f68;
  impl f69;
  import f70;
  in f71;
  inline f72;
  int f73;
  int16 f74;
  int32 f75;
  int64 f76;
  int8 f77;
  interface f78;
  let f79;
  lhs f80;
  long f81;
  loop f82;
  macro f83;
  map f84;
  match f85;
  mod f86;
  module f87;
  move f88;
  mut f89;
  mutable f90;
  namespace f91;
  never f92;
  new f93;
  noexcept f94;
  none f95;
  not f96;
  not_eq f97;
  nullptr f98;
  offset f99;
  offsetof f100;
  ok f101;
  on_open f102;
  operator f103;
  option f104;
  or f105;
  or_eq f106;
  override f107;
  package f108;
  priv f109;
  private f110;
  proc f111;
  protected f112;
  pub f113;
  public f114;
  pure f115;
  range f116;
  ref f117;
  register f118;
  reinterpret_cast f119;
  requires f120;
  result f121;
  return f122;
  rhs f123;
  rune f124;
  select f125;
  self f126;
  send f127;
  short f128;
  signed f129;
  sizeof f130;
  some f131;
  static f132;
  static_assert f133;
  static_cast f134;
  stream f135;
  string f136;
  struct f137;
  super f138;
  switch f139;
  synchronized f140;
  tag f141;
  template f142;
  this f143;
  thread_local f144;
  throw f145;
  trait f146;
  true f147;
  try f148;
  type f149;
  typedef f150;
  typeid f151;
  typename f152;
  typeof f153;
  uint16 f154;
  uint32 f155;
  uint64 f156;
  uint8 f157;
  union f158;
  unsafe f159;
  unsigned f160;
  unsized f161;
  use f162;
  using f163;
  value f164;
  value_union f165;
  var f166;
  vec f167;
  virtual f168;
  void f169;
  volatile f170;
  wchar_t f171;
  where f172;
  which f173;
  while f174;
  xor f175;
  xor_eq f176;
  xunion f177;
  yield f178;
  zx f179;
};
