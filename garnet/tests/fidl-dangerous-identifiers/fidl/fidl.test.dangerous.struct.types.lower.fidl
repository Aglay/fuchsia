// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.struct.types.lower;
using membertype = uint32;
struct abstract { membertype member = 1; };
struct alignas { membertype member = 1; };
struct alignof { membertype member = 1; };
struct and { membertype member = 1; };
struct and_eq { membertype member = 1; };
struct as { membertype member = 1; };
struct asm { membertype member = 1; };
struct async { membertype member = 1; };
struct atomic_cancel { membertype member = 1; };
struct atomic_commit { membertype member = 1; };
struct atomic_noexcept { membertype member = 1; };
struct auto { membertype member = 1; };
struct await { membertype member = 1; };
struct become { membertype member = 1; };
struct bitand { membertype member = 1; };
struct bitor { membertype member = 1; };
struct bool { membertype member = 1; };
struct box { membertype member = 1; };
struct break { membertype member = 1; };
struct byte { membertype member = 1; };
struct case { membertype member = 1; };
struct catch { membertype member = 1; };
struct chan { membertype member = 1; };
struct char { membertype member = 1; };
struct char16_t { membertype member = 1; };
struct char32_t { membertype member = 1; };
struct class { membertype member = 1; };
struct co_await { membertype member = 1; };
struct co_return { membertype member = 1; };
struct co_yield { membertype member = 1; };
struct coding_traits { membertype member = 1; };
struct compl { membertype member = 1; };
struct concept { membertype member = 1; };
struct const { membertype member = 1; };
struct const_cast { membertype member = 1; };
struct constexpr { membertype member = 1; };
struct continue { membertype member = 1; };
struct controller { membertype member = 1; };
struct crate { membertype member = 1; };
struct decltype { membertype member = 1; };
struct decoder { membertype member = 1; };
struct default { membertype member = 1; };
struct defer { membertype member = 1; };
struct delete { membertype member = 1; };
struct do { membertype member = 1; };
struct double { membertype member = 1; };
struct dynamic_cast { membertype member = 1; };
struct else { membertype member = 1; };
struct encoder { membertype member = 1; };
struct enum { membertype member = 1; };
struct err { membertype member = 1; };
struct explicit { membertype member = 1; };
struct export { membertype member = 1; };
struct extern { membertype member = 1; };
struct fallthrough { membertype member = 1; };
struct false { membertype member = 1; };
struct fidl { membertype member = 1; };
struct fidl_type { membertype member = 1; };
struct final { membertype member = 1; };
struct float { membertype member = 1; };
struct fn { membertype member = 1; };
struct for { membertype member = 1; };
struct friend { membertype member = 1; };
struct func { membertype member = 1; };
struct future { membertype member = 1; };
struct futures { membertype member = 1; };
struct go { membertype member = 1; };
struct goto { membertype member = 1; };
struct has_invalid_tag { membertype member = 1; };
struct if { membertype member = 1; };
struct impl { membertype member = 1; };
struct import { membertype member = 1; };
struct in { membertype member = 1; };
struct inline { membertype member = 1; };
struct int { membertype member = 1; };
struct int16 { membertype member = 1; };
struct int32 { membertype member = 1; };
struct int64 { membertype member = 1; };
struct int8 { membertype member = 1; };
struct interface { membertype member = 1; };
struct let { membertype member = 1; };
struct lhs { membertype member = 1; };
struct list { membertype member = 1; };
struct long { membertype member = 1; };
struct loop { membertype member = 1; };
struct macro { membertype member = 1; };
struct map { membertype member = 1; };
struct match { membertype member = 1; };
struct mod { membertype member = 1; };
struct module { membertype member = 1; };
struct move { membertype member = 1; };
struct mut { membertype member = 1; };
struct mutable { membertype member = 1; };
struct namespace { membertype member = 1; };
struct never { membertype member = 1; };
struct new { membertype member = 1; };
struct noexcept { membertype member = 1; };
struct none { membertype member = 1; };
struct not { membertype member = 1; };
struct not_eq { membertype member = 1; };
struct nullptr { membertype member = 1; };
struct offset { membertype member = 1; };
struct offsetof { membertype member = 1; };
struct ok { membertype member = 1; };
struct on_open { membertype member = 1; };
struct operator { membertype member = 1; };
struct option { membertype member = 1; };
struct or { membertype member = 1; };
struct or_eq { membertype member = 1; };
struct override { membertype member = 1; };
struct package { membertype member = 1; };
struct priv { membertype member = 1; };
struct private { membertype member = 1; };
struct proc { membertype member = 1; };
struct protected { membertype member = 1; };
struct proxy { membertype member = 1; };
struct pub { membertype member = 1; };
struct public { membertype member = 1; };
struct pure { membertype member = 1; };
struct range { membertype member = 1; };
struct ref { membertype member = 1; };
struct register { membertype member = 1; };
struct reinterpret_cast { membertype member = 1; };
struct requires { membertype member = 1; };
struct result { membertype member = 1; };
struct return { membertype member = 1; };
struct rhs { membertype member = 1; };
struct rune { membertype member = 1; };
struct select { membertype member = 1; };
struct self { membertype member = 1; };
struct send { membertype member = 1; };
struct set_controller { membertype member = 1; };
struct short { membertype member = 1; };
struct signed { membertype member = 1; };
struct sizeof { membertype member = 1; };
struct some { membertype member = 1; };
struct static { membertype member = 1; };
struct static_assert { membertype member = 1; };
struct static_cast { membertype member = 1; };
struct stream { membertype member = 1; };
struct string { membertype member = 1; };
struct struct { membertype member = 1; };
struct stub { membertype member = 1; };
struct super { membertype member = 1; };
struct switch { membertype member = 1; };
struct synchronized { membertype member = 1; };
struct tag { membertype member = 1; };
struct template { membertype member = 1; };
struct this { membertype member = 1; };
struct thread_local { membertype member = 1; };
struct throw { membertype member = 1; };
struct to_string { membertype member = 1; };
struct trait { membertype member = 1; };
struct true { membertype member = 1; };
struct try { membertype member = 1; };
struct type { membertype member = 1; };
struct typedef { membertype member = 1; };
struct typeid { membertype member = 1; };
struct typename { membertype member = 1; };
struct typeof { membertype member = 1; };
struct uint16 { membertype member = 1; };
struct uint32 { membertype member = 1; };
struct uint64 { membertype member = 1; };
struct uint8 { membertype member = 1; };
struct union { membertype member = 1; };
struct unsafe { membertype member = 1; };
struct unsigned { membertype member = 1; };
struct unsized { membertype member = 1; };
struct use { membertype member = 1; };
struct using { membertype member = 1; };
struct value { membertype member = 1; };
struct value_of { membertype member = 1; };
struct value_union { membertype member = 1; };
struct values { membertype member = 1; };
struct values_map { membertype member = 1; };
struct var { membertype member = 1; };
struct vec { membertype member = 1; };
struct virtual { membertype member = 1; };
struct void { membertype member = 1; };
struct volatile { membertype member = 1; };
struct wchar_t { membertype member = 1; };
struct where { membertype member = 1; };
struct which { membertype member = 1; };
struct while { membertype member = 1; };
struct xor { membertype member = 1; };
struct xor_eq { membertype member = 1; };
struct xunion { membertype member = 1; };
struct yield { membertype member = 1; };
struct zx { membertype member = 1; };
struct DangerousMembers {
  abstract f0;
  alignas f1;
  alignof f2;
  and f3;
  and_eq f4;
  as f5;
  asm f6;
  async f7;
  atomic_cancel f8;
  atomic_commit f9;
  atomic_noexcept f10;
  auto f11;
  await f12;
  become f13;
  bitand f14;
  bitor f15;
  bool f16;
  box f17;
  break f18;
  byte f19;
  case f20;
  catch f21;
  chan f22;
  char f23;
  char16_t f24;
  char32_t f25;
  class f26;
  co_await f27;
  co_return f28;
  co_yield f29;
  coding_traits f30;
  compl f31;
  concept f32;
  const f33;
  const_cast f34;
  constexpr f35;
  continue f36;
  controller f37;
  crate f38;
  decltype f39;
  decoder f40;
  default f41;
  defer f42;
  delete f43;
  do f44;
  double f45;
  dynamic_cast f46;
  else f47;
  encoder f48;
  enum f49;
  err f50;
  explicit f51;
  export f52;
  extern f53;
  fallthrough f54;
  false f55;
  fidl f56;
  fidl_type f57;
  final f58;
  float f59;
  fn f60;
  for f61;
  friend f62;
  func f63;
  future f64;
  futures f65;
  go f66;
  goto f67;
  has_invalid_tag f68;
  if f69;
  impl f70;
  import f71;
  in f72;
  inline f73;
  int f74;
  int16 f75;
  int32 f76;
  int64 f77;
  int8 f78;
  interface f79;
  let f80;
  lhs f81;
  list f82;
  long f83;
  loop f84;
  macro f85;
  map f86;
  match f87;
  mod f88;
  module f89;
  move f90;
  mut f91;
  mutable f92;
  namespace f93;
  never f94;
  new f95;
  noexcept f96;
  none f97;
  not f98;
  not_eq f99;
  nullptr f100;
  offset f101;
  offsetof f102;
  ok f103;
  on_open f104;
  operator f105;
  option f106;
  or f107;
  or_eq f108;
  override f109;
  package f110;
  priv f111;
  private f112;
  proc f113;
  protected f114;
  proxy f115;
  pub f116;
  public f117;
  pure f118;
  range f119;
  ref f120;
  register f121;
  reinterpret_cast f122;
  requires f123;
  result f124;
  return f125;
  rhs f126;
  rune f127;
  select f128;
  self f129;
  send f130;
  set_controller f131;
  short f132;
  signed f133;
  sizeof f134;
  some f135;
  static f136;
  static_assert f137;
  static_cast f138;
  stream f139;
  string f140;
  struct f141;
  stub f142;
  super f143;
  switch f144;
  synchronized f145;
  tag f146;
  template f147;
  this f148;
  thread_local f149;
  throw f150;
  to_string f151;
  trait f152;
  true f153;
  try f154;
  type f155;
  typedef f156;
  typeid f157;
  typename f158;
  typeof f159;
  uint16 f160;
  uint32 f161;
  uint64 f162;
  uint8 f163;
  union f164;
  unsafe f165;
  unsigned f166;
  unsized f167;
  use f168;
  using f169;
  value f170;
  value_of f171;
  value_union f172;
  values f173;
  values_map f174;
  var f175;
  vec f176;
  virtual f177;
  void f178;
  volatile f179;
  wchar_t f180;
  where f181;
  which f182;
  while f183;
  xor f184;
  xor_eq f185;
  xunion f186;
  yield f187;
  zx f188;
};
