// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.using.lower;
using abstract = uint32;
using alignas = uint32;
using alignof = uint32;
using and = uint32;
using and_eq = uint32;
using as = uint32;
using asm = uint32;
using async = uint32;
using atomic_cancel = uint32;
using atomic_commit = uint32;
using atomic_noexcept = uint32;
using auto = uint32;
using await = uint32;
using become = uint32;
using bitand = uint32;
using bitor = uint32;
using bool = uint32;
using box = uint32;
using break = uint32;
using byte = uint32;
using case = uint32;
using catch = uint32;
using chan = uint32;
using char = uint32;
using char16_t = uint32;
using char32_t = uint32;
using class = uint32;
using co_await = uint32;
using co_return = uint32;
using co_yield = uint32;
using coding_traits = uint32;
using compl = uint32;
using concept = uint32;
using const = uint32;
using const_cast = uint32;
using constexpr = uint32;
using continue = uint32;
using controller = uint32;
using crate = uint32;
using decltype = uint32;
using decoder = uint32;
using default = uint32;
using defer = uint32;
using delete = uint32;
using do = uint32;
using double = uint32;
using dynamic_cast = uint32;
using else = uint32;
using encoder = uint32;
using enum = uint32;
using err = uint32;
using explicit = uint32;
using export = uint32;
using extern = uint32;
using fallthrough = uint32;
using false = uint32;
using fidl = uint32;
using fidl_type = uint32;
using final = uint32;
using float = uint32;
using fn = uint32;
using for = uint32;
using friend = uint32;
using func = uint32;
using future = uint32;
using futures = uint32;
using go = uint32;
using goto = uint32;
using has_invalid_tag = uint32;
using if = uint32;
using impl = uint32;
using import = uint32;
using in = uint32;
using inline = uint32;
using int = uint32;
using int16 = uint32;
using int32 = uint32;
using int64 = uint32;
using int8 = uint32;
using interface = uint32;
using let = uint32;
using lhs = uint32;
using list = uint32;
using long = uint32;
using loop = uint32;
using macro = uint32;
using map = uint32;
using match = uint32;
using mod = uint32;
using module = uint32;
using move = uint32;
using mut = uint32;
using mutable = uint32;
using namespace = uint32;
using never = uint32;
using new = uint32;
using noexcept = uint32;
using none = uint32;
using not = uint32;
using not_eq = uint32;
using nullptr = uint32;
using offset = uint32;
using offsetof = uint32;
using ok = uint32;
using on_open = uint32;
using operator = uint32;
using option = uint32;
using or = uint32;
using or_eq = uint32;
using override = uint32;
using package = uint32;
using priv = uint32;
using private = uint32;
using proc = uint32;
using protected = uint32;
using proxy = uint32;
using pub = uint32;
using public = uint32;
using pure = uint32;
using range = uint32;
using ref = uint32;
using register = uint32;
using reinterpret_cast = uint32;
using requires = uint32;
using result = uint32;
using return = uint32;
using rhs = uint32;
using rune = uint32;
using select = uint32;
using self = uint32;
using send = uint32;
using set_controller = uint32;
using short = uint32;
using signed = uint32;
using sizeof = uint32;
using some = uint32;
using static = uint32;
using static_assert = uint32;
using static_cast = uint32;
using stream = uint32;
using string = uint32;
using struct = uint32;
using stub = uint32;
using super = uint32;
using switch = uint32;
using synchronized = uint32;
using tag = uint32;
using template = uint32;
using this = uint32;
using thread_local = uint32;
using throw = uint32;
using to_string = uint32;
using trait = uint32;
using true = uint32;
using try = uint32;
using type = uint32;
using typedef = uint32;
using typeid = uint32;
using typename = uint32;
using typeof = uint32;
using uint16 = uint32;
using uint32 = uint32;
using uint64 = uint32;
using uint8 = uint32;
using union = uint32;
using unsafe = uint32;
using unsigned = uint32;
using unsized = uint32;
using use = uint32;
using using = uint32;
using value = uint32;
using value_of = uint32;
using value_union = uint32;
using values = uint32;
using values_map = uint32;
using var = uint32;
using vec = uint32;
using virtual = uint32;
using void = uint32;
using volatile = uint32;
using wchar_t = uint32;
using where = uint32;
using which = uint32;
using while = uint32;
using xor = uint32;
using xor_eq = uint32;
using xunion = uint32;
using yield = uint32;
using zx = uint32;
