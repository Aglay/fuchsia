// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.method.response.arguments.lower;
using argtype = uint32;
protocol DangerousResponseArguments {
  Method0() -> (argtype abstract);
  Method1() -> (argtype alignas);
  Method2() -> (argtype alignof);
  Method3() -> (argtype and);
  Method4() -> (argtype and_eq);
  Method5() -> (argtype as);
  Method6() -> (argtype asm);
  Method7() -> (argtype async);
  Method8() -> (argtype atomic_cancel);
  Method9() -> (argtype atomic_commit);
  Method10() -> (argtype atomic_noexcept);
  Method11() -> (argtype auto);
  Method12() -> (argtype await);
  Method13() -> (argtype become);
  Method14() -> (argtype bitand);
  Method15() -> (argtype bitor);
  Method16() -> (argtype bool);
  Method17() -> (argtype box);
  Method18() -> (argtype break);
  Method19() -> (argtype byte);
  Method20() -> (argtype case);
  Method21() -> (argtype catch);
  Method22() -> (argtype chan);
  Method23() -> (argtype char);
  Method24() -> (argtype char16_t);
  Method25() -> (argtype char32_t);
  Method26() -> (argtype class);
  Method27() -> (argtype co_await);
  Method28() -> (argtype co_return);
  Method29() -> (argtype co_yield);
  Method30() -> (argtype coding_traits);
  Method31() -> (argtype compl);
  Method32() -> (argtype concept);
  Method33() -> (argtype const);
  Method34() -> (argtype const_cast);
  Method35() -> (argtype constexpr);
  Method36() -> (argtype continue);
  Method37() -> (argtype controller);
  Method38() -> (argtype crate);
  Method39() -> (argtype decltype);
  Method40() -> (argtype decoder);
  Method41() -> (argtype default);
  Method42() -> (argtype defer);
  Method43() -> (argtype delete);
  Method44() -> (argtype do);
  Method45() -> (argtype double);
  Method46() -> (argtype dynamic_cast);
  Method47() -> (argtype else);
  Method48() -> (argtype encoder);
  Method49() -> (argtype enum);
  Method50() -> (argtype err);
  Method51() -> (argtype explicit);
  Method52() -> (argtype export);
  Method53() -> (argtype extern);
  Method54() -> (argtype fallthrough);
  Method55() -> (argtype false);
  Method56() -> (argtype fidl);
  Method57() -> (argtype fidl_type);
  Method58() -> (argtype final);
  Method59() -> (argtype float);
  Method60() -> (argtype fn);
  Method61() -> (argtype for);
  Method62() -> (argtype friend);
  Method63() -> (argtype func);
  Method64() -> (argtype future);
  Method65() -> (argtype futures);
  Method66() -> (argtype go);
  Method67() -> (argtype goto);
  Method68() -> (argtype has_invalid_tag);
  Method69() -> (argtype if);
  Method70() -> (argtype impl);
  Method71() -> (argtype import);
  Method72() -> (argtype in);
  Method73() -> (argtype inline);
  Method74() -> (argtype int);
  Method75() -> (argtype int16);
  Method76() -> (argtype int32);
  Method77() -> (argtype int64);
  Method78() -> (argtype int8);
  Method79() -> (argtype interface);
  Method80() -> (argtype let);
  Method81() -> (argtype lhs);
  Method82() -> (argtype long);
  Method83() -> (argtype loop);
  Method84() -> (argtype macro);
  Method85() -> (argtype map);
  Method86() -> (argtype match);
  Method87() -> (argtype mod);
  Method88() -> (argtype module);
  Method89() -> (argtype move);
  Method90() -> (argtype mut);
  Method91() -> (argtype mutable);
  Method92() -> (argtype namespace);
  Method93() -> (argtype never);
  Method94() -> (argtype new);
  Method95() -> (argtype noexcept);
  Method96() -> (argtype none);
  Method97() -> (argtype not);
  Method98() -> (argtype not_eq);
  Method99() -> (argtype nullptr);
  Method100() -> (argtype offset);
  Method101() -> (argtype offsetof);
  Method102() -> (argtype ok);
  Method103() -> (argtype on_open);
  Method104() -> (argtype operator);
  Method105() -> (argtype option);
  Method106() -> (argtype or);
  Method107() -> (argtype or_eq);
  Method108() -> (argtype override);
  Method109() -> (argtype package);
  Method110() -> (argtype priv);
  Method111() -> (argtype private);
  Method112() -> (argtype proc);
  Method113() -> (argtype protected);
  Method114() -> (argtype proxy);
  Method115() -> (argtype pub);
  Method116() -> (argtype public);
  Method117() -> (argtype pure);
  Method118() -> (argtype range);
  Method119() -> (argtype ref);
  Method120() -> (argtype register);
  Method121() -> (argtype reinterpret_cast);
  Method122() -> (argtype requires);
  Method123() -> (argtype result);
  Method124() -> (argtype return);
  Method125() -> (argtype rhs);
  Method126() -> (argtype rune);
  Method127() -> (argtype select);
  Method128() -> (argtype self);
  Method129() -> (argtype send);
  Method130() -> (argtype set_controller);
  Method131() -> (argtype short);
  Method132() -> (argtype signed);
  Method133() -> (argtype sizeof);
  Method134() -> (argtype some);
  Method135() -> (argtype static);
  Method136() -> (argtype static_assert);
  Method137() -> (argtype static_cast);
  Method138() -> (argtype stream);
  Method139() -> (argtype string);
  Method140() -> (argtype struct);
  Method141() -> (argtype stub);
  Method142() -> (argtype super);
  Method143() -> (argtype switch);
  Method144() -> (argtype synchronized);
  Method145() -> (argtype tag);
  Method146() -> (argtype template);
  Method147() -> (argtype this);
  Method148() -> (argtype thread_local);
  Method149() -> (argtype throw);
  Method150() -> (argtype trait);
  Method151() -> (argtype true);
  Method152() -> (argtype try);
  Method153() -> (argtype type);
  Method154() -> (argtype typedef);
  Method155() -> (argtype typeid);
  Method156() -> (argtype typename);
  Method157() -> (argtype typeof);
  Method158() -> (argtype uint16);
  Method159() -> (argtype uint32);
  Method160() -> (argtype uint64);
  Method161() -> (argtype uint8);
  Method162() -> (argtype union);
  Method163() -> (argtype unsafe);
  Method164() -> (argtype unsigned);
  Method165() -> (argtype unsized);
  Method166() -> (argtype use);
  Method167() -> (argtype using);
  Method168() -> (argtype value);
  Method169() -> (argtype value_union);
  Method170() -> (argtype var);
  Method171() -> (argtype vec);
  Method172() -> (argtype virtual);
  Method173() -> (argtype void);
  Method174() -> (argtype volatile);
  Method175() -> (argtype wchar_t);
  Method176() -> (argtype where);
  Method177() -> (argtype which);
  Method178() -> (argtype while);
  Method179() -> (argtype xor);
  Method180() -> (argtype xor_eq);
  Method181() -> (argtype xunion);
  Method182() -> (argtype yield);
  Method183() -> (argtype zx);
};
