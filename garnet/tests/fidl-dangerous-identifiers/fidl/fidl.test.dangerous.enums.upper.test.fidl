// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.enums.upper;
enum ABSTRACT { MEMBER = 1; };
enum ALIGNAS { MEMBER = 1; };
enum ALIGNOF { MEMBER = 1; };
enum AND { MEMBER = 1; };
enum AND_EQ { MEMBER = 1; };
enum AS { MEMBER = 1; };
enum ASM { MEMBER = 1; };
enum ASYNC { MEMBER = 1; };
enum ATOMIC_CANCEL { MEMBER = 1; };
enum ATOMIC_COMMIT { MEMBER = 1; };
enum ATOMIC_NOEXCEPT { MEMBER = 1; };
enum AUTO { MEMBER = 1; };
enum AWAIT { MEMBER = 1; };
enum BECOME { MEMBER = 1; };
enum BITAND { MEMBER = 1; };
enum BITOR { MEMBER = 1; };
enum BOOL { MEMBER = 1; };
enum BOX { MEMBER = 1; };
enum BREAK { MEMBER = 1; };
enum BYTE { MEMBER = 1; };
enum CASE { MEMBER = 1; };
enum CATCH { MEMBER = 1; };
enum CHAN { MEMBER = 1; };
enum CHAR { MEMBER = 1; };
enum CHAR16_T { MEMBER = 1; };
enum CHAR32_T { MEMBER = 1; };
enum CLASS { MEMBER = 1; };
enum CO_AWAIT { MEMBER = 1; };
enum CO_RETURN { MEMBER = 1; };
enum CO_YIELD { MEMBER = 1; };
enum CODING_TRAITS { MEMBER = 1; };
enum COMPL { MEMBER = 1; };
enum CONCEPT { MEMBER = 1; };
enum CONST { MEMBER = 1; };
enum CONST_CAST { MEMBER = 1; };
enum CONSTEXPR { MEMBER = 1; };
enum CONTINUE { MEMBER = 1; };
enum CONTROLLER { MEMBER = 1; };
enum CRATE { MEMBER = 1; };
enum DECLTYPE { MEMBER = 1; };
enum DECODER { MEMBER = 1; };
enum DEFAULT { MEMBER = 1; };
enum DEFER { MEMBER = 1; };
enum DELETE { MEMBER = 1; };
enum DO { MEMBER = 1; };
enum DOUBLE { MEMBER = 1; };
enum DYNAMIC_CAST { MEMBER = 1; };
enum ELSE { MEMBER = 1; };
enum ENCODER { MEMBER = 1; };
enum ENUM { MEMBER = 1; };
enum ERR { MEMBER = 1; };
enum EXPLICIT { MEMBER = 1; };
enum EXPORT { MEMBER = 1; };
enum EXTERN { MEMBER = 1; };
enum FALLTHROUGH { MEMBER = 1; };
enum FALSE { MEMBER = 1; };
enum FIDL { MEMBER = 1; };
enum FIDL_TYPE { MEMBER = 1; };
enum FINAL { MEMBER = 1; };
enum FLOAT { MEMBER = 1; };
enum FN { MEMBER = 1; };
enum FOR { MEMBER = 1; };
enum FRIEND { MEMBER = 1; };
enum FUNC { MEMBER = 1; };
enum FUTURE { MEMBER = 1; };
enum FUTURES { MEMBER = 1; };
enum GO { MEMBER = 1; };
enum GOTO { MEMBER = 1; };
enum HAS_INVALID_TAG { MEMBER = 1; };
enum IF { MEMBER = 1; };
enum IMPL { MEMBER = 1; };
enum IMPORT { MEMBER = 1; };
enum IN { MEMBER = 1; };
enum INLINE { MEMBER = 1; };
enum INT { MEMBER = 1; };
enum INT16 { MEMBER = 1; };
enum INT32 { MEMBER = 1; };
enum INT64 { MEMBER = 1; };
enum INT8 { MEMBER = 1; };
enum INTERFACE { MEMBER = 1; };
enum LET { MEMBER = 1; };
enum LHS { MEMBER = 1; };
enum LIST { MEMBER = 1; };
enum LONG { MEMBER = 1; };
enum LOOP { MEMBER = 1; };
enum MACRO { MEMBER = 1; };
enum MAP { MEMBER = 1; };
enum MATCH { MEMBER = 1; };
enum MOD { MEMBER = 1; };
enum MODULE { MEMBER = 1; };
enum MOVE { MEMBER = 1; };
enum MUT { MEMBER = 1; };
enum MUTABLE { MEMBER = 1; };
enum NAMESPACE { MEMBER = 1; };
enum NEVER { MEMBER = 1; };
enum NEW { MEMBER = 1; };
enum NOEXCEPT { MEMBER = 1; };
enum NONE { MEMBER = 1; };
enum NOT { MEMBER = 1; };
enum NOT_EQ { MEMBER = 1; };
enum NULLPTR { MEMBER = 1; };
enum OFFSET { MEMBER = 1; };
enum OFFSETOF { MEMBER = 1; };
enum OK { MEMBER = 1; };
enum ON_OPEN { MEMBER = 1; };
enum OPERATOR { MEMBER = 1; };
enum OPTION { MEMBER = 1; };
enum OR { MEMBER = 1; };
enum OR_EQ { MEMBER = 1; };
enum OVERRIDE { MEMBER = 1; };
enum PACKAGE { MEMBER = 1; };
enum PRIV { MEMBER = 1; };
enum PRIVATE { MEMBER = 1; };
enum PROC { MEMBER = 1; };
enum PROTECTED { MEMBER = 1; };
enum PROXY { MEMBER = 1; };
enum PUB { MEMBER = 1; };
enum PUBLIC { MEMBER = 1; };
enum PURE { MEMBER = 1; };
enum RANGE { MEMBER = 1; };
enum REF { MEMBER = 1; };
enum REGISTER { MEMBER = 1; };
enum REINTERPRET_CAST { MEMBER = 1; };
enum REQUIRES { MEMBER = 1; };
enum RESULT { MEMBER = 1; };
enum RETURN { MEMBER = 1; };
enum RHS { MEMBER = 1; };
enum RUNE { MEMBER = 1; };
enum SELECT { MEMBER = 1; };
enum SELF { MEMBER = 1; };
enum SEND { MEMBER = 1; };
enum SET_CONTROLLER { MEMBER = 1; };
enum SHORT { MEMBER = 1; };
enum SIGNED { MEMBER = 1; };
enum SIZEOF { MEMBER = 1; };
enum SOME { MEMBER = 1; };
enum STATIC { MEMBER = 1; };
enum STATIC_ASSERT { MEMBER = 1; };
enum STATIC_CAST { MEMBER = 1; };
enum STREAM { MEMBER = 1; };
enum STRING { MEMBER = 1; };
enum STRUCT { MEMBER = 1; };
enum STUB { MEMBER = 1; };
enum SUPER { MEMBER = 1; };
enum SWITCH { MEMBER = 1; };
enum SYNCHRONIZED { MEMBER = 1; };
enum TAG { MEMBER = 1; };
enum TEMPLATE { MEMBER = 1; };
enum THIS { MEMBER = 1; };
enum THREAD_LOCAL { MEMBER = 1; };
enum THROW { MEMBER = 1; };
enum TO_STRING { MEMBER = 1; };
enum TRAIT { MEMBER = 1; };
enum TRUE { MEMBER = 1; };
enum TRY { MEMBER = 1; };
enum TYPE { MEMBER = 1; };
enum TYPEDEF { MEMBER = 1; };
enum TYPEID { MEMBER = 1; };
enum TYPENAME { MEMBER = 1; };
enum TYPEOF { MEMBER = 1; };
enum UINT16 { MEMBER = 1; };
enum UINT32 { MEMBER = 1; };
enum UINT64 { MEMBER = 1; };
enum UINT8 { MEMBER = 1; };
enum UNION { MEMBER = 1; };
enum UNSAFE { MEMBER = 1; };
enum UNSIGNED { MEMBER = 1; };
enum UNSIZED { MEMBER = 1; };
enum USE { MEMBER = 1; };
enum USING { MEMBER = 1; };
enum VALUE { MEMBER = 1; };
enum VALUE_OF { MEMBER = 1; };
enum VALUE_UNION { MEMBER = 1; };
enum VALUES { MEMBER = 1; };
enum VALUES_MAP { MEMBER = 1; };
enum VAR { MEMBER = 1; };
enum VEC { MEMBER = 1; };
enum VIRTUAL { MEMBER = 1; };
enum VOID { MEMBER = 1; };
enum VOLATILE { MEMBER = 1; };
enum WCHAR_T { MEMBER = 1; };
enum WHERE { MEMBER = 1; };
enum WHICH { MEMBER = 1; };
enum WHILE { MEMBER = 1; };
enum XOR { MEMBER = 1; };
enum XOR_EQ { MEMBER = 1; };
enum XUNION { MEMBER = 1; };
enum YIELD { MEMBER = 1; };
enum ZX { MEMBER = 1; };
enum DangerousMembers {
  ABSTRACT = 0;
  ALIGNAS = 1;
  ALIGNOF = 2;
  AND = 3;
  AND_EQ = 4;
  AS = 5;
  ASM = 6;
  ASYNC = 7;
  ATOMIC_CANCEL = 8;
  ATOMIC_COMMIT = 9;
  ATOMIC_NOEXCEPT = 10;
  AUTO = 11;
  AWAIT = 12;
  BECOME = 13;
  BITAND = 14;
  BITOR = 15;
  BOOL = 16;
  BOX = 17;
  BREAK = 18;
  BYTE = 19;
  CASE = 20;
  CATCH = 21;
  CHAN = 22;
  CHAR = 23;
  CHAR16_T = 24;
  CHAR32_T = 25;
  CLASS = 26;
  CO_AWAIT = 27;
  CO_RETURN = 28;
  CO_YIELD = 29;
  CODING_TRAITS = 30;
  COMPL = 31;
  CONCEPT = 32;
  CONST = 33;
  CONST_CAST = 34;
  CONSTEXPR = 35;
  CONTINUE = 36;
  CONTROLLER = 37;
  CRATE = 38;
  DECLTYPE = 39;
  DECODER = 40;
  DEFAULT = 41;
  DEFER = 42;
  DELETE = 43;
  DO = 44;
  DOUBLE = 45;
  DYNAMIC_CAST = 46;
  ELSE = 47;
  ENCODER = 48;
  ENUM = 49;
  ERR = 50;
  EXPLICIT = 51;
  EXPORT = 52;
  EXTERN = 53;
  FALLTHROUGH = 54;
  FALSE = 55;
  FIDL = 56;
  FIDL_TYPE = 57;
  FINAL = 58;
  FLOAT = 59;
  FN = 60;
  FOR = 61;
  FRIEND = 62;
  FUNC = 63;
  FUTURE = 64;
  FUTURES = 65;
  GO = 66;
  GOTO = 67;
  HAS_INVALID_TAG = 68;
  IF = 69;
  IMPL = 70;
  IMPORT = 71;
  IN = 72;
  INLINE = 73;
  INT = 74;
  INT16 = 75;
  INT32 = 76;
  INT64 = 77;
  INT8 = 78;
  INTERFACE = 79;
  LET = 80;
  LHS = 81;
  LIST = 82;
  LONG = 83;
  LOOP = 84;
  MACRO = 85;
  MAP = 86;
  MATCH = 87;
  MOD = 88;
  MODULE = 89;
  MOVE = 90;
  MUT = 91;
  MUTABLE = 92;
  NAMESPACE = 93;
  NEVER = 94;
  NEW = 95;
  NOEXCEPT = 96;
  NONE = 97;
  NOT = 98;
  NOT_EQ = 99;
  NULLPTR = 100;
  OFFSET = 101;
  OFFSETOF = 102;
  OK = 103;
  ON_OPEN = 104;
  OPERATOR = 105;
  OPTION = 106;
  OR = 107;
  OR_EQ = 108;
  OVERRIDE = 109;
  PACKAGE = 110;
  PRIV = 111;
  PRIVATE = 112;
  PROC = 113;
  PROTECTED = 114;
  PROXY = 115;
  PUB = 116;
  PUBLIC = 117;
  PURE = 118;
  RANGE = 119;
  REF = 120;
  REGISTER = 121;
  REINTERPRET_CAST = 122;
  REQUIRES = 123;
  RESULT = 124;
  RETURN = 125;
  RHS = 126;
  RUNE = 127;
  SELECT = 128;
  SELF = 129;
  SEND = 130;
  SET_CONTROLLER = 131;
  SHORT = 132;
  SIGNED = 133;
  SIZEOF = 134;
  SOME = 135;
  STATIC = 136;
  STATIC_ASSERT = 137;
  STATIC_CAST = 138;
  STREAM = 139;
  STRING = 140;
  STRUCT = 141;
  STUB = 142;
  SUPER = 143;
  SWITCH = 144;
  SYNCHRONIZED = 145;
  TAG = 146;
  TEMPLATE = 147;
  THIS = 148;
  THREAD_LOCAL = 149;
  THROW = 150;
  TO_STRING = 151;
  TRAIT = 152;
  TRUE = 153;
  TRY = 154;
  TYPE = 155;
  TYPEDEF = 156;
  TYPEID = 157;
  TYPENAME = 158;
  TYPEOF = 159;
  UINT16 = 160;
  UINT32 = 161;
  UINT64 = 162;
  UINT8 = 163;
  UNION = 164;
  UNSAFE = 165;
  UNSIGNED = 166;
  UNSIZED = 167;
  USE = 168;
  USING = 169;
  VALUE = 170;
  VALUE_OF = 171;
  VALUE_UNION = 172;
  VALUES = 173;
  VALUES_MAP = 174;
  VAR = 175;
  VEC = 176;
  VIRTUAL = 177;
  VOID = 178;
  VOLATILE = 179;
  WCHAR_T = 180;
  WHERE = 181;
  WHICH = 182;
  WHILE = 183;
  XOR = 184;
  XOR_EQ = 185;
  XUNION = 186;
  YIELD = 187;
  ZX = 188;
};
