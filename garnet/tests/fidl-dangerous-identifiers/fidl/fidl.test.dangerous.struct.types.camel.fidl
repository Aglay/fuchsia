// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.struct.types.camel;
using membertype = uint32;
struct Abstract { membertype member = 1; };
struct Alignas { membertype member = 1; };
struct Alignof { membertype member = 1; };
struct And { membertype member = 1; };
struct AndEq { membertype member = 1; };
struct As { membertype member = 1; };
struct Asm { membertype member = 1; };
struct Async { membertype member = 1; };
struct AtomicCancel { membertype member = 1; };
struct AtomicCommit { membertype member = 1; };
struct AtomicNoexcept { membertype member = 1; };
struct Auto { membertype member = 1; };
struct Await { membertype member = 1; };
struct Become { membertype member = 1; };
struct Bitand { membertype member = 1; };
struct Bitor { membertype member = 1; };
struct Bool { membertype member = 1; };
struct Box { membertype member = 1; };
struct Break { membertype member = 1; };
struct Byte { membertype member = 1; };
struct Case { membertype member = 1; };
struct Catch { membertype member = 1; };
struct Chan { membertype member = 1; };
struct Char { membertype member = 1; };
struct Char16T { membertype member = 1; };
struct Char32T { membertype member = 1; };
struct Class { membertype member = 1; };
struct CoAwait { membertype member = 1; };
struct CoReturn { membertype member = 1; };
struct CoYield { membertype member = 1; };
struct CodingTraits { membertype member = 1; };
struct Compl { membertype member = 1; };
struct Concept { membertype member = 1; };
struct Const { membertype member = 1; };
struct ConstCast { membertype member = 1; };
struct Constexpr { membertype member = 1; };
struct Continue { membertype member = 1; };
struct Controller { membertype member = 1; };
struct Crate { membertype member = 1; };
struct Decltype { membertype member = 1; };
struct Decoder { membertype member = 1; };
struct Default { membertype member = 1; };
struct Defer { membertype member = 1; };
struct Delete { membertype member = 1; };
struct Do { membertype member = 1; };
struct Double { membertype member = 1; };
struct DynamicCast { membertype member = 1; };
struct Else { membertype member = 1; };
struct Encoder { membertype member = 1; };
struct Enum { membertype member = 1; };
struct Err { membertype member = 1; };
struct Explicit { membertype member = 1; };
struct Export { membertype member = 1; };
struct Extern { membertype member = 1; };
struct Fallthrough { membertype member = 1; };
struct False { membertype member = 1; };
struct Fidl { membertype member = 1; };
struct FidlType { membertype member = 1; };
struct Final { membertype member = 1; };
struct Float { membertype member = 1; };
struct Fn { membertype member = 1; };
struct For { membertype member = 1; };
struct Friend { membertype member = 1; };
struct Func { membertype member = 1; };
struct Future { membertype member = 1; };
struct Futures { membertype member = 1; };
struct Go { membertype member = 1; };
struct Goto { membertype member = 1; };
struct HasInvalidTag { membertype member = 1; };
struct If { membertype member = 1; };
struct Impl { membertype member = 1; };
struct Import { membertype member = 1; };
struct In { membertype member = 1; };
struct Inline { membertype member = 1; };
struct Int { membertype member = 1; };
struct Int16 { membertype member = 1; };
struct Int32 { membertype member = 1; };
struct Int64 { membertype member = 1; };
struct Int8 { membertype member = 1; };
struct Interface { membertype member = 1; };
struct Let { membertype member = 1; };
struct Lhs { membertype member = 1; };
struct Long { membertype member = 1; };
struct Loop { membertype member = 1; };
struct Macro { membertype member = 1; };
struct Map { membertype member = 1; };
struct Match { membertype member = 1; };
struct Mod { membertype member = 1; };
struct Module { membertype member = 1; };
struct Move { membertype member = 1; };
struct Mut { membertype member = 1; };
struct Mutable { membertype member = 1; };
struct Namespace { membertype member = 1; };
struct Never { membertype member = 1; };
struct New { membertype member = 1; };
struct Noexcept { membertype member = 1; };
struct None { membertype member = 1; };
struct Not { membertype member = 1; };
struct NotEq { membertype member = 1; };
struct Nullptr { membertype member = 1; };
struct Offset { membertype member = 1; };
struct Offsetof { membertype member = 1; };
struct Ok { membertype member = 1; };
struct OnOpen { membertype member = 1; };
struct Operator { membertype member = 1; };
struct Option { membertype member = 1; };
struct Or { membertype member = 1; };
struct OrEq { membertype member = 1; };
struct Override { membertype member = 1; };
struct Package { membertype member = 1; };
struct Priv { membertype member = 1; };
struct Private { membertype member = 1; };
struct Proc { membertype member = 1; };
struct Protected { membertype member = 1; };
struct Proxy { membertype member = 1; };
struct Pub { membertype member = 1; };
struct Public { membertype member = 1; };
struct Pure { membertype member = 1; };
struct Range { membertype member = 1; };
struct Ref { membertype member = 1; };
struct Register { membertype member = 1; };
struct ReinterpretCast { membertype member = 1; };
struct Requires { membertype member = 1; };
struct Result { membertype member = 1; };
struct Return { membertype member = 1; };
struct Rhs { membertype member = 1; };
struct Rune { membertype member = 1; };
struct Select { membertype member = 1; };
struct Self { membertype member = 1; };
struct Send { membertype member = 1; };
struct SetController { membertype member = 1; };
struct Short { membertype member = 1; };
struct Signed { membertype member = 1; };
struct Sizeof { membertype member = 1; };
struct Some { membertype member = 1; };
struct Static { membertype member = 1; };
struct StaticAssert { membertype member = 1; };
struct StaticCast { membertype member = 1; };
struct Stream { membertype member = 1; };
struct String { membertype member = 1; };
struct Struct { membertype member = 1; };
struct Stub { membertype member = 1; };
struct Super { membertype member = 1; };
struct Switch { membertype member = 1; };
struct Synchronized { membertype member = 1; };
struct Tag { membertype member = 1; };
struct Template { membertype member = 1; };
struct This { membertype member = 1; };
struct ThreadLocal { membertype member = 1; };
struct Throw { membertype member = 1; };
struct Trait { membertype member = 1; };
struct True { membertype member = 1; };
struct Try { membertype member = 1; };
struct Type { membertype member = 1; };
struct Typedef { membertype member = 1; };
struct Typeid { membertype member = 1; };
struct Typename { membertype member = 1; };
struct Typeof { membertype member = 1; };
struct Uint16 { membertype member = 1; };
struct Uint32 { membertype member = 1; };
struct Uint64 { membertype member = 1; };
struct Uint8 { membertype member = 1; };
struct Union { membertype member = 1; };
struct Unsafe { membertype member = 1; };
struct Unsigned { membertype member = 1; };
struct Unsized { membertype member = 1; };
struct Use { membertype member = 1; };
struct Using { membertype member = 1; };
struct Value { membertype member = 1; };
struct ValueUnion { membertype member = 1; };
struct Var { membertype member = 1; };
struct Vec { membertype member = 1; };
struct Virtual { membertype member = 1; };
struct Void { membertype member = 1; };
struct Volatile { membertype member = 1; };
struct WcharT { membertype member = 1; };
struct Where { membertype member = 1; };
struct Which { membertype member = 1; };
struct While { membertype member = 1; };
struct Xor { membertype member = 1; };
struct XorEq { membertype member = 1; };
struct Xunion { membertype member = 1; };
struct Yield { membertype member = 1; };
struct Zx { membertype member = 1; };
struct DangerousMembers {
  Abstract f0;
  Alignas f1;
  Alignof f2;
  And f3;
  AndEq f4;
  As f5;
  Asm f6;
  Async f7;
  AtomicCancel f8;
  AtomicCommit f9;
  AtomicNoexcept f10;
  Auto f11;
  Await f12;
  Become f13;
  Bitand f14;
  Bitor f15;
  Bool f16;
  Box f17;
  Break f18;
  Byte f19;
  Case f20;
  Catch f21;
  Chan f22;
  Char f23;
  Char16T f24;
  Char32T f25;
  Class f26;
  CoAwait f27;
  CoReturn f28;
  CoYield f29;
  CodingTraits f30;
  Compl f31;
  Concept f32;
  Const f33;
  ConstCast f34;
  Constexpr f35;
  Continue f36;
  Controller f37;
  Crate f38;
  Decltype f39;
  Decoder f40;
  Default f41;
  Defer f42;
  Delete f43;
  Do f44;
  Double f45;
  DynamicCast f46;
  Else f47;
  Encoder f48;
  Enum f49;
  Err f50;
  Explicit f51;
  Export f52;
  Extern f53;
  Fallthrough f54;
  False f55;
  Fidl f56;
  FidlType f57;
  Final f58;
  Float f59;
  Fn f60;
  For f61;
  Friend f62;
  Func f63;
  Future f64;
  Futures f65;
  Go f66;
  Goto f67;
  HasInvalidTag f68;
  If f69;
  Impl f70;
  Import f71;
  In f72;
  Inline f73;
  Int f74;
  Int16 f75;
  Int32 f76;
  Int64 f77;
  Int8 f78;
  Interface f79;
  Let f80;
  Lhs f81;
  Long f82;
  Loop f83;
  Macro f84;
  Map f85;
  Match f86;
  Mod f87;
  Module f88;
  Move f89;
  Mut f90;
  Mutable f91;
  Namespace f92;
  Never f93;
  New f94;
  Noexcept f95;
  None f96;
  Not f97;
  NotEq f98;
  Nullptr f99;
  Offset f100;
  Offsetof f101;
  Ok f102;
  OnOpen f103;
  Operator f104;
  Option f105;
  Or f106;
  OrEq f107;
  Override f108;
  Package f109;
  Priv f110;
  Private f111;
  Proc f112;
  Protected f113;
  Proxy f114;
  Pub f115;
  Public f116;
  Pure f117;
  Range f118;
  Ref f119;
  Register f120;
  ReinterpretCast f121;
  Requires f122;
  Result f123;
  Return f124;
  Rhs f125;
  Rune f126;
  Select f127;
  Self f128;
  Send f129;
  SetController f130;
  Short f131;
  Signed f132;
  Sizeof f133;
  Some f134;
  Static f135;
  StaticAssert f136;
  StaticCast f137;
  Stream f138;
  String f139;
  Struct f140;
  Stub f141;
  Super f142;
  Switch f143;
  Synchronized f144;
  Tag f145;
  Template f146;
  This f147;
  ThreadLocal f148;
  Throw f149;
  Trait f150;
  True f151;
  Try f152;
  Type f153;
  Typedef f154;
  Typeid f155;
  Typename f156;
  Typeof f157;
  Uint16 f158;
  Uint32 f159;
  Uint64 f160;
  Uint8 f161;
  Union f162;
  Unsafe f163;
  Unsigned f164;
  Unsized f165;
  Use f166;
  Using f167;
  Value f168;
  ValueUnion f169;
  Var f170;
  Vec f171;
  Virtual f172;
  Void f173;
  Volatile f174;
  WcharT f175;
  Where f176;
  Which f177;
  While f178;
  Xor f179;
  XorEq f180;
  Xunion f181;
  Yield f182;
  Zx f183;
};
