// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.table.fields.upper;
table DangerousMembers {
  1: uint32 ABSTRACT;
  2: uint32 ALIGNAS;
  3: uint32 ALIGNOF;
  4: uint32 AND;
  5: uint32 AND_EQ;
  6: uint32 AS;
  7: uint32 ASM;
  8: uint32 ASYNC;
  9: uint32 ATOMIC_CANCEL;
  10: uint32 ATOMIC_COMMIT;
  11: uint32 ATOMIC_NOEXCEPT;
  12: uint32 AUTO;
  13: uint32 AWAIT;
  14: uint32 BECOME;
  15: uint32 BITAND;
  16: uint32 BITOR;
  17: uint32 BOOL;
  18: uint32 BOX;
  19: uint32 BREAK;
  20: uint32 BYTE;
  21: uint32 CASE;
  22: uint32 CATCH;
  23: uint32 CHAN;
  24: uint32 CHAR;
  25: uint32 CHAR16_T;
  26: uint32 CHAR32_T;
  27: uint32 CLASS;
  28: uint32 CO_AWAIT;
  29: uint32 CO_RETURN;
  30: uint32 CO_YIELD;
  31: uint32 CODING_TRAITS;
  32: uint32 COMPL;
  33: uint32 CONCEPT;
  34: uint32 CONST;
  35: uint32 CONST_CAST;
  36: uint32 CONSTEXPR;
  37: uint32 CONTINUE;
  38: uint32 CONTROLLER;
  39: uint32 CRATE;
  40: uint32 DECLTYPE;
  41: uint32 DECODER;
  42: uint32 DEFAULT;
  43: uint32 DEFER;
  44: uint32 DELETE;
  45: uint32 DO;
  46: uint32 DOUBLE;
  47: uint32 DYNAMIC_CAST;
  48: uint32 ELSE;
  49: uint32 ENCODER;
  50: uint32 ENUM;
  51: uint32 ERR;
  52: uint32 EXPLICIT;
  53: uint32 EXPORT;
  54: uint32 EXTERN;
  55: uint32 FALLTHROUGH;
  56: uint32 FALSE;
  57: uint32 FIDL;
  58: uint32 FIDL_TYPE;
  59: uint32 FINAL;
  60: uint32 FLOAT;
  61: uint32 FN;
  62: uint32 FOR;
  63: uint32 FRIEND;
  64: uint32 FUNC;
  65: uint32 FUTURE;
  66: uint32 FUTURES;
  67: uint32 GO;
  68: uint32 GOTO;
  69: uint32 HAS_INVALID_TAG;
  70: uint32 IF;
  71: uint32 IMPL;
  72: uint32 IMPORT;
  73: uint32 IN;
  74: uint32 INLINE;
  75: uint32 INT;
  76: uint32 INT16;
  77: uint32 INT32;
  78: uint32 INT64;
  79: uint32 INT8;
  80: uint32 INTERFACE;
  81: uint32 LET;
  82: uint32 LHS;
  83: uint32 LONG;
  84: uint32 LOOP;
  85: uint32 MACRO;
  86: uint32 MAP;
  87: uint32 MATCH;
  88: uint32 MOD;
  89: uint32 MODULE;
  90: uint32 MOVE;
  91: uint32 MUT;
  92: uint32 MUTABLE;
  93: uint32 NAMESPACE;
  94: uint32 NEVER;
  95: uint32 NEW;
  96: uint32 NOEXCEPT;
  97: uint32 NONE;
  98: uint32 NOT;
  99: uint32 NOT_EQ;
  100: uint32 NULLPTR;
  101: uint32 OFFSET;
  102: uint32 OFFSETOF;
  103: uint32 OK;
  104: uint32 ON_OPEN;
  105: uint32 OPERATOR;
  106: uint32 OPTION;
  107: uint32 OR;
  108: uint32 OR_EQ;
  109: uint32 OVERRIDE;
  110: uint32 PACKAGE;
  111: uint32 PRIV;
  112: uint32 PRIVATE;
  113: uint32 PROC;
  114: uint32 PROTECTED;
  115: uint32 PROXY;
  116: uint32 PUB;
  117: uint32 PUBLIC;
  118: uint32 PURE;
  119: uint32 RANGE;
  120: uint32 REF;
  121: uint32 REGISTER;
  122: uint32 REINTERPRET_CAST;
  123: uint32 REQUIRES;
  124: uint32 RESULT;
  125: uint32 RETURN;
  126: uint32 RHS;
  127: uint32 RUNE;
  128: uint32 SELECT;
  129: uint32 SELF;
  130: uint32 SEND;
  131: uint32 SET_CONTROLLER;
  132: uint32 SHORT;
  133: uint32 SIGNED;
  134: uint32 SIZEOF;
  135: uint32 SOME;
  136: uint32 STATIC;
  137: uint32 STATIC_ASSERT;
  138: uint32 STATIC_CAST;
  139: uint32 STREAM;
  140: uint32 STRING;
  141: uint32 STRUCT;
  142: uint32 STUB;
  143: uint32 SUPER;
  144: uint32 SWITCH;
  145: uint32 SYNCHRONIZED;
  146: uint32 TAG;
  147: uint32 TEMPLATE;
  148: uint32 THIS;
  149: uint32 THREAD_LOCAL;
  150: uint32 THROW;
  151: uint32 TRAIT;
  152: uint32 TRUE;
  153: uint32 TRY;
  154: uint32 TYPE;
  155: uint32 TYPEDEF;
  156: uint32 TYPEID;
  157: uint32 TYPENAME;
  158: uint32 TYPEOF;
  159: uint32 UINT16;
  160: uint32 UINT32;
  161: uint32 UINT64;
  162: uint32 UINT8;
  163: uint32 UNION;
  164: uint32 UNSAFE;
  165: uint32 UNSIGNED;
  166: uint32 UNSIZED;
  167: uint32 USE;
  168: uint32 USING;
  169: uint32 VALUE;
  170: uint32 VALUE_UNION;
  171: uint32 VAR;
  172: uint32 VEC;
  173: uint32 VIRTUAL;
  174: uint32 VOID;
  175: uint32 VOLATILE;
  176: uint32 WCHAR_T;
  177: uint32 WHERE;
  178: uint32 WHICH;
  179: uint32 WHILE;
  180: uint32 XOR;
  181: uint32 XOR_EQ;
  182: uint32 XUNION;
  183: uint32 YIELD;
  184: uint32 ZX;
};
