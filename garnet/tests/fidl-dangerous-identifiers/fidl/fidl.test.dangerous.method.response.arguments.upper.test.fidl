// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.method.response.arguments.upper;
using argtype = uint32;
protocol DangerousResponseArguments {
  Method0() -> (argtype ABSTRACT);
  Method1() -> (argtype ALIGNAS);
  Method2() -> (argtype ALIGNOF);
  Method3() -> (argtype AND);
  Method4() -> (argtype AND_EQ);
  Method5() -> (argtype AS);
  Method6() -> (argtype ASM);
  Method7() -> (argtype ASYNC);
  Method8() -> (argtype ATOMIC_CANCEL);
  Method9() -> (argtype ATOMIC_COMMIT);
  Method10() -> (argtype ATOMIC_NOEXCEPT);
  Method11() -> (argtype AUTO);
  Method12() -> (argtype AWAIT);
  Method13() -> (argtype BECOME);
  Method14() -> (argtype BITAND);
  Method15() -> (argtype BITOR);
  Method16() -> (argtype BOOL);
  Method17() -> (argtype BOX);
  Method18() -> (argtype BREAK);
  Method19() -> (argtype BYTE);
  Method20() -> (argtype CASE);
  Method21() -> (argtype CATCH);
  Method22() -> (argtype CHAN);
  Method23() -> (argtype CHAR);
  Method24() -> (argtype CHAR16_T);
  Method25() -> (argtype CHAR32_T);
  Method26() -> (argtype CLASS);
  Method27() -> (argtype CO_AWAIT);
  Method28() -> (argtype CO_RETURN);
  Method29() -> (argtype CO_YIELD);
  Method30() -> (argtype CODING_TRAITS);
  Method31() -> (argtype COMPL);
  Method32() -> (argtype CONCEPT);
  Method33() -> (argtype CONST);
  Method34() -> (argtype CONST_CAST);
  Method35() -> (argtype CONSTEXPR);
  Method36() -> (argtype CONTINUE);
  Method37() -> (argtype CONTROLLER);
  Method38() -> (argtype CRATE);
  Method39() -> (argtype DECLTYPE);
  Method40() -> (argtype DECODER);
  Method41() -> (argtype DEFAULT);
  Method42() -> (argtype DEFER);
  Method43() -> (argtype DELETE);
  Method44() -> (argtype DO);
  Method45() -> (argtype DOUBLE);
  Method46() -> (argtype DYNAMIC_CAST);
  Method47() -> (argtype ELSE);
  Method48() -> (argtype ENCODER);
  Method49() -> (argtype ENUM);
  Method50() -> (argtype ERR);
  Method51() -> (argtype EXPLICIT);
  Method52() -> (argtype EXPORT);
  Method53() -> (argtype EXTERN);
  Method54() -> (argtype FALLTHROUGH);
  Method55() -> (argtype FALSE);
  Method56() -> (argtype FIDL);
  Method57() -> (argtype FIDL_TYPE);
  Method58() -> (argtype FINAL);
  Method59() -> (argtype FLOAT);
  Method60() -> (argtype FN);
  Method61() -> (argtype FOR);
  Method62() -> (argtype FRIEND);
  Method63() -> (argtype FUNC);
  Method64() -> (argtype FUTURE);
  Method65() -> (argtype FUTURES);
  Method66() -> (argtype GO);
  Method67() -> (argtype GOTO);
  Method68() -> (argtype HAS_INVALID_TAG);
  Method69() -> (argtype IF);
  Method70() -> (argtype IMPL);
  Method71() -> (argtype IMPORT);
  Method72() -> (argtype IN);
  Method73() -> (argtype INLINE);
  Method74() -> (argtype INT);
  Method75() -> (argtype INT16);
  Method76() -> (argtype INT32);
  Method77() -> (argtype INT64);
  Method78() -> (argtype INT8);
  Method79() -> (argtype INTERFACE);
  Method80() -> (argtype LET);
  Method81() -> (argtype LHS);
  Method82() -> (argtype LIST);
  Method83() -> (argtype LONG);
  Method84() -> (argtype LOOP);
  Method85() -> (argtype MACRO);
  Method86() -> (argtype MAP);
  Method87() -> (argtype MATCH);
  Method88() -> (argtype MOD);
  Method89() -> (argtype MODULE);
  Method90() -> (argtype MOVE);
  Method91() -> (argtype MUT);
  Method92() -> (argtype MUTABLE);
  Method93() -> (argtype NAMESPACE);
  Method94() -> (argtype NEVER);
  Method95() -> (argtype NEW);
  Method96() -> (argtype NOEXCEPT);
  Method97() -> (argtype NONE);
  Method98() -> (argtype NOT);
  Method99() -> (argtype NOT_EQ);
  Method100() -> (argtype NULLPTR);
  Method101() -> (argtype OFFSET);
  Method102() -> (argtype OFFSETOF);
  Method103() -> (argtype OK);
  Method104() -> (argtype ON_OPEN);
  Method105() -> (argtype OPERATOR);
  Method106() -> (argtype OPTION);
  Method107() -> (argtype OR);
  Method108() -> (argtype OR_EQ);
  Method109() -> (argtype OVERRIDE);
  Method110() -> (argtype PACKAGE);
  Method111() -> (argtype PRIV);
  Method112() -> (argtype PRIVATE);
  Method113() -> (argtype PROC);
  Method114() -> (argtype PROTECTED);
  Method115() -> (argtype PROXY);
  Method116() -> (argtype PUB);
  Method117() -> (argtype PUBLIC);
  Method118() -> (argtype PURE);
  Method119() -> (argtype RANGE);
  Method120() -> (argtype REF);
  Method121() -> (argtype REGISTER);
  Method122() -> (argtype REINTERPRET_CAST);
  Method123() -> (argtype REQUIRES);
  Method124() -> (argtype RESULT);
  Method125() -> (argtype RETURN);
  Method126() -> (argtype RHS);
  Method127() -> (argtype RUNE);
  Method128() -> (argtype SELECT);
  Method129() -> (argtype SELF);
  Method130() -> (argtype SEND);
  Method131() -> (argtype SET_CONTROLLER);
  Method132() -> (argtype SHORT);
  Method133() -> (argtype SIGNED);
  Method134() -> (argtype SIZEOF);
  Method135() -> (argtype SOME);
  Method136() -> (argtype STATIC);
  Method137() -> (argtype STATIC_ASSERT);
  Method138() -> (argtype STATIC_CAST);
  Method139() -> (argtype STREAM);
  Method140() -> (argtype STRING);
  Method141() -> (argtype STRUCT);
  Method142() -> (argtype STUB);
  Method143() -> (argtype SUPER);
  Method144() -> (argtype SWITCH);
  Method145() -> (argtype SYNCHRONIZED);
  Method146() -> (argtype TAG);
  Method147() -> (argtype TEMPLATE);
  Method148() -> (argtype THIS);
  Method149() -> (argtype THREAD_LOCAL);
  Method150() -> (argtype THROW);
  Method151() -> (argtype TO_STRING);
  Method152() -> (argtype TRAIT);
  Method153() -> (argtype TRUE);
  Method154() -> (argtype TRY);
  Method155() -> (argtype TYPE);
  Method156() -> (argtype TYPEDEF);
  Method157() -> (argtype TYPEID);
  Method158() -> (argtype TYPENAME);
  Method159() -> (argtype TYPEOF);
  Method160() -> (argtype UINT16);
  Method161() -> (argtype UINT32);
  Method162() -> (argtype UINT64);
  Method163() -> (argtype UINT8);
  Method164() -> (argtype UNION);
  Method165() -> (argtype UNSAFE);
  Method166() -> (argtype UNSIGNED);
  Method167() -> (argtype UNSIZED);
  Method168() -> (argtype USE);
  Method169() -> (argtype USING);
  Method170() -> (argtype VALUE);
  Method171() -> (argtype VALUE_OF);
  Method172() -> (argtype VALUE_UNION);
  Method173() -> (argtype VALUES);
  Method174() -> (argtype VALUES_MAP);
  Method175() -> (argtype VAR);
  Method176() -> (argtype VEC);
  Method177() -> (argtype VIRTUAL);
  Method178() -> (argtype VOID);
  Method179() -> (argtype VOLATILE);
  Method180() -> (argtype WCHAR_T);
  Method181() -> (argtype WHERE);
  Method182() -> (argtype WHICH);
  Method183() -> (argtype WHILE);
  Method184() -> (argtype XOR);
  Method185() -> (argtype XOR_EQ);
  Method186() -> (argtype XUNION);
  Method187() -> (argtype YIELD);
  Method188() -> (argtype ZX);
};
