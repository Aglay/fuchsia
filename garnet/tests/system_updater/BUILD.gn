# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia/zircon_images.gni")
import("//build/package.gni")
import("//build/rust/rustc_test.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

rustc_test("driver") {
  name = "system_updater_v2_test"
  edition = "2018"

  deps = [
    "//garnet/go/src/amber:cobalt_sw_delivery_registry_rustlib",
    "//garnet/public/lib/fidl/rust/fidl",
    "//garnet/public/rust/fdio",
    "//garnet/public/rust/fuchsia-async",
    "//garnet/public/rust/fuchsia-component",
    "//garnet/public/rust/fuchsia-runtime",
    "//garnet/public/rust/fuchsia-syslog",
    "//garnet/public/rust/fuchsia-zircon",
    "//sdk/fidl/fuchsia.amber:fuchsia.amber-rustc",
    "//sdk/fidl/fuchsia.pkg:fuchsia.pkg-rustc",
    "//sdk/fidl/fuchsia.sys:fuchsia.sys-rustc",
    "//third_party/rust_crates:failure",
    "//third_party/rust_crates:futures-preview",
    "//third_party/rust_crates:hex",
    "//third_party/rust_crates:log",
    "//third_party/rust_crates:parking_lot",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_derive",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:tempfile",
    "//zircon/system/fidl/fuchsia-cobalt:fuchsia-cobalt-rustc",
    "//zircon/system/fidl/fuchsia-device-manager:fuchsia-device-manager-rustc",
    "//zircon/system/fidl/fuchsia-mem:fuchsia-mem-rustc",
    "//zircon/system/fidl/fuchsia-paver:fuchsia-paver-rustc",
  ]
}

# Include install-disk-image in the build, which comes from Zircon
zircon_extras_manifest("install-disk-image.manifest") {
  visibility = [ ":*" ]
  manifest = "image"
  patterns = [ "bin/install-disk-image" ]
}

manifest_outputs = get_target_outputs(":install-disk-image.manifest")
manifest_file = manifest_outputs[0]

test_package("systemupdater-tests") {
  extra = [ manifest_file ]

  deps = [
    ":driver",
    ":install-disk-image.manifest",
    "//garnet/go/src/grand_unified_binary",
  ]

  binaries = [
    {
      name = "system_updater"
      source = "grand_unified_binary"
    },
  ]

  resources = [
    {
      path = rebase_path("//garnet/go/src/amber/system_updater/images")
      dest = "images"
    },
  ]

  meta = [
    {
      path = rebase_path(
              "//garnet/go/src/amber/system_updater/meta/system_updater_isolated.cmx")
      dest = "system_updater_isolated.cmx"
    },
  ]

  tests = [
    {
      name = "system_updater_v2_test"
      environments = basic_envs
    },
  ]
}
