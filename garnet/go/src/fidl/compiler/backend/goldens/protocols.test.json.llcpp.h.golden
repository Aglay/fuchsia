// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/fit/optional.h>

#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>
#include <lib/zx/socket.h>
#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

enum class obj_type : uint32_t {
  NONE = 0u,
  SOCKET = 14u,
};

struct WithErrorSyntax_ResponseAsStruct_Response;
class WithErrorSyntax_ResponseAsStruct_Result;
struct WithErrorSyntax_ErrorAsPrimitive_Response;
class WithErrorSyntax_ErrorAsPrimitive_Result;
struct WithErrorSyntax_ErrorAsEnum_Response;
class Transitional;
class ChannelProtocol;
class WithAndWithoutRequestResponse;
enum class ErrorEnun : uint32_t {
  ERR_FOO = 1u,
  ERR_BAR = 2u,
};

class WithErrorSyntax_ErrorAsEnum_Result;
class WithErrorSyntax;

extern "C" const fidl_type_t
    test_name_WithErrorSyntax_ResponseAsStruct_ResultTable;

class WithErrorSyntax_ResponseAsStruct_Result {
 public:
  WithErrorSyntax_ResponseAsStruct_Result()
      : ordinal_(Ordinal::Invalid), envelope_{} {}

  WithErrorSyntax_ResponseAsStruct_Result(
      WithErrorSyntax_ResponseAsStruct_Result&&) = default;
  WithErrorSyntax_ResponseAsStruct_Result& operator=(
      WithErrorSyntax_ResponseAsStruct_Result&&) = default;

  ~WithErrorSyntax_ResponseAsStruct_Result() { reset_ptr(nullptr); }

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_response() const { return ordinal_ == Ordinal::kResponse; }

  static WithErrorSyntax_ResponseAsStruct_Result WithResponse(
      ::fidl::tracking_ptr<
          ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response>&&
          val) {
    WithErrorSyntax_ResponseAsStruct_Result result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::fidl::tracking_ptr<
          ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response>&&
          elem) {
    ordinal_ = Ordinal::kResponse;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response&
  mutable_response() {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response*>(
        envelope_.data.get());
  }
  const ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response&
  response() const {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response*>(
        envelope_.data.get());
  }

  bool is_err() const { return ordinal_ == Ordinal::kErr; }

  static WithErrorSyntax_ResponseAsStruct_Result WithErr(
      ::fidl::tracking_ptr<uint32_t>&& val) {
    WithErrorSyntax_ResponseAsStruct_Result result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(::fidl::tracking_ptr<uint32_t>&& elem) {
    ordinal_ = Ordinal::kErr;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &test_name_WithErrorSyntax_ResponseAsStruct_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 24;
  static constexpr bool HasPointer = true;
  static constexpr bool IsResource = false;

  void _CloseHandles();

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  void reset_ptr(::fidl::tracking_ptr<void>&& new_ptr) {
    // To clear the existing value, std::move it and let it go out of scope.
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1: {
        ::fidl::tracking_ptr<
            ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response>
            to_destroy = static_cast<::fidl::tracking_ptr<
                ::llcpp::test::name::
                    WithErrorSyntax_ResponseAsStruct_Response>>(
                std::move(envelope_.data));
        break;
      }
      case 2: {
        ::fidl::tracking_ptr<uint32_t> to_destroy =
            static_cast<::fidl::tracking_ptr<uint32_t>>(
                std::move(envelope_.data));
        break;
      }
    }

    envelope_.data = std::move(new_ptr);
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t
    test_name_WithErrorSyntax_ErrorAsPrimitive_ResultTable;

class WithErrorSyntax_ErrorAsPrimitive_Result {
 public:
  WithErrorSyntax_ErrorAsPrimitive_Result()
      : ordinal_(Ordinal::Invalid), envelope_{} {}

  WithErrorSyntax_ErrorAsPrimitive_Result(
      WithErrorSyntax_ErrorAsPrimitive_Result&&) = default;
  WithErrorSyntax_ErrorAsPrimitive_Result& operator=(
      WithErrorSyntax_ErrorAsPrimitive_Result&&) = default;

  ~WithErrorSyntax_ErrorAsPrimitive_Result() { reset_ptr(nullptr); }

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_response() const { return ordinal_ == Ordinal::kResponse; }

  static WithErrorSyntax_ErrorAsPrimitive_Result WithResponse(
      ::fidl::tracking_ptr<
          ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response>&&
          val) {
    WithErrorSyntax_ErrorAsPrimitive_Result result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::fidl::tracking_ptr<
          ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response>&&
          elem) {
    ordinal_ = Ordinal::kResponse;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response&
  mutable_response() {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response*>(
        envelope_.data.get());
  }
  const ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response&
  response() const {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response*>(
        envelope_.data.get());
  }

  bool is_err() const { return ordinal_ == Ordinal::kErr; }

  static WithErrorSyntax_ErrorAsPrimitive_Result WithErr(
      ::fidl::tracking_ptr<uint32_t>&& val) {
    WithErrorSyntax_ErrorAsPrimitive_Result result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(::fidl::tracking_ptr<uint32_t>&& elem) {
    ordinal_ = Ordinal::kErr;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &test_name_WithErrorSyntax_ErrorAsPrimitive_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;
  static constexpr bool IsResource = false;

  void _CloseHandles();

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  void reset_ptr(::fidl::tracking_ptr<void>&& new_ptr) {
    // To clear the existing value, std::move it and let it go out of scope.
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1: {
        ::fidl::tracking_ptr<
            ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response>
            to_destroy = static_cast<::fidl::tracking_ptr<
                ::llcpp::test::name::
                    WithErrorSyntax_ErrorAsPrimitive_Response>>(
                std::move(envelope_.data));
        break;
      }
      case 2: {
        ::fidl::tracking_ptr<uint32_t> to_destroy =
            static_cast<::fidl::tracking_ptr<uint32_t>>(
                std::move(envelope_.data));
        break;
      }
    }

    envelope_.data = std::move(new_ptr);
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t test_name_WithErrorSyntax_ErrorAsEnum_ResultTable;

class WithErrorSyntax_ErrorAsEnum_Result {
 public:
  WithErrorSyntax_ErrorAsEnum_Result()
      : ordinal_(Ordinal::Invalid), envelope_{} {}

  WithErrorSyntax_ErrorAsEnum_Result(WithErrorSyntax_ErrorAsEnum_Result&&) =
      default;
  WithErrorSyntax_ErrorAsEnum_Result& operator=(
      WithErrorSyntax_ErrorAsEnum_Result&&) = default;

  ~WithErrorSyntax_ErrorAsEnum_Result() { reset_ptr(nullptr); }

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_response() const { return ordinal_ == Ordinal::kResponse; }

  static WithErrorSyntax_ErrorAsEnum_Result WithResponse(
      ::fidl::tracking_ptr<
          ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>&& val) {
    WithErrorSyntax_ErrorAsEnum_Result result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::fidl::tracking_ptr<
          ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>&& elem) {
    ordinal_ = Ordinal::kResponse;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response&
  mutable_response() {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response*>(
        envelope_.data.get());
  }
  const ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response& response()
      const {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<
        ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response*>(
        envelope_.data.get());
  }

  bool is_err() const { return ordinal_ == Ordinal::kErr; }

  static WithErrorSyntax_ErrorAsEnum_Result WithErr(
      ::fidl::tracking_ptr<::llcpp::test::name::ErrorEnun>&& val) {
    WithErrorSyntax_ErrorAsEnum_Result result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(::fidl::tracking_ptr<::llcpp::test::name::ErrorEnun>&& elem) {
    ordinal_ = Ordinal::kErr;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  ::llcpp::test::name::ErrorEnun& mutable_err() {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<::llcpp::test::name::ErrorEnun*>(envelope_.data.get());
  }
  const ::llcpp::test::name::ErrorEnun& err() const {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<::llcpp::test::name::ErrorEnun*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &test_name_WithErrorSyntax_ErrorAsEnum_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;
  static constexpr bool IsResource = false;

  void _CloseHandles();

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  void reset_ptr(::fidl::tracking_ptr<void>&& new_ptr) {
    // To clear the existing value, std::move it and let it go out of scope.
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1: {
        ::fidl::tracking_ptr<
            ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>
            to_destroy = static_cast<::fidl::tracking_ptr<
                ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>>(
                std::move(envelope_.data));
        break;
      }
      case 2: {
        ::fidl::tracking_ptr<::llcpp::test::name::ErrorEnun> to_destroy =
            static_cast<::fidl::tracking_ptr<::llcpp::test::name::ErrorEnun>>(
                std::move(envelope_.data));
        break;
      }
    }

    envelope_.data = std::move(new_ptr);
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t
    test_name_WithErrorSyntax_ResponseAsStruct_ResponseTable;

struct WithErrorSyntax_ResponseAsStruct_Response {
  static constexpr const fidl_type_t* Type =
      &test_name_WithErrorSyntax_ResponseAsStruct_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  int64_t a = {};

  int64_t b = {};

  int64_t c = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t
    test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;

struct WithErrorSyntax_ErrorAsPrimitive_Response {
  static constexpr const fidl_type_t* Type =
      &test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint8_t __reserved = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t
    test_name_WithErrorSyntax_ErrorAsEnum_ResponseTable;

struct WithErrorSyntax_ErrorAsEnum_Response {
  static constexpr const fidl_type_t* Type =
      &test_name_WithErrorSyntax_ErrorAsEnum_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint8_t __reserved = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t test_name_TransitionalRequestRequestTable;
extern "C" const fidl_type_t test_name_TransitionalRequestResponseTable;
extern "C" const fidl_type_t test_name_TransitionalOneWayRequestTable;
extern "C" const fidl_type_t test_name_TransitionalOneWayResponseTable;
extern "C" const fidl_type_t test_name_TransitionalEventRequestTable;
extern "C" const fidl_type_t test_name_TransitionalEventEventTable;

class Transitional final {
  Transitional() = delete;

 public:
  struct RequestResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t y;
    explicit RequestResponse(int64_t y) : y(y) { _InitHeader(); }
    RequestResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_TransitionalRequestResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct RequestRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t x;
    explicit RequestRequest(zx_txid_t _txid, int64_t x) : x(x) {
      _InitHeader(_txid);
    }
    explicit RequestRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &test_name_TransitionalRequestRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = RequestResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct OneWayRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t x;
    explicit OneWayRequest(zx_txid_t _txid, int64_t x) : x(x) {
      _InitHeader(_txid);
    }
    explicit OneWayRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &test_name_TransitionalOneWayRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct EventResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t x;
    explicit EventResponse(int64_t x) : x(x) { _InitHeader(); }
    EventResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_TransitionalEventEventTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };

  struct EventHandlers {
    fit::function<zx_status_t(EventResponse* message)> event;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class Request final : public ::fidl::Result {
     public:
      explicit Request(zx_handle_t _client, int64_t x);
      Request(zx_handle_t _client, int64_t x, zx_time_t _deadline);
      explicit Request(const ::fidl::Result& result) : ::fidl::Result(result) {}
      Request(Request&&) = delete;
      Request(const Request&) = delete;
      Request* operator=(Request&&) = delete;
      Request* operator=(const Request&) = delete;
      ~Request() = default;

      RequestResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<RequestResponse*>(bytes_);
      }
      const RequestResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const RequestResponse*>(bytes_);
      }

      RequestResponse& value() { return *Unwrap(); }
      const RequestResponse& value() const { return *Unwrap(); }

      RequestResponse* operator->() { return &value(); }
      const RequestResponse* operator->() const { return &value(); }

      RequestResponse& operator*() { return value(); }
      const RequestResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t
          bytes_[RequestResponse::PrimarySize + RequestResponse::MaxOutOfLine];
    };
    class OneWay final : public ::fidl::Result {
     public:
      explicit OneWay(zx_handle_t _client, int64_t x);
      explicit OneWay(const ::fidl::Result& result) : ::fidl::Result(result) {}
      OneWay(OneWay&&) = delete;
      OneWay(const OneWay&) = delete;
      OneWay* operator=(OneWay&&) = delete;
      OneWay* operator=(const OneWay&) = delete;
      ~OneWay() = default;

     private:
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class Request final : public ::fidl::Result {
     public:
      explicit Request(zx_handle_t _client, uint8_t* _request_bytes,
                       uint32_t _request_byte_capacity, int64_t x,
                       uint8_t* _response_bytes,
                       uint32_t _response_byte_capacity);
      explicit Request(const ::fidl::Result& result) : ::fidl::Result(result) {}
      Request(Request&&) = delete;
      Request(const Request&) = delete;
      Request* operator=(Request&&) = delete;
      Request* operator=(const Request&) = delete;
      ~Request() = default;

      RequestResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<RequestResponse*>(bytes_);
      }
      const RequestResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const RequestResponse*>(bytes_);
      }

      RequestResponse& value() { return *Unwrap(); }
      const RequestResponse& value() const { return *Unwrap(); }

      RequestResponse* operator->() { return &value(); }
      const RequestResponse* operator->() const { return &value(); }

      RequestResponse& operator*() { return value(); }
      const RequestResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class OneWay final : public ::fidl::Result {
     public:
      explicit OneWay(zx_handle_t _client, uint8_t* _request_bytes,
                      uint32_t _request_byte_capacity, int64_t x);
      explicit OneWay(const ::fidl::Result& result) : ::fidl::Result(result) {}
      OneWay(OneWay&&) = delete;
      OneWay(const OneWay&) = delete;
      OneWay* operator=(OneWay&&) = delete;
      OneWay* operator=(const OneWay&) = delete;
      ~OneWay() = default;
    };
  };

  class RequestUnownedResponse final {
   public:
    RequestUnownedResponse(uint8_t* _bytes, uint32_t _byte_size, int64_t y)
        : message_(_bytes, _byte_size, sizeof(RequestResponse), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(RequestResponse)];
      auto& _response = *new (_response_buffer) RequestResponse(y);
      message_.LinearizeAndEncode(RequestResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    RequestResponse& Message() {
      return *reinterpret_cast<RequestResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class RequestOwnedResponse final {
   public:
    explicit RequestOwnedResponse(int64_t y)
        : message_(bytes_, sizeof(bytes_), y) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t
        bytes_[RequestResponse::PrimarySize + RequestResponse::MaxOutOfLine];
    RequestUnownedResponse message_;
  };

  class RequestUnownedRequest final {
   public:
    RequestUnownedRequest(uint8_t* _bytes, uint32_t _byte_size, zx_txid_t _txid,
                          int64_t x)
        : message_(_bytes, _byte_size, sizeof(RequestRequest), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(RequestRequest)];
      auto& _request = *new (_request_buffer) RequestRequest(_txid, x);
      message_.LinearizeAndEncode(RequestRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    RequestRequest& Message() {
      return *reinterpret_cast<RequestRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class RequestOwnedRequest final {
   public:
    explicit RequestOwnedRequest(zx_txid_t _txid, int64_t x)
        : message_(bytes_, sizeof(bytes_), _txid, x) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[RequestRequest::PrimarySize + RequestRequest::MaxOutOfLine];
    RequestUnownedRequest message_;
  };

  class OneWayUnownedRequest final {
   public:
    OneWayUnownedRequest(uint8_t* _bytes, uint32_t _byte_size, zx_txid_t _txid,
                         int64_t x)
        : message_(_bytes, _byte_size, sizeof(OneWayRequest), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(OneWayRequest)];
      auto& _request = *new (_request_buffer) OneWayRequest(_txid, x);
      message_.LinearizeAndEncode(OneWayRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    OneWayRequest& Message() {
      return *reinterpret_cast<OneWayRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class OneWayOwnedRequest final {
   public:
    explicit OneWayOwnedRequest(zx_txid_t _txid, int64_t x)
        : message_(bytes_, sizeof(bytes_), _txid, x) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[OneWayRequest::PrimarySize + OneWayRequest::MaxOutOfLine];
    OneWayUnownedRequest message_;
  };

  class EventUnownedResponse final {
   public:
    EventUnownedResponse(uint8_t* _bytes, uint32_t _byte_size, int64_t x)
        : message_(_bytes, _byte_size, sizeof(EventResponse), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(EventResponse)];
      auto& _response = *new (_response_buffer) EventResponse(x);
      message_.LinearizeAndEncode(EventResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    EventResponse& Message() {
      return *reinterpret_cast<EventResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class EventOwnedResponse final {
   public:
    explicit EventOwnedResponse(int64_t x)
        : message_(bytes_, sizeof(bytes_), x) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[EventResponse::PrimarySize + EventResponse::MaxOutOfLine];
    EventUnownedResponse message_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::Request Request(::zx::unowned_channel _client_end,
                                     int64_t x) {
      return ResultOf::Request(_client_end->get(), x);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::Request Request(::zx::unowned_channel _client_end,
                                            ::fidl::BytePart _request_buffer,
                                            int64_t x,
                                            ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::Request(
          _client_end->get(), _request_buffer.data(),
          _request_buffer.capacity(), x, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Allocates 24 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::OneWay OneWay(::zx::unowned_channel _client_end,
                                   int64_t x) {
      return ResultOf::OneWay(_client_end->get(), x);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::OneWay OneWay(::zx::unowned_channel _client_end,
                                          ::fidl::BytePart _request_buffer,
                                          int64_t x) {
      return UnownedResultOf::OneWay(_client_end->get(), _request_buffer.data(),
                                     _request_buffer.capacity(), x);
    }

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding handler defined in |EventHandlers|. The return status of
    // the handler function is folded with any transport-level errors and
    // returned.
    static ::fidl::Result HandleEvents(::zx::unowned_channel client_end,
                                       EventHandlers& handlers);
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::Request Request(int64_t x) {
      return ResultOf::Request(this->channel().get(), x);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::Request Request(::fidl::BytePart _request_buffer,
                                     int64_t x,
                                     ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::Request(
          this->channel().get(), _request_buffer.data(),
          _request_buffer.capacity(), x, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Allocates 24 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::OneWay OneWay(int64_t x) {
      return ResultOf::OneWay(this->channel().get(), x);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::OneWay OneWay(::fidl::BytePart _request_buffer,
                                   int64_t x) {
      return UnownedResultOf::OneWay(this->channel().get(),
                                     _request_buffer.data(),
                                     _request_buffer.capacity(), x);
    }

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding handler defined in |EventHandlers|. The return status of
    // the handler function is folded with any transport-level errors and
    // returned.
    ::fidl::Result HandleEvents(EventHandlers& handlers) {
      return Call::HandleEvents(::zx::unowned_channel(channel_), handlers);
    }

   private:
    ::zx::channel channel_;
  };

  struct AsyncEventHandlers;
  class RequestResponseContext;
  class ClientImpl;

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = Transitional;

    class RequestCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(int64_t y);
      ::fidl::Result Reply(::fidl::BytePart _buffer, int64_t y);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using RequestCompleter = ::fidl::Completer<RequestCompleterBase>;

    virtual void Request(int64_t x, RequestCompleter::Sync& _completer) {
      _completer.Close(ZX_ERR_NOT_SUPPORTED);
    }

    using OneWayCompleter = ::fidl::Completer<>;

    virtual void OneWay(int64_t x, OneWayCompleter::Sync& _completer) {
      _completer.Close(ZX_ERR_NOT_SUPPORTED);
    }
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl, fidl_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl, fidl_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl, fidl_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventEvent(::zx::unowned_channel _channel, int64_t x);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventEvent(::zx::unowned_channel _channel,
                                    ::fidl::BytePart _buffer, int64_t x);

  class EventSender;
};

extern "C" const fidl_type_t test_name_ChannelProtocolMethodARequestTable;
extern "C" const fidl_type_t test_name_ChannelProtocolMethodAResponseTable;
extern "C" const fidl_type_t test_name_ChannelProtocolEventARequestTable;
extern "C" const fidl_type_t test_name_ChannelProtocolEventAEventTable;
extern "C" const fidl_type_t test_name_ChannelProtocolMethodBRequestTable;
extern "C" const fidl_type_t test_name_ChannelProtocolMethodBResponseTable;
extern "C" const fidl_type_t test_name_ChannelProtocolMutateSocketRequestTable;
extern "C" const fidl_type_t test_name_ChannelProtocolMutateSocketResponseTable;

class ChannelProtocol final {
  ChannelProtocol() = delete;

 public:
  struct MethodARequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;
    explicit MethodARequest(zx_txid_t _txid, int64_t a, int64_t b)
        : a(a), b(b) {
      _InitHeader(_txid);
    }
    explicit MethodARequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &test_name_ChannelProtocolMethodARequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct EventAResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;
    explicit EventAResponse(int64_t a, int64_t b) : a(a), b(b) {
      _InitHeader();
    }
    EventAResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_ChannelProtocolEventAEventTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct MethodBResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;
    explicit MethodBResponse(int64_t result) : result(result) { _InitHeader(); }
    MethodBResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_ChannelProtocolMethodBResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct MethodBRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;
    explicit MethodBRequest(zx_txid_t _txid, int64_t a, int64_t b)
        : a(a), b(b) {
      _InitHeader(_txid);
    }
    explicit MethodBRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &test_name_ChannelProtocolMethodBRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = MethodBResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct MutateSocketResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket b;
    explicit MutateSocketResponse(::zx::socket& b) : b(std::move(b)) {
      _InitHeader();
    }
    MutateSocketResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_ChannelProtocolMutateSocketResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
    void _CloseHandles();

   private:
    void _InitHeader();
  };
  struct MutateSocketRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::socket a;
    explicit MutateSocketRequest(zx_txid_t _txid, ::zx::socket& a)
        : a(std::move(a)) {
      _InitHeader(_txid);
    }
    explicit MutateSocketRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &test_name_ChannelProtocolMutateSocketRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = MutateSocketResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct EventHandlers {
    fit::function<zx_status_t(EventAResponse* message)> event_a;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class MethodA final : public ::fidl::Result {
     public:
      explicit MethodA(zx_handle_t _client, int64_t a, int64_t b);
      explicit MethodA(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodA(MethodA&&) = delete;
      MethodA(const MethodA&) = delete;
      MethodA* operator=(MethodA&&) = delete;
      MethodA* operator=(const MethodA&) = delete;
      ~MethodA() = default;

     private:
    };
    class MethodB final : public ::fidl::Result {
     public:
      explicit MethodB(zx_handle_t _client, int64_t a, int64_t b);
      MethodB(zx_handle_t _client, int64_t a, int64_t b, zx_time_t _deadline);
      explicit MethodB(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodB(MethodB&&) = delete;
      MethodB(const MethodB&) = delete;
      MethodB* operator=(MethodB&&) = delete;
      MethodB* operator=(const MethodB&) = delete;
      ~MethodB() = default;

      MethodBResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<MethodBResponse*>(bytes_);
      }
      const MethodBResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const MethodBResponse*>(bytes_);
      }

      MethodBResponse& value() { return *Unwrap(); }
      const MethodBResponse& value() const { return *Unwrap(); }

      MethodBResponse* operator->() { return &value(); }
      const MethodBResponse* operator->() const { return &value(); }

      MethodBResponse& operator*() { return value(); }
      const MethodBResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t
          bytes_[MethodBResponse::PrimarySize + MethodBResponse::MaxOutOfLine];
    };
    class MutateSocket final : public ::fidl::Result {
     public:
      explicit MutateSocket(zx_handle_t _client, ::zx::socket& a);
      MutateSocket(zx_handle_t _client, ::zx::socket& a, zx_time_t _deadline);
      explicit MutateSocket(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      MutateSocket(MutateSocket&&) = delete;
      MutateSocket(const MutateSocket&) = delete;
      MutateSocket* operator=(MutateSocket&&) = delete;
      MutateSocket* operator=(const MutateSocket&) = delete;
      ~MutateSocket() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      MutateSocketResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<MutateSocketResponse*>(bytes_);
      }
      const MutateSocketResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const MutateSocketResponse*>(bytes_);
      }

      MutateSocketResponse& value() { return *Unwrap(); }
      const MutateSocketResponse& value() const { return *Unwrap(); }

      MutateSocketResponse* operator->() { return &value(); }
      const MutateSocketResponse* operator->() const { return &value(); }

      MutateSocketResponse& operator*() { return value(); }
      const MutateSocketResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[MutateSocketResponse::PrimarySize +
                     MutateSocketResponse::MaxOutOfLine];
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class MethodA final : public ::fidl::Result {
     public:
      explicit MethodA(zx_handle_t _client, uint8_t* _request_bytes,
                       uint32_t _request_byte_capacity, int64_t a, int64_t b);
      explicit MethodA(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodA(MethodA&&) = delete;
      MethodA(const MethodA&) = delete;
      MethodA* operator=(MethodA&&) = delete;
      MethodA* operator=(const MethodA&) = delete;
      ~MethodA() = default;
    };
    class MethodB final : public ::fidl::Result {
     public:
      explicit MethodB(zx_handle_t _client, uint8_t* _request_bytes,
                       uint32_t _request_byte_capacity, int64_t a, int64_t b,
                       uint8_t* _response_bytes,
                       uint32_t _response_byte_capacity);
      explicit MethodB(const ::fidl::Result& result) : ::fidl::Result(result) {}
      MethodB(MethodB&&) = delete;
      MethodB(const MethodB&) = delete;
      MethodB* operator=(MethodB&&) = delete;
      MethodB* operator=(const MethodB&) = delete;
      ~MethodB() = default;

      MethodBResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<MethodBResponse*>(bytes_);
      }
      const MethodBResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const MethodBResponse*>(bytes_);
      }

      MethodBResponse& value() { return *Unwrap(); }
      const MethodBResponse& value() const { return *Unwrap(); }

      MethodBResponse* operator->() { return &value(); }
      const MethodBResponse* operator->() const { return &value(); }

      MethodBResponse& operator*() { return value(); }
      const MethodBResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class MutateSocket final : public ::fidl::Result {
     public:
      explicit MutateSocket(zx_handle_t _client, uint8_t* _request_bytes,
                            uint32_t _request_byte_capacity, ::zx::socket& a,
                            uint8_t* _response_bytes,
                            uint32_t _response_byte_capacity);
      explicit MutateSocket(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      MutateSocket(MutateSocket&&) = delete;
      MutateSocket(const MutateSocket&) = delete;
      MutateSocket* operator=(MutateSocket&&) = delete;
      MutateSocket* operator=(const MutateSocket&) = delete;
      ~MutateSocket() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      MutateSocketResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<MutateSocketResponse*>(bytes_);
      }
      const MutateSocketResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const MutateSocketResponse*>(bytes_);
      }

      MutateSocketResponse& value() { return *Unwrap(); }
      const MutateSocketResponse& value() const { return *Unwrap(); }

      MutateSocketResponse* operator->() { return &value(); }
      const MutateSocketResponse* operator->() const { return &value(); }

      MutateSocketResponse& operator*() { return value(); }
      const MutateSocketResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  class MethodAUnownedRequest final {
   public:
    MethodAUnownedRequest(uint8_t* _bytes, uint32_t _byte_size, zx_txid_t _txid,
                          int64_t a, int64_t b)
        : message_(_bytes, _byte_size, sizeof(MethodARequest), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(MethodARequest)];
      auto& _request = *new (_request_buffer) MethodARequest(_txid, a, b);
      message_.LinearizeAndEncode(MethodARequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    MethodARequest& Message() {
      return *reinterpret_cast<MethodARequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class MethodAOwnedRequest final {
   public:
    explicit MethodAOwnedRequest(zx_txid_t _txid, int64_t a, int64_t b)
        : message_(bytes_, sizeof(bytes_), _txid, a, b) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[MethodARequest::PrimarySize + MethodARequest::MaxOutOfLine];
    MethodAUnownedRequest message_;
  };

  class EventAUnownedResponse final {
   public:
    EventAUnownedResponse(uint8_t* _bytes, uint32_t _byte_size, int64_t a,
                          int64_t b)
        : message_(_bytes, _byte_size, sizeof(EventAResponse), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(EventAResponse)];
      auto& _response = *new (_response_buffer) EventAResponse(a, b);
      message_.LinearizeAndEncode(EventAResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    EventAResponse& Message() {
      return *reinterpret_cast<EventAResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class EventAOwnedResponse final {
   public:
    explicit EventAOwnedResponse(int64_t a, int64_t b)
        : message_(bytes_, sizeof(bytes_), a, b) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[EventAResponse::PrimarySize + EventAResponse::MaxOutOfLine];
    EventAUnownedResponse message_;
  };

  class MethodBUnownedResponse final {
   public:
    MethodBUnownedResponse(uint8_t* _bytes, uint32_t _byte_size, int64_t result)
        : message_(_bytes, _byte_size, sizeof(MethodBResponse), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(MethodBResponse)];
      auto& _response = *new (_response_buffer) MethodBResponse(result);
      message_.LinearizeAndEncode(MethodBResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    MethodBResponse& Message() {
      return *reinterpret_cast<MethodBResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class MethodBOwnedResponse final {
   public:
    explicit MethodBOwnedResponse(int64_t result)
        : message_(bytes_, sizeof(bytes_), result) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t
        bytes_[MethodBResponse::PrimarySize + MethodBResponse::MaxOutOfLine];
    MethodBUnownedResponse message_;
  };

  class MethodBUnownedRequest final {
   public:
    MethodBUnownedRequest(uint8_t* _bytes, uint32_t _byte_size, zx_txid_t _txid,
                          int64_t a, int64_t b)
        : message_(_bytes, _byte_size, sizeof(MethodBRequest), nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(MethodBRequest)];
      auto& _request = *new (_request_buffer) MethodBRequest(_txid, a, b);
      message_.LinearizeAndEncode(MethodBRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    MethodBRequest& Message() {
      return *reinterpret_cast<MethodBRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class MethodBOwnedRequest final {
   public:
    explicit MethodBOwnedRequest(zx_txid_t _txid, int64_t a, int64_t b)
        : message_(bytes_, sizeof(bytes_), _txid, a, b) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[MethodBRequest::PrimarySize + MethodBRequest::MaxOutOfLine];
    MethodBUnownedRequest message_;
  };

  class MutateSocketUnownedResponse final {
   public:
    MutateSocketUnownedResponse(uint8_t* _bytes, uint32_t _byte_size,
                                ::zx::socket& b)
        : message_(_bytes, _byte_size, sizeof(MutateSocketResponse), handles_,
                   std::min(ZX_CHANNEL_MAX_MSG_HANDLES,
                            MutateSocketResponse::MaxNumHandles),
                   0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(MutateSocketResponse)];
      auto& _response = *new (_response_buffer) MutateSocketResponse(b);
      message_.LinearizeAndEncode(MutateSocketResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    MutateSocketResponse& Message() {
      return *reinterpret_cast<MutateSocketResponse*>(message_.bytes());
    }
    zx_handle_t handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES,
                                  MutateSocketResponse::MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class MutateSocketOwnedResponse final {
   public:
    explicit MutateSocketOwnedResponse(::zx::socket& b)
        : message_(bytes_, sizeof(bytes_), b) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[MutateSocketResponse::PrimarySize +
                   MutateSocketResponse::MaxOutOfLine];
    MutateSocketUnownedResponse message_;
  };

  class MutateSocketUnownedRequest final {
   public:
    MutateSocketUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                               zx_txid_t _txid, ::zx::socket& a)
        : message_(_bytes, _byte_size, sizeof(MutateSocketRequest), handles_,
                   std::min(ZX_CHANNEL_MAX_MSG_HANDLES,
                            MutateSocketRequest::MaxNumHandles),
                   0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(MutateSocketRequest)];
      auto& _request = *new (_request_buffer) MutateSocketRequest(_txid, a);
      message_.LinearizeAndEncode(MutateSocketRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    MutateSocketRequest& Message() {
      return *reinterpret_cast<MutateSocketRequest*>(message_.bytes());
    }
    zx_handle_t handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES,
                                  MutateSocketRequest::MaxNumHandles)];
    ::fidl::OutgoingMessage message_;
  };

  class MutateSocketOwnedRequest final {
   public:
    explicit MutateSocketOwnedRequest(zx_txid_t _txid, ::zx::socket& a)
        : message_(bytes_, sizeof(bytes_), _txid, a) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[MutateSocketRequest::PrimarySize +
                   MutateSocketRequest::MaxOutOfLine];
    MutateSocketUnownedRequest message_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 32 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::MethodA MethodA(::zx::unowned_channel _client_end,
                                     int64_t a, int64_t b) {
      return ResultOf::MethodA(_client_end->get(), a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::MethodA MethodA(::zx::unowned_channel _client_end,
                                            ::fidl::BytePart _request_buffer,
                                            int64_t a, int64_t b) {
      return UnownedResultOf::MethodA(_client_end->get(),
                                      _request_buffer.data(),
                                      _request_buffer.capacity(), a, b);
    }

    // Allocates 56 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::MethodB MethodB(::zx::unowned_channel _client_end,
                                     int64_t a, int64_t b) {
      return ResultOf::MethodB(_client_end->get(), a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::MethodB MethodB(::zx::unowned_channel _client_end,
                                            ::fidl::BytePart _request_buffer,
                                            int64_t a, int64_t b,
                                            ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::MethodB(
          _client_end->get(), _request_buffer.data(),
          _request_buffer.capacity(), a, b, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::MutateSocket MutateSocket(
        ::zx::unowned_channel _client_end, ::zx::socket a) {
      return ResultOf::MutateSocket(_client_end->get(), a);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::MutateSocket MutateSocket(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
        ::zx::socket a, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::MutateSocket(
          _client_end->get(), _request_buffer.data(),
          _request_buffer.capacity(), a, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding handler defined in |EventHandlers|. The return status of
    // the handler function is folded with any transport-level errors and
    // returned.
    static ::fidl::Result HandleEvents(::zx::unowned_channel client_end,
                                       EventHandlers& handlers);
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 32 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::MethodA MethodA(int64_t a, int64_t b) {
      return ResultOf::MethodA(this->channel().get(), a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::MethodA MethodA(::fidl::BytePart _request_buffer,
                                     int64_t a, int64_t b) {
      return UnownedResultOf::MethodA(this->channel().get(),
                                      _request_buffer.data(),
                                      _request_buffer.capacity(), a, b);
    }

    // Allocates 56 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::MethodB MethodB(int64_t a, int64_t b) {
      return ResultOf::MethodB(this->channel().get(), a, b);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::MethodB MethodB(::fidl::BytePart _request_buffer,
                                     int64_t a, int64_t b,
                                     ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::MethodB(
          this->channel().get(), _request_buffer.data(),
          _request_buffer.capacity(), a, b, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Allocates 48 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::MutateSocket MutateSocket(::zx::socket a) {
      return ResultOf::MutateSocket(this->channel().get(), a);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::MutateSocket MutateSocket(
        ::fidl::BytePart _request_buffer, ::zx::socket a,
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::MutateSocket(
          this->channel().get(), _request_buffer.data(),
          _request_buffer.capacity(), a, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding handler defined in |EventHandlers|. The return status of
    // the handler function is folded with any transport-level errors and
    // returned.
    ::fidl::Result HandleEvents(EventHandlers& handlers) {
      return Call::HandleEvents(::zx::unowned_channel(channel_), handlers);
    }

   private:
    ::zx::channel channel_;
  };

  struct AsyncEventHandlers;
  class MethodBResponseContext;
  class MutateSocketResponseContext;
  class ClientImpl;

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = ChannelProtocol;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b,
                         MethodACompleter::Sync& _completer) = 0;

    class MethodBCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(int64_t result);
      ::fidl::Result Reply(::fidl::BytePart _buffer, int64_t result);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b,
                         MethodBCompleter::Sync& _completer) = 0;

    class MutateSocketCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(::zx::socket b);
      ::fidl::Result Reply(::fidl::BytePart _buffer, ::zx::socket b);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MutateSocketCompleter = ::fidl::Completer<MutateSocketCompleterBase>;

    virtual void MutateSocket(::zx::socket a,
                              MutateSocketCompleter::Sync& _completer) = 0;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl, fidl_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl, fidl_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl, fidl_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _channel, int64_t a,
                                     int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _channel,
                                     ::fidl::BytePart _buffer, int64_t a,
                                     int64_t b);

  class EventSender;
};

extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseNoRequestNoResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseNoRequestNoResponseResponseTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseNoRequestWithResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseNoRequestWithResponseResponseTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseWithRequestNoResponseResponseTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseWithRequestWithResponseResponseTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseOnEmptyResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseOnEmptyResponseEventTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseOnWithResponseRequestTable;
extern "C" const fidl_type_t
    test_name_WithAndWithoutRequestResponseOnWithResponseEventTable;

class WithAndWithoutRequestResponse final {
  WithAndWithoutRequestResponse() = delete;

 public:
  struct NoRequestNoResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit NoRequestNoResponseRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct NoRequestEmptyResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    NoRequestEmptyResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct NoRequestEmptyResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit NoRequestEmptyResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct NoRequestWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;
    explicit NoRequestWithResponseResponse(const ::fidl::StringView& ret)
        : ret(::fidl::unowned_ptr_t<const char>(ret.data()), ret.size()) {
      _InitHeader();
    }
    NoRequestWithResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_WithAndWithoutRequestResponseNoRequestWithResponseResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct NoRequestWithResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit NoRequestWithResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = NoRequestWithResponseResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct WithRequestNoResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;
    explicit WithRequestNoResponseRequest(zx_txid_t _txid,
                                          const ::fidl::StringView& arg)
        : arg(::fidl::unowned_ptr_t<const char>(arg.data()), arg.size()) {
      _InitHeader(_txid);
    }
    explicit WithRequestNoResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct WithRequestEmptyResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    WithRequestEmptyResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct WithRequestEmptyResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;
    explicit WithRequestEmptyResponseRequest(zx_txid_t _txid,
                                             const ::fidl::StringView& arg)
        : arg(::fidl::unowned_ptr_t<const char>(arg.data()), arg.size()) {
      _InitHeader(_txid);
    }
    explicit WithRequestEmptyResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct WithRequestWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;
    explicit WithRequestWithResponseResponse(const ::fidl::StringView& ret)
        : ret(::fidl::unowned_ptr_t<const char>(ret.data()), ret.size()) {
      _InitHeader();
    }
    WithRequestWithResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_WithAndWithoutRequestResponseWithRequestWithResponseResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct WithRequestWithResponseRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView arg;
    explicit WithRequestWithResponseRequest(zx_txid_t _txid,
                                            const ::fidl::StringView& arg)
        : arg(::fidl::unowned_ptr_t<const char>(arg.data()), arg.size()) {
      _InitHeader(_txid);
    }
    explicit WithRequestWithResponseRequest(zx_txid_t _txid) {
      _InitHeader(_txid);
    }

    static constexpr const fidl_type_t* Type =
        &test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = WithRequestWithResponseResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct OnEmptyResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    OnEmptyResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct OnWithResponseResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView ret;
    explicit OnWithResponseResponse(const ::fidl::StringView& ret)
        : ret(::fidl::unowned_ptr_t<const char>(ret.data()), ret.size()) {
      _InitHeader();
    }
    OnWithResponseResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_WithAndWithoutRequestResponseOnWithResponseEventTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };

  struct EventHandlers {
    fit::function<zx_status_t()> on_empty_response;

    fit::function<zx_status_t(OnWithResponseResponse* message)>
        on_with_response;

    // Fallback handler when an unknown ordinal is received.
    // Caller may put custom error handling logic here.
    fit::function<zx_status_t()> unknown;
  };

  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class NoRequestNoResponse final : public ::fidl::Result {
     public:
      explicit NoRequestNoResponse(zx_handle_t _client);
      explicit NoRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestNoResponse(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse(const NoRequestNoResponse&) = delete;
      NoRequestNoResponse* operator=(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse* operator=(const NoRequestNoResponse&) = delete;
      ~NoRequestNoResponse() = default;

     private:
    };
    class NoRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit NoRequestEmptyResponse(zx_handle_t _client);
      NoRequestEmptyResponse(zx_handle_t _client, zx_time_t _deadline);
      explicit NoRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestEmptyResponse(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse(const NoRequestEmptyResponse&) = delete;
      NoRequestEmptyResponse* operator=(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse* operator=(const NoRequestEmptyResponse&) = delete;
      ~NoRequestEmptyResponse() = default;

      NoRequestEmptyResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<NoRequestEmptyResponseResponse*>(bytes_);
      }
      const NoRequestEmptyResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const NoRequestEmptyResponseResponse*>(bytes_);
      }

      NoRequestEmptyResponseResponse& value() { return *Unwrap(); }
      const NoRequestEmptyResponseResponse& value() const { return *Unwrap(); }

      NoRequestEmptyResponseResponse* operator->() { return &value(); }
      const NoRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      NoRequestEmptyResponseResponse& operator*() { return value(); }
      const NoRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[NoRequestEmptyResponseResponse::PrimarySize +
                     NoRequestEmptyResponseResponse::MaxOutOfLine];
    };
    class NoRequestWithResponse final : public ::fidl::Result {
     public:
      explicit NoRequestWithResponse(zx_handle_t _client);
      NoRequestWithResponse(zx_handle_t _client, zx_time_t _deadline);
      explicit NoRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestWithResponse(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse(const NoRequestWithResponse&) = delete;
      NoRequestWithResponse* operator=(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse* operator=(const NoRequestWithResponse&) = delete;
      ~NoRequestWithResponse() = default;

      NoRequestWithResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<NoRequestWithResponseResponse*>(bytes_->data());
      }
      const NoRequestWithResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const NoRequestWithResponseResponse*>(
            bytes_->data());
      }

      NoRequestWithResponseResponse& value() { return *Unwrap(); }
      const NoRequestWithResponseResponse& value() const { return *Unwrap(); }

      NoRequestWithResponseResponse* operator->() { return &value(); }
      const NoRequestWithResponseResponse* operator->() const {
        return &value();
      }

      NoRequestWithResponseResponse& operator*() { return value(); }
      const NoRequestWithResponseResponse& operator*() const { return value(); }

     private:
      std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
          bytes_;
    };
    class WithRequestNoResponse final : public ::fidl::Result {
     public:
      explicit WithRequestNoResponse(zx_handle_t _client,
                                     const ::fidl::StringView& arg);
      explicit WithRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestNoResponse(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse(const WithRequestNoResponse&) = delete;
      WithRequestNoResponse* operator=(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse* operator=(const WithRequestNoResponse&) = delete;
      ~WithRequestNoResponse() = default;

     private:
    };
    class WithRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit WithRequestEmptyResponse(zx_handle_t _client,
                                        const ::fidl::StringView& arg);
      WithRequestEmptyResponse(zx_handle_t _client,
                               const ::fidl::StringView& arg,
                               zx_time_t _deadline);
      explicit WithRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestEmptyResponse(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse(const WithRequestEmptyResponse&) = delete;
      WithRequestEmptyResponse* operator=(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse* operator=(const WithRequestEmptyResponse&) =
          delete;
      ~WithRequestEmptyResponse() = default;

      WithRequestEmptyResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<WithRequestEmptyResponseResponse*>(bytes_);
      }
      const WithRequestEmptyResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const WithRequestEmptyResponseResponse*>(
            bytes_);
      }

      WithRequestEmptyResponseResponse& value() { return *Unwrap(); }
      const WithRequestEmptyResponseResponse& value() const {
        return *Unwrap();
      }

      WithRequestEmptyResponseResponse* operator->() { return &value(); }
      const WithRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      WithRequestEmptyResponseResponse& operator*() { return value(); }
      const WithRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[WithRequestEmptyResponseResponse::PrimarySize +
                     WithRequestEmptyResponseResponse::MaxOutOfLine];
    };
    class WithRequestWithResponse final : public ::fidl::Result {
     public:
      explicit WithRequestWithResponse(zx_handle_t _client,
                                       const ::fidl::StringView& arg);
      WithRequestWithResponse(zx_handle_t _client,
                              const ::fidl::StringView& arg,
                              zx_time_t _deadline);
      explicit WithRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestWithResponse(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse(const WithRequestWithResponse&) = delete;
      WithRequestWithResponse* operator=(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse* operator=(const WithRequestWithResponse&) =
          delete;
      ~WithRequestWithResponse() = default;

      WithRequestWithResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<WithRequestWithResponseResponse*>(
            bytes_->data());
      }
      const WithRequestWithResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const WithRequestWithResponseResponse*>(
            bytes_->data());
      }

      WithRequestWithResponseResponse& value() { return *Unwrap(); }
      const WithRequestWithResponseResponse& value() const { return *Unwrap(); }

      WithRequestWithResponseResponse* operator->() { return &value(); }
      const WithRequestWithResponseResponse* operator->() const {
        return &value();
      }

      WithRequestWithResponseResponse& operator*() { return value(); }
      const WithRequestWithResponseResponse& operator*() const {
        return value();
      }

     private:
      std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
          bytes_;
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class NoRequestNoResponse final : public ::fidl::Result {
     public:
      explicit NoRequestNoResponse(zx_handle_t _client);
      explicit NoRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestNoResponse(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse(const NoRequestNoResponse&) = delete;
      NoRequestNoResponse* operator=(NoRequestNoResponse&&) = delete;
      NoRequestNoResponse* operator=(const NoRequestNoResponse&) = delete;
      ~NoRequestNoResponse() = default;
    };
    class NoRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit NoRequestEmptyResponse(zx_handle_t _client,
                                      uint8_t* _response_bytes,
                                      uint32_t _response_byte_capacity);
      explicit NoRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestEmptyResponse(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse(const NoRequestEmptyResponse&) = delete;
      NoRequestEmptyResponse* operator=(NoRequestEmptyResponse&&) = delete;
      NoRequestEmptyResponse* operator=(const NoRequestEmptyResponse&) = delete;
      ~NoRequestEmptyResponse() = default;

      NoRequestEmptyResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<NoRequestEmptyResponseResponse*>(bytes_);
      }
      const NoRequestEmptyResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const NoRequestEmptyResponseResponse*>(bytes_);
      }

      NoRequestEmptyResponseResponse& value() { return *Unwrap(); }
      const NoRequestEmptyResponseResponse& value() const { return *Unwrap(); }

      NoRequestEmptyResponseResponse* operator->() { return &value(); }
      const NoRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      NoRequestEmptyResponseResponse& operator*() { return value(); }
      const NoRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
    class NoRequestWithResponse final : public ::fidl::Result {
     public:
      explicit NoRequestWithResponse(zx_handle_t _client,
                                     uint8_t* _response_bytes,
                                     uint32_t _response_byte_capacity);
      explicit NoRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      NoRequestWithResponse(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse(const NoRequestWithResponse&) = delete;
      NoRequestWithResponse* operator=(NoRequestWithResponse&&) = delete;
      NoRequestWithResponse* operator=(const NoRequestWithResponse&) = delete;
      ~NoRequestWithResponse() = default;

      NoRequestWithResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<NoRequestWithResponseResponse*>(bytes_);
      }
      const NoRequestWithResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const NoRequestWithResponseResponse*>(bytes_);
      }

      NoRequestWithResponseResponse& value() { return *Unwrap(); }
      const NoRequestWithResponseResponse& value() const { return *Unwrap(); }

      NoRequestWithResponseResponse* operator->() { return &value(); }
      const NoRequestWithResponseResponse* operator->() const {
        return &value();
      }

      NoRequestWithResponseResponse& operator*() { return value(); }
      const NoRequestWithResponseResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class WithRequestNoResponse final : public ::fidl::Result {
     public:
      explicit WithRequestNoResponse(zx_handle_t _client,
                                     uint8_t* _request_bytes,
                                     uint32_t _request_byte_capacity,
                                     const ::fidl::StringView& arg);
      explicit WithRequestNoResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestNoResponse(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse(const WithRequestNoResponse&) = delete;
      WithRequestNoResponse* operator=(WithRequestNoResponse&&) = delete;
      WithRequestNoResponse* operator=(const WithRequestNoResponse&) = delete;
      ~WithRequestNoResponse() = default;
    };
    class WithRequestEmptyResponse final : public ::fidl::Result {
     public:
      explicit WithRequestEmptyResponse(zx_handle_t _client,
                                        uint8_t* _request_bytes,
                                        uint32_t _request_byte_capacity,
                                        const ::fidl::StringView& arg,
                                        uint8_t* _response_bytes,
                                        uint32_t _response_byte_capacity);
      explicit WithRequestEmptyResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestEmptyResponse(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse(const WithRequestEmptyResponse&) = delete;
      WithRequestEmptyResponse* operator=(WithRequestEmptyResponse&&) = delete;
      WithRequestEmptyResponse* operator=(const WithRequestEmptyResponse&) =
          delete;
      ~WithRequestEmptyResponse() = default;

      WithRequestEmptyResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<WithRequestEmptyResponseResponse*>(bytes_);
      }
      const WithRequestEmptyResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const WithRequestEmptyResponseResponse*>(
            bytes_);
      }

      WithRequestEmptyResponseResponse& value() { return *Unwrap(); }
      const WithRequestEmptyResponseResponse& value() const {
        return *Unwrap();
      }

      WithRequestEmptyResponseResponse* operator->() { return &value(); }
      const WithRequestEmptyResponseResponse* operator->() const {
        return &value();
      }

      WithRequestEmptyResponseResponse& operator*() { return value(); }
      const WithRequestEmptyResponseResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
    class WithRequestWithResponse final : public ::fidl::Result {
     public:
      explicit WithRequestWithResponse(zx_handle_t _client,
                                       uint8_t* _request_bytes,
                                       uint32_t _request_byte_capacity,
                                       const ::fidl::StringView& arg,
                                       uint8_t* _response_bytes,
                                       uint32_t _response_byte_capacity);
      explicit WithRequestWithResponse(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      WithRequestWithResponse(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse(const WithRequestWithResponse&) = delete;
      WithRequestWithResponse* operator=(WithRequestWithResponse&&) = delete;
      WithRequestWithResponse* operator=(const WithRequestWithResponse&) =
          delete;
      ~WithRequestWithResponse() = default;

      WithRequestWithResponseResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<WithRequestWithResponseResponse*>(bytes_);
      }
      const WithRequestWithResponseResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const WithRequestWithResponseResponse*>(bytes_);
      }

      WithRequestWithResponseResponse& value() { return *Unwrap(); }
      const WithRequestWithResponseResponse& value() const { return *Unwrap(); }

      WithRequestWithResponseResponse* operator->() { return &value(); }
      const WithRequestWithResponseResponse* operator->() const {
        return &value();
      }

      WithRequestWithResponseResponse& operator*() { return value(); }
      const WithRequestWithResponseResponse& operator*() const {
        return value();
      }

     private:
      uint8_t* bytes_;
    };
  };

  class NoRequestNoResponseUnownedRequest final {
   public:
    NoRequestNoResponseUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                      zx_txid_t _txid)
        : message_(_bytes, _byte_size, sizeof(NoRequestNoResponseRequest),
                   nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t
          _request_buffer[sizeof(NoRequestNoResponseRequest)];
      auto& _request = *new (_request_buffer) NoRequestNoResponseRequest(_txid);
      message_.LinearizeAndEncode(NoRequestNoResponseRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    NoRequestNoResponseRequest& Message() {
      return *reinterpret_cast<NoRequestNoResponseRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class NoRequestNoResponseOwnedRequest final {
   public:
    explicit NoRequestNoResponseOwnedRequest(zx_txid_t _txid)
        : message_(bytes_, sizeof(bytes_), _txid) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[NoRequestNoResponseRequest::PrimarySize +
                   NoRequestNoResponseRequest::MaxOutOfLine];
    NoRequestNoResponseUnownedRequest message_;
  };

  class NoRequestEmptyResponseUnownedResponse final {
   public:
    NoRequestEmptyResponseUnownedResponse(uint8_t* _bytes, uint32_t _byte_size)
        : message_(_bytes, _byte_size, sizeof(NoRequestEmptyResponseResponse),
                   nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t
          _response_buffer[sizeof(NoRequestEmptyResponseResponse)];
      auto& _response =
          *new (_response_buffer) NoRequestEmptyResponseResponse();
      message_.LinearizeAndEncode(NoRequestEmptyResponseResponse::Type,
                                  &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    NoRequestEmptyResponseResponse& Message() {
      return *reinterpret_cast<NoRequestEmptyResponseResponse*>(
          message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class NoRequestEmptyResponseOwnedResponse final {
   public:
    explicit NoRequestEmptyResponseOwnedResponse()
        : message_(bytes_, sizeof(bytes_)) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[NoRequestEmptyResponseResponse::PrimarySize +
                   NoRequestEmptyResponseResponse::MaxOutOfLine];
    NoRequestEmptyResponseUnownedResponse message_;
  };

  class NoRequestEmptyResponseUnownedRequest final {
   public:
    NoRequestEmptyResponseUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                         zx_txid_t _txid)
        : message_(_bytes, _byte_size, sizeof(NoRequestEmptyResponseRequest),
                   nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t
          _request_buffer[sizeof(NoRequestEmptyResponseRequest)];
      auto& _request =
          *new (_request_buffer) NoRequestEmptyResponseRequest(_txid);
      message_.LinearizeAndEncode(NoRequestEmptyResponseRequest::Type,
                                  &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    NoRequestEmptyResponseRequest& Message() {
      return *reinterpret_cast<NoRequestEmptyResponseRequest*>(
          message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class NoRequestEmptyResponseOwnedRequest final {
   public:
    explicit NoRequestEmptyResponseOwnedRequest(zx_txid_t _txid)
        : message_(bytes_, sizeof(bytes_), _txid) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[NoRequestEmptyResponseRequest::PrimarySize +
                   NoRequestEmptyResponseRequest::MaxOutOfLine];
    NoRequestEmptyResponseUnownedRequest message_;
  };

  class NoRequestWithResponseUnownedResponse final {
   public:
    NoRequestWithResponseUnownedResponse(uint8_t* _bytes, uint32_t _byte_size,
                                         const ::fidl::StringView& ret)
        : message_(_bytes, _byte_size, sizeof(NoRequestWithResponseResponse),
                   nullptr, 0, 0) {
      FIDL_ALIGNDECL NoRequestWithResponseResponse _response(ret);
      message_.LinearizeAndEncode(NoRequestWithResponseResponse::Type,
                                  &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    NoRequestWithResponseResponse& Message() {
      return *reinterpret_cast<NoRequestWithResponseResponse*>(
          message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class NoRequestWithResponseOwnedResponse final {
   public:
    explicit NoRequestWithResponseOwnedResponse(const ::fidl::StringView& ret)
        : bytes_(std::make_unique<
                 ::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>()),
          message_(bytes_->data(), ZX_CHANNEL_MAX_MSG_BYTES, ret) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
        bytes_;
    NoRequestWithResponseUnownedResponse message_;
  };

  class NoRequestWithResponseUnownedRequest final {
   public:
    NoRequestWithResponseUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                        zx_txid_t _txid)
        : message_(_bytes, _byte_size, sizeof(NoRequestWithResponseRequest),
                   nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t
          _request_buffer[sizeof(NoRequestWithResponseRequest)];
      auto& _request =
          *new (_request_buffer) NoRequestWithResponseRequest(_txid);
      message_.LinearizeAndEncode(NoRequestWithResponseRequest::Type,
                                  &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    NoRequestWithResponseRequest& Message() {
      return *reinterpret_cast<NoRequestWithResponseRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class NoRequestWithResponseOwnedRequest final {
   public:
    explicit NoRequestWithResponseOwnedRequest(zx_txid_t _txid)
        : message_(bytes_, sizeof(bytes_), _txid) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[NoRequestWithResponseRequest::PrimarySize +
                   NoRequestWithResponseRequest::MaxOutOfLine];
    NoRequestWithResponseUnownedRequest message_;
  };

  class WithRequestNoResponseUnownedRequest final {
   public:
    WithRequestNoResponseUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                        zx_txid_t _txid,
                                        const ::fidl::StringView& arg)
        : message_(_bytes, _byte_size, sizeof(WithRequestNoResponseRequest),
                   nullptr, 0, 0) {
      FIDL_ALIGNDECL WithRequestNoResponseRequest _request(_txid, arg);
      message_.LinearizeAndEncode(WithRequestNoResponseRequest::Type,
                                  &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    WithRequestNoResponseRequest& Message() {
      return *reinterpret_cast<WithRequestNoResponseRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class WithRequestNoResponseOwnedRequest final {
   public:
    explicit WithRequestNoResponseOwnedRequest(zx_txid_t _txid,
                                               const ::fidl::StringView& arg)
        : bytes_(std::make_unique<
                 ::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>()),
          message_(bytes_->data(), ZX_CHANNEL_MAX_MSG_BYTES, _txid, arg) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
        bytes_;
    WithRequestNoResponseUnownedRequest message_;
  };

  class WithRequestEmptyResponseUnownedResponse final {
   public:
    WithRequestEmptyResponseUnownedResponse(uint8_t* _bytes,
                                            uint32_t _byte_size)
        : message_(_bytes, _byte_size, sizeof(WithRequestEmptyResponseResponse),
                   nullptr, 0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t
          _response_buffer[sizeof(WithRequestEmptyResponseResponse)];
      auto& _response =
          *new (_response_buffer) WithRequestEmptyResponseResponse();
      message_.LinearizeAndEncode(WithRequestEmptyResponseResponse::Type,
                                  &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    WithRequestEmptyResponseResponse& Message() {
      return *reinterpret_cast<WithRequestEmptyResponseResponse*>(
          message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class WithRequestEmptyResponseOwnedResponse final {
   public:
    explicit WithRequestEmptyResponseOwnedResponse()
        : message_(bytes_, sizeof(bytes_)) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[WithRequestEmptyResponseResponse::PrimarySize +
                   WithRequestEmptyResponseResponse::MaxOutOfLine];
    WithRequestEmptyResponseUnownedResponse message_;
  };

  class WithRequestEmptyResponseUnownedRequest final {
   public:
    WithRequestEmptyResponseUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                           zx_txid_t _txid,
                                           const ::fidl::StringView& arg)
        : message_(_bytes, _byte_size, sizeof(WithRequestEmptyResponseRequest),
                   nullptr, 0, 0) {
      FIDL_ALIGNDECL WithRequestEmptyResponseRequest _request(_txid, arg);
      message_.LinearizeAndEncode(WithRequestEmptyResponseRequest::Type,
                                  &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    WithRequestEmptyResponseRequest& Message() {
      return *reinterpret_cast<WithRequestEmptyResponseRequest*>(
          message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class WithRequestEmptyResponseOwnedRequest final {
   public:
    explicit WithRequestEmptyResponseOwnedRequest(zx_txid_t _txid,
                                                  const ::fidl::StringView& arg)
        : bytes_(std::make_unique<
                 ::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>()),
          message_(bytes_->data(), ZX_CHANNEL_MAX_MSG_BYTES, _txid, arg) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
        bytes_;
    WithRequestEmptyResponseUnownedRequest message_;
  };

  class WithRequestWithResponseUnownedResponse final {
   public:
    WithRequestWithResponseUnownedResponse(uint8_t* _bytes, uint32_t _byte_size,
                                           const ::fidl::StringView& ret)
        : message_(_bytes, _byte_size, sizeof(WithRequestWithResponseResponse),
                   nullptr, 0, 0) {
      FIDL_ALIGNDECL WithRequestWithResponseResponse _response(ret);
      message_.LinearizeAndEncode(WithRequestWithResponseResponse::Type,
                                  &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    WithRequestWithResponseResponse& Message() {
      return *reinterpret_cast<WithRequestWithResponseResponse*>(
          message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class WithRequestWithResponseOwnedResponse final {
   public:
    explicit WithRequestWithResponseOwnedResponse(const ::fidl::StringView& ret)
        : bytes_(std::make_unique<
                 ::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>()),
          message_(bytes_->data(), ZX_CHANNEL_MAX_MSG_BYTES, ret) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
        bytes_;
    WithRequestWithResponseUnownedResponse message_;
  };

  class WithRequestWithResponseUnownedRequest final {
   public:
    WithRequestWithResponseUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                          zx_txid_t _txid,
                                          const ::fidl::StringView& arg)
        : message_(_bytes, _byte_size, sizeof(WithRequestWithResponseRequest),
                   nullptr, 0, 0) {
      FIDL_ALIGNDECL WithRequestWithResponseRequest _request(_txid, arg);
      message_.LinearizeAndEncode(WithRequestWithResponseRequest::Type,
                                  &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    WithRequestWithResponseRequest& Message() {
      return *reinterpret_cast<WithRequestWithResponseRequest*>(
          message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class WithRequestWithResponseOwnedRequest final {
   public:
    explicit WithRequestWithResponseOwnedRequest(zx_txid_t _txid,
                                                 const ::fidl::StringView& arg)
        : bytes_(std::make_unique<
                 ::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>()),
          message_(bytes_->data(), ZX_CHANNEL_MAX_MSG_BYTES, _txid, arg) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
        bytes_;
    WithRequestWithResponseUnownedRequest message_;
  };

  class OnEmptyResponseUnownedResponse final {
   public:
    OnEmptyResponseUnownedResponse(uint8_t* _bytes, uint32_t _byte_size)
        : message_(_bytes, _byte_size, sizeof(OnEmptyResponseResponse), nullptr,
                   0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(OnEmptyResponseResponse)];
      auto& _response = *new (_response_buffer) OnEmptyResponseResponse();
      message_.LinearizeAndEncode(OnEmptyResponseResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    OnEmptyResponseResponse& Message() {
      return *reinterpret_cast<OnEmptyResponseResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class OnEmptyResponseOwnedResponse final {
   public:
    explicit OnEmptyResponseOwnedResponse()
        : message_(bytes_, sizeof(bytes_)) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[OnEmptyResponseResponse::PrimarySize +
                   OnEmptyResponseResponse::MaxOutOfLine];
    OnEmptyResponseUnownedResponse message_;
  };

  class OnWithResponseUnownedResponse final {
   public:
    OnWithResponseUnownedResponse(uint8_t* _bytes, uint32_t _byte_size,
                                  const ::fidl::StringView& ret)
        : message_(_bytes, _byte_size, sizeof(OnWithResponseResponse), nullptr,
                   0, 0) {
      FIDL_ALIGNDECL OnWithResponseResponse _response(ret);
      message_.LinearizeAndEncode(OnWithResponseResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    OnWithResponseResponse& Message() {
      return *reinterpret_cast<OnWithResponseResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class OnWithResponseOwnedResponse final {
   public:
    explicit OnWithResponseOwnedResponse(const ::fidl::StringView& ret)
        : bytes_(std::make_unique<
                 ::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>()),
          message_(bytes_->data(), ZX_CHANNEL_MAX_MSG_BYTES, ret) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    std::unique_ptr<::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>
        bytes_;
    OnWithResponseUnownedResponse message_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 16 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::NoRequestNoResponse NoRequestNoResponse(
        ::zx::unowned_channel _client_end) {
      return ResultOf::NoRequestNoResponse(_client_end->get());
    }

    // Allocates 32 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::NoRequestEmptyResponse NoRequestEmptyResponse(
        ::zx::unowned_channel _client_end) {
      return ResultOf::NoRequestEmptyResponse(_client_end->get());
    }

    // Allocates 16 bytes of request buffer on the stack. Response is
    // heap-allocated.
    static ResultOf::NoRequestWithResponse NoRequestWithResponse(
        ::zx::unowned_channel _client_end) {
      return ResultOf::NoRequestWithResponse(_client_end->get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::NoRequestWithResponse NoRequestWithResponse(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::NoRequestWithResponse(
          _client_end->get(), _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Request is heap-allocated.
    static ResultOf::WithRequestNoResponse WithRequestNoResponse(
        ::zx::unowned_channel _client_end, ::fidl::StringView arg) {
      return ResultOf::WithRequestNoResponse(_client_end->get(), arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::WithRequestNoResponse WithRequestNoResponse(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
        ::fidl::StringView arg) {
      return UnownedResultOf::WithRequestNoResponse(
          _client_end->get(), _request_buffer.data(),
          _request_buffer.capacity(), arg);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is
    // heap-allocated.
    static ResultOf::WithRequestEmptyResponse WithRequestEmptyResponse(
        ::zx::unowned_channel _client_end, ::fidl::StringView arg) {
      return ResultOf::WithRequestEmptyResponse(_client_end->get(), arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::WithRequestEmptyResponse WithRequestEmptyResponse(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
        ::fidl::StringView arg, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::WithRequestEmptyResponse(
          _client_end->get(), _request_buffer.data(),
          _request_buffer.capacity(), arg, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Request is heap-allocated. Response is heap-allocated.
    static ResultOf::WithRequestWithResponse WithRequestWithResponse(
        ::zx::unowned_channel _client_end, ::fidl::StringView arg) {
      return ResultOf::WithRequestWithResponse(_client_end->get(), arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::WithRequestWithResponse WithRequestWithResponse(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
        ::fidl::StringView arg, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::WithRequestWithResponse(
          _client_end->get(), _request_buffer.data(),
          _request_buffer.capacity(), arg, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding handler defined in |EventHandlers|. The return status of
    // the handler function is folded with any transport-level errors and
    // returned.
    static ::fidl::Result HandleEvents(::zx::unowned_channel client_end,
                                       EventHandlers& handlers);
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 16 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::NoRequestNoResponse NoRequestNoResponse() {
      return ResultOf::NoRequestNoResponse(this->channel().get());
    }

    // Allocates 32 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::NoRequestEmptyResponse NoRequestEmptyResponse() {
      return ResultOf::NoRequestEmptyResponse(this->channel().get());
    }

    // Allocates 16 bytes of request buffer on the stack. Response is
    // heap-allocated.
    ResultOf::NoRequestWithResponse NoRequestWithResponse() {
      return ResultOf::NoRequestWithResponse(this->channel().get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::NoRequestWithResponse NoRequestWithResponse(
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::NoRequestWithResponse(
          this->channel().get(), _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Request is heap-allocated.
    ResultOf::WithRequestNoResponse WithRequestNoResponse(
        ::fidl::StringView arg) {
      return ResultOf::WithRequestNoResponse(this->channel().get(), arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::WithRequestNoResponse WithRequestNoResponse(
        ::fidl::BytePart _request_buffer, ::fidl::StringView arg) {
      return UnownedResultOf::WithRequestNoResponse(
          this->channel().get(), _request_buffer.data(),
          _request_buffer.capacity(), arg);
    }

    // Allocates 16 bytes of response buffer on the stack. Request is
    // heap-allocated.
    ResultOf::WithRequestEmptyResponse WithRequestEmptyResponse(
        ::fidl::StringView arg) {
      return ResultOf::WithRequestEmptyResponse(this->channel().get(), arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::WithRequestEmptyResponse WithRequestEmptyResponse(
        ::fidl::BytePart _request_buffer, ::fidl::StringView arg,
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::WithRequestEmptyResponse(
          this->channel().get(), _request_buffer.data(),
          _request_buffer.capacity(), arg, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Request is heap-allocated. Response is heap-allocated.
    ResultOf::WithRequestWithResponse WithRequestWithResponse(
        ::fidl::StringView arg) {
      return ResultOf::WithRequestWithResponse(this->channel().get(), arg);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::WithRequestWithResponse WithRequestWithResponse(
        ::fidl::BytePart _request_buffer, ::fidl::StringView arg,
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::WithRequestWithResponse(
          this->channel().get(), _request_buffer.data(),
          _request_buffer.capacity(), arg, _response_buffer.data(),
          _response_buffer.capacity());
    }

    // Handle all possible events defined in this protocol.
    // Blocks to consume exactly one message from the channel, then call the
    // corresponding handler defined in |EventHandlers|. The return status of
    // the handler function is folded with any transport-level errors and
    // returned.
    ::fidl::Result HandleEvents(EventHandlers& handlers) {
      return Call::HandleEvents(::zx::unowned_channel(channel_), handlers);
    }

   private:
    ::zx::channel channel_;
  };

  struct AsyncEventHandlers;
  class NoRequestEmptyResponseResponseContext;
  class NoRequestWithResponseResponseContext;
  class WithRequestEmptyResponseResponseContext;
  class WithRequestWithResponseResponseContext;
  class ClientImpl;

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = WithAndWithoutRequestResponse;

    using NoRequestNoResponseCompleter = ::fidl::Completer<>;

    virtual void NoRequestNoResponse(
        NoRequestNoResponseCompleter::Sync& _completer) = 0;

    class NoRequestEmptyResponseCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply();

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using NoRequestEmptyResponseCompleter =
        ::fidl::Completer<NoRequestEmptyResponseCompleterBase>;

    virtual void NoRequestEmptyResponse(
        NoRequestEmptyResponseCompleter::Sync& _completer) = 0;

    class NoRequestWithResponseCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(::fidl::StringView ret);
      ::fidl::Result Reply(::fidl::BytePart _buffer, ::fidl::StringView ret);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using NoRequestWithResponseCompleter =
        ::fidl::Completer<NoRequestWithResponseCompleterBase>;

    virtual void NoRequestWithResponse(
        NoRequestWithResponseCompleter::Sync& _completer) = 0;

    using WithRequestNoResponseCompleter = ::fidl::Completer<>;

    virtual void WithRequestNoResponse(
        ::fidl::StringView arg,
        WithRequestNoResponseCompleter::Sync& _completer) = 0;

    class WithRequestEmptyResponseCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply();

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WithRequestEmptyResponseCompleter =
        ::fidl::Completer<WithRequestEmptyResponseCompleterBase>;

    virtual void WithRequestEmptyResponse(
        ::fidl::StringView arg,
        WithRequestEmptyResponseCompleter::Sync& _completer) = 0;

    class WithRequestWithResponseCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(::fidl::StringView ret);
      ::fidl::Result Reply(::fidl::BytePart _buffer, ::fidl::StringView ret);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using WithRequestWithResponseCompleter =
        ::fidl::Completer<WithRequestWithResponseCompleterBase>;

    virtual void WithRequestWithResponse(
        ::fidl::StringView arg,
        WithRequestWithResponseCompleter::Sync& _completer) = 0;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl, fidl_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl, fidl_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl, fidl_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendOnEmptyResponseEvent(::zx::unowned_channel _channel);

  static zx_status_t SendOnWithResponseEvent(::zx::unowned_channel _channel,
                                             ::fidl::StringView ret);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendOnWithResponseEvent(::zx::unowned_channel _channel,
                                             ::fidl::BytePart _buffer,
                                             ::fidl::StringView ret);

  class EventSender;
};

extern "C" const fidl_type_t
    test_name_WithErrorSyntaxResponseAsStructRequestTable;
extern "C" const fidl_type_t
    test_name_WithErrorSyntaxResponseAsStructResponseTable;
extern "C" const fidl_type_t
    test_name_WithErrorSyntaxErrorAsPrimitiveRequestTable;
extern "C" const fidl_type_t
    test_name_WithErrorSyntaxErrorAsPrimitiveResponseTable;
extern "C" const fidl_type_t test_name_WithErrorSyntaxErrorAsEnumRequestTable;
extern "C" const fidl_type_t test_name_WithErrorSyntaxErrorAsEnumResponseTable;

class WithErrorSyntax final {
  WithErrorSyntax() = delete;

 public:
  struct ResponseAsStructResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result result;
    explicit ResponseAsStructResponse(
        ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result& result)
        : result(std::move(result)) {
      _InitHeader();
    }
    ResponseAsStructResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_WithErrorSyntaxResponseAsStructResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 24;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct ResponseAsStructRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit ResponseAsStructRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ResponseAsStructResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct ErrorAsPrimitiveResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result result;
    explicit ErrorAsPrimitiveResponse(
        ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result& result)
        : result(std::move(result)) {
      _InitHeader();
    }
    ErrorAsPrimitiveResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_WithErrorSyntaxErrorAsPrimitiveResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 8;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct ErrorAsPrimitiveRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit ErrorAsPrimitiveRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ErrorAsPrimitiveResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct ErrorAsEnumResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result result;
    explicit ErrorAsEnumResponse(
        ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result& result)
        : result(std::move(result)) {
      _InitHeader();
    }
    ErrorAsEnumResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_WithErrorSyntaxErrorAsEnumResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 8;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;

   private:
    void _InitHeader();
  };
  struct ErrorAsEnumRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit ErrorAsEnumRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = ErrorAsEnumResponse;

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class ResponseAsStruct final : public ::fidl::Result {
     public:
      explicit ResponseAsStruct(zx_handle_t _client);
      ResponseAsStruct(zx_handle_t _client, zx_time_t _deadline);
      explicit ResponseAsStruct(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ResponseAsStruct(ResponseAsStruct&&) = delete;
      ResponseAsStruct(const ResponseAsStruct&) = delete;
      ResponseAsStruct* operator=(ResponseAsStruct&&) = delete;
      ResponseAsStruct* operator=(const ResponseAsStruct&) = delete;
      ~ResponseAsStruct() = default;

      ResponseAsStructResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ResponseAsStructResponse*>(bytes_);
      }
      const ResponseAsStructResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ResponseAsStructResponse*>(bytes_);
      }

      ResponseAsStructResponse& value() { return *Unwrap(); }
      const ResponseAsStructResponse& value() const { return *Unwrap(); }

      ResponseAsStructResponse* operator->() { return &value(); }
      const ResponseAsStructResponse* operator->() const { return &value(); }

      ResponseAsStructResponse& operator*() { return value(); }
      const ResponseAsStructResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[ResponseAsStructResponse::PrimarySize +
                     ResponseAsStructResponse::MaxOutOfLine];
    };
    class ErrorAsPrimitive final : public ::fidl::Result {
     public:
      explicit ErrorAsPrimitive(zx_handle_t _client);
      ErrorAsPrimitive(zx_handle_t _client, zx_time_t _deadline);
      explicit ErrorAsPrimitive(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsPrimitive(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive(const ErrorAsPrimitive&) = delete;
      ErrorAsPrimitive* operator=(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive* operator=(const ErrorAsPrimitive&) = delete;
      ~ErrorAsPrimitive() = default;

      ErrorAsPrimitiveResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ErrorAsPrimitiveResponse*>(bytes_);
      }
      const ErrorAsPrimitiveResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ErrorAsPrimitiveResponse*>(bytes_);
      }

      ErrorAsPrimitiveResponse& value() { return *Unwrap(); }
      const ErrorAsPrimitiveResponse& value() const { return *Unwrap(); }

      ErrorAsPrimitiveResponse* operator->() { return &value(); }
      const ErrorAsPrimitiveResponse* operator->() const { return &value(); }

      ErrorAsPrimitiveResponse& operator*() { return value(); }
      const ErrorAsPrimitiveResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[ErrorAsPrimitiveResponse::PrimarySize +
                     ErrorAsPrimitiveResponse::MaxOutOfLine];
    };
    class ErrorAsEnum final : public ::fidl::Result {
     public:
      explicit ErrorAsEnum(zx_handle_t _client);
      ErrorAsEnum(zx_handle_t _client, zx_time_t _deadline);
      explicit ErrorAsEnum(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsEnum(ErrorAsEnum&&) = delete;
      ErrorAsEnum(const ErrorAsEnum&) = delete;
      ErrorAsEnum* operator=(ErrorAsEnum&&) = delete;
      ErrorAsEnum* operator=(const ErrorAsEnum&) = delete;
      ~ErrorAsEnum() = default;

      ErrorAsEnumResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ErrorAsEnumResponse*>(bytes_);
      }
      const ErrorAsEnumResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ErrorAsEnumResponse*>(bytes_);
      }

      ErrorAsEnumResponse& value() { return *Unwrap(); }
      const ErrorAsEnumResponse& value() const { return *Unwrap(); }

      ErrorAsEnumResponse* operator->() { return &value(); }
      const ErrorAsEnumResponse* operator->() const { return &value(); }

      ErrorAsEnumResponse& operator*() { return value(); }
      const ErrorAsEnumResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[ErrorAsEnumResponse::PrimarySize +
                     ErrorAsEnumResponse::MaxOutOfLine];
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class ResponseAsStruct final : public ::fidl::Result {
     public:
      explicit ResponseAsStruct(zx_handle_t _client, uint8_t* _response_bytes,
                                uint32_t _response_byte_capacity);
      explicit ResponseAsStruct(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ResponseAsStruct(ResponseAsStruct&&) = delete;
      ResponseAsStruct(const ResponseAsStruct&) = delete;
      ResponseAsStruct* operator=(ResponseAsStruct&&) = delete;
      ResponseAsStruct* operator=(const ResponseAsStruct&) = delete;
      ~ResponseAsStruct() = default;

      ResponseAsStructResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ResponseAsStructResponse*>(bytes_);
      }
      const ResponseAsStructResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ResponseAsStructResponse*>(bytes_);
      }

      ResponseAsStructResponse& value() { return *Unwrap(); }
      const ResponseAsStructResponse& value() const { return *Unwrap(); }

      ResponseAsStructResponse* operator->() { return &value(); }
      const ResponseAsStructResponse* operator->() const { return &value(); }

      ResponseAsStructResponse& operator*() { return value(); }
      const ResponseAsStructResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class ErrorAsPrimitive final : public ::fidl::Result {
     public:
      explicit ErrorAsPrimitive(zx_handle_t _client, uint8_t* _response_bytes,
                                uint32_t _response_byte_capacity);
      explicit ErrorAsPrimitive(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsPrimitive(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive(const ErrorAsPrimitive&) = delete;
      ErrorAsPrimitive* operator=(ErrorAsPrimitive&&) = delete;
      ErrorAsPrimitive* operator=(const ErrorAsPrimitive&) = delete;
      ~ErrorAsPrimitive() = default;

      ErrorAsPrimitiveResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ErrorAsPrimitiveResponse*>(bytes_);
      }
      const ErrorAsPrimitiveResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ErrorAsPrimitiveResponse*>(bytes_);
      }

      ErrorAsPrimitiveResponse& value() { return *Unwrap(); }
      const ErrorAsPrimitiveResponse& value() const { return *Unwrap(); }

      ErrorAsPrimitiveResponse* operator->() { return &value(); }
      const ErrorAsPrimitiveResponse* operator->() const { return &value(); }

      ErrorAsPrimitiveResponse& operator*() { return value(); }
      const ErrorAsPrimitiveResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class ErrorAsEnum final : public ::fidl::Result {
     public:
      explicit ErrorAsEnum(zx_handle_t _client, uint8_t* _response_bytes,
                           uint32_t _response_byte_capacity);
      explicit ErrorAsEnum(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      ErrorAsEnum(ErrorAsEnum&&) = delete;
      ErrorAsEnum(const ErrorAsEnum&) = delete;
      ErrorAsEnum* operator=(ErrorAsEnum&&) = delete;
      ErrorAsEnum* operator=(const ErrorAsEnum&) = delete;
      ~ErrorAsEnum() = default;

      ErrorAsEnumResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<ErrorAsEnumResponse*>(bytes_);
      }
      const ErrorAsEnumResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const ErrorAsEnumResponse*>(bytes_);
      }

      ErrorAsEnumResponse& value() { return *Unwrap(); }
      const ErrorAsEnumResponse& value() const { return *Unwrap(); }

      ErrorAsEnumResponse* operator->() { return &value(); }
      const ErrorAsEnumResponse* operator->() const { return &value(); }

      ErrorAsEnumResponse& operator*() { return value(); }
      const ErrorAsEnumResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
  };

  class ResponseAsStructUnownedResponse final {
   public:
    ResponseAsStructUnownedResponse(
        uint8_t* _bytes, uint32_t _byte_size,
        ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result& result)
        : message_(_bytes, _byte_size, sizeof(ResponseAsStructResponse),
                   nullptr, 0, 0) {
      FIDL_ALIGNDECL ResponseAsStructResponse _response(result);
      message_.LinearizeAndEncode(ResponseAsStructResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    ResponseAsStructResponse& Message() {
      return *reinterpret_cast<ResponseAsStructResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class ResponseAsStructOwnedResponse final {
   public:
    explicit ResponseAsStructOwnedResponse(
        ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result& result)
        : message_(bytes_, sizeof(bytes_), result) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[ResponseAsStructResponse::PrimarySize +
                   ResponseAsStructResponse::MaxOutOfLine];
    ResponseAsStructUnownedResponse message_;
  };

  class ResponseAsStructUnownedRequest final {
   public:
    ResponseAsStructUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                   zx_txid_t _txid)
        : message_(_bytes, _byte_size, sizeof(ResponseAsStructRequest), nullptr,
                   0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(ResponseAsStructRequest)];
      auto& _request = *new (_request_buffer) ResponseAsStructRequest(_txid);
      message_.LinearizeAndEncode(ResponseAsStructRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    ResponseAsStructRequest& Message() {
      return *reinterpret_cast<ResponseAsStructRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class ResponseAsStructOwnedRequest final {
   public:
    explicit ResponseAsStructOwnedRequest(zx_txid_t _txid)
        : message_(bytes_, sizeof(bytes_), _txid) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[ResponseAsStructRequest::PrimarySize +
                   ResponseAsStructRequest::MaxOutOfLine];
    ResponseAsStructUnownedRequest message_;
  };

  class ErrorAsPrimitiveUnownedResponse final {
   public:
    ErrorAsPrimitiveUnownedResponse(
        uint8_t* _bytes, uint32_t _byte_size,
        ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result& result)
        : message_(_bytes, _byte_size, sizeof(ErrorAsPrimitiveResponse),
                   nullptr, 0, 0) {
      FIDL_ALIGNDECL ErrorAsPrimitiveResponse _response(result);
      message_.LinearizeAndEncode(ErrorAsPrimitiveResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    ErrorAsPrimitiveResponse& Message() {
      return *reinterpret_cast<ErrorAsPrimitiveResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class ErrorAsPrimitiveOwnedResponse final {
   public:
    explicit ErrorAsPrimitiveOwnedResponse(
        ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result& result)
        : message_(bytes_, sizeof(bytes_), result) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[ErrorAsPrimitiveResponse::PrimarySize +
                   ErrorAsPrimitiveResponse::MaxOutOfLine];
    ErrorAsPrimitiveUnownedResponse message_;
  };

  class ErrorAsPrimitiveUnownedRequest final {
   public:
    ErrorAsPrimitiveUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                                   zx_txid_t _txid)
        : message_(_bytes, _byte_size, sizeof(ErrorAsPrimitiveRequest), nullptr,
                   0, 0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(ErrorAsPrimitiveRequest)];
      auto& _request = *new (_request_buffer) ErrorAsPrimitiveRequest(_txid);
      message_.LinearizeAndEncode(ErrorAsPrimitiveRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    ErrorAsPrimitiveRequest& Message() {
      return *reinterpret_cast<ErrorAsPrimitiveRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class ErrorAsPrimitiveOwnedRequest final {
   public:
    explicit ErrorAsPrimitiveOwnedRequest(zx_txid_t _txid)
        : message_(bytes_, sizeof(bytes_), _txid) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[ErrorAsPrimitiveRequest::PrimarySize +
                   ErrorAsPrimitiveRequest::MaxOutOfLine];
    ErrorAsPrimitiveUnownedRequest message_;
  };

  class ErrorAsEnumUnownedResponse final {
   public:
    ErrorAsEnumUnownedResponse(
        uint8_t* _bytes, uint32_t _byte_size,
        ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result& result)
        : message_(_bytes, _byte_size, sizeof(ErrorAsEnumResponse), nullptr, 0,
                   0) {
      FIDL_ALIGNDECL ErrorAsEnumResponse _response(result);
      message_.LinearizeAndEncode(ErrorAsEnumResponse::Type, &_response);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    ErrorAsEnumResponse& Message() {
      return *reinterpret_cast<ErrorAsEnumResponse*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class ErrorAsEnumOwnedResponse final {
   public:
    explicit ErrorAsEnumOwnedResponse(
        ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result& result)
        : message_(bytes_, sizeof(bytes_), result) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[ErrorAsEnumResponse::PrimarySize +
                   ErrorAsEnumResponse::MaxOutOfLine];
    ErrorAsEnumUnownedResponse message_;
  };

  class ErrorAsEnumUnownedRequest final {
   public:
    ErrorAsEnumUnownedRequest(uint8_t* _bytes, uint32_t _byte_size,
                              zx_txid_t _txid)
        : message_(_bytes, _byte_size, sizeof(ErrorAsEnumRequest), nullptr, 0,
                   0) {
      // Destructors can't be called because it will lead to handle double close
      // (here and in fidl::Encode).
      FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(ErrorAsEnumRequest)];
      auto& _request = *new (_request_buffer) ErrorAsEnumRequest(_txid);
      message_.LinearizeAndEncode(ErrorAsEnumRequest::Type, &_request);
    }

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    ErrorAsEnumRequest& Message() {
      return *reinterpret_cast<ErrorAsEnumRequest*>(message_.bytes());
    }
    ::fidl::OutgoingMessage message_;
  };

  class ErrorAsEnumOwnedRequest final {
   public:
    explicit ErrorAsEnumOwnedRequest(zx_txid_t _txid)
        : message_(bytes_, sizeof(bytes_), _txid) {}

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

    void Write(zx_handle_t client) { message_.Write(client); }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[ErrorAsEnumRequest::PrimarySize +
                   ErrorAsEnumRequest::MaxOutOfLine];
    ErrorAsEnumUnownedRequest message_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 80 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::ResponseAsStruct ResponseAsStruct(
        ::zx::unowned_channel _client_end) {
      return ResultOf::ResponseAsStruct(_client_end->get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::ResponseAsStruct ResponseAsStruct(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::ResponseAsStruct(_client_end->get(),
                                               _response_buffer.data(),
                                               _response_buffer.capacity());
    }

    // Allocates 64 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::ErrorAsPrimitive ErrorAsPrimitive(
        ::zx::unowned_channel _client_end) {
      return ResultOf::ErrorAsPrimitive(_client_end->get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::ErrorAsPrimitive ErrorAsPrimitive(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::ErrorAsPrimitive(_client_end->get(),
                                               _response_buffer.data(),
                                               _response_buffer.capacity());
    }

    // Allocates 64 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::ErrorAsEnum ErrorAsEnum(
        ::zx::unowned_channel _client_end) {
      return ResultOf::ErrorAsEnum(_client_end->get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::ErrorAsEnum ErrorAsEnum(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::ErrorAsEnum(_client_end->get(),
                                          _response_buffer.data(),
                                          _response_buffer.capacity());
    }
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 80 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::ResponseAsStruct ResponseAsStruct() {
      return ResultOf::ResponseAsStruct(this->channel().get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::ResponseAsStruct ResponseAsStruct(
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::ResponseAsStruct(this->channel().get(),
                                               _response_buffer.data(),
                                               _response_buffer.capacity());
    }

    // Allocates 64 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::ErrorAsPrimitive ErrorAsPrimitive() {
      return ResultOf::ErrorAsPrimitive(this->channel().get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::ErrorAsPrimitive ErrorAsPrimitive(
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::ErrorAsPrimitive(this->channel().get(),
                                               _response_buffer.data(),
                                               _response_buffer.capacity());
    }

    // Allocates 64 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::ErrorAsEnum ErrorAsEnum() {
      return ResultOf::ErrorAsEnum(this->channel().get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::ErrorAsEnum ErrorAsEnum(
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::ErrorAsEnum(this->channel().get(),
                                          _response_buffer.data(),
                                          _response_buffer.capacity());
    }

   private:
    ::zx::channel channel_;
  };

  struct AsyncEventHandlers;
  class ResponseAsStructResponseContext;
  class ErrorAsPrimitiveResponseContext;
  class ErrorAsEnumResponseContext;
  class ClientImpl;

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = WithErrorSyntax;

    class ResponseAsStructCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(
          ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result result);
      ::fidl::Result ReplySuccess(int64_t a, int64_t b, int64_t c);
      ::fidl::Result ReplyError(uint32_t error);
      ::fidl::Result Reply(
          ::fidl::BytePart _buffer,
          ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result result);
      ::fidl::Result ReplySuccess(::fidl::BytePart _buffer, int64_t a,
                                  int64_t b, int64_t c);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ResponseAsStructCompleter =
        ::fidl::Completer<ResponseAsStructCompleterBase>;

    virtual void ResponseAsStruct(
        ResponseAsStructCompleter::Sync& _completer) = 0;

    class ErrorAsPrimitiveCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(
          ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result result);
      ::fidl::Result ReplySuccess();
      ::fidl::Result ReplyError(uint32_t error);
      ::fidl::Result Reply(
          ::fidl::BytePart _buffer,
          ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result result);
      ::fidl::Result ReplySuccess(::fidl::BytePart _buffer);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ErrorAsPrimitiveCompleter =
        ::fidl::Completer<ErrorAsPrimitiveCompleterBase>;

    virtual void ErrorAsPrimitive(
        ErrorAsPrimitiveCompleter::Sync& _completer) = 0;

    class ErrorAsEnumCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(
          ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result result);
      ::fidl::Result ReplySuccess();
      ::fidl::Result ReplyError(ErrorEnun error);
      ::fidl::Result Reply(
          ::fidl::BytePart _buffer,
          ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result result);
      ::fidl::Result ReplySuccess(::fidl::BytePart _buffer);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using ErrorAsEnumCompleter = ::fidl::Completer<ErrorAsEnumCompleterBase>;

    virtual void ErrorAsEnum(ErrorAsEnumCompleter::Sync& _completer) = 0;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl, fidl_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl, fidl_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl, fidl_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  class EventSender;
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::obj_type> : public std::true_type {};

template <>
struct IsFidlType<
    ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response>);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response,
             a) == 0);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response,
             b) == 8);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response,
             c) == 16);
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response) ==
    ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Response::
        PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result>
    : public std::true_type {};
template <>
struct IsUnion<::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result>);

template <>
struct IsFidlType<
    ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response>);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response,
             __reserved) == 0);
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response) ==
    ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Response::
        PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result>
    : public std::true_type {};
template <>
struct IsUnion<::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result>);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response>);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response,
             __reserved) == 0);
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response) ==
    ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::Transitional::RequestRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Transitional::RequestRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Transitional::RequestRequest) ==
              ::llcpp::test::name::Transitional::RequestRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Transitional::RequestRequest, x) ==
              16);

template <>
struct IsFidlType<::llcpp::test::name::Transitional::RequestResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Transitional::RequestResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Transitional::RequestResponse) ==
              ::llcpp::test::name::Transitional::RequestResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Transitional::RequestResponse, y) ==
              16);

template <>
struct IsFidlType<::llcpp::test::name::Transitional::OneWayRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Transitional::OneWayRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Transitional::OneWayRequest) ==
              ::llcpp::test::name::Transitional::OneWayRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Transitional::OneWayRequest, x) ==
              16);

template <>
struct IsFidlType<::llcpp::test::name::Transitional::EventResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Transitional::EventResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Transitional::EventResponse) ==
              ::llcpp::test::name::Transitional::EventResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Transitional::EventResponse, x) ==
              16);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MethodARequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MethodARequest>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::ChannelProtocol::MethodARequest) ==
    ::llcpp::test::name::ChannelProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodARequest,
                       a) == 16);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodARequest,
                       b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::EventAResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::EventAResponse>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::ChannelProtocol::EventAResponse) ==
    ::llcpp::test::name::ChannelProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::EventAResponse,
                       a) == 16);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::EventAResponse,
                       b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MethodBRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MethodBRequest>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::ChannelProtocol::MethodBRequest) ==
    ::llcpp::test::name::ChannelProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodBRequest,
                       a) == 16);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodBRequest,
                       b) == 24);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MethodBResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MethodBResponse>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::ChannelProtocol::MethodBResponse) ==
    ::llcpp::test::name::ChannelProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::ChannelProtocol::MethodBResponse,
                       result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MutateSocketRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MutateSocketRequest>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::ChannelProtocol::MutateSocketRequest) ==
    ::llcpp::test::name::ChannelProtocol::MutateSocketRequest::PrimarySize);
static_assert(
    offsetof(::llcpp::test::name::ChannelProtocol::MutateSocketRequest, a) ==
    16);

template <>
struct IsFidlType<::llcpp::test::name::ChannelProtocol::MutateSocketResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::ChannelProtocol::MutateSocketResponse>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::ChannelProtocol::MutateSocketResponse) ==
    ::llcpp::test::name::ChannelProtocol::MutateSocketResponse::PrimarySize);
static_assert(
    offsetof(::llcpp::test::name::ChannelProtocol::MutateSocketResponse, b) ==
    16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      NoRequestNoResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestNoResponseRequest> : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestNoResponseRequest) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  NoRequestNoResponseRequest::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      NoRequestEmptyResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseRequest) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  NoRequestEmptyResponseRequest::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      NoRequestEmptyResponseResponse> : public std::true_type {
};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestEmptyResponseResponse) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  NoRequestEmptyResponseResponse::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      NoRequestWithResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestWithResponseRequest> : public std::true_type {
};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestWithResponseRequest) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  NoRequestWithResponseRequest::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      NoRequestWithResponseResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestWithResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         NoRequestWithResponseResponse) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  NoRequestWithResponseResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::
                           NoRequestWithResponseResponse,
                       ret) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      WithRequestNoResponseRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestNoResponseRequest> : public std::true_type {
};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestNoResponseRequest) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  WithRequestNoResponseRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::
                           WithRequestNoResponseRequest,
                       arg) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      WithRequestEmptyResponseRequest> : public std::true_type {
};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseRequest) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  WithRequestEmptyResponseRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::
                           WithRequestEmptyResponseRequest,
                       arg) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      WithRequestEmptyResponseResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestEmptyResponseResponse) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  WithRequestEmptyResponseResponse::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      WithRequestWithResponseRequest> : public std::true_type {
};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestWithResponseRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestWithResponseRequest) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  WithRequestWithResponseRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::
                           WithRequestWithResponseRequest,
                       arg) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithAndWithoutRequestResponse::
                      WithRequestWithResponseResponse> : public std::true_type {
};
template <>
struct IsFidlMessage<::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestWithResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         WithRequestWithResponseResponse) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  WithRequestWithResponseResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::
                           WithRequestWithResponseResponse,
                       ret) == 16);

template <>
struct IsFidlType<
    ::llcpp::test::name::WithAndWithoutRequestResponse::OnEmptyResponseResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::llcpp::test::name::WithAndWithoutRequestResponse::OnEmptyResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         OnEmptyResponseResponse) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  OnEmptyResponseResponse::PrimarySize);

template <>
struct IsFidlType<
    ::llcpp::test::name::WithAndWithoutRequestResponse::OnWithResponseResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::llcpp::test::name::WithAndWithoutRequestResponse::OnWithResponseResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::WithAndWithoutRequestResponse::
                         OnWithResponseResponse) ==
              ::llcpp::test::name::WithAndWithoutRequestResponse::
                  OnWithResponseResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::WithAndWithoutRequestResponse::
                           OnWithResponseResponse,
                       ret) == 16);

template <>
struct IsFidlType<::llcpp::test::name::ErrorEnun> : public std::true_type {};

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result>
    : public std::true_type {};
template <>
struct IsUnion<::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result>);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax::ResponseAsStructRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::llcpp::test::name::WithErrorSyntax::ResponseAsStructRequest>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax::ResponseAsStructRequest) ==
    ::llcpp::test::name::WithErrorSyntax::ResponseAsStructRequest::PrimarySize);

template <>
struct IsFidlType<
    ::llcpp::test::name::WithErrorSyntax::ResponseAsStructResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::llcpp::test::name::WithErrorSyntax::ResponseAsStructResponse>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax::ResponseAsStructResponse) ==
    ::llcpp::test::name::WithErrorSyntax::ResponseAsStructResponse::
        PrimarySize);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax::ResponseAsStructResponse,
             result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveRequest>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveRequest) ==
    ::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveRequest::PrimarySize);

template <>
struct IsFidlType<
    ::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<
    ::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse) ==
    ::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse::
        PrimarySize);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax::ErrorAsPrimitiveResponse,
             result) == 16);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax::ErrorAsEnumRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithErrorSyntax::ErrorAsEnumRequest>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax::ErrorAsEnumRequest) ==
    ::llcpp::test::name::WithErrorSyntax::ErrorAsEnumRequest::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse) ==
    ::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse::PrimarySize);
static_assert(
    offsetof(::llcpp::test::name::WithErrorSyntax::ErrorAsEnumResponse,
             result) == 16);

}  // namespace fidl

namespace llcpp {

namespace test {
namespace name {

struct Transitional::AsyncEventHandlers {
  ::fit::function<void(EventResponse* msg)> event;
};

class Transitional::RequestResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  RequestResponseContext();

  virtual void OnReply(Transitional::RequestResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class Transitional::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Transitional.Request()|. Allocates 24 bytes of
  // request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result Request(int64_t x, ::fit::callback<void(int64_t y)> _cb);
  // Asynchronous variant of |Transitional.Request()|. Caller provides the
  // backing storage for FIDL message via request buffer. Ownership of _context
  // is given unsafely to the binding until OnError() or OnReply() are called on
  // it.
  ::fidl::Result Request(::fidl::BytePart _request_buffer, int64_t x,
                         RequestResponseContext* _context);
  // Synchronous variant of |Transitional.Request()|. Allocates 48 bytes of
  // message buffer on the stack. No heap allocation necessary.
  ResultOf::Request Request_Sync(int64_t x);

  // Synchronous variant of |Transitional.Request()|. Caller provides the
  // backing storage for FIDL message via request and response buffers.
  UnownedResultOf::Request Request_Sync(::fidl::BytePart _request_buffer,
                                        int64_t x,
                                        ::fidl::BytePart _response_buffer);

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result OneWay(int64_t x);

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::Result OneWay(::fidl::BytePart _request_buffer, int64_t x);

 private:
  friend class ::fidl::Client<Transitional>;

  explicit ClientImpl(AsyncEventHandlers handlers)
      : handlers_(std::move(handlers)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(fidl_msg_t* msg) override;

  AsyncEventHandlers handlers_;
};

class Transitional::EventSender {
 public:
  zx_status_t Event(int64_t x) const {
    if (auto _binding = binding_.lock()) {
      return SendEventEvent(_binding->channel(), std::move(x));
    }
    return ZX_ERR_CANCELED;
  }

  zx_status_t Event(::fidl::BytePart _buffer, int64_t x) const {
    if (auto _binding = binding_.lock()) {
      return SendEventEvent(_binding->channel(), std::move(_buffer),
                            std::move(x));
    }
    return ZX_ERR_CANCELED;
  }

 private:
  friend class ::fidl::ServerBindingRef<Transitional>;

  explicit EventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding> binding_;
};

struct ChannelProtocol::AsyncEventHandlers {
  ::fit::function<void(EventAResponse* msg)> event_a;
};

class ChannelProtocol::MethodBResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  MethodBResponseContext();

  virtual void OnReply(ChannelProtocol::MethodBResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ChannelProtocol::MutateSocketResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  MutateSocketResponseContext();

  virtual void OnReply(ChannelProtocol::MutateSocketResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class ChannelProtocol::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Allocates 32 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result MethodA(int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::Result MethodA(::fidl::BytePart _request_buffer, int64_t a,
                         int64_t b);

  // Asynchronous variant of |ChannelProtocol.MethodB()|. Allocates 32 bytes of
  // request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result MethodB(int64_t a, int64_t b,
                         ::fit::callback<void(int64_t result)> _cb);
  // Asynchronous variant of |ChannelProtocol.MethodB()|. Caller provides the
  // backing storage for FIDL message via request buffer. Ownership of _context
  // is given unsafely to the binding until OnError() or OnReply() are called on
  // it.
  ::fidl::Result MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b,
                         MethodBResponseContext* _context);
  // Synchronous variant of |ChannelProtocol.MethodB()|. Allocates 56 bytes of
  // message buffer on the stack. No heap allocation necessary.
  ResultOf::MethodB MethodB_Sync(int64_t a, int64_t b);

  // Synchronous variant of |ChannelProtocol.MethodB()|. Caller provides the
  // backing storage for FIDL message via request and response buffers.
  UnownedResultOf::MethodB MethodB_Sync(::fidl::BytePart _request_buffer,
                                        int64_t a, int64_t b,
                                        ::fidl::BytePart _response_buffer);

  // Asynchronous variant of |ChannelProtocol.MutateSocket()|. Allocates 24
  // bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result MutateSocket(::zx::socket a,
                              ::fit::callback<void(::zx::socket b)> _cb);
  // Asynchronous variant of |ChannelProtocol.MutateSocket()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // _context is given unsafely to the binding until OnError() or OnReply() are
  // called on it.
  ::fidl::Result MutateSocket(::fidl::BytePart _request_buffer, ::zx::socket a,
                              MutateSocketResponseContext* _context);
  // Synchronous variant of |ChannelProtocol.MutateSocket()|. Allocates 48 bytes
  // of message buffer on the stack. No heap allocation necessary.
  ResultOf::MutateSocket MutateSocket_Sync(::zx::socket a);

  // Synchronous variant of |ChannelProtocol.MutateSocket()|. Caller provides
  // the backing storage for FIDL message via request and response buffers.
  UnownedResultOf::MutateSocket MutateSocket_Sync(
      ::fidl::BytePart _request_buffer, ::zx::socket a,
      ::fidl::BytePart _response_buffer);

 private:
  friend class ::fidl::Client<ChannelProtocol>;

  explicit ClientImpl(AsyncEventHandlers handlers)
      : handlers_(std::move(handlers)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(fidl_msg_t* msg) override;

  AsyncEventHandlers handlers_;
};

class ChannelProtocol::EventSender {
 public:
  zx_status_t EventA(int64_t a, int64_t b) const {
    if (auto _binding = binding_.lock()) {
      return SendEventAEvent(_binding->channel(), std::move(a), std::move(b));
    }
    return ZX_ERR_CANCELED;
  }

  zx_status_t EventA(::fidl::BytePart _buffer, int64_t a, int64_t b) const {
    if (auto _binding = binding_.lock()) {
      return SendEventAEvent(_binding->channel(), std::move(_buffer),
                             std::move(a), std::move(b));
    }
    return ZX_ERR_CANCELED;
  }

 private:
  friend class ::fidl::ServerBindingRef<ChannelProtocol>;

  explicit EventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding> binding_;
};

struct WithAndWithoutRequestResponse::AsyncEventHandlers {
  ::fit::function<void()> on_empty_response;

  ::fit::function<void(OnWithResponseResponse* msg)> on_with_response;
};

class WithAndWithoutRequestResponse::NoRequestEmptyResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  NoRequestEmptyResponseResponseContext();

  virtual void OnReply(
      WithAndWithoutRequestResponse::NoRequestEmptyResponseResponse*
          message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class WithAndWithoutRequestResponse::NoRequestWithResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  NoRequestWithResponseResponseContext();

  virtual void OnReply(
      WithAndWithoutRequestResponse::NoRequestWithResponseResponse*
          message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class WithAndWithoutRequestResponse::WithRequestEmptyResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  WithRequestEmptyResponseResponseContext();

  virtual void OnReply(
      WithAndWithoutRequestResponse::WithRequestEmptyResponseResponse*
          message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class WithAndWithoutRequestResponse::WithRequestWithResponseResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  WithRequestWithResponseResponseContext();

  virtual void OnReply(
      WithAndWithoutRequestResponse::WithRequestWithResponseResponse*
          message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class WithAndWithoutRequestResponse::ClientImpl final
    : private ::fidl::internal::ClientBase {
 public:
  // Allocates 16 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result NoRequestNoResponse();

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestEmptyResponse()|. Allocates 16
  // bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result NoRequestEmptyResponse(::fit::callback<void()> _cb);
  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestEmptyResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // _context is given unsafely to the binding until OnError() or OnReply() are
  // called on it.
  ::fidl::Result NoRequestEmptyResponse(
      NoRequestEmptyResponseResponseContext* _context);
  // Synchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestEmptyResponse()|. Allocates 32
  // bytes of message buffer on the stack. No heap allocation necessary.
  ResultOf::NoRequestEmptyResponse NoRequestEmptyResponse_Sync();

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Allocates 16 bytes
  // of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result NoRequestWithResponse(
      ::fit::callback<void(::fidl::StringView ret)> _cb);
  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // _context is given unsafely to the binding until OnError() or OnReply() are
  // called on it.
  ::fidl::Result NoRequestWithResponse(
      NoRequestWithResponseResponseContext* _context);
  // Synchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Allocates 16 bytes
  // of request buffer on the stack. Response is heap-allocated.
  ResultOf::NoRequestWithResponse NoRequestWithResponse_Sync();

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.NoRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request and response buffers.
  UnownedResultOf::NoRequestWithResponse NoRequestWithResponse_Sync(
      ::fidl::BytePart _response_buffer);

  // Request is heap-allocated.
  ::fidl::Result WithRequestNoResponse(::fidl::StringView arg);

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::Result WithRequestNoResponse(::fidl::BytePart _request_buffer,
                                       ::fidl::StringView arg);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. The request and
  // callback are allocated on the heap.
  ::fidl::Result WithRequestEmptyResponse(::fidl::StringView arg,
                                          ::fit::callback<void()> _cb);
  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // _context is given unsafely to the binding until OnError() or OnReply() are
  // called on it.
  ::fidl::Result WithRequestEmptyResponse(
      ::fidl::BytePart _request_buffer, ::fidl::StringView arg,
      WithRequestEmptyResponseResponseContext* _context);
  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. Allocates 16
  // bytes of response buffer on the stack. Request is heap-allocated.
  ResultOf::WithRequestEmptyResponse WithRequestEmptyResponse_Sync(
      ::fidl::StringView arg);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestEmptyResponse()|. Caller provides
  // the backing storage for FIDL message via request and response buffers.
  UnownedResultOf::WithRequestEmptyResponse WithRequestEmptyResponse_Sync(
      ::fidl::BytePart _request_buffer, ::fidl::StringView arg,
      ::fidl::BytePart _response_buffer);

  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. The request and
  // callback are allocated on the heap.
  ::fidl::Result WithRequestWithResponse(
      ::fidl::StringView arg,
      ::fit::callback<void(::fidl::StringView ret)> _cb);
  // Asynchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // _context is given unsafely to the binding until OnError() or OnReply() are
  // called on it.
  ::fidl::Result WithRequestWithResponse(
      ::fidl::BytePart _request_buffer, ::fidl::StringView arg,
      WithRequestWithResponseResponseContext* _context);
  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. Request is
  // heap-allocated. Response is heap-allocated.
  ResultOf::WithRequestWithResponse WithRequestWithResponse_Sync(
      ::fidl::StringView arg);

  // Synchronous variant of
  // |WithAndWithoutRequestResponse.WithRequestWithResponse()|. Caller provides
  // the backing storage for FIDL message via request and response buffers.
  UnownedResultOf::WithRequestWithResponse WithRequestWithResponse_Sync(
      ::fidl::BytePart _request_buffer, ::fidl::StringView arg,
      ::fidl::BytePart _response_buffer);

 private:
  friend class ::fidl::Client<WithAndWithoutRequestResponse>;

  explicit ClientImpl(AsyncEventHandlers handlers)
      : handlers_(std::move(handlers)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(fidl_msg_t* msg) override;

  AsyncEventHandlers handlers_;
};

class WithAndWithoutRequestResponse::EventSender {
 public:
  zx_status_t OnEmptyResponse() const {
    if (auto _binding = binding_.lock()) {
      return SendOnEmptyResponseEvent(_binding->channel());
    }
    return ZX_ERR_CANCELED;
  }

  zx_status_t OnWithResponse(::fidl::StringView ret) const {
    if (auto _binding = binding_.lock()) {
      return SendOnWithResponseEvent(_binding->channel(), std::move(ret));
    }
    return ZX_ERR_CANCELED;
  }

  zx_status_t OnWithResponse(::fidl::BytePart _buffer,
                             ::fidl::StringView ret) const {
    if (auto _binding = binding_.lock()) {
      return SendOnWithResponseEvent(_binding->channel(), std::move(_buffer),
                                     std::move(ret));
    }
    return ZX_ERR_CANCELED;
  }

 private:
  friend class ::fidl::ServerBindingRef<WithAndWithoutRequestResponse>;

  explicit EventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding> binding_;
};

struct WithErrorSyntax::AsyncEventHandlers {};

class WithErrorSyntax::ResponseAsStructResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  ResponseAsStructResponseContext();

  virtual void OnReply(WithErrorSyntax::ResponseAsStructResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class WithErrorSyntax::ErrorAsPrimitiveResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  ErrorAsPrimitiveResponseContext();

  virtual void OnReply(WithErrorSyntax::ErrorAsPrimitiveResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class WithErrorSyntax::ErrorAsEnumResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  ErrorAsEnumResponseContext();

  virtual void OnReply(WithErrorSyntax::ErrorAsEnumResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class WithErrorSyntax::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |WithErrorSyntax.ResponseAsStruct()|. Allocates 16
  // bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result ResponseAsStruct(
      ::fit::callback<void(
          ::llcpp::test::name::WithErrorSyntax_ResponseAsStruct_Result result)>
          _cb);
  // Asynchronous variant of |WithErrorSyntax.ResponseAsStruct()|. Caller
  // provides the backing storage for FIDL message via request buffer. Ownership
  // of _context is given unsafely to the binding until OnError() or OnReply()
  // are called on it.
  ::fidl::Result ResponseAsStruct(ResponseAsStructResponseContext* _context);
  // Synchronous variant of |WithErrorSyntax.ResponseAsStruct()|. Allocates 80
  // bytes of message buffer on the stack. No heap allocation necessary.
  ResultOf::ResponseAsStruct ResponseAsStruct_Sync();

  // Synchronous variant of |WithErrorSyntax.ResponseAsStruct()|. Caller
  // provides the backing storage for FIDL message via request and response
  // buffers.
  UnownedResultOf::ResponseAsStruct ResponseAsStruct_Sync(
      ::fidl::BytePart _response_buffer);

  // Asynchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|. Allocates 16
  // bytes of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result ErrorAsPrimitive(
      ::fit::callback<void(
          ::llcpp::test::name::WithErrorSyntax_ErrorAsPrimitive_Result result)>
          _cb);
  // Asynchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|. Caller
  // provides the backing storage for FIDL message via request buffer. Ownership
  // of _context is given unsafely to the binding until OnError() or OnReply()
  // are called on it.
  ::fidl::Result ErrorAsPrimitive(ErrorAsPrimitiveResponseContext* _context);
  // Synchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|. Allocates 64
  // bytes of message buffer on the stack. No heap allocation necessary.
  ResultOf::ErrorAsPrimitive ErrorAsPrimitive_Sync();

  // Synchronous variant of |WithErrorSyntax.ErrorAsPrimitive()|. Caller
  // provides the backing storage for FIDL message via request and response
  // buffers.
  UnownedResultOf::ErrorAsPrimitive ErrorAsPrimitive_Sync(
      ::fidl::BytePart _response_buffer);

  // Asynchronous variant of |WithErrorSyntax.ErrorAsEnum()|. Allocates 16 bytes
  // of request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result ErrorAsEnum(
      ::fit::callback<
          void(::llcpp::test::name::WithErrorSyntax_ErrorAsEnum_Result result)>
          _cb);
  // Asynchronous variant of |WithErrorSyntax.ErrorAsEnum()|. Caller provides
  // the backing storage for FIDL message via request buffer. Ownership of
  // _context is given unsafely to the binding until OnError() or OnReply() are
  // called on it.
  ::fidl::Result ErrorAsEnum(ErrorAsEnumResponseContext* _context);
  // Synchronous variant of |WithErrorSyntax.ErrorAsEnum()|. Allocates 64 bytes
  // of message buffer on the stack. No heap allocation necessary.
  ResultOf::ErrorAsEnum ErrorAsEnum_Sync();

  // Synchronous variant of |WithErrorSyntax.ErrorAsEnum()|. Caller provides the
  // backing storage for FIDL message via request and response buffers.
  UnownedResultOf::ErrorAsEnum ErrorAsEnum_Sync(
      ::fidl::BytePart _response_buffer);

 private:
  friend class ::fidl::Client<WithErrorSyntax>;

  explicit ClientImpl(AsyncEventHandlers handlers)
      : handlers_(std::move(handlers)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(fidl_msg_t* msg) override;

  AsyncEventHandlers handlers_;
};

class WithErrorSyntax::EventSender {
 public:
 private:
  friend class ::fidl::ServerBindingRef<WithErrorSyntax>;

  explicit EventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding> binding_;
};

}  // namespace name
}  // namespace test
}  // namespace llcpp
