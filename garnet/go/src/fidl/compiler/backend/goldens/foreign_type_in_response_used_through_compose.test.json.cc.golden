// WARNING: This file is machine generated by fidlgen.

#include <foreign_type_in_response_used_through_compose.test.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace top {

#ifdef __Fuchsia__
namespace {

extern "C" const fidl_type_t top_TopGetFooRequestTable;
extern "C" const fidl_type_t top_TopGetFooResponseTable;

}  // namespace

Top::~Top() = default;

const fidl_type_t* Top_RequestDecoder::GetType(uint64_t ordinal,
                                               bool* out_needs_response) {
  switch (ordinal) {
    case internal::kTop_GetFoo_Ordinal:
    case internal::kTop_GetFoo_GenOrdinal:
      *out_needs_response = true;
      return &top_TopGetFooRequestTable;
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* Top_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case internal::kTop_GetFoo_Ordinal:
    case internal::kTop_GetFoo_GenOrdinal:
      return &top_TopGetFooResponseTable;
    default:
      return nullptr;
  }
}

Top_EventSender::~Top_EventSender() = default;

Top_Sync::~Top_Sync() = default;

Top_Proxy::Top_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

Top_Proxy::~Top_Proxy() = default;

zx_status_t Top_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

namespace {

class Top_GetFoo_ResponseHandler final
    : public ::fidl::internal::MessageHandler {
 public:
  Top_GetFoo_ResponseHandler(Top::GetFooCallback callback)
      : callback_(std::move(callback)) {
    ZX_DEBUG_ASSERT_MSG(callback_,
                        "Callback must not be empty for Top::GetFoo\n");
  }

  zx_status_t OnMessage(::fidl::Message message) override {
    const char* error_msg = nullptr;
    zx_status_t status =
        message.Decode(&top_TopGetFooResponseTable, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(message, &top_TopGetFooResponseTable,
                                 error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<::bottom::Foo>(&decoder, 16);
    callback_(std::move(arg0));
    return ZX_OK;
  }

 private:
  Top::GetFooCallback callback_;

  Top_GetFoo_ResponseHandler(const Top_GetFoo_ResponseHandler&) = delete;
  Top_GetFoo_ResponseHandler& operator=(const Top_GetFoo_ResponseHandler&) =
      delete;
};

}  // namespace
void Top_Proxy::GetFoo(GetFooCallback callback) {
  ::fidl::Encoder _encoder(internal::kTop_GetFoo_GenOrdinal);
  controller_->Send(
      &top_TopGetFooRequestTable, Top_RequestEncoder::GetFoo(&_encoder),
      std::make_unique<Top_GetFoo_ResponseHandler>(std::move(callback)));
}

Top_Stub::Top_Stub(Top_clazz* impl) : impl_(impl) { (void)impl_; }

Top_Stub::~Top_Stub() = default;

namespace {

class Top_GetFoo_Responder final {
 public:
  Top_GetFoo_Responder(::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()(::bottom::Foo foo) {
    ::fidl::Encoder _encoder(internal::kTop_GetFoo_GenOrdinal);
    response_.Send(&top_TopGetFooResponseTable,
                   Top_ResponseEncoder::GetFoo(&_encoder, &foo));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

}  // namespace

zx_status_t Top_Stub::Dispatch_(::fidl::Message message,
                                ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type =
      Top_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case internal::kTop_GetFoo_Ordinal:
    case internal::kTop_GetFoo_GenOrdinal: {
      impl_->GetFoo(Top_GetFoo_Responder(std::move(response)));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

Top_SyncProxy::Top_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

Top_SyncProxy::~Top_SyncProxy() = default;

zx_status_t Top_SyncProxy::GetFoo(::bottom::Foo* out_foo) {
  ::fidl::Encoder _encoder(internal::kTop_GetFoo_GenOrdinal);
  ::fidl::MessageBuffer buffer_;
  ::fidl::Message response_ = buffer_.CreateEmptyMessage();
  zx_status_t status_ =
      proxy_.Call(&top_TopGetFooRequestTable, &top_TopGetFooResponseTable,
                  Top_RequestEncoder::GetFoo(&_encoder), &response_);
  if (status_ != ZX_OK) return status_;
  ::fidl::Decoder decoder_(std::move(response_));
  *out_foo = ::fidl::DecodeAs<::bottom::Foo>(&decoder_, 16);
  return ZX_OK;
}

#endif  // __Fuchsia__

}  // namespace top
