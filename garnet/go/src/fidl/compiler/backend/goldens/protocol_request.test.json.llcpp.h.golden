// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/fit/optional.h>

#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#include <lib/zx/channel.h>
#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

class Parent;
class Child;

extern "C" const fidl_type_t test_name_ParentGetChildRequestTable;
extern "C" const fidl_type_t test_name_ParentGetChildResponseTable;
extern "C" const fidl_type_t test_name_ParentGetChildRequestRequestTable;
extern "C" const fidl_type_t test_name_ParentGetChildRequestResponseTable;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestTable;
extern "C" const fidl_type_t test_name_ParentTakeChildResponseTable;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestRequestTable;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestResponseTable;

class Parent final {
  Parent() = delete;

 public:
  struct GetChildResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel c;
    explicit GetChildResponse(::zx::channel& c) : c(std::move(c)) {
      _InitHeader();
    }
    GetChildResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_ParentGetChildResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
    void _CloseHandles();

    class UnownedOutgoingMessage final {
     public:
      UnownedOutgoingMessage(uint8_t* _bytes, uint32_t _byte_size,
                             ::zx::channel& c)
          : message_(_bytes, _byte_size, sizeof(GetChildResponse), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        // Destructors can't be called because it will lead to handle double
        // close (here and in fidl::Encode).
        FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(GetChildResponse)];
        auto& _response = *new (_response_buffer) GetChildResponse(c);
        message_.LinearizeAndEncode<GetChildResponse>(&_response);
      }
      UnownedOutgoingMessage(uint8_t* bytes, uint32_t byte_size,
                             GetChildResponse* response)
          : message_(bytes, byte_size, sizeof(GetChildResponse), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        message_.LinearizeAndEncode<GetChildResponse>(response);
      }
      UnownedOutgoingMessage(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage(UnownedOutgoingMessage&&) = delete;
      UnownedOutgoingMessage* operator=(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage* operator=(UnownedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      GetChildResponse& Message() {
        return *reinterpret_cast<GetChildResponse*>(message_.bytes());
      }
      zx_handle_t handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
      ::fidl::OutgoingMessage message_;
    };

    class OwnedOutgoingMessage final {
     public:
      explicit OwnedOutgoingMessage(::zx::channel& c)
          : message_(bytes_, sizeof(bytes_), c) {}
      explicit OwnedOutgoingMessage(GetChildResponse* response)
          : message_(bytes_, sizeof(bytes_), response) {}
      OwnedOutgoingMessage(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage(OwnedOutgoingMessage&&) = delete;
      OwnedOutgoingMessage* operator=(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage* operator=(OwnedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[PrimarySize + MaxOutOfLine];
      UnownedOutgoingMessage message_;
    };

   private:
    void _InitHeader();
  };
  struct GetChildRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit GetChildRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetChildResponse;

    class UnownedOutgoingMessage final {
     public:
      UnownedOutgoingMessage(uint8_t* _bytes, uint32_t _byte_size,
                             zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(GetChildRequest), nullptr, 0,
                     0) {
        // Destructors can't be called because it will lead to handle double
        // close (here and in fidl::Encode).
        FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(GetChildRequest)];
        auto& _request = *new (_request_buffer) GetChildRequest(_txid);
        message_.LinearizeAndEncode<GetChildRequest>(&_request);
      }
      UnownedOutgoingMessage(uint8_t* bytes, uint32_t byte_size,
                             GetChildRequest* request)
          : message_(bytes, byte_size, sizeof(GetChildRequest), nullptr, 0, 0) {
        message_.LinearizeAndEncode<GetChildRequest>(request);
      }
      UnownedOutgoingMessage(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage(UnownedOutgoingMessage&&) = delete;
      UnownedOutgoingMessage* operator=(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage* operator=(UnownedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      GetChildRequest& Message() {
        return *reinterpret_cast<GetChildRequest*>(message_.bytes());
      }
      ::fidl::OutgoingMessage message_;
    };

    class OwnedOutgoingMessage final {
     public:
      explicit OwnedOutgoingMessage(zx_txid_t _txid)
          : message_(bytes_, sizeof(bytes_), _txid) {}
      explicit OwnedOutgoingMessage(GetChildRequest* request)
          : message_(bytes_, sizeof(bytes_), request) {}
      OwnedOutgoingMessage(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage(OwnedOutgoingMessage&&) = delete;
      OwnedOutgoingMessage* operator=(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage* operator=(OwnedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[PrimarySize + MaxOutOfLine];
      UnownedOutgoingMessage message_;
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct GetChildRequestResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel r;
    explicit GetChildRequestResponse(::zx::channel& r) : r(std::move(r)) {
      _InitHeader();
    }
    GetChildRequestResponse() { _InitHeader(); }

    static constexpr const fidl_type_t* Type =
        &test_name_ParentGetChildRequestResponseTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
    void _CloseHandles();

    class UnownedOutgoingMessage final {
     public:
      UnownedOutgoingMessage(uint8_t* _bytes, uint32_t _byte_size,
                             ::zx::channel& r)
          : message_(_bytes, _byte_size, sizeof(GetChildRequestResponse),
                     handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        // Destructors can't be called because it will lead to handle double
        // close (here and in fidl::Encode).
        FIDL_ALIGNDECL uint8_t
            _response_buffer[sizeof(GetChildRequestResponse)];
        auto& _response = *new (_response_buffer) GetChildRequestResponse(r);
        message_.LinearizeAndEncode<GetChildRequestResponse>(&_response);
      }
      UnownedOutgoingMessage(uint8_t* bytes, uint32_t byte_size,
                             GetChildRequestResponse* response)
          : message_(bytes, byte_size, sizeof(GetChildRequestResponse),
                     handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        message_.LinearizeAndEncode<GetChildRequestResponse>(response);
      }
      UnownedOutgoingMessage(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage(UnownedOutgoingMessage&&) = delete;
      UnownedOutgoingMessage* operator=(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage* operator=(UnownedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      GetChildRequestResponse& Message() {
        return *reinterpret_cast<GetChildRequestResponse*>(message_.bytes());
      }
      zx_handle_t handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
      ::fidl::OutgoingMessage message_;
    };

    class OwnedOutgoingMessage final {
     public:
      explicit OwnedOutgoingMessage(::zx::channel& r)
          : message_(bytes_, sizeof(bytes_), r) {}
      explicit OwnedOutgoingMessage(GetChildRequestResponse* response)
          : message_(bytes_, sizeof(bytes_), response) {}
      OwnedOutgoingMessage(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage(OwnedOutgoingMessage&&) = delete;
      OwnedOutgoingMessage* operator=(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage* operator=(OwnedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[PrimarySize + MaxOutOfLine];
      UnownedOutgoingMessage message_;
    };

   private:
    void _InitHeader();
  };
  struct GetChildRequestRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    explicit GetChildRequestRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &::fidl::_llcpp_coding_AnyZeroArgMessageTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 16;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 16;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = GetChildRequestResponse;

    class UnownedOutgoingMessage final {
     public:
      UnownedOutgoingMessage(uint8_t* _bytes, uint32_t _byte_size,
                             zx_txid_t _txid)
          : message_(_bytes, _byte_size, sizeof(GetChildRequestRequest),
                     nullptr, 0, 0) {
        // Destructors can't be called because it will lead to handle double
        // close (here and in fidl::Encode).
        FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(GetChildRequestRequest)];
        auto& _request = *new (_request_buffer) GetChildRequestRequest(_txid);
        message_.LinearizeAndEncode<GetChildRequestRequest>(&_request);
      }
      UnownedOutgoingMessage(uint8_t* bytes, uint32_t byte_size,
                             GetChildRequestRequest* request)
          : message_(bytes, byte_size, sizeof(GetChildRequestRequest), nullptr,
                     0, 0) {
        message_.LinearizeAndEncode<GetChildRequestRequest>(request);
      }
      UnownedOutgoingMessage(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage(UnownedOutgoingMessage&&) = delete;
      UnownedOutgoingMessage* operator=(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage* operator=(UnownedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      GetChildRequestRequest& Message() {
        return *reinterpret_cast<GetChildRequestRequest*>(message_.bytes());
      }
      ::fidl::OutgoingMessage message_;
    };

    class OwnedOutgoingMessage final {
     public:
      explicit OwnedOutgoingMessage(zx_txid_t _txid)
          : message_(bytes_, sizeof(bytes_), _txid) {}
      explicit OwnedOutgoingMessage(GetChildRequestRequest* request)
          : message_(bytes_, sizeof(bytes_), request) {}
      OwnedOutgoingMessage(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage(OwnedOutgoingMessage&&) = delete;
      OwnedOutgoingMessage* operator=(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage* operator=(OwnedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[PrimarySize + MaxOutOfLine];
      UnownedOutgoingMessage message_;
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct TakeChildRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel c;
    explicit TakeChildRequest(zx_txid_t _txid, ::zx::channel& c)
        : c(std::move(c)) {
      _InitHeader(_txid);
    }
    explicit TakeChildRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &test_name_ParentTakeChildRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedOutgoingMessage final {
     public:
      UnownedOutgoingMessage(uint8_t* _bytes, uint32_t _byte_size,
                             zx_txid_t _txid, ::zx::channel& c)
          : message_(_bytes, _byte_size, sizeof(TakeChildRequest), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        // Destructors can't be called because it will lead to handle double
        // close (here and in fidl::Encode).
        FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(TakeChildRequest)];
        auto& _request = *new (_request_buffer) TakeChildRequest(_txid, c);
        message_.LinearizeAndEncode<TakeChildRequest>(&_request);
      }
      UnownedOutgoingMessage(uint8_t* bytes, uint32_t byte_size,
                             TakeChildRequest* request)
          : message_(bytes, byte_size, sizeof(TakeChildRequest), handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        message_.LinearizeAndEncode<TakeChildRequest>(request);
      }
      UnownedOutgoingMessage(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage(UnownedOutgoingMessage&&) = delete;
      UnownedOutgoingMessage* operator=(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage* operator=(UnownedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      TakeChildRequest& Message() {
        return *reinterpret_cast<TakeChildRequest*>(message_.bytes());
      }
      zx_handle_t handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
      ::fidl::OutgoingMessage message_;
    };

    class OwnedOutgoingMessage final {
     public:
      explicit OwnedOutgoingMessage(zx_txid_t _txid, ::zx::channel& c)
          : message_(bytes_, sizeof(bytes_), _txid, c) {}
      explicit OwnedOutgoingMessage(TakeChildRequest* request)
          : message_(bytes_, sizeof(bytes_), request) {}
      OwnedOutgoingMessage(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage(OwnedOutgoingMessage&&) = delete;
      OwnedOutgoingMessage* operator=(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage* operator=(OwnedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[PrimarySize + MaxOutOfLine];
      UnownedOutgoingMessage message_;
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  struct TakeChildRequestRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::zx::channel r;
    explicit TakeChildRequestRequest(zx_txid_t _txid, ::zx::channel& r)
        : r(std::move(r)) {
      _InitHeader(_txid);
    }
    explicit TakeChildRequestRequest(zx_txid_t _txid) { _InitHeader(_txid); }

    static constexpr const fidl_type_t* Type =
        &test_name_ParentTakeChildRequestRequestTable;
    static constexpr uint32_t MaxNumHandles = 1;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
    static constexpr uint32_t AltPrimarySize = 24;
    static constexpr uint32_t AltMaxOutOfLine = 0;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = false;
    static constexpr bool IsResource = true;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;

    class UnownedOutgoingMessage final {
     public:
      UnownedOutgoingMessage(uint8_t* _bytes, uint32_t _byte_size,
                             zx_txid_t _txid, ::zx::channel& r)
          : message_(_bytes, _byte_size, sizeof(TakeChildRequestRequest),
                     handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        // Destructors can't be called because it will lead to handle double
        // close (here and in fidl::Encode).
        FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(TakeChildRequestRequest)];
        auto& _request =
            *new (_request_buffer) TakeChildRequestRequest(_txid, r);
        message_.LinearizeAndEncode<TakeChildRequestRequest>(&_request);
      }
      UnownedOutgoingMessage(uint8_t* bytes, uint32_t byte_size,
                             TakeChildRequestRequest* request)
          : message_(bytes, byte_size, sizeof(TakeChildRequestRequest),
                     handles_,
                     std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles), 0) {
        message_.LinearizeAndEncode<TakeChildRequestRequest>(request);
      }
      UnownedOutgoingMessage(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage(UnownedOutgoingMessage&&) = delete;
      UnownedOutgoingMessage* operator=(const UnownedOutgoingMessage&) = delete;
      UnownedOutgoingMessage* operator=(UnownedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.status() == ZX_OK; }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      TakeChildRequestRequest& Message() {
        return *reinterpret_cast<TakeChildRequestRequest*>(message_.bytes());
      }
      zx_handle_t handles_[std::min(ZX_CHANNEL_MAX_MSG_HANDLES, MaxNumHandles)];
      ::fidl::OutgoingMessage message_;
    };

    class OwnedOutgoingMessage final {
     public:
      explicit OwnedOutgoingMessage(zx_txid_t _txid, ::zx::channel& r)
          : message_(bytes_, sizeof(bytes_), _txid, r) {}
      explicit OwnedOutgoingMessage(TakeChildRequestRequest* request)
          : message_(bytes_, sizeof(bytes_), request) {}
      OwnedOutgoingMessage(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage(OwnedOutgoingMessage&&) = delete;
      OwnedOutgoingMessage* operator=(const OwnedOutgoingMessage&) = delete;
      OwnedOutgoingMessage* operator=(OwnedOutgoingMessage&&) = delete;

      zx_status_t status() const { return message_.status(); }
      bool ok() const { return message_.ok(); }
      const char* error() const { return message_.error(); }

      ::fidl::OutgoingMessage& GetOutgoingMessage() {
        return message_.GetOutgoingMessage();
      }

      void Write(zx_handle_t client) { message_.Write(client); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[PrimarySize + MaxOutOfLine];
      UnownedOutgoingMessage message_;
    };

   private:
    void _InitHeader(zx_txid_t _txid);
  };

  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
    class GetChild final : public ::fidl::Result {
     public:
      explicit GetChild(zx_handle_t _client);
      GetChild(zx_handle_t _client, zx_time_t _deadline);
      explicit GetChild(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      GetChild(GetChild&&) = delete;
      GetChild(const GetChild&) = delete;
      GetChild* operator=(GetChild&&) = delete;
      GetChild* operator=(const GetChild&) = delete;
      ~GetChild() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      GetChildResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetChildResponse*>(bytes_);
      }
      const GetChildResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const GetChildResponse*>(bytes_);
      }

      GetChildResponse& value() { return *Unwrap(); }
      const GetChildResponse& value() const { return *Unwrap(); }

      GetChildResponse* operator->() { return &value(); }
      const GetChildResponse* operator->() const { return &value(); }

      GetChildResponse& operator*() { return value(); }
      const GetChildResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[GetChildResponse::PrimarySize +
                     GetChildResponse::MaxOutOfLine];
    };
    class GetChildRequest final : public ::fidl::Result {
     public:
      explicit GetChildRequest(zx_handle_t _client);
      GetChildRequest(zx_handle_t _client, zx_time_t _deadline);
      explicit GetChildRequest(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      GetChildRequest(GetChildRequest&&) = delete;
      GetChildRequest(const GetChildRequest&) = delete;
      GetChildRequest* operator=(GetChildRequest&&) = delete;
      GetChildRequest* operator=(const GetChildRequest&) = delete;
      ~GetChildRequest() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      GetChildRequestResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetChildRequestResponse*>(bytes_);
      }
      const GetChildRequestResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const GetChildRequestResponse*>(bytes_);
      }

      GetChildRequestResponse& value() { return *Unwrap(); }
      const GetChildRequestResponse& value() const { return *Unwrap(); }

      GetChildRequestResponse* operator->() { return &value(); }
      const GetChildRequestResponse* operator->() const { return &value(); }

      GetChildRequestResponse& operator*() { return value(); }
      const GetChildRequestResponse& operator*() const { return value(); }

     private:
      FIDL_ALIGNDECL
      uint8_t bytes_[GetChildRequestResponse::PrimarySize +
                     GetChildRequestResponse::MaxOutOfLine];
    };
    class TakeChild final : public ::fidl::Result {
     public:
      explicit TakeChild(zx_handle_t _client, ::zx::channel& c);
      explicit TakeChild(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      TakeChild(TakeChild&&) = delete;
      TakeChild(const TakeChild&) = delete;
      TakeChild* operator=(TakeChild&&) = delete;
      TakeChild* operator=(const TakeChild&) = delete;
      ~TakeChild() = default;

     private:
    };
    class TakeChildRequest final : public ::fidl::Result {
     public:
      explicit TakeChildRequest(zx_handle_t _client, ::zx::channel& r);
      explicit TakeChildRequest(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      TakeChildRequest(TakeChildRequest&&) = delete;
      TakeChildRequest(const TakeChildRequest&) = delete;
      TakeChildRequest* operator=(TakeChildRequest&&) = delete;
      TakeChildRequest* operator=(const TakeChildRequest&) = delete;
      ~TakeChildRequest() = default;

     private:
    };
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
    class GetChild final : public ::fidl::Result {
     public:
      explicit GetChild(zx_handle_t _client, uint8_t* _response_bytes,
                        uint32_t _response_byte_capacity);
      explicit GetChild(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      GetChild(GetChild&&) = delete;
      GetChild(const GetChild&) = delete;
      GetChild* operator=(GetChild&&) = delete;
      GetChild* operator=(const GetChild&) = delete;
      ~GetChild() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      GetChildResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetChildResponse*>(bytes_);
      }
      const GetChildResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const GetChildResponse*>(bytes_);
      }

      GetChildResponse& value() { return *Unwrap(); }
      const GetChildResponse& value() const { return *Unwrap(); }

      GetChildResponse* operator->() { return &value(); }
      const GetChildResponse* operator->() const { return &value(); }

      GetChildResponse& operator*() { return value(); }
      const GetChildResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class GetChildRequest final : public ::fidl::Result {
     public:
      explicit GetChildRequest(zx_handle_t _client, uint8_t* _response_bytes,
                               uint32_t _response_byte_capacity);
      explicit GetChildRequest(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      GetChildRequest(GetChildRequest&&) = delete;
      GetChildRequest(const GetChildRequest&) = delete;
      GetChildRequest* operator=(GetChildRequest&&) = delete;
      GetChildRequest* operator=(const GetChildRequest&) = delete;
      ~GetChildRequest() {
        if (ok()) {
          Unwrap()->_CloseHandles();
        }
      }

      GetChildRequestResponse* Unwrap() {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<GetChildRequestResponse*>(bytes_);
      }
      const GetChildRequestResponse* Unwrap() const {
        ZX_DEBUG_ASSERT(ok());
        return reinterpret_cast<const GetChildRequestResponse*>(bytes_);
      }

      GetChildRequestResponse& value() { return *Unwrap(); }
      const GetChildRequestResponse& value() const { return *Unwrap(); }

      GetChildRequestResponse* operator->() { return &value(); }
      const GetChildRequestResponse* operator->() const { return &value(); }

      GetChildRequestResponse& operator*() { return value(); }
      const GetChildRequestResponse& operator*() const { return value(); }

     private:
      uint8_t* bytes_;
    };
    class TakeChild final : public ::fidl::Result {
     public:
      explicit TakeChild(zx_handle_t _client, uint8_t* _request_bytes,
                         uint32_t _request_byte_capacity, ::zx::channel& c);
      explicit TakeChild(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      TakeChild(TakeChild&&) = delete;
      TakeChild(const TakeChild&) = delete;
      TakeChild* operator=(TakeChild&&) = delete;
      TakeChild* operator=(const TakeChild&) = delete;
      ~TakeChild() = default;
    };
    class TakeChildRequest final : public ::fidl::Result {
     public:
      explicit TakeChildRequest(zx_handle_t _client, uint8_t* _request_bytes,
                                uint32_t _request_byte_capacity,
                                ::zx::channel& r);
      explicit TakeChildRequest(const ::fidl::Result& result)
          : ::fidl::Result(result) {}
      TakeChildRequest(TakeChildRequest&&) = delete;
      TakeChildRequest(const TakeChildRequest&) = delete;
      TakeChildRequest* operator=(TakeChildRequest&&) = delete;
      TakeChildRequest* operator=(const TakeChildRequest&) = delete;
      ~TakeChildRequest() = default;
    };
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 40 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::GetChild GetChild(::zx::unowned_channel _client_end) {
      return ResultOf::GetChild(_client_end->get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::GetChild GetChild(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::GetChild(_client_end->get(),
                                       _response_buffer.data(),
                                       _response_buffer.capacity());
    }

    // Allocates 40 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::GetChildRequest GetChildRequest(
        ::zx::unowned_channel _client_end) {
      return ResultOf::GetChildRequest(_client_end->get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::GetChildRequest GetChildRequest(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::GetChildRequest(_client_end->get(),
                                              _response_buffer.data(),
                                              _response_buffer.capacity());
    }

    // Allocates 24 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::TakeChild TakeChild(::zx::unowned_channel _client_end,
                                         ::zx::channel c) {
      return ResultOf::TakeChild(_client_end->get(), c);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::TakeChild TakeChild(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
        ::zx::channel c) {
      return UnownedResultOf::TakeChild(_client_end->get(),
                                        _request_buffer.data(),
                                        _request_buffer.capacity(), c);
    }

    // Allocates 24 bytes of message buffer on the stack. No heap allocation
    // necessary.
    static ResultOf::TakeChildRequest TakeChildRequest(
        ::zx::unowned_channel _client_end, ::zx::channel r) {
      return ResultOf::TakeChildRequest(_client_end->get(), r);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::TakeChildRequest TakeChildRequest(
        ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
        ::zx::channel r) {
      return UnownedResultOf::TakeChildRequest(_client_end->get(),
                                               _request_buffer.data(),
                                               _request_buffer.capacity(), r);
    }
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 40 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::GetChild GetChild() {
      return ResultOf::GetChild(this->channel().get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::GetChild GetChild(::fidl::BytePart _response_buffer) {
      return UnownedResultOf::GetChild(this->channel().get(),
                                       _response_buffer.data(),
                                       _response_buffer.capacity());
    }

    // Allocates 40 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::GetChildRequest GetChildRequest() {
      return ResultOf::GetChildRequest(this->channel().get());
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::GetChildRequest GetChildRequest(
        ::fidl::BytePart _response_buffer) {
      return UnownedResultOf::GetChildRequest(this->channel().get(),
                                              _response_buffer.data(),
                                              _response_buffer.capacity());
    }

    // Allocates 24 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::TakeChild TakeChild(::zx::channel c) {
      return ResultOf::TakeChild(this->channel().get(), c);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::TakeChild TakeChild(::fidl::BytePart _request_buffer,
                                         ::zx::channel c) {
      return UnownedResultOf::TakeChild(this->channel().get(),
                                        _request_buffer.data(),
                                        _request_buffer.capacity(), c);
    }

    // Allocates 24 bytes of message buffer on the stack. No heap allocation
    // necessary.
    ResultOf::TakeChildRequest TakeChildRequest(::zx::channel r) {
      return ResultOf::TakeChildRequest(this->channel().get(), r);
    }

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::TakeChildRequest TakeChildRequest(
        ::fidl::BytePart _request_buffer, ::zx::channel r) {
      return UnownedResultOf::TakeChildRequest(this->channel().get(),
                                               _request_buffer.data(),
                                               _request_buffer.capacity(), r);
    }

   private:
    ::zx::channel channel_;
  };

  struct AsyncEventHandlers;
  class GetChildResponseContext;
  class GetChildRequestResponseContext;
  class ClientImpl;

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = Parent;

    class GetChildCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(::zx::channel c);
      ::fidl::Result Reply(::fidl::BytePart _buffer, ::zx::channel c);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetChildCompleter = ::fidl::Completer<GetChildCompleterBase>;

    virtual void GetChild(GetChildCompleter::Sync& _completer) = 0;

    class GetChildRequestCompleterBase : public ::fidl::CompleterBase {
     public:
      // In the following methods, the return value indicates internal errors
      // during the reply, such as encoding or writing to the transport. Note
      // that any error will automatically lead to the destruction of the
      // binding, after which the |on_unbound| callback will be triggered with a
      // detailed reason.
      //
      // See //zircon/system/ulib/fidl/include/lib/fidl/llcpp/server.h.
      //
      // Because the reply status is identical to the unbinding status, it can
      // be safely ignored.
      ::fidl::Result Reply(::zx::channel r);
      ::fidl::Result Reply(::fidl::BytePart _buffer, ::zx::channel r);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using GetChildRequestCompleter =
        ::fidl::Completer<GetChildRequestCompleterBase>;

    virtual void GetChildRequest(
        GetChildRequestCompleter::Sync& _completer) = 0;

    using TakeChildCompleter = ::fidl::Completer<>;

    virtual void TakeChild(::zx::channel c,
                           TakeChildCompleter::Sync& _completer) = 0;

    using TakeChildRequestCompleter = ::fidl::Completer<>;

    virtual void TakeChildRequest(
        ::zx::channel r, TakeChildRequestCompleter::Sync& _completer) = 0;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl, fidl_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl, fidl_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl, fidl_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  class EventSender;
};

class Child final {
  Child() = delete;

 public:
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   public:
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   public:
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

   private:
    ::zx::channel channel_;
  };

  struct AsyncEventHandlers;
  class ClientImpl;

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;

    // The marker protocol type within which this |Interface| class is defined.
    using _EnclosingProtocol = Child;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static ::fidl::DispatchResult TryDispatch(Interface* impl, fidl_msg_t* msg,
                                            ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static ::fidl::DispatchResult Dispatch(Interface* impl, fidl_msg_t* msg,
                                         ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|.
  // Only used with |fidl::BindServer| to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static ::fidl::DispatchResult TypeErasedDispatch(void* impl, fidl_msg_t* msg,
                                                   ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  class EventSender;
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::Parent::GetChildRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Parent::GetChildRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Parent::GetChildRequest) ==
              ::llcpp::test::name::Parent::GetChildRequest::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::Parent::GetChildResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Parent::GetChildResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Parent::GetChildResponse) ==
              ::llcpp::test::name::Parent::GetChildResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Parent::GetChildResponse, c) == 16);

template <>
struct IsFidlType<::llcpp::test::name::Parent::GetChildRequestRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Parent::GetChildRequestRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Parent::GetChildRequestRequest) ==
              ::llcpp::test::name::Parent::GetChildRequestRequest::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::Parent::GetChildRequestResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Parent::GetChildRequestResponse>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::Parent::GetChildRequestResponse) ==
    ::llcpp::test::name::Parent::GetChildRequestResponse::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Parent::GetChildRequestResponse,
                       r) == 16);

template <>
struct IsFidlType<::llcpp::test::name::Parent::TakeChildRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Parent::TakeChildRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::test::name::Parent::TakeChildRequest) ==
              ::llcpp::test::name::Parent::TakeChildRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Parent::TakeChildRequest, c) == 16);

template <>
struct IsFidlType<::llcpp::test::name::Parent::TakeChildRequestRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::test::name::Parent::TakeChildRequestRequest>
    : public std::true_type {};
static_assert(
    sizeof(::llcpp::test::name::Parent::TakeChildRequestRequest) ==
    ::llcpp::test::name::Parent::TakeChildRequestRequest::PrimarySize);
static_assert(offsetof(::llcpp::test::name::Parent::TakeChildRequestRequest,
                       r) == 16);

}  // namespace fidl

namespace llcpp {

namespace test {
namespace name {

struct Parent::AsyncEventHandlers {};

class Parent::GetChildResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  GetChildResponseContext();

  virtual void OnReply(Parent::GetChildResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class Parent::GetChildRequestResponseContext
    : public ::fidl::internal::ResponseContext {
 public:
  GetChildRequestResponseContext();

  virtual void OnReply(Parent::GetChildRequestResponse* message) = 0;

 private:
  void OnReply(uint8_t* reply) override;
};

class Parent::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Parent.GetChild()|. Allocates 16 bytes of request
  // buffer on the stack. The callback is stored on the heap.
  ::fidl::Result GetChild(::fit::callback<void(::zx::channel c)> _cb);
  // Asynchronous variant of |Parent.GetChild()|. Caller provides the backing
  // storage for FIDL message via request buffer. Ownership of _context is given
  // unsafely to the binding until OnError() or OnReply() are called on it.
  ::fidl::Result GetChild(GetChildResponseContext* _context);
  // Synchronous variant of |Parent.GetChild()|. Allocates 40 bytes of message
  // buffer on the stack. No heap allocation necessary.
  ResultOf::GetChild GetChild_Sync();

  // Synchronous variant of |Parent.GetChild()|. Caller provides the backing
  // storage for FIDL message via request and response buffers.
  UnownedResultOf::GetChild GetChild_Sync(::fidl::BytePart _response_buffer);

  // Asynchronous variant of |Parent.GetChildRequest()|. Allocates 16 bytes of
  // request buffer on the stack. The callback is stored on the heap.
  ::fidl::Result GetChildRequest(::fit::callback<void(::zx::channel r)> _cb);
  // Asynchronous variant of |Parent.GetChildRequest()|. Caller provides the
  // backing storage for FIDL message via request buffer. Ownership of _context
  // is given unsafely to the binding until OnError() or OnReply() are called on
  // it.
  ::fidl::Result GetChildRequest(GetChildRequestResponseContext* _context);
  // Synchronous variant of |Parent.GetChildRequest()|. Allocates 40 bytes of
  // message buffer on the stack. No heap allocation necessary.
  ResultOf::GetChildRequest GetChildRequest_Sync();

  // Synchronous variant of |Parent.GetChildRequest()|. Caller provides the
  // backing storage for FIDL message via request and response buffers.
  UnownedResultOf::GetChildRequest GetChildRequest_Sync(
      ::fidl::BytePart _response_buffer);

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result TakeChild(::zx::channel c);

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::Result TakeChild(::fidl::BytePart _request_buffer, ::zx::channel c);

  // Allocates 24 bytes of message buffer on the stack. No heap allocation
  // necessary.
  ::fidl::Result TakeChildRequest(::zx::channel r);

  // Caller provides the backing storage for FIDL message via request and
  // response buffers.
  ::fidl::Result TakeChildRequest(::fidl::BytePart _request_buffer,
                                  ::zx::channel r);

 private:
  friend class ::fidl::Client<Parent>;

  explicit ClientImpl(AsyncEventHandlers handlers)
      : handlers_(std::move(handlers)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(fidl_msg_t* msg) override;

  AsyncEventHandlers handlers_;
};

class Parent::EventSender {
 public:
 private:
  friend class ::fidl::ServerBindingRef<Parent>;

  explicit EventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding> binding_;
};

struct Child::AsyncEventHandlers {};

class Child::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
 private:
  friend class ::fidl::Client<Child>;

  explicit ClientImpl(AsyncEventHandlers handlers)
      : handlers_(std::move(handlers)) {}

  std::optional<::fidl::UnbindInfo> DispatchEvent(fidl_msg_t* msg) override;

  AsyncEventHandlers handlers_;
};

class Child::EventSender {
 public:
 private:
  friend class ::fidl::ServerBindingRef<Child>;

  explicit EventSender(
      std::weak_ptr<::fidl::internal::AsyncServerBinding> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncServerBinding> binding_;
};

}  // namespace name
}  // namespace test
}  // namespace llcpp
