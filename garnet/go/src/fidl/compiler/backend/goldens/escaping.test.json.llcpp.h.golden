// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/fit/optional.h>

#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace llcpp {

namespace escapeme {

struct DocCommentWithQuotes;

extern "C" const fidl_type_t escapeme_DocCommentWithQuotesTable;

// "pleaseescapethisdocommentproperly"
struct DocCommentWithQuotes {
  static constexpr const fidl_type_t* Type =
      &escapeme_DocCommentWithQuotesTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint8_t __reserved = {};
  void _CloseHandles();

  class UnownedOutgoingMessage final {
   public:
    UnownedOutgoingMessage(uint8_t* bytes, uint32_t byte_size,
                           DocCommentWithQuotes* value)
        : message_(bytes, byte_size, sizeof(DocCommentWithQuotes), nullptr, 0,
                   0) {
      message_.LinearizeAndEncode<DocCommentWithQuotes>(value);
    }
    UnownedOutgoingMessage(const UnownedOutgoingMessage&) = delete;
    UnownedOutgoingMessage(UnownedOutgoingMessage&&) = delete;
    UnownedOutgoingMessage* operator=(const UnownedOutgoingMessage&) = delete;
    UnownedOutgoingMessage* operator=(UnownedOutgoingMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.status() == ZX_OK; }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() { return message_; }

   private:
    ::fidl::OutgoingMessage message_;
  };

  class OwnedOutgoingMessage final {
   public:
    explicit OwnedOutgoingMessage(DocCommentWithQuotes* value)
        : message_(bytes_, sizeof(bytes_), value) {}
    OwnedOutgoingMessage(const OwnedOutgoingMessage&) = delete;
    OwnedOutgoingMessage(OwnedOutgoingMessage&&) = delete;
    OwnedOutgoingMessage* operator=(const OwnedOutgoingMessage&) = delete;
    OwnedOutgoingMessage* operator=(OwnedOutgoingMessage&&) = delete;

    zx_status_t status() const { return message_.status(); }
    bool ok() const { return message_.ok(); }
    const char* error() const { return message_.error(); }

    ::fidl::OutgoingMessage& GetOutgoingMessage() {
      return message_.GetOutgoingMessage();
    }

   private:
    FIDL_ALIGNDECL
    uint8_t bytes_[PrimarySize + MaxOutOfLine];
    UnownedOutgoingMessage message_;
  };
};

}  // namespace escapeme
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::escapeme::DocCommentWithQuotes>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::escapeme::DocCommentWithQuotes>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::escapeme::DocCommentWithQuotes>);
static_assert(offsetof(::llcpp::escapeme::DocCommentWithQuotes, __reserved) ==
              0);
static_assert(sizeof(::llcpp::escapeme::DocCommentWithQuotes) ==
              ::llcpp::escapeme::DocCommentWithQuotes::PrimarySize);

}  // namespace fidl

namespace llcpp {

namespace escapeme {}  // namespace escapeme
}  // namespace llcpp
