// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <someotherlibrary/cpp/fidl.h>

#include "lib/fidl/cpp/internal/header.h"

namespace example {

enum class obj_type : uint32_t {

  NONE = 0u,

  CHANNEL = 4u,
};

inline zx_status_t Clone(::example::obj_type value,
                         ::example::obj_type* result) {
  *result = value;
  return ZX_OK;
}

class ExampleOfUseOfAliases;

#ifdef __Fuchsia__
class ExampleOfUseOfAliases final {
 public:
  static const fidl_type_t* FidlType;

  uint32_t field_of_u32{};

  ::std::vector<::std::string> field_of_vec_at_most_five_of_string{};

  ::std::vector<uint32_t> field_of_vec_at_most_five_of_uint32{};

  ::std::vector<::std::string> field_of_vec_of_strings{};

  ::std::vector<::std::string> field_of_vec_of_strings_at_most_nine{};

  ::std::vector<::std::string> field_of_vec_of_strings_at_most_5{};

  ::std::vector<::someotherlibrary::ReferenceMe>
      field_of_vec_at_most_5_of_reference_me{};

  ::zx::handle field_of_channel{};

  ::zx::handle field_of_client_end{};

  ::zx::handle field_of_nullable_client_end{};

  static inline ::std::unique_ptr<ExampleOfUseOfAliases> New() {
    return ::std::make_unique<ExampleOfUseOfAliases>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, ExampleOfUseOfAliases* value,
                     size_t _offset);
  zx_status_t Clone(ExampleOfUseOfAliases* result) const;
};

inline zx_status_t Clone(const ::example::ExampleOfUseOfAliases& _value,
                         ::example::ExampleOfUseOfAliases* _result) {
  return _value.Clone(_result);
}

using ExampleOfUseOfAliasesPtr = ::std::unique_ptr<ExampleOfUseOfAliases>;
#endif  // __Fuchsia__

}  // namespace example
namespace fidl {

template <>
struct CodingTraits<::example::obj_type> {
  static constexpr size_t inline_size_old = sizeof(::example::obj_type);
  static constexpr size_t inline_size_v1_no_ee = sizeof(::example::obj_type);
  static void Encode(Encoder* encoder, ::example::obj_type* value,
                     size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(Decoder* decoder, ::example::obj_type* value,
                     size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::example::obj_type>(underlying);
  }
};

inline zx_status_t Clone(::example::obj_type value,
                         ::example::obj_type* result) {
  return ::example::Clone(value, result);
}
template <>
struct Equality<::example::obj_type> {
  bool operator()(const ::example::obj_type& _lhs,
                  const ::example::obj_type& _rhs) const {
    return _lhs == _rhs;
  }
};

#ifdef __Fuchsia__
template <>
struct CodingTraits<::example::ExampleOfUseOfAliases>
    : public EncodableCodingTraits<::example::ExampleOfUseOfAliases, 120> {};

template <>
struct HasPadding<::example::ExampleOfUseOfAliases> : public std::true_type {};

template <>
struct IsMemcpyCompatible<::example::ExampleOfUseOfAliases>
    : public internal::BoolConstant<
          !HasPadding<::example::ExampleOfUseOfAliases>::value &&
          IsMemcpyCompatible<
              ::std::vector<::someotherlibrary::ReferenceMe>>::value &&
          IsMemcpyCompatible<::std::vector<::std::string>>::value &&
          IsMemcpyCompatible<::std::vector<uint32_t>>::value &&
          IsMemcpyCompatible<::zx::handle>::value &&
          IsMemcpyCompatible<uint32_t>::value> {};

inline zx_status_t Clone(const ::example::ExampleOfUseOfAliases& value,
                         ::example::ExampleOfUseOfAliases* result) {
  return ::example::Clone(value, result);
}

template <>
struct Equality<::example::ExampleOfUseOfAliases> {
  bool operator()(const ::example::ExampleOfUseOfAliases& _lhs,
                  const ::example::ExampleOfUseOfAliases& _rhs) const {
    if (!::fidl::Equals(_lhs.field_of_u32, _rhs.field_of_u32)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_at_most_five_of_string,
                        _rhs.field_of_vec_at_most_five_of_string)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_at_most_five_of_uint32,
                        _rhs.field_of_vec_at_most_five_of_uint32)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_of_strings,
                        _rhs.field_of_vec_of_strings)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_of_strings_at_most_nine,
                        _rhs.field_of_vec_of_strings_at_most_nine)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_of_strings_at_most_5,
                        _rhs.field_of_vec_of_strings_at_most_5)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_at_most_5_of_reference_me,
                        _rhs.field_of_vec_at_most_5_of_reference_me)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_channel, _rhs.field_of_channel)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_client_end, _rhs.field_of_client_end)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_nullable_client_end,
                        _rhs.field_of_nullable_client_end)) {
      return false;
    }
    return true;
  }
};
#endif  // __Fuchsia__
}  // namespace fidl
