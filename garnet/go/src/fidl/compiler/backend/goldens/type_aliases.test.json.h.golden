// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <someotherlibrary/cpp/fidl.h>

#include "lib/fidl/cpp/internal/header.h"

namespace example {

class ExampleOfUseOfAliases;

class ExampleOfUseOfAliases final {
 public:
  static const fidl_type_t* FidlType;

  uint32_t field_of_u32{};

  ::std::vector<::std::string> field_of_vec_at_most_five_of_string{};

  ::std::vector<uint32_t> field_of_vec_at_most_five_of_uint32{};

  ::std::vector<::std::string> field_of_vec_of_strings{};

  ::std::vector<::std::string> field_of_vec_of_strings_at_most_nine{};

  ::std::vector<::std::string> field_of_vec_of_strings_at_most_5{};

  ::std::vector<::someotherlibrary::ReferenceMe>
      field_of_vec_at_most_5_of_reference_me{};

  ::zx::handle field_of_channel{};

  ::zx::handle field_of_client_end{};

  ::zx::handle field_of_nullable_client_end{};

  static inline ::std::unique_ptr<ExampleOfUseOfAliases> New() {
    return ::std::make_unique<ExampleOfUseOfAliases>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, ExampleOfUseOfAliases* value,
                     size_t _offset);
  zx_status_t Clone(ExampleOfUseOfAliases* result) const;
};

inline zx_status_t Clone(const ::example::ExampleOfUseOfAliases& _value,
                         ::example::ExampleOfUseOfAliases* _result) {
  return _value.Clone(_result);
}

using ExampleOfUseOfAliasesPtr = ::std::unique_ptr<ExampleOfUseOfAliases>;
}  // namespace example
namespace fidl {

template <>
struct CodingTraits<::example::ExampleOfUseOfAliases>
    : public EncodableCodingTraits<::example::ExampleOfUseOfAliases, 120> {};

inline zx_status_t Clone(const ::example::ExampleOfUseOfAliases& value,
                         ::example::ExampleOfUseOfAliases* result) {
  return ::example::Clone(value, result);
}

template <>
struct Equality<::example::ExampleOfUseOfAliases> {
  bool operator()(const ::example::ExampleOfUseOfAliases& _lhs,
                  const ::example::ExampleOfUseOfAliases& _rhs) const {
    if (!::fidl::Equals(_lhs.field_of_u32, _rhs.field_of_u32)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_at_most_five_of_string,
                        _rhs.field_of_vec_at_most_five_of_string)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_at_most_five_of_uint32,
                        _rhs.field_of_vec_at_most_five_of_uint32)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_of_strings,
                        _rhs.field_of_vec_of_strings)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_of_strings_at_most_nine,
                        _rhs.field_of_vec_of_strings_at_most_nine)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_of_strings_at_most_5,
                        _rhs.field_of_vec_of_strings_at_most_5)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_vec_at_most_5_of_reference_me,
                        _rhs.field_of_vec_at_most_5_of_reference_me)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_channel, _rhs.field_of_channel)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_client_end, _rhs.field_of_client_end)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.field_of_nullable_client_end,
                        _rhs.field_of_nullable_client_end)) {
      return false;
    }
    return true;
  }
};
}  // namespace fidl
