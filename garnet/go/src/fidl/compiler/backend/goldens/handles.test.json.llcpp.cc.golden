// WARNING: This file is machine generated by fidlgen.

#include <handles.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace handles {

namespace {}  // namespace

std::optional<::fidl::UnbindInfo> SomeProtocol::ClientImpl::DispatchEvent(
    fidl_msg_t* msg) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

namespace methods {}  // namespace methods

namespace entries {

::fidl::internal::InterfaceEntry<SomeProtocol::Interface> SomeProtocol[] = {};

}  // namespace entries

bool SomeProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                               ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn,
      reinterpret_cast<::fidl::internal::InterfaceEntry<void>*>(
          entries::SomeProtocol),
      reinterpret_cast<::fidl::internal::InterfaceEntry<void>*>(
          entries::SomeProtocol +
          sizeof(entries::SomeProtocol) /
              sizeof(
                  ::fidl::internal::InterfaceEntry<SomeProtocol::Interface>)));
}

bool SomeProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                            ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

}  // namespace handles
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
