// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/txn_header.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

#include <variant>

namespace llcpp {

namespace example {

struct ByteAndBytes;

extern "C" const fidl_type_t example_ByteAndBytesTable;

struct ByteAndBytes {
  static constexpr const fidl_type_t* Type = &example_ByteAndBytesTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 56;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  uint8_t single_byte = {};

  ::fidl::VectorView<uint8_t> many_bytes = {};

  ::fidl::VectorView<uint8_t> only_one_k_bytes = {};

  ::fidl::VectorView<uint8_t> opt_only_one_k_bytes = {};
};

}  // namespace example
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::example::ByteAndBytes> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::example::ByteAndBytes>);
static_assert(offsetof(::llcpp::example::ByteAndBytes, single_byte) == 0);
static_assert(offsetof(::llcpp::example::ByteAndBytes, many_bytes) == 8);
static_assert(offsetof(::llcpp::example::ByteAndBytes, only_one_k_bytes) == 24);
static_assert(offsetof(::llcpp::example::ByteAndBytes, opt_only_one_k_bytes) ==
              40);
static_assert(sizeof(::llcpp::example::ByteAndBytes) ==
              ::llcpp::example::ByteAndBytes::PrimarySize);

}  // namespace fidl

namespace llcpp {

namespace example {}  // namespace example
}  // namespace llcpp
