// WARNING: This file is machine generated by fidlgen.

#include <inheritance.test.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace fidl {
namespace test {
namespace json {

#ifdef __Fuchsia__
namespace {

extern "C" const fidl_type_t fidl_test_json_superfooRequestTable;
extern "C" const fidl_type_t fidl_test_json_superfooResponseTable;

}  // namespace

super::~super() = default;

const fidl_type_t* super_RequestDecoder::GetType(uint64_t ordinal,
                                                 bool* out_needs_response) {
  switch (ordinal) {
    case internal::ksuper_foo_GenOrdinal:
      *out_needs_response = true;
      return &fidl_test_json_superfooRequestTable;
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* super_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case internal::ksuper_foo_GenOrdinal:
      return &fidl_test_json_superfooResponseTable;
    default:
      return nullptr;
  }
}

super_EventSender::~super_EventSender() = default;

super_Sync::~super_Sync() = default;

super_Proxy::super_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

super_Proxy::~super_Proxy() = default;

zx_status_t super_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

namespace {

::std::unique_ptr<::fidl::internal::SingleUseMessageHandler>
super_foo_ResponseHandler(super::fooCallback callback) {
  ZX_DEBUG_ASSERT_MSG(callback, "Callback must not be empty for super::foo\n");
  return ::std::make_unique<::fidl::internal::SingleUseMessageHandler>(
      [callback_ = std::move(callback)](::fidl::Message message) {
        const char* error_msg = nullptr;
        zx_status_t status =
            message.Decode(&fidl_test_json_superfooResponseTable, &error_msg);
        if (status != ZX_OK) {
          FIDL_REPORT_DECODING_ERROR(
              message, &fidl_test_json_superfooResponseTable, error_msg);
          return status;
        }
        ::fidl::Decoder decoder(std::move(message));
        callback_(::fidl::DecodeAs<int64_t>(&decoder, 16));
        return ZX_OK;
      });
}

}  // namespace
void super_Proxy::foo(::std::string s, fooCallback callback) {
  ::fidl::Encoder _encoder(internal::ksuper_foo_GenOrdinal);
  controller_->Send(&fidl_test_json_superfooRequestTable,
                    super_RequestEncoder::foo(&_encoder, &s),
                    super_foo_ResponseHandler(std::move(callback)));
}

super_Stub::super_Stub(super_clazz* impl) : impl_(impl) { (void)impl_; }

super_Stub::~super_Stub() = default;

namespace {

class super_foo_Responder final {
 public:
  super_foo_Responder(::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()(int64_t y) {
    ::fidl::Encoder _encoder(internal::ksuper_foo_GenOrdinal);
    response_.Send(&fidl_test_json_superfooResponseTable,
                   super_ResponseEncoder::foo(&_encoder, &y));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

}  // namespace

zx_status_t super_Stub::Dispatch_(::fidl::Message message,
                                  ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type =
      super_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case internal::ksuper_foo_GenOrdinal: {
      ::fidl::Decoder decoder(std::move(message));
      impl_->foo(::fidl::DecodeAs<::std::string>(&decoder, 16),
                 super_foo_Responder(std::move(response)));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

super_SyncProxy::super_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

super_SyncProxy::~super_SyncProxy() = default;

zx_status_t super_SyncProxy::foo(::std::string s, int64_t* out_y) {
  ::fidl::Encoder _encoder(internal::ksuper_foo_GenOrdinal);
  ::fidl::MessageBuffer buffer_;
  ::fidl::Message response_ = buffer_.CreateEmptyMessage();
  zx_status_t status_ =
      proxy_.Call(&fidl_test_json_superfooRequestTable,
                  &fidl_test_json_superfooResponseTable,
                  super_RequestEncoder::foo(&_encoder, &s), &response_);
  if (status_ != ZX_OK) return status_;
  ::fidl::Decoder decoder_(std::move(response_));
  *out_y = ::fidl::DecodeAs<int64_t>(&decoder_, 16);
  return ZX_OK;
}

#endif  // __Fuchsia__

#ifdef __Fuchsia__
namespace {

extern "C" const fidl_type_t fidl_test_json_subfooRequestTable;
extern "C" const fidl_type_t fidl_test_json_subfooResponseTable;

}  // namespace

sub::~sub() = default;

const fidl_type_t* sub_RequestDecoder::GetType(uint64_t ordinal,
                                               bool* out_needs_response) {
  switch (ordinal) {
    case internal::ksub_foo_GenOrdinal:
      *out_needs_response = true;
      return &fidl_test_json_subfooRequestTable;
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* sub_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case internal::ksub_foo_GenOrdinal:
      return &fidl_test_json_subfooResponseTable;
    default:
      return nullptr;
  }
}

sub_EventSender::~sub_EventSender() = default;

sub_Sync::~sub_Sync() = default;

sub_Proxy::sub_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

sub_Proxy::~sub_Proxy() = default;

zx_status_t sub_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

namespace {

::std::unique_ptr<::fidl::internal::SingleUseMessageHandler>
sub_foo_ResponseHandler(sub::fooCallback callback) {
  ZX_DEBUG_ASSERT_MSG(callback, "Callback must not be empty for sub::foo\n");
  return ::std::make_unique<::fidl::internal::SingleUseMessageHandler>(
      [callback_ = std::move(callback)](::fidl::Message message) {
        const char* error_msg = nullptr;
        zx_status_t status =
            message.Decode(&fidl_test_json_subfooResponseTable, &error_msg);
        if (status != ZX_OK) {
          FIDL_REPORT_DECODING_ERROR(
              message, &fidl_test_json_subfooResponseTable, error_msg);
          return status;
        }
        ::fidl::Decoder decoder(std::move(message));
        callback_(::fidl::DecodeAs<int64_t>(&decoder, 16));
        return ZX_OK;
      });
}

}  // namespace
void sub_Proxy::foo(::std::string s, fooCallback callback) {
  ::fidl::Encoder _encoder(internal::ksub_foo_GenOrdinal);
  controller_->Send(&fidl_test_json_subfooRequestTable,
                    sub_RequestEncoder::foo(&_encoder, &s),
                    sub_foo_ResponseHandler(std::move(callback)));
}

sub_Stub::sub_Stub(sub_clazz* impl) : impl_(impl) { (void)impl_; }

sub_Stub::~sub_Stub() = default;

namespace {

class sub_foo_Responder final {
 public:
  sub_foo_Responder(::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()(int64_t y) {
    ::fidl::Encoder _encoder(internal::ksub_foo_GenOrdinal);
    response_.Send(&fidl_test_json_subfooResponseTable,
                   sub_ResponseEncoder::foo(&_encoder, &y));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

}  // namespace

zx_status_t sub_Stub::Dispatch_(::fidl::Message message,
                                ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type =
      sub_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case internal::ksub_foo_GenOrdinal: {
      ::fidl::Decoder decoder(std::move(message));
      impl_->foo(::fidl::DecodeAs<::std::string>(&decoder, 16),
                 sub_foo_Responder(std::move(response)));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

sub_SyncProxy::sub_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

sub_SyncProxy::~sub_SyncProxy() = default;

zx_status_t sub_SyncProxy::foo(::std::string s, int64_t* out_y) {
  ::fidl::Encoder _encoder(internal::ksub_foo_GenOrdinal);
  ::fidl::MessageBuffer buffer_;
  ::fidl::Message response_ = buffer_.CreateEmptyMessage();
  zx_status_t status_ = proxy_.Call(
      &fidl_test_json_subfooRequestTable, &fidl_test_json_subfooResponseTable,
      sub_RequestEncoder::foo(&_encoder, &s), &response_);
  if (status_ != ZX_OK) return status_;
  ::fidl::Decoder decoder_(std::move(response_));
  *out_y = ::fidl::DecodeAs<int64_t>(&decoder_, 16);
  return ZX_OK;
}

#endif  // __Fuchsia__

}  // namespace json
}  // namespace test
}  // namespace fidl
