// WARNING: This file is machine generated by fidlgen.

#include <union.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

void ::llcpp::fidl::test::json::Union::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Union) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Union, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Union, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::StrictUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::StrictSimpleXUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictSimpleXUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictSimpleXUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictSimpleXUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::StrictFoo::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictFoo, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::StrictBoundedXUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictBoundedXUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictBoundedXUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictBoundedXUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::ReverseOrdinalUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ReverseOrdinalUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ReverseOrdinalUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ReverseOrdinalUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::StrictPizzaOrPasta::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictPizzaOrPasta) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictPizzaOrPasta, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictPizzaOrPasta, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::PizzaOrPasta::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(PizzaOrPasta) == sizeof(fidl_xunion_t));
  static_assert(offsetof(PizzaOrPasta, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(PizzaOrPasta, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::FlexiblePizzaOrPasta::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kPizza:
    case Ordinal::kPasta:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::FlexiblePizzaOrPasta::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FlexiblePizzaOrPasta) == sizeof(fidl_xunion_t));
  static_assert(offsetof(FlexiblePizzaOrPasta, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(FlexiblePizzaOrPasta, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::ExplicitPizzaOrPasta::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExplicitPizzaOrPasta) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExplicitPizzaOrPasta, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExplicitPizzaOrPasta, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::OlderSimpleUnion::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kI:
    case Ordinal::kF:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::OlderSimpleUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(OlderSimpleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(OlderSimpleUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(OlderSimpleUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]] constexpr uint64_t
    kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal =
        8255078252057434586lu;
extern "C" const fidl_type_t
    fidl_test_json_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestTable;
extern "C" const fidl_type_t
    fidl_test_json_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseTable;
[[maybe_unused]] constexpr uint64_t
    kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal =
        1140178169303334883lu;
extern "C" const fidl_type_t
    fidl_test_json_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestTable;
extern "C" const fidl_type_t
    fidl_test_json_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseTable;

}  // namespace
TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated::
    StrictXUnionHenceResponseMayBeStackAllocated(zx_handle_t _client) {
  StrictXUnionHenceResponseMayBeStackAllocatedOwnedRequest _request(0);
  _request.GetFidlMessage().Call(
      StrictXUnionHenceResponseMayBeStackAllocatedResponse::Type, _client,
      bytes_,
      StrictXUnionHenceResponseMayBeStackAllocatedResponse::PrimarySize +
          StrictXUnionHenceResponseMayBeStackAllocatedResponse::MaxOutOfLine);
  status_ = _request.status();
  error_ = _request.error();
}

TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated
TestProtocol::SyncClient::StrictXUnionHenceResponseMayBeStackAllocated() {
  return ResultOf::StrictXUnionHenceResponseMayBeStackAllocated(
      this->channel().get());
}

TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated
TestProtocol::Call::StrictXUnionHenceResponseMayBeStackAllocated(
    ::zx::unowned_channel _client_end) {
  return ResultOf::StrictXUnionHenceResponseMayBeStackAllocated(
      _client_end->get());
}

TestProtocol::UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated::
    StrictXUnionHenceResponseMayBeStackAllocated(
        zx_handle_t _client, uint8_t* _response_bytes,
        uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  StrictXUnionHenceResponseMayBeStackAllocatedOwnedRequest _request(0);
  _request.GetFidlMessage().Call(
      StrictXUnionHenceResponseMayBeStackAllocatedResponse::Type, _client,
      _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}

TestProtocol::UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated
TestProtocol::SyncClient::StrictXUnionHenceResponseMayBeStackAllocated(
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated(
      this->channel().get(), _response_buffer.data(),
      _response_buffer.capacity());
}

TestProtocol::UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated
TestProtocol::Call::StrictXUnionHenceResponseMayBeStackAllocated(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated(
      _client_end->get(), _response_buffer.data(), _response_buffer.capacity());
}

TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(zx_handle_t _client)
    : bytes_(std::make_unique<
             ::fidl::internal::AlignedBuffer<ZX_CHANNEL_MAX_MSG_BYTES>>()) {
  FlexibleXUnionHenceResponseMustBeHeapAllocatedOwnedRequest _request(0);
  _request.GetFidlMessage().Call(
      FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::Type, _client,
      bytes_->data(), ZX_CHANNEL_MAX_MSG_BYTES);
  status_ = _request.status();
  error_ = _request.error();
}

TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated
TestProtocol::SyncClient::FlexibleXUnionHenceResponseMustBeHeapAllocated() {
  return ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(
      this->channel().get());
}

TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated
TestProtocol::Call::FlexibleXUnionHenceResponseMustBeHeapAllocated(
    ::zx::unowned_channel _client_end) {
  return ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(
      _client_end->get());
}

TestProtocol::UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated::
    FlexibleXUnionHenceResponseMustBeHeapAllocated(
        zx_handle_t _client, uint8_t* _response_bytes,
        uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  FlexibleXUnionHenceResponseMustBeHeapAllocatedOwnedRequest _request(0);
  _request.GetFidlMessage().Call(
      FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::Type, _client,
      _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}

TestProtocol::UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated
TestProtocol::SyncClient::FlexibleXUnionHenceResponseMustBeHeapAllocated(
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(
      this->channel().get(), _response_buffer.data(),
      _response_buffer.capacity());
}

TestProtocol::UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated
TestProtocol::Call::FlexibleXUnionHenceResponseMustBeHeapAllocated(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(
      _client_end->get(), _response_buffer.data(), _response_buffer.capacity());
}

TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated
TestProtocol::ClientImpl::StrictXUnionHenceResponseMayBeStackAllocated_Sync() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::StrictXUnionHenceResponseMayBeStackAllocated(
        _binding->handle());
  }
  return TestProtocol::ResultOf::StrictXUnionHenceResponseMayBeStackAllocated(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

TestProtocol::UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated
TestProtocol::ClientImpl::StrictXUnionHenceResponseMayBeStackAllocated_Sync(
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated(
        _binding->handle(), _response_buffer.data(),
        _response_buffer.capacity());
  }
  return TestProtocol::UnownedResultOf::
      StrictXUnionHenceResponseMayBeStackAllocated(
          ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

::fidl::StatusAndError
TestProtocol::ClientImpl::StrictXUnionHenceResponseMayBeStackAllocated(
    ::fit::callback<void(::llcpp::fidl::test::json::StrictBoundedXUnion xu)>
        _cb) {
  class ManagedResponseContext
      : public StrictXUnionHenceResponseMayBeStackAllocatedResponseContext {
   public:
    ManagedResponseContext(
        ::fit::callback<void(::llcpp::fidl::test::json::StrictBoundedXUnion xu)>
            cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<
                 StrictXUnionHenceResponseMayBeStackAllocatedResponse>
                     msg) override {
      auto message = msg.message();
      cb_(std::move(message->xu));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::fidl::test::json::StrictBoundedXUnion xu)>
        cb_;
  };

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error =
      StrictXUnionHenceResponseMayBeStackAllocated(_context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError
TestProtocol::ClientImpl::StrictXUnionHenceResponseMayBeStackAllocated(
    StrictXUnionHenceResponseMayBeStackAllocatedResponseContext* _context) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(
      StrictXUnionHenceResponseMayBeStackAllocatedRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  new (_request_buffer.data())
      StrictXUnionHenceResponseMayBeStackAllocatedRequest(_context->Txid());
  _request_buffer.set_actual(
      sizeof(StrictXUnionHenceResponseMayBeStackAllocatedRequest));
  ::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedRequest>
      _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return ::fidl::DecodeResult<
        StrictXUnionHenceResponseMayBeStackAllocatedResponse>::
        FromFailure(std::move(_encode_request_result));
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated
TestProtocol::ClientImpl::
    FlexibleXUnionHenceResponseMustBeHeapAllocated_Sync() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(
        _binding->handle());
  }
  return TestProtocol::ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

TestProtocol::UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated
TestProtocol::ClientImpl::FlexibleXUnionHenceResponseMustBeHeapAllocated_Sync(
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated(
        _binding->handle(), _response_buffer.data(),
        _response_buffer.capacity());
  }
  return TestProtocol::UnownedResultOf::
      FlexibleXUnionHenceResponseMustBeHeapAllocated(
          ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

::fidl::StatusAndError
TestProtocol::ClientImpl::FlexibleXUnionHenceResponseMustBeHeapAllocated(
    ::fit::callback<void(::llcpp::fidl::test::json::OlderSimpleUnion xu)> _cb) {
  class ManagedResponseContext
      : public FlexibleXUnionHenceResponseMustBeHeapAllocatedResponseContext {
   public:
    ManagedResponseContext(
        ::fit::callback<void(::llcpp::fidl::test::json::OlderSimpleUnion xu)>
            cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<
                 FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>
                     msg) override {
      auto message = msg.message();
      cb_(std::move(message->xu));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::fidl::test::json::OlderSimpleUnion xu)> cb_;
  };

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error =
      FlexibleXUnionHenceResponseMustBeHeapAllocated(_context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError
TestProtocol::ClientImpl::FlexibleXUnionHenceResponseMustBeHeapAllocated(
    FlexibleXUnionHenceResponseMustBeHeapAllocatedResponseContext* _context) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(
      FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  new (_request_buffer.data())
      FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest(_context->Txid());
  _request_buffer.set_actual(
      sizeof(FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest));
  ::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest>
      _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return ::fidl::DecodeResult<
        FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>::
        FromFailure(std::move(_encode_request_result));
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> TestProtocol::ClientImpl::Dispatch(
    fidl_msg_t* msg, ::fidl::internal::ResponseContext* context) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal: {
      auto result = ::fidl::DecodeAs<
          StrictXUnionHenceResponseMayBeStackAllocatedResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kDecodeError,
                                  result.status};
      }
      static_cast<StrictXUnionHenceResponseMayBeStackAllocatedResponseContext*>(
          context)
          ->OnReply(std::move(result.message));
      break;
    }
    case kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal: {
      auto result = ::fidl::DecodeAs<
          FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kDecodeError,
                                  result.status};
      }
      static_cast<
          FlexibleXUnionHenceResponseMustBeHeapAllocatedResponseContext*>(
          context)
          ->OnReply(std::move(result.message));
      break;
    }
    case kFidlOrdinalEpitaph:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context)
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                  ZX_ERR_INVALID_ARGS};
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kPeerClosed,
                                reinterpret_cast<fidl_epitaph_t*>(hdr)->error};
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context) context->OnError();
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

bool TestProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                               ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal: {
      auto result =
          ::fidl::DecodeAs<StrictXUnionHenceResponseMayBeStackAllocatedRequest>(
              msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      impl->StrictXUnionHenceResponseMayBeStackAllocated(
          Interface::StrictXUnionHenceResponseMayBeStackAllocatedCompleter::
              Sync(txn));
      return true;
    }
    case kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal: {
      auto result = ::fidl::DecodeAs<
          FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      impl->FlexibleXUnionHenceResponseMustBeHeapAllocated(
          Interface::FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter::
              Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool TestProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                            ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

zx_status_t TestProtocol::Interface::
    StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::ReplyWithStatus(
        ::llcpp::fidl::test::json::StrictBoundedXUnion xu) {
  StrictXUnionHenceResponseMayBeStackAllocatedResponse _response{xu};

  auto _encoded = ::fidl::internal::LinearizedAndEncoded<
      StrictXUnionHenceResponseMayBeStackAllocatedResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

void TestProtocol::Interface::
    StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::Reply(
        ::llcpp::fidl::test::json::StrictBoundedXUnion xu) {
  ReplyWithStatus(std::move(xu));
}

zx_status_t TestProtocol::Interface::
    StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::ReplyWithStatus(
        ::fidl::BytePart _buffer,
        ::llcpp::fidl::test::json::StrictBoundedXUnion xu) {
  if (_buffer.capacity() <
      StrictXUnionHenceResponseMayBeStackAllocatedResponse::PrimarySize) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, ZX_ERR_BUFFER_TOO_SMALL});
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  StrictXUnionHenceResponseMayBeStackAllocatedResponse _response{xu};
  auto _encode_result = ::fidl::LinearizeAndEncode<
      StrictXUnionHenceResponseMayBeStackAllocatedResponse>(&_response,
                                                            std::move(_buffer));
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

void TestProtocol::Interface::
    StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::Reply(
        ::fidl::BytePart _buffer,
        ::llcpp::fidl::test::json::StrictBoundedXUnion xu) {
  ReplyWithStatus(std::move(_buffer), std::move(xu));
}

zx_status_t TestProtocol::Interface::
    StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::ReplyWithStatus(
        ::fidl::DecodedMessage<
            StrictXUnionHenceResponseMayBeStackAllocatedResponse>
            params) {
  ZX_DEBUG_ASSERT(params.message()->_hdr.magic_number ==
                  kFidlWireFormatMagicNumberInitial);
  ZX_DEBUG_ASSERT(
      params.message()->_hdr.ordinal ==
      kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal);
  return CompleterBase::SendReply(std::move(params));
}

void TestProtocol::Interface::
    StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase::Reply(
        ::fidl::DecodedMessage<
            StrictXUnionHenceResponseMayBeStackAllocatedResponse>
            params) {
  ReplyWithStatus(std::move(params));
}

zx_status_t TestProtocol::Interface::
    FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::
        ReplyWithStatus(::llcpp::fidl::test::json::OlderSimpleUnion xu) {
  FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse _response{xu};

  auto _encoded = ::fidl::internal::LinearizedAndEncoded<
      FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

void TestProtocol::Interface::
    FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::Reply(
        ::llcpp::fidl::test::json::OlderSimpleUnion xu) {
  ReplyWithStatus(std::move(xu));
}

zx_status_t TestProtocol::Interface::
    FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::
        ReplyWithStatus(::fidl::BytePart _buffer,
                        ::llcpp::fidl::test::json::OlderSimpleUnion xu) {
  if (_buffer.capacity() <
      FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::PrimarySize) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, ZX_ERR_BUFFER_TOO_SMALL});
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse _response{xu};
  auto _encode_result = ::fidl::LinearizeAndEncode<
      FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>(
      &_response, std::move(_buffer));
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

void TestProtocol::Interface::
    FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::Reply(
        ::fidl::BytePart _buffer,
        ::llcpp::fidl::test::json::OlderSimpleUnion xu) {
  ReplyWithStatus(std::move(_buffer), std::move(xu));
}

zx_status_t TestProtocol::Interface::
    FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::
        ReplyWithStatus(::fidl::DecodedMessage<
                        FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>
                            params) {
  ZX_DEBUG_ASSERT(params.message()->_hdr.magic_number ==
                  kFidlWireFormatMagicNumberInitial);
  ZX_DEBUG_ASSERT(
      params.message()->_hdr.ordinal ==
      kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal);
  return CompleterBase::SendReply(std::move(params));
}

void TestProtocol::Interface::
    FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase::Reply(
        ::fidl::DecodedMessage<
            FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>
            params) {
  ReplyWithStatus(std::move(params));
}

void TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedRequest::
    _InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(
      &_hdr, _txid,
      kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal);
}

void TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse::
    _InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      kTestProtocol_StrictXUnionHenceResponseMayBeStackAllocated_Ordinal);
}

void TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest::
    _InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(
      &_hdr, _txid,
      kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal);
}

void TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::
    _InitHeader() {
  fidl_init_txn_header(
      &_hdr, 0,
      kTestProtocol_FlexibleXUnionHenceResponseMustBeHeapAllocated_Ordinal);
}
auto ::llcpp::fidl::test::json::NewerSimpleUnion::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kI:
    case Ordinal::kS:
    case Ordinal::kV:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::NewerSimpleUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(NewerSimpleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(NewerSimpleUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(NewerSimpleUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::FlexibleUnion::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kPrimitive:
    case Ordinal::kStringNeedsConstructor:
    case Ordinal::kVectorStringAlsoNeedsConstructor:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::FlexibleUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FlexibleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(FlexibleUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(FlexibleUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::FlexibleFoo::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kS:
    case Ordinal::kI:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::FlexibleFoo::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FlexibleFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(FlexibleFoo, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(FlexibleFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::FieldCollision::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FieldCollision) == sizeof(fidl_xunion_t));
  static_assert(offsetof(FieldCollision, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(FieldCollision, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::ExplicitXUnion::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kI:
    case Ordinal::kF:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::ExplicitXUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExplicitXUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExplicitXUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExplicitXUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::ExplicitUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExplicitUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExplicitUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExplicitUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::json::ExplicitStrictFoo::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExplicitStrictFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExplicitStrictFoo, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExplicitStrictFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::ExplicitFoo::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kS:
    case Ordinal::kI:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::ExplicitFoo::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExplicitFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExplicitFoo, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExplicitFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::XUnionContainingEmptyStruct::which() const
    -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kEmpty:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::XUnionContainingEmptyStruct::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(XUnionContainingEmptyStruct) == sizeof(fidl_xunion_t));
  static_assert(offsetof(XUnionContainingEmptyStruct, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(XUnionContainingEmptyStruct, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
