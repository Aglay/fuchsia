// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)





type parentGetChildResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	C ChildInterface`fidl:"0" fidl_offset_v1:"0"`
}

var _mparentGetChildResponse = _bindings.CreateLazyMarshaler(parentGetChildResponse{})

func (msg *parentGetChildResponse) Marshaler() _bindings.Marshaler {
	return _mparentGetChildResponse
}

type parentWithCtxGetChildResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	C ChildWithCtxInterface`fidl:"0" fidl_offset_v1:"0"`
}

var _mparentWithCtxGetChildResponse = _bindings.CreateLazyMarshaler(parentWithCtxGetChildResponse{})

func (msg *parentWithCtxGetChildResponse) Marshaler() _bindings.Marshaler {
	return _mparentWithCtxGetChildResponse
}

type parentGetChildRequestResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	R ChildInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0"`
}

var _mparentGetChildRequestResponse = _bindings.CreateLazyMarshaler(parentGetChildRequestResponse{})

func (msg *parentGetChildRequestResponse) Marshaler() _bindings.Marshaler {
	return _mparentGetChildRequestResponse
}

type parentWithCtxGetChildRequestResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	R ChildWithCtxInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0"`
}

var _mparentWithCtxGetChildRequestResponse = _bindings.CreateLazyMarshaler(parentWithCtxGetChildRequestResponse{})

func (msg *parentWithCtxGetChildRequestResponse) Marshaler() _bindings.Marshaler {
	return _mparentWithCtxGetChildRequestResponse
}

type parentTakeChildRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	C ChildInterface`fidl:"0" fidl_offset_v1:"0"`
}

var _mparentTakeChildRequest = _bindings.CreateLazyMarshaler(parentTakeChildRequest{})

func (msg *parentTakeChildRequest) Marshaler() _bindings.Marshaler {
	return _mparentTakeChildRequest
}

type parentWithCtxTakeChildRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	C ChildWithCtxInterface`fidl:"0" fidl_offset_v1:"0"`
}

var _mparentWithCtxTakeChildRequest = _bindings.CreateLazyMarshaler(parentWithCtxTakeChildRequest{})

func (msg *parentWithCtxTakeChildRequest) Marshaler() _bindings.Marshaler {
	return _mparentWithCtxTakeChildRequest
}

type parentTakeChildRequestRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	R ChildInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0"`
}

var _mparentTakeChildRequestRequest = _bindings.CreateLazyMarshaler(parentTakeChildRequestRequest{})

func (msg *parentTakeChildRequestRequest) Marshaler() _bindings.Marshaler {
	return _mparentTakeChildRequestRequest
}

type parentWithCtxTakeChildRequestRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	R ChildWithCtxInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0"`
}

var _mparentWithCtxTakeChildRequestRequest = _bindings.CreateLazyMarshaler(parentWithCtxTakeChildRequestRequest{})

func (msg *parentWithCtxTakeChildRequestRequest) Marshaler() _bindings.Marshaler {
	return _mparentWithCtxTakeChildRequestRequest
}
const (
)

type ChildWithCtxInterface _bindings.ChannelProxy


type ChildInterface _bindings.ChannelProxy



type ChildWithCtx interface {
}



type ChildWithCtxTransitionalBase struct {}




type Child interface {
}

type ChildTransitionalBase struct {}


type ChildWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewChildWithCtxInterfaceRequest() (ChildWithCtxInterfaceRequest, *ChildWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChildWithCtxInterfaceRequest(req), (*ChildWithCtxInterface)(cli), err
}

type ChildInterfaceRequest _bindings.InterfaceRequest

func NewChildInterfaceRequest() (ChildInterfaceRequest, *ChildInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChildInterfaceRequest(req), (*ChildInterface)(cli), err
}

type ChildStub struct {
	Impl Child
}

func (s_ *ChildStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	ctx, ok := _bindings.GetMarshalerContext(args_.Ctx)
	if !ok {
		return nil, false, _bindings.ErrMissingMarshalerContext
	}
	return s_.DispatchImplWithCtx2(args_.Ordinal, ctx, args_.Bytes, args_.HandleInfos)
}

func (s_ *ChildStub) DispatchImplWithCtx2(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handleInfos_ []_zx.HandleInfo) (_bindings.Message, bool, error) {
	switch ordinal_ {
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type ChildWithCtxStub struct {
	Impl ChildWithCtx
}

func (s_ *ChildWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type ChildService struct {
	_bindings.BindingSet
}

func (s *ChildService) Add(impl Child, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChildStub{Impl: impl}, c, onError)
}

func (s *ChildService) AddWithCtx(impl ChildWithCtx, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChildWithCtxStub{Impl: impl}, c, onError)
}

func (s *ChildService) EventProxyFor(key _bindings.BindingKey) (*ChildEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ChildEventProxy)(pxy), err
}

type ChildEventProxy _bindings.ChannelProxy



const (
	ParentGetChildOrdinal uint64 = 0x3692bc6900000000
	ParentGetChildGenOrdinal uint64 = 0x57e26ed694158086
	ParentGetChildRequestOrdinal uint64 = 0x3faacc7e00000000
	ParentGetChildRequestGenOrdinal uint64 = 0x5ea0990a698a80
	ParentTakeChildOrdinal uint64 = 0x4c0642f900000000
	ParentTakeChildGenOrdinal uint64 = 0x6a9827d18871f87d
	ParentTakeChildRequestOrdinal uint64 = 0x5ec3867a00000000
	ParentTakeChildRequestGenOrdinal uint64 = 0x6c4a70e2a2126637
)

type ParentWithCtxInterface _bindings.ChannelProxy


func (p *ParentWithCtxInterface) GetChild(ctx_ _bindings.Context) (ChildWithCtxInterface, error) {
	var req_ _bindings.Message
	resp_ := &parentWithCtxGetChildResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildGenOrdinal, req_, resp_, ParentGetChildOrdinal, ParentGetChildGenOrdinal)
	return resp_.C, err_
}

func (p *ParentWithCtxInterface) GetChildRequest(ctx_ _bindings.Context) (ChildWithCtxInterfaceRequest, error) {
	var req_ _bindings.Message
	resp_ := &parentWithCtxGetChildRequestResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildRequestGenOrdinal, req_, resp_, ParentGetChildRequestOrdinal, ParentGetChildRequestGenOrdinal)
	return resp_.R, err_
}

func (p *ParentWithCtxInterface) TakeChild(ctx_ _bindings.Context, c ChildWithCtxInterface) error {
	req_ := &parentWithCtxTakeChildRequest{
		C: c,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildGenOrdinal, req_)
	return err_
}

func (p *ParentWithCtxInterface) TakeChildRequest(ctx_ _bindings.Context, r ChildWithCtxInterfaceRequest) error {
	req_ := &parentWithCtxTakeChildRequestRequest{
		R: r,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildRequestGenOrdinal, req_)
	return err_
}

type ParentInterface _bindings.ChannelProxy


func (p *ParentInterface) GetChild() (ChildInterface, error) {
	var req_ _bindings.Message
	resp_ := &parentGetChildResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildGenOrdinal, req_, resp_, ParentGetChildOrdinal, ParentGetChildGenOrdinal)
	return resp_.C, err_
}

func (p *ParentInterface) GetChildRequest() (ChildInterfaceRequest, error) {
	var req_ _bindings.Message
	resp_ := &parentGetChildRequestResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildRequestGenOrdinal, req_, resp_, ParentGetChildRequestOrdinal, ParentGetChildRequestGenOrdinal)
	return resp_.R, err_
}

func (p *ParentInterface) TakeChild(c ChildInterface) error {
	req_ := &parentTakeChildRequest{
		C: c,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildGenOrdinal, req_)
	return err_
}

func (p *ParentInterface) TakeChildRequest(r ChildInterfaceRequest) error {
	req_ := &parentTakeChildRequestRequest{
		R: r,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildRequestGenOrdinal, req_)
	return err_
}


type ParentWithCtx interface {
	GetChild(ctx_ _bindings.Context) (ChildWithCtxInterface, error)
	GetChildRequest(ctx_ _bindings.Context) (ChildWithCtxInterfaceRequest, error)
	TakeChild(ctx_ _bindings.Context, c ChildWithCtxInterface) error
	TakeChildRequest(ctx_ _bindings.Context, r ChildWithCtxInterfaceRequest) error
}



type ParentWithCtxTransitionalBase struct {}




type Parent interface {
	GetChild() (ChildInterface, error)
	GetChildRequest() (ChildInterfaceRequest, error)
	TakeChild(c ChildInterface) error
	TakeChildRequest(r ChildInterfaceRequest) error
}

type ParentTransitionalBase struct {}


type ParentWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewParentWithCtxInterfaceRequest() (ParentWithCtxInterfaceRequest, *ParentWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ParentWithCtxInterfaceRequest(req), (*ParentWithCtxInterface)(cli), err
}

type ParentInterfaceRequest _bindings.InterfaceRequest

func NewParentInterfaceRequest() (ParentInterfaceRequest, *ParentInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ParentInterfaceRequest(req), (*ParentInterface)(cli), err
}

type ParentStub struct {
	Impl Parent
}

func (s_ *ParentStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	ctx, ok := _bindings.GetMarshalerContext(args_.Ctx)
	if !ok {
		return nil, false, _bindings.ErrMissingMarshalerContext
	}
	return s_.DispatchImplWithCtx2(args_.Ordinal, ctx, args_.Bytes, args_.HandleInfos)
}

func (s_ *ParentStub) DispatchImplWithCtx2(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handleInfos_ []_zx.HandleInfo) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case ParentGetChildOrdinal:
		fallthrough
	case ParentGetChildGenOrdinal:
		c, err_ := s_.Impl.GetChild()
		out_ := parentGetChildResponse{}
		out_.C = c
		return &out_, true, err_
	case ParentGetChildRequestOrdinal:
		fallthrough
	case ParentGetChildRequestGenOrdinal:
		r, err_ := s_.Impl.GetChildRequest()
		out_ := parentGetChildRequestResponse{}
		out_.R = r
		return &out_, true, err_
	case ParentTakeChildOrdinal:
		fallthrough
	case ParentTakeChildGenOrdinal:
		in_ := parentTakeChildRequest{}
		if _, _, err_ := _bindings.UnmarshalWithContext2(ctx_, data_, handleInfos_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.TakeChild(in_.C)
		return nil, false, err_
	case ParentTakeChildRequestOrdinal:
		fallthrough
	case ParentTakeChildRequestGenOrdinal:
		in_ := parentTakeChildRequestRequest{}
		if _, _, err_ := _bindings.UnmarshalWithContext2(ctx_, data_, handleInfos_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.TakeChildRequest(in_.R)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type ParentWithCtxStub struct {
	Impl ParentWithCtx
}

func (s_ *ParentWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case ParentGetChildOrdinal:
		fallthrough
	case ParentGetChildGenOrdinal:
		c, err_ := s_.Impl.GetChild(args_.Ctx)
		out_ := parentWithCtxGetChildResponse{}
		out_.C = c
		return &out_, true, err_
	case ParentGetChildRequestOrdinal:
		fallthrough
	case ParentGetChildRequestGenOrdinal:
		r, err_ := s_.Impl.GetChildRequest(args_.Ctx)
		out_ := parentWithCtxGetChildRequestResponse{}
		out_.R = r
		return &out_, true, err_
	case ParentTakeChildOrdinal:
		fallthrough
	case ParentTakeChildGenOrdinal:
		in_ := parentWithCtxTakeChildRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if _, _, err_ := _bindings.UnmarshalWithContext2(marshalerCtx, args_.Bytes, args_.HandleInfos, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.TakeChild(args_.Ctx, in_.C)
		return nil, false, err_
	case ParentTakeChildRequestOrdinal:
		fallthrough
	case ParentTakeChildRequestGenOrdinal:
		in_ := parentWithCtxTakeChildRequestRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if _, _, err_ := _bindings.UnmarshalWithContext2(marshalerCtx, args_.Bytes, args_.HandleInfos, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.TakeChildRequest(args_.Ctx, in_.R)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type ParentService struct {
	_bindings.BindingSet
}

func (s *ParentService) Add(impl Parent, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ParentStub{Impl: impl}, c, onError)
}

func (s *ParentService) AddWithCtx(impl ParentWithCtx, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ParentWithCtxStub{Impl: impl}, c, onError)
}

func (s *ParentService) EventProxyFor(key _bindings.BindingKey) (*ParentEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ParentEventProxy)(pxy), err
}

type ParentEventProxy _bindings.ChannelProxy



