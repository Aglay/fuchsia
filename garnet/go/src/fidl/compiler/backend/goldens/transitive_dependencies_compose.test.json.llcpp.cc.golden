// WARNING: This file is machine generated by fidlgen.

#include <transitive_dependencies_compose.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace top {

namespace {

[[maybe_unused]] constexpr uint64_t kTop_GetFoo_Ordinal = 3210163844600846111lu;
extern "C" const fidl_type_t top_TopGetFooRequestTable;
extern "C" const fidl_type_t top_TopGetFooResponseTable;

}  // namespace
template <>
Top::ResultOf::GetFoo_Impl<Top::GetFooResponse>::GetFoo_Impl(
    ::zx::unowned_channel _client_end) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(GetFooRequest)];
  auto& _request = *new (_request_buffer) GetFooRequest(0);

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<GetFooRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<GetFooRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::SetResult(
      Top::InPlace::GetFoo(std::move(_client_end), Super::response_buffer()));
}

Top::ResultOf::GetFoo Top::SyncClient::GetFoo() {
  return ResultOf::GetFoo(::zx::unowned_channel(this->channel_));
}

Top::ResultOf::GetFoo Top::Call::GetFoo(::zx::unowned_channel _client_end) {
  return ResultOf::GetFoo(std::move(_client_end));
}

template <>
Top::UnownedResultOf::GetFoo_Impl<Top::GetFooResponse>::GetFoo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetFooRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  new (_request_buffer.data()) GetFooRequest(0);
  _request_buffer.set_actual(sizeof(GetFooRequest));
  ::fidl::DecodedMessage<GetFooRequest> _msg(std::move(_request_buffer));
  auto _encode_result = ::fidl::Encode<GetFooRequest>(std::move(_msg));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<GetFooRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::SetResult(Top::InPlace::GetFoo(std::move(_client_end),
                                        std::move(_response_buffer)));
}

Top::UnownedResultOf::GetFoo Top::SyncClient::GetFoo(
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFoo(::zx::unowned_channel(this->channel_),
                                 std::move(_response_buffer));
}

Top::UnownedResultOf::GetFoo Top::Call::GetFoo(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFoo(std::move(_client_end),
                                 std::move(_response_buffer));
}

::fidl::DecodeResult<Top::GetFooResponse> Top::InPlace::GetFoo(
    ::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetFooRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::EncodedMessage<GetFooRequest> params(std::move(_request_buffer));
  GetFooRequest* request =
      reinterpret_cast<GetFooRequest*>(params.bytes().data());
  fidl_init_txn_header(&request->_hdr, 0, kTop_GetFoo_Ordinal);
  auto _call_result = ::fidl::Call<GetFooRequest, GetFooResponse>(
      std::move(_client_end), std::move(params), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Top::GetFooResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

Top::ResultOf::GetFoo Top::ClientImpl::GetFoo_Sync() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::GetFoo(_binding->channel());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

Top::UnownedResultOf::GetFoo Top::ClientImpl::GetFoo_Sync(
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::GetFoo(_binding->channel(),
                                   std::move(_response_buffer));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Top::ClientImpl::GetFoo(
    ::fit::callback<void(::llcpp::bottom::Foo foo)> _cb) {
  class ManagedResponseContext : public GetFooResponseContext {
   public:
    ManagedResponseContext(::fit::callback<void(::llcpp::bottom::Foo foo)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<GetFooResponse> msg) override {
      auto message = msg.message();
      cb_(std::move(message->foo));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::bottom::Foo foo)> cb_;
  };

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error = GetFoo(_context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError Top::ClientImpl::GetFoo(
    GetFooResponseContext* _context) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetFooRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  new (_request_buffer.data()) GetFooRequest(_context->Txid());
  _request_buffer.set_actual(sizeof(GetFooRequest));
  ::fidl::DecodedMessage<GetFooRequest> _decoded_request(
      std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return ::fidl::DecodeResult<GetFooResponse>::FromFailure(
        std::move(_encode_request_result));
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t Top::ClientImpl::Dispatch(
    fidl_msg_t* msg, ::fidl::internal::ResponseContext* context) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kTop_GetFoo_Ordinal: {
      auto result = ::fidl::DecodeAs<GetFooResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return result.status;
      }
      static_cast<GetFooResponseContext*>(context)->OnReply(
          std::move(result.message));
      break;
    }
    case kFidlOrdinalEpitaph:
      if (context) return ZX_ERR_INVALID_ARGS;
      ::fidl::internal::ClientBase::Close(
          reinterpret_cast<fidl_epitaph_t*>(hdr)->error);
      break;
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context) context->OnError();
      return ZX_ERR_NOT_SUPPORTED;
  }
  return ZX_OK;
}

bool Top::TryDispatch(Interface* impl, fidl_msg_t* msg,
                      ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kTop_GetFoo_Ordinal: {
      auto result = ::fidl::DecodeAs<GetFooRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetFoo(Interface::GetFooCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Top::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void Top::Interface::GetFooCompleterBase::Reply(::llcpp::bottom::Foo foo) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(GetFooResponse)];
  auto& _response = *new (_response_buffer) GetFooResponse{foo};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<GetFooResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_encode_result.message));
}

void Top::Interface::GetFooCompleterBase::Reply(::fidl::BytePart _buffer,
                                                ::llcpp::bottom::Foo foo) {
  if (_buffer.capacity() < GetFooResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  new (_buffer.data()) GetFooResponse{foo};
  _buffer.set_actual(sizeof(GetFooResponse));
  CompleterBase::SendReply(
      ::fidl::DecodedMessage<GetFooResponse>(std::move(_buffer)));
}

void Top::Interface::GetFooCompleterBase::Reply(
    ::fidl::DecodedMessage<GetFooResponse> params) {
  ZX_DEBUG_ASSERT(params.message()->_hdr.magic_number ==
                  kFidlWireFormatMagicNumberInitial);
  ZX_DEBUG_ASSERT(params.message()->_hdr.ordinal == kTop_GetFoo_Ordinal);
  CompleterBase::SendReply(std::move(params));
}

void Top::GetFooRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kTop_GetFoo_Ordinal);
}

void Top::GetFooResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kTop_GetFoo_Ordinal);
}

}  // namespace top
}  // namespace llcpp
