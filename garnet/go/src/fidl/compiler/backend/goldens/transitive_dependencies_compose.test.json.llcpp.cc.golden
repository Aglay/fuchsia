// WARNING: This file is machine generated by fidlgen.

#include <transitive_dependencies_compose.test.json.llcpp.h>
#include <memory>

namespace llcpp {

namespace top {

namespace {

[[maybe_unused]]
constexpr uint64_t kTop_GetFoo_Ordinal = 0x3949df2c00000000lu;
[[maybe_unused]]
constexpr uint64_t kTop_GetFoo_GenOrdinal = 0x2c8ccb022c3c571flu;
extern "C" const fidl_type_t v1_top_TopGetFooRequestTable;
extern "C" const fidl_type_t v1_top_TopGetFooResponseTable;

}  // namespace
template <>
Top::ResultOf::GetFoo_Impl<Top::GetFooResponse>::GetFoo_Impl(::zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFooRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;
  uint8_t* _write_bytes = _write_bytes_array.view().data();
  memset(_write_bytes, 0, GetFooRequest::PrimarySize);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFooRequest));
  ::fidl::DecodedMessage<GetFooRequest> _decoded_request(std::move(_request_bytes));
  Super::SetResult(
      Top::InPlace::GetFoo(std::move(_client_end), Super::response_buffer()));
}

Top::ResultOf::GetFoo Top::SyncClient::GetFoo() {
    return ResultOf::GetFoo(::zx::unowned_channel(this->channel_));
}

Top::ResultOf::GetFoo Top::Call::GetFoo(::zx::unowned_channel _client_end) {
  return ResultOf::GetFoo(std::move(_client_end));
}

template <>
Top::UnownedResultOf::GetFoo_Impl<Top::GetFooResponse>::GetFoo_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  FIDL_ALIGNDECL uint8_t _write_bytes[sizeof(GetFooRequest)] = {};
  ::fidl::BytePart _request_buffer(_write_bytes, sizeof(_write_bytes));
  memset(_request_buffer.data(), 0, GetFooRequest::PrimarySize);
  _request_buffer.set_actual(sizeof(GetFooRequest));
  ::fidl::DecodedMessage<GetFooRequest> _decoded_request(std::move(_request_buffer));
  Super::SetResult(
      Top::InPlace::GetFoo(std::move(_client_end), std::move(_response_buffer)));
}

Top::UnownedResultOf::GetFoo Top::SyncClient::GetFoo(::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFoo(::zx::unowned_channel(this->channel_), std::move(_response_buffer));
}

Top::UnownedResultOf::GetFoo Top::Call::GetFoo(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFoo(std::move(_client_end), std::move(_response_buffer));
}

::fidl::DecodeResult<Top::GetFooResponse> Top::InPlace::GetFoo(::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer) {
  constexpr uint32_t _write_num_bytes = sizeof(GetFooRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::DecodedMessage<GetFooRequest> params(std::move(_request_buffer));
  Top::SetTransactionHeaderFor::GetFooRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Top::GetFooResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<GetFooRequest, GetFooResponse>(
    std::move(_client_end), std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Top::GetFooResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool Top::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kTop_GetFoo_Ordinal:
    case kTop_GetFoo_GenOrdinal:
    {
      auto result = ::fidl::DecodeAs<GetFooRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->GetFoo(
          Interface::GetFooCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Top::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void Top::Interface::GetFooCompleterBase::Reply(::llcpp::bottom::Foo foo) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<GetFooResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<GetFooResponse*>(_write_bytes);
  Top::SetTransactionHeaderFor::GetFooResponse(
      ::fidl::DecodedMessage<GetFooResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetFooResponse::PrimarySize,
              GetFooResponse::PrimarySize)));
  _response.foo = std::move(foo);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(GetFooResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetFooResponse>(std::move(_response_bytes)));
}

void Top::Interface::GetFooCompleterBase::Reply(::fidl::BytePart _buffer, ::llcpp::bottom::Foo foo) {
  if (_buffer.capacity() < GetFooResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<GetFooResponse*>(_buffer.data());
  Top::SetTransactionHeaderFor::GetFooResponse(
      ::fidl::DecodedMessage<GetFooResponse>(
          ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
              GetFooResponse::PrimarySize,
              GetFooResponse::PrimarySize)));
  _response.foo = std::move(foo);
  _buffer.set_actual(sizeof(GetFooResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<GetFooResponse>(std::move(_buffer)));
}

void Top::Interface::GetFooCompleterBase::Reply(::fidl::DecodedMessage<GetFooResponse> params) {
  Top::SetTransactionHeaderFor::GetFooResponse(params);
  CompleterBase::SendReply(std::move(params));
}



void Top::SetTransactionHeaderFor::GetFooRequest(const ::fidl::DecodedMessage<Top::GetFooRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kTop_GetFoo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Top::SetTransactionHeaderFor::GetFooResponse(const ::fidl::DecodedMessage<Top::GetFooResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kTop_GetFoo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

}  // namespace top
}  // namespace llcpp
