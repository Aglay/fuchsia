// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"

#include <test/name/cpp/fidl.h>
// For ::std::max_element().
#include <algorithm>

namespace fuzzing {


using StructWithNullableXUnion = ::test::name::StructWithNullableXUnion;
using StrictSimpleXUnion = ::test::name::StrictSimpleXUnion;
using StrictBoundedXUnion = ::test::name::StrictBoundedXUnion;
using OlderSimpleUnion = ::test::name::OlderSimpleUnion;
using NewerSimpleUnion = ::test::name::NewerSimpleUnion;
using Empty = ::test::name::Empty;
using XUnionContainingEmptyStruct = ::test::name::XUnionContainingEmptyStruct;


template<>
struct MinSize<StructWithNullableXUnion> {
  operator size_t() {
    return MinSize<::std::unique_ptr<OlderSimpleUnion>>();
  }
};
template<>
struct Allocate<StructWithNullableXUnion> {
  StructWithNullableXUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StructWithNullableXUnion>());
    const size_t slack_per_member = (*size - MinSize<StructWithNullableXUnion>()) / 1;
    StructWithNullableXUnion out;
    size_t out_size;
    out_size = MinSize<::std::unique_ptr<OlderSimpleUnion>>() + slack_per_member;
    out.x1 = Allocate<::std::unique_ptr<OlderSimpleUnion>>{}(src, &out_size);
    return out;
  }
};
template<>
struct MinSize<StrictSimpleXUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int32_t>(), MinSize<float>(), MinSize<::std::string>()};
    return 1 + *std::max_element(sizes, sizes + 3 + 1);
  }
};
template<>
struct Allocate<StrictSimpleXUnion> {
  static_assert(3 > 0, "xunion must have at least one member");

  StrictSimpleXUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StrictSimpleXUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    StrictSimpleXUnion out;
    switch (selector % 3) {
      case 0: {
        out.set_i(std::move(Allocate<int32_t>{}(src, size)));
        break;
      }
      case 1: {
        out.set_f(std::move(Allocate<float>{}(src, size)));
        break;
      }
      case 2: {
        out.set_s(std::move(Allocate<::std::string>{}(src, size)));
        break;
      }
    }

    return out;
  }
};
template<>
struct MinSize<StrictBoundedXUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<::std::vector<uint8_t>>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template<>
struct Allocate<StrictBoundedXUnion> {
  static_assert(1 > 0, "xunion must have at least one member");

  StrictBoundedXUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<StrictBoundedXUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    StrictBoundedXUnion out;
    switch (selector % 1) {
      case 0: {
        out.set_v(std::move(Allocate<::std::vector<uint8_t>>{}(src, size)));
        break;
      }
    }

    return out;
  }
};
template<>
struct MinSize<OlderSimpleUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int64_t>(), MinSize<float>()};
    return 1 + *std::max_element(sizes, sizes + 2 + 1);
  }
};
template<>
struct Allocate<OlderSimpleUnion> {
  static_assert(2 > 0, "xunion must have at least one member");

  OlderSimpleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<OlderSimpleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    OlderSimpleUnion out;
    switch (selector % 2) {
      case 0: {
        out.set_i(std::move(Allocate<int64_t>{}(src, size)));
        break;
      }
      case 1: {
        out.set_f(std::move(Allocate<float>{}(src, size)));
        break;
      }
    }

    return out;
  }
};
template<>
struct MinSize<NewerSimpleUnion> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<int64_t>(), MinSize<::std::string>(), MinSize<::std::vector<::std::string>>()};
    return 1 + *std::max_element(sizes, sizes + 3 + 1);
  }
};
template<>
struct Allocate<NewerSimpleUnion> {
  static_assert(3 > 0, "xunion must have at least one member");

  NewerSimpleUnion operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<NewerSimpleUnion>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    NewerSimpleUnion out;
    switch (selector % 3) {
      case 0: {
        out.set_i(std::move(Allocate<int64_t>{}(src, size)));
        break;
      }
      case 1: {
        out.set_s(std::move(Allocate<::std::string>{}(src, size)));
        break;
      }
      case 2: {
        out.set_v(std::move(Allocate<::std::vector<::std::string>>{}(src, size)));
        break;
      }
    }

    return out;
  }
};
template<>
struct MinSize<Empty> {
  operator size_t() {
    return MinSize<uint8_t>();
  }
};
template<>
struct Allocate<Empty> {
  Empty operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Empty>());
    const size_t slack_per_member = (*size - MinSize<Empty>()) / 1;
    Empty out;
    size_t out_size;
    out_size = MinSize<uint8_t>() + slack_per_member;
    out.__reserved = Allocate<uint8_t>{}(src, &out_size);
    return out;
  }
};
template<>
struct MinSize<XUnionContainingEmptyStruct> {
  operator size_t() {
    size_t sizes[] = {0, MinSize<Empty>()};
    return 1 + *std::max_element(sizes, sizes + 1 + 1);
  }
};
template<>
struct Allocate<XUnionContainingEmptyStruct> {
  static_assert(1 > 0, "xunion must have at least one member");

  XUnionContainingEmptyStruct operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<XUnionContainingEmptyStruct>());

    uint8_t selector;
    ZX_ASSERT(src->CopyBytes(&selector, 1));
    (*size)++;

    XUnionContainingEmptyStruct out;
    switch (selector % 1) {
      case 0: {
        out.set_empty(std::move(Allocate<Empty>{}(src, size)));
        break;
      }
    }

    return out;
  }
};

}  // namespace fuzzing
