// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_bindings "syscall/zx/fidl"
)





type NullableUnionStruct struct {
	_ struct{} `fidl:"s" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	TheUnion *Union`fidl:"0" fidl_offset_v1:"0"`
}

var _mNullableUnionStruct = _bindings.CreateLazyMarshaler(NullableUnionStruct{})

func (msg *NullableUnionStruct) Marshaler() _bindings.Marshaler {
	return _mNullableUnionStruct
}
type I_unionTag uint64
const (
	UnionPrimitive = 1 // 0x00000001
	UnionStringNeedsConstructor = 2 // 0x00000002
	UnionVectorStringAlsoNeedsConstructor = 3 // 0x00000003
)


type Union struct {
	I_unionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Primitive int32  `fidl:"1" fidl_hashed_ord:"1" fidl_explicit_ord:"1"`
	StringNeedsConstructor string  `fidl:"2," fidl_hashed_ord:"2" fidl_explicit_ord:"2"`
	VectorStringAlsoNeedsConstructor []string  `fidl:"3,," fidl_hashed_ord:"3" fidl_explicit_ord:"3"`
}

func (_m *Union) Which() I_unionTag {
	return _m.I_unionTag
}

func (_m *Union) Ordinal() uint64 {
	return uint64(_m.I_unionTag)
}

func (_m *Union) SetPrimitive(primitive int32) {
	_m.I_unionTag = UnionPrimitive
	_m.Primitive = primitive
}

func UnionWithPrimitive(primitive int32) Union {
	var _u Union
	_u.SetPrimitive(primitive)
	return _u
}

func (_m *Union) SetStringNeedsConstructor(stringNeedsConstructor string) {
	_m.I_unionTag = UnionStringNeedsConstructor
	_m.StringNeedsConstructor = stringNeedsConstructor
}

func UnionWithStringNeedsConstructor(stringNeedsConstructor string) Union {
	var _u Union
	_u.SetStringNeedsConstructor(stringNeedsConstructor)
	return _u
}

func (_m *Union) SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) {
	_m.I_unionTag = UnionVectorStringAlsoNeedsConstructor
	_m.VectorStringAlsoNeedsConstructor = vectorStringAlsoNeedsConstructor
}

func UnionWithVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) Union {
	var _u Union
	_u.SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor)
	return _u
}


type I_fieldCollisionTag uint64
const (
	FieldCollisionFieldCollisionTag = 1 // 0x00000001
)


type FieldCollision struct {
	I_fieldCollisionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	FieldCollisionTag int32  `fidl:"1" fidl_hashed_ord:"1" fidl_explicit_ord:"1"`
}

func (_m *FieldCollision) Which() I_fieldCollisionTag {
	return _m.I_fieldCollisionTag
}

func (_m *FieldCollision) Ordinal() uint64 {
	return uint64(_m.I_fieldCollisionTag)
}

func (_m *FieldCollision) SetFieldCollisionTag(fieldCollisionTag int32) {
	_m.I_fieldCollisionTag = FieldCollisionFieldCollisionTag
	_m.FieldCollisionTag = fieldCollisionTag
}

func FieldCollisionWithFieldCollisionTag(fieldCollisionTag int32) FieldCollision {
	var _u FieldCollision
	_u.SetFieldCollisionTag(fieldCollisionTag)
	return _u
}


type I_explicitUnionTag uint64
const (
	ExplicitUnionPrimitive = 1 // 0x00000001
	ExplicitUnionStringNeedsConstructor = 3 // 0x00000003
)


type ExplicitUnion struct {
	I_explicitUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Primitive int32  `fidl:"1" fidl_hashed_ord:"1" fidl_explicit_ord:"1"`
	StringNeedsConstructor string  `fidl:"3," fidl_hashed_ord:"3" fidl_explicit_ord:"3"`
}

func (_m *ExplicitUnion) Which() I_explicitUnionTag {
	return _m.I_explicitUnionTag
}

func (_m *ExplicitUnion) Ordinal() uint64 {
	return uint64(_m.I_explicitUnionTag)
}

func (_m *ExplicitUnion) SetPrimitive(primitive int32) {
	_m.I_explicitUnionTag = ExplicitUnionPrimitive
	_m.Primitive = primitive
}

func ExplicitUnionWithPrimitive(primitive int32) ExplicitUnion {
	var _u ExplicitUnion
	_u.SetPrimitive(primitive)
	return _u
}

func (_m *ExplicitUnion) SetStringNeedsConstructor(stringNeedsConstructor string) {
	_m.I_explicitUnionTag = ExplicitUnionStringNeedsConstructor
	_m.StringNeedsConstructor = stringNeedsConstructor
}

func ExplicitUnionWithStringNeedsConstructor(stringNeedsConstructor string) ExplicitUnion {
	var _u ExplicitUnion
	_u.SetStringNeedsConstructor(stringNeedsConstructor)
	return _u
}


type I_reverseOrdinalUnionTag uint64
const (
	ReverseOrdinalUnionFirst = 1 // 0x00000001
	ReverseOrdinalUnionSecond = 2 // 0x00000002
)


type ReverseOrdinalUnion struct {
	I_reverseOrdinalUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	First uint32  `fidl:"1" fidl_hashed_ord:"1" fidl_explicit_ord:"1"`
	Second uint32  `fidl:"2" fidl_hashed_ord:"2" fidl_explicit_ord:"2"`
}

func (_m *ReverseOrdinalUnion) Which() I_reverseOrdinalUnionTag {
	return _m.I_reverseOrdinalUnionTag
}

func (_m *ReverseOrdinalUnion) Ordinal() uint64 {
	return uint64(_m.I_reverseOrdinalUnionTag)
}

func (_m *ReverseOrdinalUnion) SetFirst(first uint32) {
	_m.I_reverseOrdinalUnionTag = ReverseOrdinalUnionFirst
	_m.First = first
}

func ReverseOrdinalUnionWithFirst(first uint32) ReverseOrdinalUnion {
	var _u ReverseOrdinalUnion
	_u.SetFirst(first)
	return _u
}

func (_m *ReverseOrdinalUnion) SetSecond(second uint32) {
	_m.I_reverseOrdinalUnionTag = ReverseOrdinalUnionSecond
	_m.Second = second
}

func ReverseOrdinalUnionWithSecond(second uint32) ReverseOrdinalUnion {
	var _u ReverseOrdinalUnion
	_u.SetSecond(second)
	return _u
}


