// WARNING: This file is machine generated by fidlgen.

#include <union_sandwich.test.fidl.json.llcpp.h>
#include <memory>

namespace llcpp {

namespace test {
namespace fidl {
namespace unionsandwich {

::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4::UnionSize8Aligned4() {
  tag_ = Tag::Invalid;
}

::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4::~UnionSize8Aligned4() {
  Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4::Destroy() {
  switch (which()) {
  default:
    break;
  }
  tag_ = Tag::Invalid;
}

void ::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4::MoveImpl_(UnionSize8Aligned4&& other) {
  switch (other.which()) {
  case Tag::kVariant:
    mutable_variant() = std::move(other.mutable_variant());
    break;
  default:
    break;
  }
  other.Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4, variant_) == 4);
  static_assert(sizeof(::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4) == ::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4::PrimarySize);
}


uint32_t& ::llcpp::test::fidl::unionsandwich::UnionSize8Aligned4::mutable_variant() {
  if (which() != Tag::kVariant) {
    Destroy();
    new (&variant_) uint32_t;
  }
  tag_ = Tag::kVariant;
  return variant_;
}


::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4::UnionSize30Alignment4() {
  tag_ = Tag::Invalid;
}

::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4::~UnionSize30Alignment4() {
  Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4::Destroy() {
  switch (which()) {
  case Tag::kVariant:
    variant_.~Array();
    break;
  default:
    break;
  }
  tag_ = Tag::Invalid;
}

void ::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4::MoveImpl_(UnionSize30Alignment4&& other) {
  switch (other.which()) {
  case Tag::kVariant:
    mutable_variant() = std::move(other.mutable_variant());
    break;
  default:
    break;
  }
  other.Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4, variant_) == 4);
  static_assert(sizeof(::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4) == ::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4::PrimarySize);
}


::fidl::Array<uint8_t, 30>& ::llcpp::test::fidl::unionsandwich::UnionSize30Alignment4::mutable_variant() {
  if (which() != Tag::kVariant) {
    Destroy();
    new (&variant_) ::fidl::Array<uint8_t, 30>;
  }
  tag_ = Tag::kVariant;
  return variant_;
}


::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4::UnionSize12Aligned4() {
  tag_ = Tag::Invalid;
}

::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4::~UnionSize12Aligned4() {
  Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4::Destroy() {
  switch (which()) {
  case Tag::kVariant:
    variant_.~Array();
    break;
  default:
    break;
  }
  tag_ = Tag::Invalid;
}

void ::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4::MoveImpl_(UnionSize12Aligned4&& other) {
  switch (other.which()) {
  case Tag::kVariant:
    mutable_variant() = std::move(other.mutable_variant());
    break;
  default:
    break;
  }
  other.Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4, variant_) == 4);
  static_assert(sizeof(::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4) == ::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4::PrimarySize);
}


::fidl::Array<uint8_t, 6>& ::llcpp::test::fidl::unionsandwich::UnionSize12Aligned4::mutable_variant() {
  if (which() != Tag::kVariant) {
    Destroy();
    new (&variant_) ::fidl::Array<uint8_t, 6>;
  }
  tag_ = Tag::kVariant;
  return variant_;
}


::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8::UnionSize24Alignment8() {
  tag_ = Tag::Invalid;
}

::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8::~UnionSize24Alignment8() {
  Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8::Destroy() {
  switch (which()) {
  case Tag::kVariant:
    variant_.~StructSize16Alignment8();
    break;
  default:
    break;
  }
  tag_ = Tag::Invalid;
}

void ::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8::MoveImpl_(UnionSize24Alignment8&& other) {
  switch (other.which()) {
  case Tag::kVariant:
    mutable_variant() = std::move(other.mutable_variant());
    break;
  default:
    break;
  }
  other.Destroy();
}

void ::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8, variant_) == 8);
  static_assert(sizeof(::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8) == ::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8::PrimarySize);
}


::llcpp::test::fidl::unionsandwich::StructSize16Alignment8& ::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8::mutable_variant() {
  if (which() != Tag::kVariant) {
    Destroy();
    new (&variant_) ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8;
  }
  tag_ = Tag::kVariant;
  return variant_;
}


}  // namespace unionsandwich
}  // namespace fidl
}  // namespace test
}  // namespace llcpp
