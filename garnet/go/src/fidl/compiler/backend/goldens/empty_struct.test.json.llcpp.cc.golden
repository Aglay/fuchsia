// WARNING: This file is machine generated by fidlgen.

#include <empty_struct.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

namespace {

[[maybe_unused]] constexpr uint64_t kEmptyProtocol_Send_Ordinal =
    550167292114688515lu;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolSendRequestTable;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolSendResponseTable;
[[maybe_unused]] constexpr uint64_t kEmptyProtocol_Receive_Ordinal =
    7186107129703123093lu;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolReceiveRequestTable;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolReceiveEventTable;
[[maybe_unused]] constexpr uint64_t kEmptyProtocol_SendAndReceive_Ordinal =
    2187042876758414869lu;
extern "C" const fidl_type_t
    fidl_test_json_EmptyProtocolSendAndReceiveRequestTable;
extern "C" const fidl_type_t
    fidl_test_json_EmptyProtocolSendAndReceiveResponseTable;

}  // namespace

EmptyProtocol::ResultOf::Send_Impl::Send_Impl(
    ::zx::unowned_channel _client_end, ::llcpp::fidl::test::json::Empty& e) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(SendRequest)];
  auto& _request = *new (_request_buffer) SendRequest(0, e);

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<SendRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<SendRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(EmptyProtocol::InPlace::Send(std::move(_client_end),
                                                std::move(_encoded_request)));
}

EmptyProtocol::ResultOf::Send EmptyProtocol::SyncClient::Send(
    ::llcpp::fidl::test::json::Empty e) {
  return ResultOf::Send(::zx::unowned_channel(this->channel_), e);
}

EmptyProtocol::ResultOf::Send EmptyProtocol::Call::Send(
    ::zx::unowned_channel _client_end, ::llcpp::fidl::test::json::Empty e) {
  return ResultOf::Send(std::move(_client_end), e);
}

EmptyProtocol::UnownedResultOf::Send_Impl::Send_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::llcpp::fidl::test::json::Empty e) {
  if (_request_buffer.capacity() < SendRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::kErrorRequestBufferTooSmall;
    return;
  }
  new (_request_buffer.data()) SendRequest(0, e);
  _request_buffer.set_actual(sizeof(SendRequest));
  ::fidl::DecodedMessage<SendRequest> _msg(std::move(_request_buffer));
  auto _encode_result = ::fidl::Encode<SendRequest>(std::move(_msg));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<SendRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(EmptyProtocol::InPlace::Send(std::move(_client_end),
                                                std::move(_encoded_request)));
}

EmptyProtocol::UnownedResultOf::Send EmptyProtocol::SyncClient::Send(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e) {
  return UnownedResultOf::Send(::zx::unowned_channel(this->channel_),
                               std::move(_request_buffer), std::move(e));
}

EmptyProtocol::UnownedResultOf::Send EmptyProtocol::Call::Send(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::llcpp::fidl::test::json::Empty e) {
  return UnownedResultOf::Send(std::move(_client_end),
                               std::move(_request_buffer), std::move(e));
}

::fidl::internal::StatusAndError EmptyProtocol::InPlace::Send(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<SendRequest> params) {
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  return Send(std::move(_client_end),
              std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError EmptyProtocol::InPlace::Send(
    ::zx::unowned_channel _client_end,
    ::fidl::EncodedMessage<SendRequest> params) {
  SendRequest* request = reinterpret_cast<SendRequest*>(params.bytes().data());
  fidl_init_txn_header(&request->_hdr, 0, kEmptyProtocol_Send_Ordinal);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

template <>
EmptyProtocol::ResultOf::SendAndReceive_Impl<
    EmptyProtocol::SendAndReceiveResponse>::
    SendAndReceive_Impl(::zx::unowned_channel _client_end,
                        ::llcpp::fidl::test::json::Empty& e) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(SendAndReceiveRequest)];
  auto& _request = *new (_request_buffer) SendAndReceiveRequest(0, e);

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<SendAndReceiveRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<SendAndReceiveRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::SetResult(EmptyProtocol::InPlace::SendAndReceive(
      std::move(_client_end), std::move(_encoded_request),
      Super::response_buffer()));
}

EmptyProtocol::ResultOf::SendAndReceive
EmptyProtocol::SyncClient::SendAndReceive(::llcpp::fidl::test::json::Empty e) {
  return ResultOf::SendAndReceive(::zx::unowned_channel(this->channel_), e);
}

EmptyProtocol::ResultOf::SendAndReceive EmptyProtocol::Call::SendAndReceive(
    ::zx::unowned_channel _client_end, ::llcpp::fidl::test::json::Empty e) {
  return ResultOf::SendAndReceive(std::move(_client_end), e);
}

template <>
EmptyProtocol::UnownedResultOf::SendAndReceive_Impl<
    EmptyProtocol::SendAndReceiveResponse>::
    SendAndReceive_Impl(::zx::unowned_channel _client_end,
                        ::fidl::BytePart _request_buffer,
                        ::llcpp::fidl::test::json::Empty e,
                        ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < SendAndReceiveRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<SendAndReceiveResponse>(
        ZX_ERR_BUFFER_TOO_SMALL, ::fidl::kErrorRequestBufferTooSmall));
    return;
  }
  new (_request_buffer.data()) SendAndReceiveRequest(0, e);
  _request_buffer.set_actual(sizeof(SendAndReceiveRequest));
  ::fidl::DecodedMessage<SendAndReceiveRequest> _msg(
      std::move(_request_buffer));
  auto _encode_result = ::fidl::Encode<SendAndReceiveRequest>(std::move(_msg));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<SendAndReceiveRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::SetResult(EmptyProtocol::InPlace::SendAndReceive(
      std::move(_client_end), std::move(_encoded_request),
      std::move(_response_buffer)));
}

EmptyProtocol::UnownedResultOf::SendAndReceive
EmptyProtocol::SyncClient::SendAndReceive(::fidl::BytePart _request_buffer,
                                          ::llcpp::fidl::test::json::Empty e,
                                          ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SendAndReceive(
      ::zx::unowned_channel(this->channel_), std::move(_request_buffer),
      std::move(e), std::move(_response_buffer));
}

EmptyProtocol::UnownedResultOf::SendAndReceive
EmptyProtocol::Call::SendAndReceive(::zx::unowned_channel _client_end,
                                    ::fidl::BytePart _request_buffer,
                                    ::llcpp::fidl::test::json::Empty e,
                                    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SendAndReceive(
      std::move(_client_end), std::move(_request_buffer), std::move(e),
      std::move(_response_buffer));
}

::fidl::DecodeResult<EmptyProtocol::SendAndReceiveResponse>
EmptyProtocol::InPlace::SendAndReceive(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<SendAndReceiveRequest> params,
    ::fidl::BytePart response_buffer) {
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<EmptyProtocol::SendAndReceiveResponse>::
        FromFailure(std::move(_encode_request_result));
  }
  return SendAndReceive(std::move(_client_end),
                        std::move(_encode_request_result.message),
                        std::move(response_buffer));
}

::fidl::DecodeResult<EmptyProtocol::SendAndReceiveResponse>
EmptyProtocol::InPlace::SendAndReceive(
    ::zx::unowned_channel _client_end,
    ::fidl::EncodedMessage<SendAndReceiveRequest> params,
    ::fidl::BytePart response_buffer) {
  SendAndReceiveRequest* request =
      reinterpret_cast<SendAndReceiveRequest*>(params.bytes().data());
  fidl_init_txn_header(&request->_hdr, 0,
                       kEmptyProtocol_SendAndReceive_Ordinal);
  auto _call_result =
      ::fidl::Call<SendAndReceiveRequest, SendAndReceiveResponse>(
          std::move(_client_end), std::move(params),
          std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<EmptyProtocol::SendAndReceiveResponse>::
        FromFailure(std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

::fidl::StatusAndError EmptyProtocol::ClientImpl::Send(
    ::llcpp::fidl::test::json::Empty e) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::Send(_binding->channel(), e);
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError EmptyProtocol::ClientImpl::Send(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = UnownedResultOf::Send(_binding->channel(),
                                      std::move(_request_buffer), std::move(e));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

EmptyProtocol::ResultOf::SendAndReceive
EmptyProtocol::ClientImpl::SendAndReceive_Sync(
    ::llcpp::fidl::test::json::Empty e) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::SendAndReceive(_binding->channel(), e);
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

EmptyProtocol::UnownedResultOf::SendAndReceive
EmptyProtocol::ClientImpl::SendAndReceive_Sync(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e,
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::SendAndReceive(
        _binding->channel(), std::move(_request_buffer), std::move(e),
        std::move(_response_buffer));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError EmptyProtocol::ClientImpl::SendAndReceive(
    ::llcpp::fidl::test::json::Empty e,
    ::fit::callback<void(::llcpp::fidl::test::json::Empty e)> _cb) {
  class ManagedResponseContext : public SendAndReceiveResponseContext {
   public:
    ManagedResponseContext(
        ::fit::callback<void(::llcpp::fidl::test::json::Empty e)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<SendAndReceiveResponse> msg) override {
      auto message = msg.message();
      cb_(std::move(message->e));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::fidl::test::json::Empty e)> cb_;
  };
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      SendAndReceiveRequest, ::fidl::MessageDirection::kSending>();
  ::fidl::internal::AlignedBuffer<_kWriteAllocSize> _write_bytes_inlined;
  auto& _write_bytes_array = _write_bytes_inlined;

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error =
      SendAndReceive(_write_bytes_array.view(), std::move(e), _context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError EmptyProtocol::ClientImpl::SendAndReceive(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e,
    SendAndReceiveResponseContext* _context) {
  if (_request_buffer.capacity() < SendAndReceiveRequest::PrimarySize) {
    return ::fidl::StatusAndError(ZX_ERR_BUFFER_TOO_SMALL,
                                  ::fidl::kErrorRequestBufferTooSmall);
  }

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  new (_request_buffer.data()) SendAndReceiveRequest(_context->Txid(), e);
  _request_buffer.set_actual(sizeof(SendAndReceiveRequest));
  ::fidl::DecodedMessage<SendAndReceiveRequest> _decoded_request(
      std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return ::fidl::DecodeResult<SendAndReceiveResponse>::FromFailure(
        std::move(_encode_request_result));
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t EmptyProtocol::ClientImpl::Dispatch(
    fidl_msg_t* msg, ::fidl::internal::ResponseContext* context) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kEmptyProtocol_Receive_Ordinal: {
      auto result = ::fidl::DecodeAs<ReceiveResponse>(msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      if (auto* managed = std::get_if<0>(&handlers_.receive)) {
        if (!(*managed)) return ZX_ERR_NOT_SUPPORTED;
        auto message = result.message.message();
        (*managed)(std::move(message->e));
      } else {
        std::get<1>(handlers_.receive)(std::move(result.message));
      }
      break;
    }
    case kEmptyProtocol_SendAndReceive_Ordinal: {
      auto result = ::fidl::DecodeAs<SendAndReceiveResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return result.status;
      }
      static_cast<SendAndReceiveResponseContext*>(context)->OnReply(
          std::move(result.message));
      break;
    }
    case kFidlOrdinalEpitaph:
      if (context) return ZX_ERR_INVALID_ARGS;
      ::fidl::internal::ClientBase::Close(
          reinterpret_cast<fidl_epitaph_t*>(hdr)->error);
      break;
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context) context->OnError();
      return ZX_ERR_NOT_SUPPORTED;
  }
  return ZX_OK;
}

zx_status_t EmptyProtocol::SyncClient::HandleEvents(
    EmptyProtocol::EventHandlers handlers) {
  return EmptyProtocol::Call::HandleEvents(::zx::unowned_channel(channel_),
                                           std::move(handlers));
}

zx_status_t EmptyProtocol::Call::HandleEvents(
    ::zx::unowned_channel client_end, EmptyProtocol::EventHandlers handlers) {
  zx_status_t status =
      client_end->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                           ::zx::time::infinite(), nullptr);
  if (status != ZX_OK) {
    return status;
  }
  constexpr uint32_t kReadAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::internal::ClampedMessageSize<
            ReceiveResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<
          ReceiveResponse, ::fidl::MessageDirection::kReceiving>();
    }
    return x;
  })();
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (ReceiveResponse::MaxNumHandles >= x) {
      x = ReceiveResponse::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  ::fidl::internal::ByteStorage<kReadAllocSize> read_storage;
  uint8_t* read_bytes = read_storage.buffer().data();
  zx_handle_t read_handles[kHandleAllocSize];
  uint32_t actual_bytes;
  uint32_t actual_handles;
  status = client_end->read(ZX_CHANNEL_READ_MAY_DISCARD, read_bytes,
                            read_handles, kReadAllocSize, kHandleAllocSize,
                            &actual_bytes, &actual_handles);
  if (status == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return handlers.unknown();
  }
  if (status != ZX_OK) {
    return status;
  }
  if (actual_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(read_handles, actual_handles);
    return ZX_ERR_INVALID_ARGS;
  }
  auto msg = fidl_msg_t{.bytes = read_bytes,
                        .handles = read_handles,
                        .num_bytes = actual_bytes,
                        .num_handles = actual_handles};
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg.bytes);
  status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    return status;
  }
  switch (hdr->ordinal) {
    case kEmptyProtocol_Receive_Ordinal: {
      auto result = ::fidl::DecodeAs<ReceiveResponse>(&msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      auto message = result.message.message();
      return handlers.receive(std::move(message->e));
    }
    default:
      zx_handle_close_many(read_handles, actual_handles);
      return handlers.unknown();
  }
}

bool EmptyProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kEmptyProtocol_Send_Ordinal: {
      auto result = ::fidl::DecodeAs<SendRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Send(std::move(message->e), Interface::SendCompleter::Sync(txn));
      return true;
    }
    case kEmptyProtocol_SendAndReceive_Ordinal: {
      auto result = ::fidl::DecodeAs<SendAndReceiveRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->SendAndReceive(std::move(message->e),
                           Interface::SendAndReceiveCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool EmptyProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                             ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

zx_status_t EmptyProtocol::SendReceiveEvent(
    ::zx::unowned_channel _chan, ::llcpp::fidl::test::json::Empty e) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(ReceiveResponse)];
  auto& _response = *new (_response_buffer) ReceiveResponse{e};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<ReceiveResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    return _encode_result.status;
  }
  return ::fidl::Write(::zx::unowned_channel(_chan),
                       std::move(_encode_result.message));
}

zx_status_t EmptyProtocol::SendReceiveEvent(
    ::zx::unowned_channel _chan, ::fidl::BytePart _buffer,
    ::llcpp::fidl::test::json::Empty e) {
  if (_buffer.capacity() < ReceiveResponse::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  new (_buffer.data()) ReceiveResponse{e};
  _buffer.set_actual(sizeof(ReceiveResponse));
  return ::fidl::Write(
      ::zx::unowned_channel(_chan),
      ::fidl::DecodedMessage<ReceiveResponse>(std::move(_buffer)));
}

zx_status_t EmptyProtocol::SendReceiveEvent(
    ::zx::unowned_channel _chan,
    ::fidl::DecodedMessage<ReceiveResponse> params) {
  ZX_ASSERT(params.message()->_hdr.magic_number ==
            kFidlWireFormatMagicNumberInitial);
  ZX_ASSERT(params.message()->_hdr.ordinal == kEmptyProtocol_Receive_Ordinal);
  return ::fidl::Write(::zx::unowned_channel(_chan), std::move(params));
}

void EmptyProtocol::Interface::SendAndReceiveCompleterBase::Reply(
    ::llcpp::fidl::test::json::Empty e) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(SendAndReceiveResponse)];
  auto& _response = *new (_response_buffer) SendAndReceiveResponse{e};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<SendAndReceiveResponse>(
          &_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_encode_result.message));
}

void EmptyProtocol::Interface::SendAndReceiveCompleterBase::Reply(
    ::fidl::BytePart _buffer, ::llcpp::fidl::test::json::Empty e) {
  if (_buffer.capacity() < SendAndReceiveResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  new (_buffer.data()) SendAndReceiveResponse{e};
  _buffer.set_actual(sizeof(SendAndReceiveResponse));
  CompleterBase::SendReply(
      ::fidl::DecodedMessage<SendAndReceiveResponse>(std::move(_buffer)));
}

void EmptyProtocol::Interface::SendAndReceiveCompleterBase::Reply(
    ::fidl::DecodedMessage<SendAndReceiveResponse> params) {
  ZX_DEBUG_ASSERT(params.message()->_hdr.magic_number ==
                  kFidlWireFormatMagicNumberInitial);
  ZX_DEBUG_ASSERT(params.message()->_hdr.ordinal ==
                  kEmptyProtocol_SendAndReceive_Ordinal);
  CompleterBase::SendReply(std::move(params));
}

void EmptyProtocol::SendRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kEmptyProtocol_Send_Ordinal);
}

void EmptyProtocol::ReceiveResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kEmptyProtocol_Receive_Ordinal);
}

void EmptyProtocol::SendAndReceiveRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kEmptyProtocol_SendAndReceive_Ordinal);
}

void EmptyProtocol::SendAndReceiveResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kEmptyProtocol_SendAndReceive_Ordinal);
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
