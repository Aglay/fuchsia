// WARNING: This file is machine generated by fidlgen.

#include <empty_struct.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

namespace {

[[maybe_unused]] constexpr uint64_t kEmptyProtocol_Send_Ordinal =
    550167292114688515lu;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolSendRequestTable;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolSendResponseTable;
[[maybe_unused]] constexpr uint64_t kEmptyProtocol_Receive_Ordinal =
    7186107129703123093lu;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolReceiveRequestTable;
extern "C" const fidl_type_t fidl_test_json_EmptyProtocolReceiveEventTable;
[[maybe_unused]] constexpr uint64_t kEmptyProtocol_SendAndReceive_Ordinal =
    2187042876758414869lu;
extern "C" const fidl_type_t
    fidl_test_json_EmptyProtocolSendAndReceiveRequestTable;
extern "C" const fidl_type_t
    fidl_test_json_EmptyProtocolSendAndReceiveResponseTable;

}  // namespace
EmptyProtocol::ResultOf::Send::Send(zx_handle_t _client,
                                    ::llcpp::fidl::test::json::Empty& e) {
  SendOwnedRequest _request(0, e);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

EmptyProtocol::ResultOf::Send EmptyProtocol::SyncClient::Send(
    ::llcpp::fidl::test::json::Empty e) {
  return ResultOf::Send(this->channel().get(), e);
}

EmptyProtocol::ResultOf::Send EmptyProtocol::Call::Send(
    ::zx::unowned_channel _client_end, ::llcpp::fidl::test::json::Empty e) {
  return ResultOf::Send(_client_end->get(), e);
}

EmptyProtocol::UnownedResultOf::Send::Send(
    zx_handle_t _client, uint8_t* _request_bytes,
    uint32_t _request_byte_capacity, ::llcpp::fidl::test::json::Empty& e) {
  SendUnownedRequest _request(_request_bytes, _request_byte_capacity, 0, e);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

EmptyProtocol::UnownedResultOf::Send EmptyProtocol::SyncClient::Send(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e) {
  return UnownedResultOf::Send(this->channel().get(), _request_buffer.data(),
                               _request_buffer.capacity(), e);
}

EmptyProtocol::UnownedResultOf::Send EmptyProtocol::Call::Send(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::llcpp::fidl::test::json::Empty e) {
  return UnownedResultOf::Send(_client_end->get(), _request_buffer.data(),
                               _request_buffer.capacity(), e);
}

EmptyProtocol::ResultOf::SendAndReceive::SendAndReceive(
    zx_handle_t _client, ::llcpp::fidl::test::json::Empty& e) {
  SendAndReceiveOwnedRequest _request(0, e);
  _request.GetFidlMessage().Call(SendAndReceiveResponse::Type, _client, bytes_,
                                 SendAndReceiveResponse::PrimarySize +
                                     SendAndReceiveResponse::MaxOutOfLine);
  status_ = _request.status();
  error_ = _request.error();
}

EmptyProtocol::ResultOf::SendAndReceive
EmptyProtocol::SyncClient::SendAndReceive(::llcpp::fidl::test::json::Empty e) {
  return ResultOf::SendAndReceive(this->channel().get(), e);
}

EmptyProtocol::ResultOf::SendAndReceive EmptyProtocol::Call::SendAndReceive(
    ::zx::unowned_channel _client_end, ::llcpp::fidl::test::json::Empty e) {
  return ResultOf::SendAndReceive(_client_end->get(), e);
}

EmptyProtocol::UnownedResultOf::SendAndReceive::SendAndReceive(
    zx_handle_t _client, uint8_t* _request_bytes,
    uint32_t _request_byte_capacity, ::llcpp::fidl::test::json::Empty& e,
    uint8_t* _response_bytes, uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  SendAndReceiveUnownedRequest _request(_request_bytes, _request_byte_capacity,
                                        0, e);
  _request.GetFidlMessage().Call(SendAndReceiveResponse::Type, _client,
                                 _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}

EmptyProtocol::UnownedResultOf::SendAndReceive
EmptyProtocol::SyncClient::SendAndReceive(::fidl::BytePart _request_buffer,
                                          ::llcpp::fidl::test::json::Empty e,
                                          ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SendAndReceive(
      this->channel().get(), _request_buffer.data(), _request_buffer.capacity(),
      e, _response_buffer.data(), _response_buffer.capacity());
}

EmptyProtocol::UnownedResultOf::SendAndReceive
EmptyProtocol::Call::SendAndReceive(::zx::unowned_channel _client_end,
                                    ::fidl::BytePart _request_buffer,
                                    ::llcpp::fidl::test::json::Empty e,
                                    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::SendAndReceive(
      _client_end->get(), _request_buffer.data(), _request_buffer.capacity(), e,
      _response_buffer.data(), _response_buffer.capacity());
}

::fidl::Result EmptyProtocol::ClientImpl::Send(
    ::llcpp::fidl::test::json::Empty e) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::Send(_binding->handle(), e);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result EmptyProtocol::ClientImpl::Send(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res =
        UnownedResultOf::Send(_binding->handle(), _request_buffer.data(),
                              _request_buffer.capacity(), e);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

EmptyProtocol::ResultOf::SendAndReceive
EmptyProtocol::ClientImpl::SendAndReceive_Sync(
    ::llcpp::fidl::test::json::Empty e) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::SendAndReceive(_binding->handle(), e);
  }
  return EmptyProtocol::ResultOf::SendAndReceive(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

EmptyProtocol::UnownedResultOf::SendAndReceive
EmptyProtocol::ClientImpl::SendAndReceive_Sync(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e,
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::SendAndReceive(
        _binding->handle(), _request_buffer.data(), _request_buffer.capacity(),
        e, _response_buffer.data(), _response_buffer.capacity());
  }
  return EmptyProtocol::UnownedResultOf::SendAndReceive(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

EmptyProtocol::SendAndReceiveResponseContext::SendAndReceiveResponseContext()
    : ::fidl::internal::ResponseContext(SendAndReceiveResponse::Type,
                                        kEmptyProtocol_SendAndReceive_Ordinal) {
}

void EmptyProtocol::SendAndReceiveResponseContext::OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<SendAndReceiveResponse*>(reply));
}

::fidl::Result EmptyProtocol::ClientImpl::SendAndReceive(
    ::llcpp::fidl::test::json::Empty e,
    ::fit::callback<void(::llcpp::fidl::test::json::Empty e)> _cb) {
  class ResponseContext final : public SendAndReceiveResponseContext {
   public:
    ResponseContext(
        ::fit::callback<void(::llcpp::fidl::test::json::Empty e)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(SendAndReceiveResponse* message) override {
      cb_(std::move(message->e));

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(::llcpp::fidl::test::json::Empty e)> cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  SendAndReceiveOwnedRequest _request(_context->Txid(), e);
  return _request.GetFidlMessage().Write(this, _context);
}

::fidl::Result EmptyProtocol::ClientImpl::SendAndReceive(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::Empty e,
    SendAndReceiveResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  SendAndReceiveUnownedRequest _request(
      _request_buffer.data(), _request_buffer.capacity(), _context->Txid(), e);
  return _request.GetFidlMessage().Write(this, _context);
}

std::optional<::fidl::UnbindInfo> EmptyProtocol::ClientImpl::DispatchEvent(
    fidl_msg_t* msg) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kEmptyProtocol_Receive_Ordinal: {
      const char* error_message;
      zx_status_t status =
          fidl_decode(ReceiveResponse::Type, msg->bytes, msg->num_bytes,
                      msg->handles, msg->num_handles, &error_message);
      if (status != ZX_OK) {
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kDecodeError, status};
      }
      if (!handlers_.receive) {
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                  ZX_ERR_NOT_SUPPORTED};
      }
      handlers_.receive(reinterpret_cast<ReceiveResponse*>(msg->bytes));
      break;
    }
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

::fidl::Result EmptyProtocol::Call::HandleEvents(
    ::zx::unowned_channel client_end, EmptyProtocol::EventHandlers& handlers) {
  zx_status_t status =
      client_end->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                           ::zx::time::infinite(), nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result(status, ::fidl::kErrorWaitOneFailed);
  }
  constexpr uint32_t kReadAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::internal::ClampedMessageSize<
            ReceiveResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<
          ReceiveResponse, ::fidl::MessageDirection::kReceiving>();
    }
    return x;
  })();
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (ReceiveResponse::MaxNumHandles >= x) {
      x = ReceiveResponse::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  ::fidl::internal::ByteStorage<kReadAllocSize> read_storage;
  uint8_t* read_bytes = read_storage.buffer().data();
  zx_handle_t read_handles[kHandleAllocSize];
  uint32_t actual_bytes;
  uint32_t actual_handles;
  status = client_end->read(ZX_CHANNEL_READ_MAY_DISCARD, read_bytes,
                            read_handles, kReadAllocSize, kHandleAllocSize,
                            &actual_bytes, &actual_handles);
  if (status == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result(handlers.unknown(), nullptr);
  }
  if (status != ZX_OK) {
    return ::fidl::Result(status, ::fidl::kErrorReadFailed);
  }
  if (actual_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(read_handles, actual_handles);
    return ::fidl::Result(ZX_ERR_INVALID_ARGS, ::fidl::kErrorInvalidHeader);
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(read_bytes);
  status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    zx_handle_close_many(read_handles, actual_handles);
    return ::fidl::Result(status, ::fidl::kErrorInvalidHeader);
  }
  switch (hdr->ordinal) {
    case kEmptyProtocol_Receive_Ordinal: {
      const char* error_message;
      zx_status_t status =
          fidl_decode(ReceiveResponse::Type, read_bytes, actual_bytes,
                      read_handles, actual_handles, &error_message);
      if (status != ZX_OK) {
        return ::fidl::Result(status, error_message);
      }
      return ::fidl::Result(
          handlers.receive(reinterpret_cast<ReceiveResponse*>(read_bytes)),
          nullptr);
    }
    default: {
      zx_handle_close_many(read_handles, actual_handles);
      return ::fidl::Result(handlers.unknown(), nullptr);
    }
  }
}

bool EmptyProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kEmptyProtocol_Send_Ordinal: {
      auto result = ::fidl::DecodeAs<SendRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->Send(std::move(message->e), Interface::SendCompleter::Sync(txn));
      return true;
    }
    case kEmptyProtocol_SendAndReceive_Ordinal: {
      auto result = ::fidl::DecodeAs<SendAndReceiveRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->SendAndReceive(std::move(message->e),
                           Interface::SendAndReceiveCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool EmptyProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                             ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

zx_status_t EmptyProtocol::SendReceiveEvent(
    ::zx::unowned_channel _channel, ::llcpp::fidl::test::json::Empty e) {
  ReceiveOwnedResponse _response{e};
  _response.Write(_channel->get());
  return _response.status();
}

zx_status_t EmptyProtocol::SendReceiveEvent(
    ::zx::unowned_channel _channel, ::fidl::BytePart _buffer,
    ::llcpp::fidl::test::json::Empty e) {
  ReceiveUnownedResponse _response(_buffer.data(), _buffer.capacity(), e);
  _response.Write(_channel->get());
  return _response.status();
}

::fidl::Result EmptyProtocol::Interface::SendAndReceiveCompleterBase::Reply(
    ::llcpp::fidl::test::json::Empty e) {
  SendAndReceiveOwnedResponse _response{e};
  return CompleterBase::SendReply(_response.GetFidlMessage());
}

::fidl::Result EmptyProtocol::Interface::SendAndReceiveCompleterBase::Reply(
    ::fidl::BytePart _buffer, ::llcpp::fidl::test::json::Empty e) {
  SendAndReceiveUnownedResponse _response(_buffer.data(), _buffer.capacity(),
                                          e);
  return CompleterBase::SendReply(_response.GetFidlMessage());
}

void EmptyProtocol::SendRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kEmptyProtocol_Send_Ordinal);
}

void EmptyProtocol::ReceiveResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kEmptyProtocol_Receive_Ordinal);
}

void EmptyProtocol::SendAndReceiveRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kEmptyProtocol_SendAndReceive_Ordinal);
}

void EmptyProtocol::SendAndReceiveResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kEmptyProtocol_SendAndReceive_Ordinal);
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
