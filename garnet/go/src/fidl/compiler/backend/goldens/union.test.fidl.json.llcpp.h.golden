// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

struct Union;
struct ReverseOrdinalUnion;
struct NullableUnionStruct;
struct FieldCollision;
struct ExplicitUnion;

extern "C" const fidl_type_t test_name_UnionTable;
extern "C" const fidl_type_t v1_test_name_UnionTable;

struct Union {
  enum class Tag : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
    kVectorStringAlsoNeedsConstructor = 2,
  };

  Union();
  ~Union();

  Union(Union&& other) {
    ordinal_ = Ordinal::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  Union& operator=(Union&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_Primitive() const { return ordinal_ == Ordinal::kPrimitive; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static Union WithPrimitive(int32_t&& val) {
    Union result;
    result.set_Primitive(std::move(val));
    return result;
  }
  static Union WithPrimitive(int32_t* val) {
    Union result;
    result.set_Primitive(val);
    return result;
  }

  int32_t& mutable_Primitive();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_Primitive(const T& v) {
    mutable_Primitive() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_Primitive(const T* v) {
    mutable_Primitive() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_Primitive(T&& v) {
    mutable_Primitive() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_Primitive(T* v) {
    mutable_Primitive() = std::move(*v);
  }

  int32_t const & Primitive() const { return Primitive_; }

  bool is_StringNeedsConstructor() const { return ordinal_ == Ordinal::kStringNeedsConstructor; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static Union WithStringNeedsConstructor(::fidl::StringView&& val) {
    Union result;
    result.set_StringNeedsConstructor(std::move(val));
    return result;
  }
  static Union WithStringNeedsConstructor(::fidl::StringView* val) {
    Union result;
    result.set_StringNeedsConstructor(val);
    return result;
  }

  ::fidl::StringView& mutable_StringNeedsConstructor();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_copy_assignable<T>::value>
  set_StringNeedsConstructor(const T& v) {
    mutable_StringNeedsConstructor() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_copy_assignable<T>::value>
  set_StringNeedsConstructor(const T* v) {
    mutable_StringNeedsConstructor() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_move_assignable<T>::value>
  set_StringNeedsConstructor(T&& v) {
    mutable_StringNeedsConstructor() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_move_assignable<T>::value>
  set_StringNeedsConstructor(T* v) {
    mutable_StringNeedsConstructor() = std::move(*v);
  }

  ::fidl::StringView const & StringNeedsConstructor() const { return StringNeedsConstructor_; }

  bool is_VectorStringAlsoNeedsConstructor() const { return ordinal_ == Ordinal::kVectorStringAlsoNeedsConstructor; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static Union WithVectorStringAlsoNeedsConstructor(::fidl::VectorView<::fidl::StringView>&& val) {
    Union result;
    result.set_VectorStringAlsoNeedsConstructor(std::move(val));
    return result;
  }
  static Union WithVectorStringAlsoNeedsConstructor(::fidl::VectorView<::fidl::StringView>* val) {
    Union result;
    result.set_VectorStringAlsoNeedsConstructor(val);
    return result;
  }

  ::fidl::VectorView<::fidl::StringView>& mutable_VectorStringAlsoNeedsConstructor();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::VectorView<::fidl::StringView>>::value && std::is_copy_assignable<T>::value>
  set_VectorStringAlsoNeedsConstructor(const T& v) {
    mutable_VectorStringAlsoNeedsConstructor() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::VectorView<::fidl::StringView>>::value && std::is_copy_assignable<T>::value>
  set_VectorStringAlsoNeedsConstructor(const T* v) {
    mutable_VectorStringAlsoNeedsConstructor() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::VectorView<::fidl::StringView>>::value && std::is_move_assignable<T>::value>
  set_VectorStringAlsoNeedsConstructor(T&& v) {
    mutable_VectorStringAlsoNeedsConstructor() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::VectorView<::fidl::StringView>>::value && std::is_move_assignable<T>::value>
  set_VectorStringAlsoNeedsConstructor(T* v) {
    mutable_VectorStringAlsoNeedsConstructor() = std::move(*v);
  }

  ::fidl::VectorView<::fidl::StringView> const & VectorStringAlsoNeedsConstructor() const { return VectorStringAlsoNeedsConstructor_; }

  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type = &test_name_UnionTable;
  static constexpr const fidl_type_t* AltType = &v1_test_name_UnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 4294967295;

 private:
  enum class Ordinal : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
    kVectorStringAlsoNeedsConstructor = 2,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  void Destroy();
  void MoveImpl_(Union&& other);
  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  union {
    int32_t Primitive_;
    ::fidl::StringView StringNeedsConstructor_;
    ::fidl::VectorView<::fidl::StringView> VectorStringAlsoNeedsConstructor_;
  };
};

extern "C" const fidl_type_t test_name_ReverseOrdinalUnionTable;
extern "C" const fidl_type_t v1_test_name_ReverseOrdinalUnionTable;

struct ReverseOrdinalUnion {
  enum class Tag : fidl_union_tag_t {
    kFirst = 0,
    kSecond = 1,
  };

  ReverseOrdinalUnion();
  ~ReverseOrdinalUnion();

  ReverseOrdinalUnion(ReverseOrdinalUnion&& other) {
    ordinal_ = Ordinal::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  ReverseOrdinalUnion& operator=(ReverseOrdinalUnion&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_first() const { return ordinal_ == Ordinal::kFirst; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static ReverseOrdinalUnion WithFirst(uint32_t&& val) {
    ReverseOrdinalUnion result;
    result.set_first(std::move(val));
    return result;
  }
  static ReverseOrdinalUnion WithFirst(uint32_t* val) {
    ReverseOrdinalUnion result;
    result.set_first(val);
    return result;
  }

  uint32_t& mutable_first();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_copy_assignable<T>::value>
  set_first(const T& v) {
    mutable_first() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_copy_assignable<T>::value>
  set_first(const T* v) {
    mutable_first() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_move_assignable<T>::value>
  set_first(T&& v) {
    mutable_first() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_move_assignable<T>::value>
  set_first(T* v) {
    mutable_first() = std::move(*v);
  }

  uint32_t const & first() const { return first_; }

  bool is_second() const { return ordinal_ == Ordinal::kSecond; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static ReverseOrdinalUnion WithSecond(uint32_t&& val) {
    ReverseOrdinalUnion result;
    result.set_second(std::move(val));
    return result;
  }
  static ReverseOrdinalUnion WithSecond(uint32_t* val) {
    ReverseOrdinalUnion result;
    result.set_second(val);
    return result;
  }

  uint32_t& mutable_second();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_copy_assignable<T>::value>
  set_second(const T& v) {
    mutable_second() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_copy_assignable<T>::value>
  set_second(const T* v) {
    mutable_second() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_move_assignable<T>::value>
  set_second(T&& v) {
    mutable_second() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_move_assignable<T>::value>
  set_second(T* v) {
    mutable_second() = std::move(*v);
  }

  uint32_t const & second() const { return second_; }

  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type = &test_name_ReverseOrdinalUnionTable;
  static constexpr const fidl_type_t* AltType = &v1_test_name_ReverseOrdinalUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 8;

 private:
  enum class Ordinal : fidl_union_tag_t {
    kFirst = 0,
    kSecond = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  void Destroy();
  void MoveImpl_(ReverseOrdinalUnion&& other);
  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  union {
    uint32_t first_;
    uint32_t second_;
  };
};

extern "C" const fidl_type_t test_name_NullableUnionStructTable;
extern "C" const fidl_type_t v1_test_name_NullableUnionStructTable;

struct NullableUnionStruct {
  static constexpr const fidl_type_t* Type = &test_name_NullableUnionStructTable;
  static constexpr const fidl_type_t* AltType = &v1_test_name_NullableUnionStructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 4294967295;

  ::llcpp::test::name::Union* the_union = {};
};

extern "C" const fidl_type_t test_name_FieldCollisionTable;
extern "C" const fidl_type_t v1_test_name_FieldCollisionTable;

struct FieldCollision {
  enum class Tag : fidl_union_tag_t {
    kFieldCollisionTag = 0,
  };

  FieldCollision();
  ~FieldCollision();

  FieldCollision(FieldCollision&& other) {
    ordinal_ = Ordinal::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  FieldCollision& operator=(FieldCollision&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_field_collision_tag() const { return ordinal_ == Ordinal::kFieldCollisionTag; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static FieldCollision WithFieldCollisionTag(int32_t&& val) {
    FieldCollision result;
    result.set_field_collision_tag(std::move(val));
    return result;
  }
  static FieldCollision WithFieldCollisionTag(int32_t* val) {
    FieldCollision result;
    result.set_field_collision_tag(val);
    return result;
  }

  int32_t& mutable_field_collision_tag();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_field_collision_tag(const T& v) {
    mutable_field_collision_tag() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_field_collision_tag(const T* v) {
    mutable_field_collision_tag() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_field_collision_tag(T&& v) {
    mutable_field_collision_tag() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_field_collision_tag(T* v) {
    mutable_field_collision_tag() = std::move(*v);
  }

  int32_t const & field_collision_tag() const { return field_collision_tag_; }

  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type = &test_name_FieldCollisionTable;
  static constexpr const fidl_type_t* AltType = &v1_test_name_FieldCollisionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 8;

 private:
  enum class Ordinal : fidl_union_tag_t {
    kFieldCollisionTag = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  void Destroy();
  void MoveImpl_(FieldCollision&& other);
  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  union {
    int32_t field_collision_tag_;
  };
};

extern "C" const fidl_type_t test_name_ExplicitUnionTable;
extern "C" const fidl_type_t v1_test_name_ExplicitUnionTable;

struct ExplicitUnion {
  enum class Tag : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
  };

  ExplicitUnion();
  ~ExplicitUnion();

  ExplicitUnion(ExplicitUnion&& other) {
    ordinal_ = Ordinal::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  ExplicitUnion& operator=(ExplicitUnion&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_Primitive() const { return ordinal_ == Ordinal::kPrimitive; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static ExplicitUnion WithPrimitive(int32_t&& val) {
    ExplicitUnion result;
    result.set_Primitive(std::move(val));
    return result;
  }
  static ExplicitUnion WithPrimitive(int32_t* val) {
    ExplicitUnion result;
    result.set_Primitive(val);
    return result;
  }

  int32_t& mutable_Primitive();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_Primitive(const T& v) {
    mutable_Primitive() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_copy_assignable<T>::value>
  set_Primitive(const T* v) {
    mutable_Primitive() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_Primitive(T&& v) {
    mutable_Primitive() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, int32_t>::value && std::is_move_assignable<T>::value>
  set_Primitive(T* v) {
    mutable_Primitive() = std::move(*v);
  }

  int32_t const & Primitive() const { return Primitive_; }

  bool is_StringNeedsConstructor() const { return ordinal_ == Ordinal::kStringNeedsConstructor; }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  static ExplicitUnion WithStringNeedsConstructor(::fidl::StringView&& val) {
    ExplicitUnion result;
    result.set_StringNeedsConstructor(std::move(val));
    return result;
  }
  static ExplicitUnion WithStringNeedsConstructor(::fidl::StringView* val) {
    ExplicitUnion result;
    result.set_StringNeedsConstructor(val);
    return result;
  }

  ::fidl::StringView& mutable_StringNeedsConstructor();

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_copy_assignable<T>::value>
  set_StringNeedsConstructor(const T& v) {
    mutable_StringNeedsConstructor() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_copy_assignable<T>::value>
  set_StringNeedsConstructor(const T* v) {
    mutable_StringNeedsConstructor() = *v;
  }

  // TODO(fxb/41475) Remove this in favor of the pointer version.
  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_move_assignable<T>::value>
  set_StringNeedsConstructor(T&& v) {
    mutable_StringNeedsConstructor() = std::move(v);
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::StringView>::value && std::is_move_assignable<T>::value>
  set_StringNeedsConstructor(T* v) {
    mutable_StringNeedsConstructor() = std::move(*v);
  }

  ::fidl::StringView const & StringNeedsConstructor() const { return StringNeedsConstructor_; }

  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type = &test_name_ExplicitUnionTable;
  static constexpr const fidl_type_t* AltType = &v1_test_name_ExplicitUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 4294967295;

 private:
  enum class Ordinal : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  void Destroy();
  void MoveImpl_(ExplicitUnion&& other);
  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  union {
    int32_t Primitive_;
    ::fidl::StringView StringNeedsConstructor_;
  };
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::Union> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::Union>);

template <>
struct IsFidlType<::llcpp::test::name::ReverseOrdinalUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::ReverseOrdinalUnion>);

template <>
struct IsFidlType<::llcpp::test::name::NullableUnionStruct> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::NullableUnionStruct>);
static_assert(offsetof(::llcpp::test::name::NullableUnionStruct, the_union) == 0);
static_assert(sizeof(::llcpp::test::name::NullableUnionStruct) == ::llcpp::test::name::NullableUnionStruct::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::name::FieldCollision> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::FieldCollision>);

template <>
struct IsFidlType<::llcpp::test::name::ExplicitUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::ExplicitUnion>);

}  // namespace fidl
