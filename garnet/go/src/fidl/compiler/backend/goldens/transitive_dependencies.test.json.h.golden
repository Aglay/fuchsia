// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <middle/cpp/fidl.h>

#include "lib/fidl/cpp/internal/header.h"

namespace top {

class Baz;

class Baz final {
 public:
  static const fidl_type_t* FidlType;

  ::middle::Bar g{};

  static inline ::std::unique_ptr<Baz> New() {
    return ::std::make_unique<Baz>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Baz* value, size_t _offset);
  zx_status_t Clone(Baz* result) const;
};

inline zx_status_t Clone(const ::top::Baz& _value, ::top::Baz* _result) {
  return _value.Clone(_result);
}

using BazPtr = ::std::unique_ptr<Baz>;
}  // namespace top
namespace fidl {

template <>
struct CodingTraits<::top::Baz> : public EncodableCodingTraits<::top::Baz, 4> {
};

template <>
struct IsMemcpyCompatible<::top::Baz>
    : public internal::BoolConstant<!HasPadding<::top::Baz>::value &&
                                    IsMemcpyCompatible<::middle::Bar>::value> {
};

inline zx_status_t Clone(const ::top::Baz& value, ::top::Baz* result) {
  return ::top::Clone(value, result);
}

template <>
struct Equality<::top::Baz> {
  bool operator()(const ::top::Baz& _lhs, const ::top::Baz& _rhs) const {
    if (!::fidl::Equals(_lhs.g, _rhs.g)) {
      return false;
    }
    return true;
  }
};
}  // namespace fidl
