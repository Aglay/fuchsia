// WARNING: This file is machine generated by fidlgen.

#include <tables.test.fidl.json.llcpp.h>
#include <memory>

namespace llcpp {

namespace test {
namespace name {

::llcpp::test::name::SimpleTable::Builder SimpleTable::Build() {
  return SimpleTable::Builder();
}

auto ::llcpp::test::name::SimpleTable::Builder::set_x(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.x.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 1) {
    max_ordinal_ = 1;
  }
  return std::move(*this);
}

auto ::llcpp::test::name::SimpleTable::Builder::set_y(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.y.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 5) {
    max_ordinal_ = 5;
  }
  return std::move(*this);
}

::llcpp::test::name::ReverseOrdinalTable::Builder ReverseOrdinalTable::Build() {
  return ReverseOrdinalTable::Builder();
}

auto ::llcpp::test::name::ReverseOrdinalTable::Builder::set_z(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.z.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 1) {
    max_ordinal_ = 1;
  }
  return std::move(*this);
}

auto ::llcpp::test::name::ReverseOrdinalTable::Builder::set_y(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.y.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 2) {
    max_ordinal_ = 2;
  }
  return std::move(*this);
}

auto ::llcpp::test::name::ReverseOrdinalTable::Builder::set_x(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.x.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 3) {
    max_ordinal_ = 3;
  }
  return std::move(*this);
}

::llcpp::test::name::OlderSimpleTable::Builder OlderSimpleTable::Build() {
  return OlderSimpleTable::Builder();
}

auto ::llcpp::test::name::OlderSimpleTable::Builder::set_x(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.x.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 1) {
    max_ordinal_ = 1;
  }
  return std::move(*this);
}

::llcpp::test::name::NewerSimpleTable::Builder NewerSimpleTable::Build() {
  return NewerSimpleTable::Builder();
}

auto ::llcpp::test::name::NewerSimpleTable::Builder::set_x(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.x.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 1) {
    max_ordinal_ = 1;
  }
  return std::move(*this);
}

auto ::llcpp::test::name::NewerSimpleTable::Builder::set_y(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.y.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 5) {
    max_ordinal_ = 5;
  }
  return std::move(*this);
}

auto ::llcpp::test::name::NewerSimpleTable::Builder::set_z(int64_t* elem) -> Builder&& {
  ZX_ASSERT(elem);
  frame_.z.data = ::fidl::unowned_ptr<int64_t>(elem);
  if (max_ordinal_ < 6) {
    max_ordinal_ = 6;
  }
  return std::move(*this);
}

::llcpp::test::name::EmptyTable::Builder EmptyTable::Build() {
  return EmptyTable::Builder();
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
