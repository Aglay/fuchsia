// WARNING: This file is machine generated by fidlgen.

#include <inheritance_with_recursive_decl.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

namespace {

[[maybe_unused]] constexpr uint64_t kParent_First_Ordinal =
    2566928499103139852lu;
extern "C" const fidl_type_t fidl_test_json_ParentFirstRequestTable;
extern "C" const fidl_type_t fidl_test_json_ParentFirstResponseTable;

}  // namespace
Parent::ResultOf::First::First(zx_handle_t _client, ::zx::channel& request) {
  FirstOwnedRequest _request(0, request);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::ResultOf::First Parent::SyncClient::First(::zx::channel request) {
  return ResultOf::First(this->channel().get(), request);
}

Parent::ResultOf::First Parent::Call::First(::zx::unowned_channel _client_end,
                                            ::zx::channel request) {
  return ResultOf::First(_client_end->get(), request);
}

Parent::UnownedResultOf::First::First(zx_handle_t _client,
                                      uint8_t* _request_bytes,
                                      uint32_t _request_byte_capacity,
                                      ::zx::channel& request) {
  FirstUnownedRequest _request(_request_bytes, _request_byte_capacity, 0,
                               request);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::UnownedResultOf::First Parent::SyncClient::First(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  return UnownedResultOf::First(this->channel().get(), _request_buffer.data(),
                                _request_buffer.capacity(), request);
}

Parent::UnownedResultOf::First Parent::Call::First(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  return UnownedResultOf::First(_client_end->get(), _request_buffer.data(),
                                _request_buffer.capacity(), request);
}

::fidl::Result Parent::ClientImpl::First(::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::First(_binding->handle(), request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result Parent::ClientImpl::First(::fidl::BytePart _request_buffer,
                                         ::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res =
        UnownedResultOf::First(_binding->handle(), _request_buffer.data(),
                               _request_buffer.capacity(), request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> Parent::ClientImpl::Dispatch(
    fidl_msg_t*, ::fidl::internal::ResponseContext*) {
  return {};
}

bool Parent::TryDispatch(Interface* impl, fidl_msg_t* msg,
                         ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kParent_First_Ordinal: {
      auto result = ::fidl::DecodeAs<FirstRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->First(std::move(message->request),
                  Interface::FirstCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Parent::Dispatch(Interface* impl, fidl_msg_t* msg,
                      ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

void Parent::FirstRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kParent_First_Ordinal);
}

namespace {

[[maybe_unused]] constexpr uint64_t kChild_First_Ordinal =
    2566928499103139852lu;
extern "C" const fidl_type_t fidl_test_json_ChildFirstRequestTable;
extern "C" const fidl_type_t fidl_test_json_ChildFirstResponseTable;
[[maybe_unused]] constexpr uint64_t kChild_Second_Ordinal =
    2628306304378964143lu;
extern "C" const fidl_type_t fidl_test_json_ChildSecondRequestTable;
extern "C" const fidl_type_t fidl_test_json_ChildSecondResponseTable;

}  // namespace
Child::ResultOf::First::First(zx_handle_t _client, ::zx::channel& request) {
  FirstOwnedRequest _request(0, request);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Child::ResultOf::First Child::SyncClient::First(::zx::channel request) {
  return ResultOf::First(this->channel().get(), request);
}

Child::ResultOf::First Child::Call::First(::zx::unowned_channel _client_end,
                                          ::zx::channel request) {
  return ResultOf::First(_client_end->get(), request);
}

Child::UnownedResultOf::First::First(zx_handle_t _client,
                                     uint8_t* _request_bytes,
                                     uint32_t _request_byte_capacity,
                                     ::zx::channel& request) {
  FirstUnownedRequest _request(_request_bytes, _request_byte_capacity, 0,
                               request);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Child::UnownedResultOf::First Child::SyncClient::First(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  return UnownedResultOf::First(this->channel().get(), _request_buffer.data(),
                                _request_buffer.capacity(), request);
}

Child::UnownedResultOf::First Child::Call::First(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  return UnownedResultOf::First(_client_end->get(), _request_buffer.data(),
                                _request_buffer.capacity(), request);
}

Child::ResultOf::Second::Second(zx_handle_t _client, ::zx::channel& request) {
  SecondOwnedRequest _request(0, request);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Child::ResultOf::Second Child::SyncClient::Second(::zx::channel request) {
  return ResultOf::Second(this->channel().get(), request);
}

Child::ResultOf::Second Child::Call::Second(::zx::unowned_channel _client_end,
                                            ::zx::channel request) {
  return ResultOf::Second(_client_end->get(), request);
}

Child::UnownedResultOf::Second::Second(zx_handle_t _client,
                                       uint8_t* _request_bytes,
                                       uint32_t _request_byte_capacity,
                                       ::zx::channel& request) {
  SecondUnownedRequest _request(_request_bytes, _request_byte_capacity, 0,
                                request);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Child::UnownedResultOf::Second Child::SyncClient::Second(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  return UnownedResultOf::Second(this->channel().get(), _request_buffer.data(),
                                 _request_buffer.capacity(), request);
}

Child::UnownedResultOf::Second Child::Call::Second(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  return UnownedResultOf::Second(_client_end->get(), _request_buffer.data(),
                                 _request_buffer.capacity(), request);
}

::fidl::Result Child::ClientImpl::First(::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::First(_binding->handle(), request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result Child::ClientImpl::First(::fidl::BytePart _request_buffer,
                                        ::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res =
        UnownedResultOf::First(_binding->handle(), _request_buffer.data(),
                               _request_buffer.capacity(), request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result Child::ClientImpl::Second(::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::Second(_binding->handle(), request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result Child::ClientImpl::Second(::fidl::BytePart _request_buffer,
                                         ::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res =
        UnownedResultOf::Second(_binding->handle(), _request_buffer.data(),
                                _request_buffer.capacity(), request);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> Child::ClientImpl::Dispatch(
    fidl_msg_t*, ::fidl::internal::ResponseContext*) {
  return {};
}

bool Child::TryDispatch(Interface* impl, fidl_msg_t* msg,
                        ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kChild_First_Ordinal: {
      auto result = ::fidl::DecodeAs<FirstRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->First(std::move(message->request),
                  Interface::FirstCompleter::Sync(txn));
      return true;
    }
    case kChild_Second_Ordinal: {
      auto result = ::fidl::DecodeAs<SecondRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->Second(std::move(message->request),
                   Interface::SecondCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Child::Dispatch(Interface* impl, fidl_msg_t* msg,
                     ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

void Child::FirstRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kChild_First_Ordinal);
}

void Child::SecondRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kChild_Second_Ordinal);
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
