// WARNING: This file is machine generated by fidlgen.

#include <inheritance_with_recursive_decl.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

namespace {

[[maybe_unused]] constexpr uint64_t kParent_First_Ordinal =
    2566928499103139852lu;
extern "C" const fidl_type_t fidl_test_json_ParentFirstRequestTable;
extern "C" const fidl_type_t fidl_test_json_ParentFirstResponseTable;

}  // namespace

Parent::ResultOf::First_Impl::First_Impl(::zx::unowned_channel _client_end,
                                         ::zx::channel request) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(FirstRequest)]{};
  auto& _request = *reinterpret_cast<FirstRequest*>(_request_buffer);
  _request.request = std::move(request);
  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<FirstRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<FirstRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(Parent::InPlace::First(std::move(_client_end),
                                          std::move(_encoded_request)));
}

Parent::ResultOf::First Parent::SyncClient::First(::zx::channel request) {
  return ResultOf::First(::zx::unowned_channel(this->channel_),
                         std::move(request));
}

Parent::ResultOf::First Parent::Call::First(::zx::unowned_channel _client_end,
                                            ::zx::channel request) {
  return ResultOf::First(std::move(_client_end), std::move(request));
}

Parent::UnownedResultOf::First_Impl::First_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  if (_request_buffer.capacity() < FirstRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, FirstRequest::PrimarySize);
  auto& _request = *reinterpret_cast<FirstRequest*>(_request_buffer.data());
  _request.request = std::move(request);
  _request_buffer.set_actual(sizeof(FirstRequest));
  ::fidl::DecodedMessage<FirstRequest> _msg(std::move(_request_buffer));
  auto _encode_result = ::fidl::Encode<FirstRequest>(std::move(_msg));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<FirstRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(Parent::InPlace::First(std::move(_client_end),
                                          std::move(_encoded_request)));
}

Parent::UnownedResultOf::First Parent::SyncClient::First(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  return UnownedResultOf::First(::zx::unowned_channel(this->channel_),
                                std::move(_request_buffer), std::move(request));
}

Parent::UnownedResultOf::First Parent::Call::First(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  return UnownedResultOf::First(std::move(_client_end),
                                std::move(_request_buffer), std::move(request));
}

::fidl::internal::StatusAndError Parent::InPlace::First(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<FirstRequest> params) {
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  return First(std::move(_client_end),
               std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Parent::InPlace::First(
    ::zx::unowned_channel _client_end,
    ::fidl::EncodedMessage<FirstRequest> params) {
  Parent::SetTransactionHeaderFor::FirstRequest(params);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::StatusAndError Parent::ClientImpl::First(::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::First(_binding->channel(), std::move(request));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Parent::ClientImpl::First(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = UnownedResultOf::First(
        _binding->channel(), std::move(_request_buffer), std::move(request));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t Parent::ClientImpl::Dispatch(fidl_msg_t*,
                                         ::fidl::internal::ResponseContext*) {
  return ZX_OK;
}

bool Parent::TryDispatch(Interface* impl, fidl_msg_t* msg,
                         ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kParent_First_Ordinal: {
      auto result = ::fidl::DecodeAs<FirstRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->First(std::move(message->request),
                  Interface::FirstCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Parent::Dispatch(Interface* impl, fidl_msg_t* msg,
                      ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void Parent::SetTransactionHeaderFor::FirstRequest(
    const ::fidl::DecodedMessage<Parent::FirstRequest>& _msg, zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid, kParent_First_Ordinal);
}
void Parent::SetTransactionHeaderFor::FirstRequest(
    const ::fidl::EncodedMessage<Parent::FirstRequest>& _msg, zx_txid_t _txid) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(_msg.bytes().data());
  fidl_init_txn_header(hdr, _txid, kParent_First_Ordinal);
}

namespace {

[[maybe_unused]] constexpr uint64_t kChild_First_Ordinal =
    2566928499103139852lu;
extern "C" const fidl_type_t fidl_test_json_ChildFirstRequestTable;
extern "C" const fidl_type_t fidl_test_json_ChildFirstResponseTable;
[[maybe_unused]] constexpr uint64_t kChild_Second_Ordinal =
    2628306304378964143lu;
extern "C" const fidl_type_t fidl_test_json_ChildSecondRequestTable;
extern "C" const fidl_type_t fidl_test_json_ChildSecondResponseTable;

}  // namespace

Child::ResultOf::First_Impl::First_Impl(::zx::unowned_channel _client_end,
                                        ::zx::channel request) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(FirstRequest)]{};
  auto& _request = *reinterpret_cast<FirstRequest*>(_request_buffer);
  _request.request = std::move(request);
  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<FirstRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<FirstRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(Child::InPlace::First(std::move(_client_end),
                                         std::move(_encoded_request)));
}

Child::ResultOf::First Child::SyncClient::First(::zx::channel request) {
  return ResultOf::First(::zx::unowned_channel(this->channel_),
                         std::move(request));
}

Child::ResultOf::First Child::Call::First(::zx::unowned_channel _client_end,
                                          ::zx::channel request) {
  return ResultOf::First(std::move(_client_end), std::move(request));
}

Child::UnownedResultOf::First_Impl::First_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  if (_request_buffer.capacity() < FirstRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, FirstRequest::PrimarySize);
  auto& _request = *reinterpret_cast<FirstRequest*>(_request_buffer.data());
  _request.request = std::move(request);
  _request_buffer.set_actual(sizeof(FirstRequest));
  ::fidl::DecodedMessage<FirstRequest> _msg(std::move(_request_buffer));
  auto _encode_result = ::fidl::Encode<FirstRequest>(std::move(_msg));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<FirstRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(Child::InPlace::First(std::move(_client_end),
                                         std::move(_encoded_request)));
}

Child::UnownedResultOf::First Child::SyncClient::First(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  return UnownedResultOf::First(::zx::unowned_channel(this->channel_),
                                std::move(_request_buffer), std::move(request));
}

Child::UnownedResultOf::First Child::Call::First(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  return UnownedResultOf::First(std::move(_client_end),
                                std::move(_request_buffer), std::move(request));
}

::fidl::internal::StatusAndError Child::InPlace::First(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<FirstRequest> params) {
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  return First(std::move(_client_end),
               std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Child::InPlace::First(
    ::zx::unowned_channel _client_end,
    ::fidl::EncodedMessage<FirstRequest> params) {
  Child::SetTransactionHeaderFor::FirstRequest(params);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

Child::ResultOf::Second_Impl::Second_Impl(::zx::unowned_channel _client_end,
                                          ::zx::channel request) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(SecondRequest)]{};
  auto& _request = *reinterpret_cast<SecondRequest*>(_request_buffer);
  _request.request = std::move(request);
  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<SecondRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<SecondRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(Child::InPlace::Second(std::move(_client_end),
                                          std::move(_encoded_request)));
}

Child::ResultOf::Second Child::SyncClient::Second(::zx::channel request) {
  return ResultOf::Second(::zx::unowned_channel(this->channel_),
                          std::move(request));
}

Child::ResultOf::Second Child::Call::Second(::zx::unowned_channel _client_end,
                                            ::zx::channel request) {
  return ResultOf::Second(std::move(_client_end), std::move(request));
}

Child::UnownedResultOf::Second_Impl::Second_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  if (_request_buffer.capacity() < SecondRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::kErrorRequestBufferTooSmall;
    return;
  }
  memset(_request_buffer.data(), 0, SecondRequest::PrimarySize);
  auto& _request = *reinterpret_cast<SecondRequest*>(_request_buffer.data());
  _request.request = std::move(request);
  _request_buffer.set_actual(sizeof(SecondRequest));
  ::fidl::DecodedMessage<SecondRequest> _msg(std::move(_request_buffer));
  auto _encode_result = ::fidl::Encode<SecondRequest>(std::move(_msg));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<SecondRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(Child::InPlace::Second(std::move(_client_end),
                                          std::move(_encoded_request)));
}

Child::UnownedResultOf::Second Child::SyncClient::Second(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  return UnownedResultOf::Second(::zx::unowned_channel(this->channel_),
                                 std::move(_request_buffer),
                                 std::move(request));
}

Child::UnownedResultOf::Second Child::Call::Second(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel request) {
  return UnownedResultOf::Second(
      std::move(_client_end), std::move(_request_buffer), std::move(request));
}

::fidl::internal::StatusAndError Child::InPlace::Second(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<SecondRequest> params) {
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  return Second(std::move(_client_end),
                std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError Child::InPlace::Second(
    ::zx::unowned_channel _client_end,
    ::fidl::EncodedMessage<SecondRequest> params) {
  Child::SetTransactionHeaderFor::SecondRequest(params);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::StatusAndError Child::ClientImpl::First(::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::First(_binding->channel(), std::move(request));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Child::ClientImpl::First(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = UnownedResultOf::First(
        _binding->channel(), std::move(_request_buffer), std::move(request));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Child::ClientImpl::Second(::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::Second(_binding->channel(), std::move(request));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Child::ClientImpl::Second(
    ::fidl::BytePart _request_buffer, ::zx::channel request) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = UnownedResultOf::Second(
        _binding->channel(), std::move(_request_buffer), std::move(request));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t Child::ClientImpl::Dispatch(fidl_msg_t*,
                                        ::fidl::internal::ResponseContext*) {
  return ZX_OK;
}

bool Child::TryDispatch(Interface* impl, fidl_msg_t* msg,
                        ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kChild_First_Ordinal: {
      auto result = ::fidl::DecodeAs<FirstRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->First(std::move(message->request),
                  Interface::FirstCompleter::Sync(txn));
      return true;
    }
    case kChild_Second_Ordinal: {
      auto result = ::fidl::DecodeAs<SecondRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Second(std::move(message->request),
                   Interface::SecondCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Child::Dispatch(Interface* impl, fidl_msg_t* msg,
                     ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void Child::SetTransactionHeaderFor::FirstRequest(
    const ::fidl::DecodedMessage<Child::FirstRequest>& _msg, zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid, kChild_First_Ordinal);
}
void Child::SetTransactionHeaderFor::FirstRequest(
    const ::fidl::EncodedMessage<Child::FirstRequest>& _msg, zx_txid_t _txid) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(_msg.bytes().data());
  fidl_init_txn_header(hdr, _txid, kChild_First_Ordinal);
}

void Child::SetTransactionHeaderFor::SecondRequest(
    const ::fidl::DecodedMessage<Child::SecondRequest>& _msg, zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid, kChild_Second_Ordinal);
}
void Child::SetTransactionHeaderFor::SecondRequest(
    const ::fidl::EncodedMessage<Child::SecondRequest>& _msg, zx_txid_t _txid) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(_msg.bytes().data());
  fidl_init_txn_header(hdr, _txid, kChild_Second_Ordinal);
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
