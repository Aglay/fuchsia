// WARNING: This file is machine generated by fidlgen.

#include <test/name/cpp/libfuzzer.h>

#include <lib/async-loop/cpp/loop.h>
#include <lib/async-loop/default.h>
#include <lib/fidl/cpp/fuzzing/fuzzer.h>
#include <lib/fidl/cpp/interface_ptr.h>
#include <lib/zx/channel.h>
#include <zircon/errors.h>
#include <zircon/syscalls.h>
#include <zircon/types.h>

#include <stdio.h>

using namespace ::fuzzing;

extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  static ::async::Loop* loop = nullptr;

  if (loop == nullptr) {
    printf("Starting client async loop\n");
    loop = new ::async::Loop(&kAsyncLoopConfigAttachToCurrentThread);
  }

  // Must fuzz some interface; first two bytes used to select protocol and method.
  if (size < 2) {
    printf("Early exit: Input too small: %zu\n", size);
    return 0;
  }
  size -= 2;

  uint8_t iface_selector = data[0];
  uint8_t iface_selection = iface_selector % 1;

  printf("Starting fuzzer with %zu bytes of data\n", size);

  // Hardcode mutually-exclusive if blocks that selects exactly one interface.
  zx_status_t status;
  if (iface_selection == 0) {
#if !defined(PROTOCOL_test_name_Interface)
    // Selected interface from FIDL file that is not part of this fuzzer.
    printf("Early exit: Chose disabled protocol: test_name_Interface\n");
    return 0;
#else

    ::fidl::InterfacePtr<::test::name::Interface> iface;

    printf("Starting test_name_Interface service\n");
    ::fidl::fuzzing::Fuzzer<::test::name::Interface> fuzzer(loop->dispatcher());
    if ((status = fuzzer.Init()) != ZX_OK) {
      printf("Early exit: fuzzer.Init returned bad status: %d\n", status);
      return 0;
    }

    if ((status = fuzzer.BindService()) != ZX_OK) {
      printf("Early exit: fuzzer.BindService returned bad status: %d\n", status);
      return 0;
    }

    if ((status = fuzzer.BindClient(&iface, loop->dispatcher())) != ZX_OK) {
      printf("Early exit: fuzzer.BindClient returned bad status: %d\n", status);
      return 0;
    }

    FuzzInput src(data, size);

    uint8_t method_selector = data[1];
    uint8_t method_selection = method_selector % 2;
    if (method_selection == 0) {
#if !(ALL_METHODS || defined(METHOD_Method))
      // Selected method from interface that is not part of this fuzzer.
      printf("Early exit: Chose disabled method: Method\n");
      return 0;
#else
      const size_t min_size = ;

      // Must have enough bytes for input.
      if (size < min_size) {
        printf("Early exit: Input size too small: %zu < %zu\n", size, min_size);
        return 0;
      }

      const size_t slack_size = size - min_size;
      const size_t slack_size_per_param = slack_size / 0;

      printf("Allocating parameters with %zu bytes (%zu bytes each)\n", slack_size, slack_size_per_param);

      size_t param_size;

      printf("Invoking method test_name_Interface.Method\n");
      iface->Method();
#endif
    }
    if (method_selection == 1) {
#if !(ALL_METHODS || defined(METHOD_OnEvent))
      // Selected method from interface that is not part of this fuzzer.
      printf("Early exit: Chose disabled method: OnEvent\n");
      return 0;
#else
      const size_t min_size = ;

      // Must have enough bytes for input.
      if (size < min_size) {
        printf("Early exit: Input size too small: %zu < %zu\n", size, min_size);
        return 0;
      }

      const size_t slack_size = size - min_size;
      const size_t slack_size_per_param = slack_size / 0;

      printf("Allocating parameters with %zu bytes (%zu bytes each)\n", slack_size, slack_size_per_param);

      size_t param_size;

      printf("Invoking method test_name_Interface.OnEvent\n");
      iface->OnEvent();
#endif
    }

    loop->RunUntilIdle();

    if ((status = fuzzer.WaitForCallback()) != ZX_OK) {
      printf("fuzzer.WaitForCallback returned bad status: %d\n", status);
    }

    iface.Unbind();
#endif
  }

  printf("Fuzzer stopped!\n");

  return 0;
}
