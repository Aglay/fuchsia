// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/fit/optional.h>

#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#endif  // __Fuchsia__
#include <dependent/llcpp/fidl.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace example {

struct Foo;

extern "C" const fidl_type_t example_FooTable;

struct Foo {
  static constexpr const fidl_type_t* Type = &example_FooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  ::llcpp::dependent::MyEnum field = {};
  void _CloseHandles();
};

}  // namespace example
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::example::Foo> : public std::true_type {};
template <>
struct IsStruct<::llcpp::example::Foo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::example::Foo>);
static_assert(offsetof(::llcpp::example::Foo, field) == 0);
static_assert(sizeof(::llcpp::example::Foo) ==
              ::llcpp::example::Foo::PrimarySize);

}  // namespace fidl

namespace llcpp {

namespace example {}  // namespace example
}  // namespace llcpp
