// WARNING: This file is machine generated by fidlgen.

#include <union.test.fidl.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace test {
namespace name {

Union::Union() : value_() {}

Union::~Union() {
}

Union::Union(Union&& other) : value_(std::move(other.value_)) {
}

Union& Union::operator=(Union&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void Union::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &Primitive(), _offset + 8);
    break;
   case 1:
    ::fidl::Encode(_encoder, &StringNeedsConstructor(), _offset + 8);
    break;
   case 2:
    ::fidl::Encode(_encoder, &VectorStringAlsoNeedsConstructor(), _offset + 8);
    break;
   default:
    break;
  }
}

void Union::Decode(::fidl::Decoder* _decoder, Union* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      int32_t _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 8);
      _value->set_Primitive(std::move(_member));
      break;
    }
   case 1:
    {
      ::std::string _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 8);
      _value->set_StringNeedsConstructor(std::move(_member));
      break;
    }
   case 2:
    {
      ::std::vector<::std::string> _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 8);
      _value->set_VectorStringAlsoNeedsConstructor(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void Union::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, Union* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 910042901: {
      int32_t _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_Primitive(std::move(_member));
      break;
    }
    case 891204917: {
      ::std::string _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_StringNeedsConstructor(std::move(_member));
      break;
    }
    case 1452916587: {
      ::std::vector<::std::string> _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_VectorStringAlsoNeedsConstructor(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t Union::Clone(Union* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kPrimitive:
      {
        int32_t _member{};
        _status = ::fidl::Clone(Primitive(), &_member);
        if (_status == ZX_OK) {
          _result->set_Primitive(std::move(_member));
        }
      }
      break;
    case Tag::kStringNeedsConstructor:
      {
        ::std::string _member{};
        _status = ::fidl::Clone(StringNeedsConstructor(), &_member);
        if (_status == ZX_OK) {
          _result->set_StringNeedsConstructor(std::move(_member));
        }
      }
      break;
    case Tag::kVectorStringAlsoNeedsConstructor:
      {
        ::std::vector<::std::string> _member{};
        _status = ::fidl::Clone(VectorStringAlsoNeedsConstructor(), &_member);
        if (_status == ZX_OK) {
          _result->set_VectorStringAlsoNeedsConstructor(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void Union::set_Primitive(int32_t value) {
  value_.emplace<static_cast<size_t>(Tag::kPrimitive) + 1>(std::move(value));
}

void Union::set_StringNeedsConstructor(::std::string value) {
  value_.emplace<static_cast<size_t>(Tag::kStringNeedsConstructor) + 1>(std::move(value));
}

void Union::set_VectorStringAlsoNeedsConstructor(::std::vector<::std::string> value) {
  value_.emplace<static_cast<size_t>(Tag::kVectorStringAlsoNeedsConstructor) + 1>(std::move(value));
}
FieldCollision::FieldCollision() : value_() {}

FieldCollision::~FieldCollision() {
}

FieldCollision::FieldCollision(FieldCollision&& other) : value_(std::move(other.value_)) {
}

FieldCollision& FieldCollision::operator=(FieldCollision&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void FieldCollision::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &field_collision_tag(), _offset + 4);
    break;
   default:
    break;
  }
}

void FieldCollision::Decode(::fidl::Decoder* _decoder, FieldCollision* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      int32_t _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 4);
      _value->set_field_collision_tag(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void FieldCollision::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, FieldCollision* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 1574011787: {
      int32_t _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_field_collision_tag(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t FieldCollision::Clone(FieldCollision* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kFieldCollisionTag:
      {
        int32_t _member{};
        _status = ::fidl::Clone(field_collision_tag(), &_member);
        if (_status == ZX_OK) {
          _result->set_field_collision_tag(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void FieldCollision::set_field_collision_tag(int32_t value) {
  value_.emplace<static_cast<size_t>(Tag::kFieldCollisionTag) + 1>(std::move(value));
}
}  // namespace name
}  // namespace test

