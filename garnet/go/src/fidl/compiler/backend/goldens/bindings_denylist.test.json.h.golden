// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"

namespace fidl {
namespace test {
namespace bindingsdenylist {

#ifdef __Fuchsia__
class OnlyHlcpp;
#endif  // __Fuchsia
#ifdef __Fuchsia__

class OnlyHlcpp final {
 public:
  class Handler;

  static constexpr char Name[] = "fidl.test.bindingsdenylist.OnlyHlcpp";

  explicit OnlyHlcpp(std::unique_ptr<::fidl::ServiceConnector> service)
      : service_(std::move(service)) {}

  explicit operator bool() const { return !!service_; }

 private:
  std::unique_ptr<::fidl::ServiceConnector> service_;
};

/// Facilitates member protocol registration for servers.
class OnlyHlcpp::Handler final {
 public:
  /// Constructs a new |Handler|. Does not take ownership of |service|.
  explicit Handler(::fidl::ServiceHandlerBase* service) : service_(service) {}

 private:
  ::fidl::ServiceHandlerBase* const service_;
};
#endif  // __Fuchsia

constexpr uint32_t AllBindings = 0u;
}  // namespace bindingsdenylist
}  // namespace test
}  // namespace fidl
namespace fidl {}  // namespace fidl
