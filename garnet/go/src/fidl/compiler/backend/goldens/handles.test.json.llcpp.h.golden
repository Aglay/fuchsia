// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/txn_header.h>
#include <lib/fit/function.h>
#include <lib/zx/bti.h>
#include <lib/zx/channel.h>
#include <lib/zx/clock.h>
#include <lib/zx/debuglog.h>
#include <lib/zx/event.h>
#include <lib/zx/eventpair.h>
#include <lib/zx/exception.h>
#include <lib/zx/fifo.h>
#include <lib/zx/guest.h>
#include <lib/zx/handle.h>
#include <lib/zx/interrupt.h>
#include <lib/zx/iommu.h>
#include <lib/zx/job.h>
#include <lib/zx/pager.h>
#include <lib/zx/pcidevice.h>
#include <lib/zx/pmt.h>
#include <lib/zx/port.h>
#include <lib/zx/process.h>
#include <lib/zx/profile.h>
#include <lib/zx/resource.h>
#include <lib/zx/socket.h>
#include <lib/zx/suspendtoken.h>
#include <lib/zx/thread.h>
#include <lib/zx/timer.h>
#include <lib/zx/vcpu.h>
#include <lib/zx/vmar.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

#include <variant>

namespace llcpp {

namespace fidl {
namespace test {
namespace handles {

struct Handles;
class SomeProtocol;

extern "C" const fidl_type_t fidl_test_handles_HandlesTable;

struct Handles {
  static constexpr const fidl_type_t* Type = &fidl_test_handles_HandlesTable;
  static constexpr uint32_t MaxNumHandles = 33;
  static constexpr uint32_t PrimarySize = 132;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::zx::handle plain_handle = {};

  ::zx::bti bti_handle = {};

  ::zx::channel channel_handle = {};

  ::zx::clock clock_handle = {};

  ::zx::debuglog debuglog_handle = {};

  ::zx::event event_handle = {};

  ::zx::eventpair eventpair_handle = {};

  ::zx::exception exception_handle = {};

  ::zx::fifo fifo_handle = {};

  ::zx::guest guest_handle = {};

  ::zx::interrupt interrupt_handle = {};

  ::zx::iommu iommu_handle = {};

  ::zx::job job_handle = {};

  ::zx::pager pager_handle = {};

  ::zx::pcidevice pcidevice_handle = {};

  ::zx::pmt pmt_handle = {};

  ::zx::port port_handle = {};

  ::zx::process process_handle = {};

  ::zx::profile profile_handle = {};

  ::zx::resource resource_handle = {};

  ::zx::socket socket_handle = {};

  ::zx::suspendtoken suspendtoken_handle = {};

  ::zx::thread thread_handle = {};

  ::zx::timer timer_handle = {};

  ::zx::vcpu vcpu_handle = {};

  ::zx::vmar vmar_handle = {};

  ::zx::vmo vmo_handle = {};

  ::zx::vmo rights_handle = {};

  ::zx::handle aliased_plain_handle_field = {};

  ::zx::handle aliased_subtype_handle_field = {};

  ::zx::handle aliased_rights_handle_field = {};

  ::zx::channel some_protocol = {};

  ::zx::channel request_some_protocol = {};
};

class SomeProtocol final {
  SomeProtocol() = delete;

 public:
  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   private:
   public:
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   private:
   public:
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL
  // wire-format.
  class InPlace final {
    InPlace() = delete;

   public:
  };

  struct AsyncEventHandlers;
  class ClientImpl;

  // Helper functions to fill in the transaction header in a
  // |DecodedMessage<TransactionalMessage>|.
  class SetTransactionHeaderFor final {
    SetTransactionHeaderFor() = delete;

   public:
  };
};

}  // namespace handles
}  // namespace test
}  // namespace fidl
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fidl::test::handles::Handles>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::handles::Handles>);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, plain_handle) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, bti_handle) == 4);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, channel_handle) ==
              8);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, clock_handle) ==
              12);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       debuglog_handle) == 16);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, event_handle) ==
              20);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       eventpair_handle) == 24);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       exception_handle) == 28);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, fifo_handle) ==
              32);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, guest_handle) ==
              36);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       interrupt_handle) == 40);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, iommu_handle) ==
              44);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, job_handle) ==
              48);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, pager_handle) ==
              52);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       pcidevice_handle) == 56);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, pmt_handle) ==
              60);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, port_handle) ==
              64);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, process_handle) ==
              68);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, profile_handle) ==
              72);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       resource_handle) == 76);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, socket_handle) ==
              80);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       suspendtoken_handle) == 84);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, thread_handle) ==
              88);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, timer_handle) ==
              92);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, vcpu_handle) ==
              96);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, vmar_handle) ==
              100);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, vmo_handle) ==
              104);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, rights_handle) ==
              108);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       aliased_plain_handle_field) == 112);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       aliased_subtype_handle_field) == 116);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       aliased_rights_handle_field) == 120);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles, some_protocol) ==
              124);
static_assert(offsetof(::llcpp::fidl::test::handles::Handles,
                       request_some_protocol) == 128);
static_assert(sizeof(::llcpp::fidl::test::handles::Handles) ==
              ::llcpp::fidl::test::handles::Handles::PrimarySize);

}  // namespace fidl

namespace llcpp {

namespace fidl {
namespace test {
namespace handles {

struct SomeProtocol::AsyncEventHandlers {};

class SomeProtocol::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
 private:
  friend class ::fidl::Client<SomeProtocol>;

  ClientImpl(::zx::channel client_end, async_dispatcher_t* dispatcher,
             ::fidl::internal::TypeErasedOnUnboundFn on_unbound,
             AsyncEventHandlers handlers)
      : ::fidl::internal::ClientBase(std::move(client_end), dispatcher,
                                     std::move(on_unbound)),
        handlers_(std::move(handlers)) {}

  zx_status_t Dispatch(fidl_msg_t* msg,
                       ::fidl::internal::ResponseContext* context) override;

  AsyncEventHandlers handlers_;
};

}  // namespace handles
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
