// WARNING: This file is machine generated by fidlgen.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)




const (
)

type ChildInterface _bindings.ChannelProxy



type Child interface {
}

type ChildTransitionalBase struct {}


type ChildInterfaceRequest _bindings.InterfaceRequest

func NewChildInterfaceRequest() (ChildInterfaceRequest, *ChildInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChildInterfaceRequest(req), (*ChildInterface)(cli), err
}

type ChildStub struct {
	Impl Child
}

func (s_ *ChildStub) DispatchNew(ord uint32, b_ []byte, h_ []_zx.Handle) (_bindings.Message, error) {
	return s_.Dispatch(uint64(ord) << 32, b_, h_)
}

func (s_ *ChildStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type ChildService struct {
	_bindings.BindingSet
}

func (s *ChildService) Add(impl Child, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChildStub{Impl: impl}, c, onError)
}

func (s *ChildService) EventProxyFor(key _bindings.BindingKey) (*ChildEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ChildEventProxy)(pxy), err
}

type ChildEventProxy _bindings.ChannelProxy



const (
	ParentGetChildOrdinal uint32 = 915586153
	ParentGetChildGenOrdinal uint32 = 915586153
	ParentGetChildOrdinal64 uint64 = 915586153 << 32
	ParentGetChildGenOrdinal64 uint64 = 915586153 << 32
	ParentGetChildRequestOrdinal uint32 = 1068158078
	ParentGetChildRequestGenOrdinal uint32 = 1068158078
	ParentGetChildRequestOrdinal64 uint64 = 1068158078 << 32
	ParentGetChildRequestGenOrdinal64 uint64 = 1068158078 << 32
	ParentTakeChildOrdinal uint32 = 1275478777
	ParentTakeChildGenOrdinal uint32 = 1275478777
	ParentTakeChildOrdinal64 uint64 = 1275478777 << 32
	ParentTakeChildGenOrdinal64 uint64 = 1275478777 << 32
	ParentTakeChildRequestOrdinal uint32 = 1589872250
	ParentTakeChildRequestGenOrdinal uint32 = 1589872250
	ParentTakeChildRequestOrdinal64 uint64 = 1589872250 << 32
	ParentTakeChildRequestGenOrdinal64 uint64 = 1589872250 << 32
)

type parentGetChildResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	C ChildInterface
}

var _mparentGetChildResponse = _bindings.CreateLazyMarshaler(parentGetChildResponse{})

func (msg *parentGetChildResponse) Marshaler() _bindings.Marshaler {
	return _mparentGetChildResponse
}

type parentGetChildRequestResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	R ChildInterfaceRequest`fidl2:"0"`
}

var _mparentGetChildRequestResponse = _bindings.CreateLazyMarshaler(parentGetChildRequestResponse{})

func (msg *parentGetChildRequestResponse) Marshaler() _bindings.Marshaler {
	return _mparentGetChildRequestResponse
}

type parentTakeChildRequest struct {
	_ struct{} `fidl2:"s,8,0"`
	C ChildInterface
}

var _mparentTakeChildRequest = _bindings.CreateLazyMarshaler(parentTakeChildRequest{})

func (msg *parentTakeChildRequest) Marshaler() _bindings.Marshaler {
	return _mparentTakeChildRequest
}

type parentTakeChildRequestRequest struct {
	_ struct{} `fidl2:"s,8,0"`
	R ChildInterfaceRequest`fidl2:"0"`
}

var _mparentTakeChildRequestRequest = _bindings.CreateLazyMarshaler(parentTakeChildRequestRequest{})

func (msg *parentTakeChildRequestRequest) Marshaler() _bindings.Marshaler {
	return _mparentTakeChildRequestRequest
}

type ParentInterface _bindings.ChannelProxy


func (p *ParentInterface) GetChild() (ChildInterface, error) {
	var req_ _bindings.Message
	resp_ := &parentGetChildResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildOrdinal64, req_, resp_)
	return resp_.C, err
}

func (p *ParentInterface) GetChildRequest() (ChildInterfaceRequest, error) {
	var req_ _bindings.Message
	resp_ := &parentGetChildRequestResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildRequestOrdinal64, req_, resp_)
	return resp_.R, err
}

func (p *ParentInterface) TakeChild(c ChildInterface) error {
	req_ := &parentTakeChildRequest{
		C: c,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildOrdinal64, req_)
	return err
}

func (p *ParentInterface) TakeChildRequest(r ChildInterfaceRequest) error {
	req_ := &parentTakeChildRequestRequest{
		R: r,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildRequestOrdinal64, req_)
	return err
}


type Parent interface {
	GetChild() (ChildInterface, error)
	GetChildRequest() (ChildInterfaceRequest, error)
	TakeChild(c ChildInterface) error
	TakeChildRequest(r ChildInterfaceRequest) error
}

type ParentTransitionalBase struct {}


type ParentInterfaceRequest _bindings.InterfaceRequest

func NewParentInterfaceRequest() (ParentInterfaceRequest, *ParentInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ParentInterfaceRequest(req), (*ParentInterface)(cli), err
}

type ParentStub struct {
	Impl Parent
}

func (s_ *ParentStub) DispatchNew(ord uint32, b_ []byte, h_ []_zx.Handle) (_bindings.Message, error) {
	return s_.Dispatch(uint64(ord) << 32, b_, h_)
}

func (s_ *ParentStub) Dispatch(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, error) {
	switch ordinal_ {
	case ParentGetChildOrdinal64:
		c, err_ := s_.Impl.GetChild()
		out_ := parentGetChildResponse{}
		out_.C = c
		return &out_, err_
	case ParentGetChildRequestOrdinal64:
		r, err_ := s_.Impl.GetChildRequest()
		out_ := parentGetChildRequestResponse{}
		out_.R = r
		return &out_, err_
	case ParentTakeChildOrdinal64:
		in_ := parentTakeChildRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s_.Impl.TakeChild(in_.C)
		return nil, err_
	case ParentTakeChildRequestOrdinal64:
		in_ := parentTakeChildRequestRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s_.Impl.TakeChildRequest(in_.R)
		return nil, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type ParentService struct {
	_bindings.BindingSet
}

func (s *ParentService) Add(impl Parent, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ParentStub{Impl: impl}, c, onError)
}

func (s *ParentService) EventProxyFor(key _bindings.BindingKey) (*ParentEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ParentEventProxy)(pxy), err
}

type ParentEventProxy _bindings.ChannelProxy



