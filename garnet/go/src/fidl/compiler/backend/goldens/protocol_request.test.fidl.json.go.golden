// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)




const (
)

type ChildInterface _bindings.ChannelProxy



type Child interface {
}

type ChildTransitionalBase struct {}


type ChildInterfaceRequest _bindings.InterfaceRequest

func NewChildInterfaceRequest() (ChildInterfaceRequest, *ChildInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChildInterfaceRequest(req), (*ChildInterface)(cli), err
}

type ChildStub struct {
	Impl Child
}

func (s_ *ChildStub) DispatchImpl(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type ChildService struct {
	_bindings.BindingSet
}

func (s *ChildService) Add(impl Child, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChildStub{Impl: impl}, c, onError)
}

func (s *ChildService) EventProxyFor(key _bindings.BindingKey) (*ChildEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ChildEventProxy)(pxy), err
}

type ChildEventProxy _bindings.ChannelProxy



const (
	ParentGetChildOrdinal uint64 = 0x3692bc6900000000
	ParentGetChildGenOrdinal uint64 = 0x57e26ed694158086
	ParentGetChildRequestOrdinal uint64 = 0x3faacc7e00000000
	ParentGetChildRequestGenOrdinal uint64 = 0x5ea0990a698a80
	ParentTakeChildOrdinal uint64 = 0x4c0642f900000000
	ParentTakeChildGenOrdinal uint64 = 0x6a9827d18871f87d
	ParentTakeChildRequestOrdinal uint64 = 0x5ec3867a00000000
	ParentTakeChildRequestGenOrdinal uint64 = 0x6c4a70e2a2126637
)

type parentGetChildResponse struct {
	_ struct{} `fidl:"s,8,0" fidl_size_v1_no_ee:"8" fidl_alignment_v1_no_ee:"0"`
	C ChildInterface`fidl:"0"`
}

var _mparentGetChildResponse = _bindings.CreateLazyMarshaler(parentGetChildResponse{})

func (msg *parentGetChildResponse) Marshaler() _bindings.Marshaler {
	return _mparentGetChildResponse
}

type parentGetChildRequestResponse struct {
	_ struct{} `fidl:"s,8,0" fidl_size_v1_no_ee:"8" fidl_alignment_v1_no_ee:"0"`
	R ChildInterfaceRequest`fidl:"0,0" fidl2:"0"`
}

var _mparentGetChildRequestResponse = _bindings.CreateLazyMarshaler(parentGetChildRequestResponse{})

func (msg *parentGetChildRequestResponse) Marshaler() _bindings.Marshaler {
	return _mparentGetChildRequestResponse
}

type parentTakeChildRequest struct {
	_ struct{} `fidl:"s,8,0" fidl_size_v1_no_ee:"8" fidl_alignment_v1_no_ee:"0"`
	C ChildInterface`fidl:"0"`
}

var _mparentTakeChildRequest = _bindings.CreateLazyMarshaler(parentTakeChildRequest{})

func (msg *parentTakeChildRequest) Marshaler() _bindings.Marshaler {
	return _mparentTakeChildRequest
}

type parentTakeChildRequestRequest struct {
	_ struct{} `fidl:"s,8,0" fidl_size_v1_no_ee:"8" fidl_alignment_v1_no_ee:"0"`
	R ChildInterfaceRequest`fidl:"0,0" fidl2:"0"`
}

var _mparentTakeChildRequestRequest = _bindings.CreateLazyMarshaler(parentTakeChildRequestRequest{})

func (msg *parentTakeChildRequestRequest) Marshaler() _bindings.Marshaler {
	return _mparentTakeChildRequestRequest
}

type ParentInterface _bindings.ChannelProxy


func (p *ParentInterface) GetChild() (ChildInterface, error) {
	var req_ _bindings.Message
	resp_ := &parentGetChildResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildOrdinal, req_, resp_, ParentGetChildOrdinal, ParentGetChildGenOrdinal)
	return resp_.C, err
}

func (p *ParentInterface) GetChildRequest() (ChildInterfaceRequest, error) {
	var req_ _bindings.Message
	resp_ := &parentGetChildRequestResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ParentGetChildRequestOrdinal, req_, resp_, ParentGetChildRequestOrdinal, ParentGetChildRequestGenOrdinal)
	return resp_.R, err
}

func (p *ParentInterface) TakeChild(c ChildInterface) error {
	req_ := &parentTakeChildRequest{
		C: c,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildOrdinal, req_)
	return err
}

func (p *ParentInterface) TakeChildRequest(r ChildInterfaceRequest) error {
	req_ := &parentTakeChildRequestRequest{
		R: r,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(ParentTakeChildRequestOrdinal, req_)
	return err
}


type Parent interface {
	GetChild() (ChildInterface, error)
	GetChildRequest() (ChildInterfaceRequest, error)
	TakeChild(c ChildInterface) error
	TakeChildRequest(r ChildInterfaceRequest) error
}

type ParentTransitionalBase struct {}


type ParentInterfaceRequest _bindings.InterfaceRequest

func NewParentInterfaceRequest() (ParentInterfaceRequest, *ParentInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ParentInterfaceRequest(req), (*ParentInterface)(cli), err
}

type ParentStub struct {
	Impl Parent
}

func (s_ *ParentStub) DispatchImpl(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case ParentGetChildOrdinal:
		fallthrough
	case ParentGetChildGenOrdinal:
		c, err_ := s_.Impl.GetChild()
		out_ := parentGetChildResponse{}
		out_.C = c
		return &out_, true, err_
	case ParentGetChildRequestOrdinal:
		fallthrough
	case ParentGetChildRequestGenOrdinal:
		r, err_ := s_.Impl.GetChildRequest()
		out_ := parentGetChildRequestResponse{}
		out_.R = r
		return &out_, true, err_
	case ParentTakeChildOrdinal:
		fallthrough
	case ParentTakeChildGenOrdinal:
		in_ := parentTakeChildRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.TakeChild(in_.C)
		return nil, false, err_
	case ParentTakeChildRequestOrdinal:
		fallthrough
	case ParentTakeChildRequestGenOrdinal:
		in_ := parentTakeChildRequestRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.TakeChildRequest(in_.R)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type ParentService struct {
	_bindings.BindingSet
}

func (s *ParentService) Add(impl Parent, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ParentStub{Impl: impl}, c, onError)
}

func (s *ParentService) EventProxyFor(key _bindings.BindingKey) (*ParentEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ParentEventProxy)(pxy), err
}

type ParentEventProxy _bindings.ChannelProxy



