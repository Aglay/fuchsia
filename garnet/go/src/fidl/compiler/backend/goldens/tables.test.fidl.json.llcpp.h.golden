// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

class SimpleTable;
class ReverseOrdinalTable;
class OlderSimpleTable;
class NewerSimpleTable;
class EmptyTable;

extern "C" const fidl_type_t v1_test_name_SimpleTableTable;

class SimpleTable final {
  public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const int64_t& x() const {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  int64_t& x() {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  bool has_x() const {
    return max_ordinal_ >= 1 && frame_->x.data != nullptr;
  }

  const int64_t& y() const {
    ZX_ASSERT(has_y());
    return *frame_->y.data;
  }
  int64_t& y() {
    ZX_ASSERT(has_y());
    return *frame_->y.data;
  }
  bool has_y() const {
    return max_ordinal_ >= 5 && frame_->y.data != nullptr;
  }

  SimpleTable() = default;
  ~SimpleTable() = default;
  SimpleTable(SimpleTable&& other) noexcept = default;
  SimpleTable& operator=(SimpleTable&& other) noexcept = default;

  class Builder;
  friend class Builder;
  static Builder Build();
  static constexpr const fidl_type_t* Type = &v1_test_name_SimpleTableTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 48;
  static constexpr bool HasPointer = true;

  class Frame {
    ::fidl::Envelope<int64_t> x;
    ::fidl::Envelope<void> reserved_1;
    ::fidl::Envelope<void> reserved_2;
    ::fidl::Envelope<void> reserved_3;
    ::fidl::Envelope<int64_t> y;

    friend class SimpleTable;
    friend class SimpleTable::Builder;
  };

 private:
  SimpleTable(uint64_t max_ordinal, ::fidl::tracking_ptr<Frame> && frame) : max_ordinal_(max_ordinal), frame_(std::move(frame)) {}
  uint64_t max_ordinal_;
  ::fidl::tracking_ptr<Frame> frame_;
};

class SimpleTable::Builder {
 public:
  SimpleTable view() { return SimpleTable(max_ordinal_, ::fidl::unowned_ptr<SimpleTable::Frame>(&frame_)); }
  ~Builder() = default;
  Builder(Builder&& other) noexcept = default;
  Builder& operator=(Builder&& other) noexcept = default;

  Builder&& set_x(int64_t* elem);

  Builder&& set_y(int64_t* elem);

 private:
  Builder() = default;
  friend Builder SimpleTable::Build();

  uint64_t max_ordinal_ = 0;
  SimpleTable::Frame frame_ = {};
};

extern "C" const fidl_type_t v1_test_name_ReverseOrdinalTableTable;

class ReverseOrdinalTable final {
  public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const int64_t& z() const {
    ZX_ASSERT(has_z());
    return *frame_->z.data;
  }
  int64_t& z() {
    ZX_ASSERT(has_z());
    return *frame_->z.data;
  }
  bool has_z() const {
    return max_ordinal_ >= 1 && frame_->z.data != nullptr;
  }

  const int64_t& y() const {
    ZX_ASSERT(has_y());
    return *frame_->y.data;
  }
  int64_t& y() {
    ZX_ASSERT(has_y());
    return *frame_->y.data;
  }
  bool has_y() const {
    return max_ordinal_ >= 2 && frame_->y.data != nullptr;
  }

  const int64_t& x() const {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  int64_t& x() {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  bool has_x() const {
    return max_ordinal_ >= 3 && frame_->x.data != nullptr;
  }

  ReverseOrdinalTable() = default;
  ~ReverseOrdinalTable() = default;
  ReverseOrdinalTable(ReverseOrdinalTable&& other) noexcept = default;
  ReverseOrdinalTable& operator=(ReverseOrdinalTable&& other) noexcept = default;

  class Builder;
  friend class Builder;
  static Builder Build();
  static constexpr const fidl_type_t* Type = &v1_test_name_ReverseOrdinalTableTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 72;
  static constexpr bool HasPointer = true;

  class Frame {
    ::fidl::Envelope<int64_t> z;
    ::fidl::Envelope<int64_t> y;
    ::fidl::Envelope<int64_t> x;

    friend class ReverseOrdinalTable;
    friend class ReverseOrdinalTable::Builder;
  };

 private:
  ReverseOrdinalTable(uint64_t max_ordinal, ::fidl::tracking_ptr<Frame> && frame) : max_ordinal_(max_ordinal), frame_(std::move(frame)) {}
  uint64_t max_ordinal_;
  ::fidl::tracking_ptr<Frame> frame_;
};

class ReverseOrdinalTable::Builder {
 public:
  ReverseOrdinalTable view() { return ReverseOrdinalTable(max_ordinal_, ::fidl::unowned_ptr<ReverseOrdinalTable::Frame>(&frame_)); }
  ~Builder() = default;
  Builder(Builder&& other) noexcept = default;
  Builder& operator=(Builder&& other) noexcept = default;

  Builder&& set_z(int64_t* elem);

  Builder&& set_y(int64_t* elem);

  Builder&& set_x(int64_t* elem);

 private:
  Builder() = default;
  friend Builder ReverseOrdinalTable::Build();

  uint64_t max_ordinal_ = 0;
  ReverseOrdinalTable::Frame frame_ = {};
};

extern "C" const fidl_type_t v1_test_name_OlderSimpleTableTable;

class OlderSimpleTable final {
  public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const int64_t& x() const {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  int64_t& x() {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  bool has_x() const {
    return max_ordinal_ >= 1 && frame_->x.data != nullptr;
  }

  OlderSimpleTable() = default;
  ~OlderSimpleTable() = default;
  OlderSimpleTable(OlderSimpleTable&& other) noexcept = default;
  OlderSimpleTable& operator=(OlderSimpleTable&& other) noexcept = default;

  class Builder;
  friend class Builder;
  static Builder Build();
  static constexpr const fidl_type_t* Type = &v1_test_name_OlderSimpleTableTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 24;
  static constexpr bool HasPointer = true;

  class Frame {
    ::fidl::Envelope<int64_t> x;

    friend class OlderSimpleTable;
    friend class OlderSimpleTable::Builder;
  };

 private:
  OlderSimpleTable(uint64_t max_ordinal, ::fidl::tracking_ptr<Frame> && frame) : max_ordinal_(max_ordinal), frame_(std::move(frame)) {}
  uint64_t max_ordinal_;
  ::fidl::tracking_ptr<Frame> frame_;
};

class OlderSimpleTable::Builder {
 public:
  OlderSimpleTable view() { return OlderSimpleTable(max_ordinal_, ::fidl::unowned_ptr<OlderSimpleTable::Frame>(&frame_)); }
  ~Builder() = default;
  Builder(Builder&& other) noexcept = default;
  Builder& operator=(Builder&& other) noexcept = default;

  Builder&& set_x(int64_t* elem);

 private:
  Builder() = default;
  friend Builder OlderSimpleTable::Build();

  uint64_t max_ordinal_ = 0;
  OlderSimpleTable::Frame frame_ = {};
};

extern "C" const fidl_type_t v1_test_name_NewerSimpleTableTable;

class NewerSimpleTable final {
  public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const int64_t& x() const {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  int64_t& x() {
    ZX_ASSERT(has_x());
    return *frame_->x.data;
  }
  bool has_x() const {
    return max_ordinal_ >= 1 && frame_->x.data != nullptr;
  }

  const int64_t& y() const {
    ZX_ASSERT(has_y());
    return *frame_->y.data;
  }
  int64_t& y() {
    ZX_ASSERT(has_y());
    return *frame_->y.data;
  }
  bool has_y() const {
    return max_ordinal_ >= 5 && frame_->y.data != nullptr;
  }

  const int64_t& z() const {
    ZX_ASSERT(has_z());
    return *frame_->z.data;
  }
  int64_t& z() {
    ZX_ASSERT(has_z());
    return *frame_->z.data;
  }
  bool has_z() const {
    return max_ordinal_ >= 6 && frame_->z.data != nullptr;
  }

  NewerSimpleTable() = default;
  ~NewerSimpleTable() = default;
  NewerSimpleTable(NewerSimpleTable&& other) noexcept = default;
  NewerSimpleTable& operator=(NewerSimpleTable&& other) noexcept = default;

  class Builder;
  friend class Builder;
  static Builder Build();
  static constexpr const fidl_type_t* Type = &v1_test_name_NewerSimpleTableTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 72;
  static constexpr bool HasPointer = true;

  class Frame {
    ::fidl::Envelope<int64_t> x;
    ::fidl::Envelope<void> reserved_1;
    ::fidl::Envelope<void> reserved_2;
    ::fidl::Envelope<void> reserved_3;
    ::fidl::Envelope<int64_t> y;
    ::fidl::Envelope<int64_t> z;

    friend class NewerSimpleTable;
    friend class NewerSimpleTable::Builder;
  };

 private:
  NewerSimpleTable(uint64_t max_ordinal, ::fidl::tracking_ptr<Frame> && frame) : max_ordinal_(max_ordinal), frame_(std::move(frame)) {}
  uint64_t max_ordinal_;
  ::fidl::tracking_ptr<Frame> frame_;
};

class NewerSimpleTable::Builder {
 public:
  NewerSimpleTable view() { return NewerSimpleTable(max_ordinal_, ::fidl::unowned_ptr<NewerSimpleTable::Frame>(&frame_)); }
  ~Builder() = default;
  Builder(Builder&& other) noexcept = default;
  Builder& operator=(Builder&& other) noexcept = default;

  Builder&& set_x(int64_t* elem);

  Builder&& set_y(int64_t* elem);

  Builder&& set_z(int64_t* elem);

 private:
  Builder() = default;
  friend Builder NewerSimpleTable::Build();

  uint64_t max_ordinal_ = 0;
  NewerSimpleTable::Frame frame_ = {};
};

extern "C" const fidl_type_t v1_test_name_EmptyTableTable;

class EmptyTable final {
  public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  EmptyTable() = default;
  ~EmptyTable() = default;
  EmptyTable(EmptyTable&& other) noexcept = default;
  EmptyTable& operator=(EmptyTable&& other) noexcept = default;

  class Builder;
  friend class Builder;
  static Builder Build();
  static constexpr const fidl_type_t* Type = &v1_test_name_EmptyTableTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = true;

  class Frame {

    friend class EmptyTable;
    friend class EmptyTable::Builder;
  };

 private:
  EmptyTable(uint64_t max_ordinal, ::fidl::tracking_ptr<Frame> && frame) : max_ordinal_(max_ordinal), frame_(std::move(frame)) {}
  uint64_t max_ordinal_;
  ::fidl::tracking_ptr<Frame> frame_;
};

class EmptyTable::Builder {
 public:
  EmptyTable view() { return EmptyTable(0, nullptr); }
  ~Builder() = default;
  Builder(Builder&& other) noexcept = default;
  Builder& operator=(Builder&& other) noexcept = default;

 private:
  Builder() = default;
  friend Builder EmptyTable::Build();
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::SimpleTable> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::SimpleTable>);

template <>
struct IsFidlType<::llcpp::test::name::ReverseOrdinalTable> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::ReverseOrdinalTable>);

template <>
struct IsFidlType<::llcpp::test::name::OlderSimpleTable> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::OlderSimpleTable>);

template <>
struct IsFidlType<::llcpp::test::name::NewerSimpleTable> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::NewerSimpleTable>);

template <>
struct IsFidlType<::llcpp::test::name::EmptyTable> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::EmptyTable>);

}  // namespace fidl
