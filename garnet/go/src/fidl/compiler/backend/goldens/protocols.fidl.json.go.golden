// WARNING: This file is machine generated by fidlgen.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)




const (
	OvernetInternalProtocolMethodAOrdinal uint32 = 1993818253
	OvernetInternalProtocolMethodAGenOrdinal uint32 = 1993818253
	OvernetInternalProtocolEventAOrdinal uint32 = 1746007436
	OvernetInternalProtocolEventAGenOrdinal uint32 = 1746007436
	OvernetInternalProtocolMethodBOrdinal uint32 = 952134976
	OvernetInternalProtocolMethodBGenOrdinal uint32 = 952134976
)

type OvernetInternalProtocolMethodARequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mOvernetInternalProtocolMethodARequest = _bindings.CreateLazyMarshaler(OvernetInternalProtocolMethodARequest{})

func (msg *OvernetInternalProtocolMethodARequest) Marshaler() _bindings.Marshaler {
	return _mOvernetInternalProtocolMethodARequest
}

// Implements Payload.
func (_ *OvernetInternalProtocolMethodARequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *OvernetInternalProtocolMethodARequest) InlineSize() int {
	return 16
}

type OvernetInternalProtocolEventAResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mOvernetInternalProtocolEventAResponse = _bindings.CreateLazyMarshaler(OvernetInternalProtocolEventAResponse{})

func (msg *OvernetInternalProtocolEventAResponse) Marshaler() _bindings.Marshaler {
	return _mOvernetInternalProtocolEventAResponse
}

// Implements Payload.
func (_ *OvernetInternalProtocolEventAResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *OvernetInternalProtocolEventAResponse) InlineSize() int {
	return 16
}

type OvernetInternalProtocolMethodBRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mOvernetInternalProtocolMethodBRequest = _bindings.CreateLazyMarshaler(OvernetInternalProtocolMethodBRequest{})

func (msg *OvernetInternalProtocolMethodBRequest) Marshaler() _bindings.Marshaler {
	return _mOvernetInternalProtocolMethodBRequest
}

// Implements Payload.
func (_ *OvernetInternalProtocolMethodBRequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *OvernetInternalProtocolMethodBRequest) InlineSize() int {
	return 16
}

type OvernetInternalProtocolMethodBResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result int64
}

var _mOvernetInternalProtocolMethodBResponse = _bindings.CreateLazyMarshaler(OvernetInternalProtocolMethodBResponse{})

func (msg *OvernetInternalProtocolMethodBResponse) Marshaler() _bindings.Marshaler {
	return _mOvernetInternalProtocolMethodBResponse
}

// Implements Payload.
func (_ *OvernetInternalProtocolMethodBResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *OvernetInternalProtocolMethodBResponse) InlineSize() int {
	return 8
}

type OvernetInternalProtocolInterface _bindings.ChannelProxy


func (p *OvernetInternalProtocolInterface) MethodA(a int64,b int64) error {
	req_ := OvernetInternalProtocolMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(OvernetInternalProtocolMethodAOrdinal, &req_)
	return err
}

func (p *OvernetInternalProtocolInterface) ExpectEventA() (int64, int64, error) {
	resp_ := OvernetInternalProtocolEventAResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Recv(OvernetInternalProtocolEventAOrdinal, &resp_)
	return resp_.A, resp_.B, err
}

func (p *OvernetInternalProtocolInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := OvernetInternalProtocolMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := OvernetInternalProtocolMethodBResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(OvernetInternalProtocolMethodBOrdinal, &req_, &resp_)
	return resp_.Result, err
}


type OvernetInternalProtocol interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
}

type OvernetInternalProtocolTransitionalBase struct {}


type OvernetInternalProtocolInterfaceRequest _bindings.InterfaceRequest

func NewOvernetInternalProtocolInterfaceRequest() (OvernetInternalProtocolInterfaceRequest, *OvernetInternalProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return OvernetInternalProtocolInterfaceRequest(req), (*OvernetInternalProtocolInterface)(cli), err
}

type OvernetInternalProtocolStub struct {
	Impl OvernetInternalProtocol
}

func (s *OvernetInternalProtocolStub) Dispatch(ord uint32, b_ []byte, h_ []_zx.Handle) (_bindings.Payload, error) {
	switch ord {
	case OvernetInternalProtocolMethodAOrdinal:
		in_ := OvernetInternalProtocolMethodARequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s.Impl.MethodA(in_.A,in_.B)
		return nil, err_
	case OvernetInternalProtocolMethodBOrdinal:
		in_ := OvernetInternalProtocolMethodBRequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		out_ := OvernetInternalProtocolMethodBResponse{}
		result, err_ := s.Impl.MethodB(in_.A,in_.B)
		out_.Result = result
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type OvernetInternalProtocolService struct {
	_bindings.BindingSet
}

func (s *OvernetInternalProtocolService) Add(impl OvernetInternalProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&OvernetInternalProtocolStub{Impl: impl}, c, onError)
}

func (s *OvernetInternalProtocolService) EventProxyFor(key _bindings.BindingKey) (*OvernetInternalProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*OvernetInternalProtocolEventProxy)(pxy), err
}

type OvernetInternalProtocolEventProxy _bindings.ChannelProxy

func (p *OvernetInternalProtocolEventProxy) EventA(a int64,b int64) error {
	event_ := OvernetInternalProtocolEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.ChannelProxy)(p)).Send(OvernetInternalProtocolEventAOrdinal, &event_)
}


const (
	SocketControlProtocolMethodAOrdinal uint32 = 1007842318
	SocketControlProtocolMethodAGenOrdinal uint32 = 1007842318
	SocketControlProtocolEventAOrdinal uint32 = 955483393
	SocketControlProtocolEventAGenOrdinal uint32 = 955483393
	SocketControlProtocolMethodBOrdinal uint32 = 677342235
	SocketControlProtocolMethodBGenOrdinal uint32 = 677342235
)

type SocketControlProtocolMethodARequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mSocketControlProtocolMethodARequest = _bindings.CreateLazyMarshaler(SocketControlProtocolMethodARequest{})

func (msg *SocketControlProtocolMethodARequest) Marshaler() _bindings.Marshaler {
	return _mSocketControlProtocolMethodARequest
}

// Implements Payload.
func (_ *SocketControlProtocolMethodARequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *SocketControlProtocolMethodARequest) InlineSize() int {
	return 16
}

type SocketControlProtocolEventAResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mSocketControlProtocolEventAResponse = _bindings.CreateLazyMarshaler(SocketControlProtocolEventAResponse{})

func (msg *SocketControlProtocolEventAResponse) Marshaler() _bindings.Marshaler {
	return _mSocketControlProtocolEventAResponse
}

// Implements Payload.
func (_ *SocketControlProtocolEventAResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *SocketControlProtocolEventAResponse) InlineSize() int {
	return 16
}

type SocketControlProtocolMethodBRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mSocketControlProtocolMethodBRequest = _bindings.CreateLazyMarshaler(SocketControlProtocolMethodBRequest{})

func (msg *SocketControlProtocolMethodBRequest) Marshaler() _bindings.Marshaler {
	return _mSocketControlProtocolMethodBRequest
}

// Implements Payload.
func (_ *SocketControlProtocolMethodBRequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *SocketControlProtocolMethodBRequest) InlineSize() int {
	return 16
}

type SocketControlProtocolMethodBResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result int64
}

var _mSocketControlProtocolMethodBResponse = _bindings.CreateLazyMarshaler(SocketControlProtocolMethodBResponse{})

func (msg *SocketControlProtocolMethodBResponse) Marshaler() _bindings.Marshaler {
	return _mSocketControlProtocolMethodBResponse
}

// Implements Payload.
func (_ *SocketControlProtocolMethodBResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *SocketControlProtocolMethodBResponse) InlineSize() int {
	return 8
}

type SocketControlProtocolInterface _bindings.SocketControlProxy


func (p *SocketControlProtocolInterface) MethodA(a int64,b int64) error {
	req_ := SocketControlProtocolMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.SocketControlProxy)(p)).Send(SocketControlProtocolMethodAOrdinal, &req_)
	return err
}

func (p *SocketControlProtocolInterface) ExpectEventA() (int64, int64, error) {
	resp_ := SocketControlProtocolEventAResponse{}
	err := ((*_bindings.SocketControlProxy)(p)).Recv(SocketControlProtocolEventAOrdinal, &resp_)
	return resp_.A, resp_.B, err
}

func (p *SocketControlProtocolInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := SocketControlProtocolMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := SocketControlProtocolMethodBResponse{}
	err := ((*_bindings.SocketControlProxy)(p)).Call(SocketControlProtocolMethodBOrdinal, &req_, &resp_)
	return resp_.Result, err
}


type SocketControlProtocol interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
}

type SocketControlProtocolTransitionalBase struct {}



type SocketControlProtocolStub struct {
	Impl SocketControlProtocol
}

func (s *SocketControlProtocolStub) Dispatch(ord uint32, b_ []byte, h_ []_zx.Handle) (_bindings.Payload, error) {
	switch ord {
	case SocketControlProtocolMethodAOrdinal:
		in_ := SocketControlProtocolMethodARequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s.Impl.MethodA(in_.A,in_.B)
		return nil, err_
	case SocketControlProtocolMethodBOrdinal:
		in_ := SocketControlProtocolMethodBRequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		out_ := SocketControlProtocolMethodBResponse{}
		result, err_ := s.Impl.MethodB(in_.A,in_.B)
		out_.Result = result
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}

type SocketControlProtocolEventProxy _bindings.SocketControlProxy

func (p *SocketControlProtocolEventProxy) EventA(a int64,b int64) error {
	event_ := SocketControlProtocolEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.SocketControlProxy)(p)).Send(SocketControlProtocolEventAOrdinal, &event_)
}


const (
	ChannelProtocolMethodAOrdinal uint32 = 1432785874
	ChannelProtocolMethodAGenOrdinal uint32 = 1432785874
	ChannelProtocolEventAOrdinal uint32 = 477676034
	ChannelProtocolEventAGenOrdinal uint32 = 477676034
	ChannelProtocolMethodBOrdinal uint32 = 180770075
	ChannelProtocolMethodBGenOrdinal uint32 = 180770075
)

type ChannelProtocolMethodARequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mChannelProtocolMethodARequest = _bindings.CreateLazyMarshaler(ChannelProtocolMethodARequest{})

func (msg *ChannelProtocolMethodARequest) Marshaler() _bindings.Marshaler {
	return _mChannelProtocolMethodARequest
}

// Implements Payload.
func (_ *ChannelProtocolMethodARequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *ChannelProtocolMethodARequest) InlineSize() int {
	return 16
}

type ChannelProtocolEventAResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mChannelProtocolEventAResponse = _bindings.CreateLazyMarshaler(ChannelProtocolEventAResponse{})

func (msg *ChannelProtocolEventAResponse) Marshaler() _bindings.Marshaler {
	return _mChannelProtocolEventAResponse
}

// Implements Payload.
func (_ *ChannelProtocolEventAResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *ChannelProtocolEventAResponse) InlineSize() int {
	return 16
}

type ChannelProtocolMethodBRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mChannelProtocolMethodBRequest = _bindings.CreateLazyMarshaler(ChannelProtocolMethodBRequest{})

func (msg *ChannelProtocolMethodBRequest) Marshaler() _bindings.Marshaler {
	return _mChannelProtocolMethodBRequest
}

// Implements Payload.
func (_ *ChannelProtocolMethodBRequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *ChannelProtocolMethodBRequest) InlineSize() int {
	return 16
}

type ChannelProtocolMethodBResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result int64
}

var _mChannelProtocolMethodBResponse = _bindings.CreateLazyMarshaler(ChannelProtocolMethodBResponse{})

func (msg *ChannelProtocolMethodBResponse) Marshaler() _bindings.Marshaler {
	return _mChannelProtocolMethodBResponse
}

// Implements Payload.
func (_ *ChannelProtocolMethodBResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *ChannelProtocolMethodBResponse) InlineSize() int {
	return 8
}

type ChannelProtocolInterface _bindings.ChannelProxy


func (p *ChannelProtocolInterface) MethodA(a int64,b int64) error {
	req_ := ChannelProtocolMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(ChannelProtocolMethodAOrdinal, &req_)
	return err
}

func (p *ChannelProtocolInterface) ExpectEventA() (int64, int64, error) {
	resp_ := ChannelProtocolEventAResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Recv(ChannelProtocolEventAOrdinal, &resp_)
	return resp_.A, resp_.B, err
}

func (p *ChannelProtocolInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := ChannelProtocolMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := ChannelProtocolMethodBResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ChannelProtocolMethodBOrdinal, &req_, &resp_)
	return resp_.Result, err
}


type ChannelProtocol interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
}

type ChannelProtocolTransitionalBase struct {}


type ChannelProtocolInterfaceRequest _bindings.InterfaceRequest

func NewChannelProtocolInterfaceRequest() (ChannelProtocolInterfaceRequest, *ChannelProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChannelProtocolInterfaceRequest(req), (*ChannelProtocolInterface)(cli), err
}

type ChannelProtocolStub struct {
	Impl ChannelProtocol
}

func (s *ChannelProtocolStub) Dispatch(ord uint32, b_ []byte, h_ []_zx.Handle) (_bindings.Payload, error) {
	switch ord {
	case ChannelProtocolMethodAOrdinal:
		in_ := ChannelProtocolMethodARequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s.Impl.MethodA(in_.A,in_.B)
		return nil, err_
	case ChannelProtocolMethodBOrdinal:
		in_ := ChannelProtocolMethodBRequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		out_ := ChannelProtocolMethodBResponse{}
		result, err_ := s.Impl.MethodB(in_.A,in_.B)
		out_.Result = result
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type ChannelProtocolService struct {
	_bindings.BindingSet
}

func (s *ChannelProtocolService) Add(impl ChannelProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChannelProtocolStub{Impl: impl}, c, onError)
}

func (s *ChannelProtocolService) EventProxyFor(key _bindings.BindingKey) (*ChannelProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ChannelProtocolEventProxy)(pxy), err
}

type ChannelProtocolEventProxy _bindings.ChannelProxy

func (p *ChannelProtocolEventProxy) EventA(a int64,b int64) error {
	event_ := ChannelProtocolEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.ChannelProxy)(p)).Send(ChannelProtocolEventAOrdinal, &event_)
}


const (
	KitchenSinkMethodAOrdinal uint32 = 450577456
	KitchenSinkMethodAGenOrdinal uint32 = 450577456
	KitchenSinkEventAOrdinal uint32 = 1795426833
	KitchenSinkEventAGenOrdinal uint32 = 1795426833
	KitchenSinkMethodBOrdinal uint32 = 1999489700
	KitchenSinkMethodBGenOrdinal uint32 = 1999489700
)

type KitchenSinkMethodARequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mKitchenSinkMethodARequest = _bindings.CreateLazyMarshaler(KitchenSinkMethodARequest{})

func (msg *KitchenSinkMethodARequest) Marshaler() _bindings.Marshaler {
	return _mKitchenSinkMethodARequest
}

// Implements Payload.
func (_ *KitchenSinkMethodARequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *KitchenSinkMethodARequest) InlineSize() int {
	return 16
}

type KitchenSinkEventAResponse struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mKitchenSinkEventAResponse = _bindings.CreateLazyMarshaler(KitchenSinkEventAResponse{})

func (msg *KitchenSinkEventAResponse) Marshaler() _bindings.Marshaler {
	return _mKitchenSinkEventAResponse
}

// Implements Payload.
func (_ *KitchenSinkEventAResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *KitchenSinkEventAResponse) InlineSize() int {
	return 16
}

type KitchenSinkMethodBRequest struct {
	_ struct{} `fidl2:"s,16,0"`
	A int64
	B int64
}

var _mKitchenSinkMethodBRequest = _bindings.CreateLazyMarshaler(KitchenSinkMethodBRequest{})

func (msg *KitchenSinkMethodBRequest) Marshaler() _bindings.Marshaler {
	return _mKitchenSinkMethodBRequest
}

// Implements Payload.
func (_ *KitchenSinkMethodBRequest) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *KitchenSinkMethodBRequest) InlineSize() int {
	return 16
}

type KitchenSinkMethodBResponse struct {
	_ struct{} `fidl2:"s,8,0"`
	Result int64
}

var _mKitchenSinkMethodBResponse = _bindings.CreateLazyMarshaler(KitchenSinkMethodBResponse{})

func (msg *KitchenSinkMethodBResponse) Marshaler() _bindings.Marshaler {
	return _mKitchenSinkMethodBResponse
}

// Implements Payload.
func (_ *KitchenSinkMethodBResponse) InlineAlignment() int {
	return 0
}

// Implements Payload.
func (_ *KitchenSinkMethodBResponse) InlineSize() int {
	return 8
}

type KitchenSinkInterface _bindings.ChannelProxy


func (p *KitchenSinkInterface) MethodA(a int64,b int64) error {
	req_ := KitchenSinkMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(KitchenSinkMethodAOrdinal, &req_)
	return err
}

func (p *KitchenSinkInterface) ExpectEventA() (int64, int64, error) {
	resp_ := KitchenSinkEventAResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Recv(KitchenSinkEventAOrdinal, &resp_)
	return resp_.A, resp_.B, err
}

func (p *KitchenSinkInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := KitchenSinkMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := KitchenSinkMethodBResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(KitchenSinkMethodBOrdinal, &req_, &resp_)
	return resp_.Result, err
}


type KitchenSink interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
}

type KitchenSinkTransitionalBase struct {}


type KitchenSinkInterfaceRequest _bindings.InterfaceRequest

func NewKitchenSinkInterfaceRequest() (KitchenSinkInterfaceRequest, *KitchenSinkInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return KitchenSinkInterfaceRequest(req), (*KitchenSinkInterface)(cli), err
}

type KitchenSinkStub struct {
	Impl KitchenSink
}

func (s *KitchenSinkStub) Dispatch(ord uint32, b_ []byte, h_ []_zx.Handle) (_bindings.Payload, error) {
	switch ord {
	case KitchenSinkMethodAOrdinal:
		in_ := KitchenSinkMethodARequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		err_ := s.Impl.MethodA(in_.A,in_.B)
		return nil, err_
	case KitchenSinkMethodBOrdinal:
		in_ := KitchenSinkMethodBRequest{}
		if err_ := _bindings.Unmarshal(b_, h_, &in_); err_ != nil {
			return nil, err_
		}
		out_ := KitchenSinkMethodBResponse{}
		result, err_ := s.Impl.MethodB(in_.A,in_.B)
		out_.Result = result
		return &out_, err_
	}
	return nil, _bindings.ErrUnknownOrdinal
}
type KitchenSinkService struct {
	_bindings.BindingSet
}

func (s *KitchenSinkService) Add(impl KitchenSink, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&KitchenSinkStub{Impl: impl}, c, onError)
}

func (s *KitchenSinkService) EventProxyFor(key _bindings.BindingKey) (*KitchenSinkEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*KitchenSinkEventProxy)(pxy), err
}

type KitchenSinkEventProxy _bindings.ChannelProxy

func (p *KitchenSinkEventProxy) EventA(a int64,b int64) error {
	event_ := KitchenSinkEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.ChannelProxy)(p)).Send(KitchenSinkEventAOrdinal, &event_)
}


