// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"

#include <test/name/cpp/fidl.h>

namespace fidl {
namespace fuzzing {


using Union = ::test::name::Union;
using FieldCollision = ::test::name::FieldCollision;


template<>
struct MinSize<Union> {
  operator size_t() { return sizeof(Union); }
};
template<>
struct Allocate<Union> {
  Union operator()(FuzzInput* src, size_t* size) {
    Union out;
    ZX_ASSERT(*size >= sizeof(Union));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(Union);
    return out;
  }
};
template<>
struct MinSize<FieldCollision> {
  operator size_t() { return sizeof(FieldCollision); }
};
template<>
struct Allocate<FieldCollision> {
  FieldCollision operator()(FuzzInput* src, size_t* size) {
    FieldCollision out;
    ZX_ASSERT(*size >= sizeof(FieldCollision));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(FieldCollision);
    return out;
  }
};

}  // namespace fuzzing
}  // namespace fidl
