// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/zx/bti.h>
#include <lib/zx/channel.h>
#include <lib/zx/debuglog.h>
#include <lib/zx/event.h>
#include <lib/zx/eventpair.h>
#include <lib/zx/exception.h>
#include <lib/zx/fifo.h>
#include <lib/zx/guest.h>
#include <lib/zx/handle.h>
#include <lib/zx/interrupt.h>
#include <lib/zx/iommu.h>
#include <lib/zx/job.h>
#include <lib/zx/pager.h>
#include <lib/zx/pcidevice.h>
#include <lib/zx/pmt.h>
#include <lib/zx/port.h>
#include <lib/zx/process.h>
#include <lib/zx/profile.h>
#include <lib/zx/resource.h>
#include <lib/zx/socket.h>
#include <lib/zx/suspendtoken.h>
#include <lib/zx/thread.h>
#include <lib/zx/timer.h>
#include <lib/zx/vcpu.h>
#include <lib/zx/vmar.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

class SomeProtocol;
struct Handles;

extern "C" const fidl_type_t v1_test_name_SomeProtocolSomeMethodRequestTable;
extern "C" const fidl_type_t v1_test_name_SomeProtocolSomeMethodResponseTable;
class SomeProtocol final {
  SomeProtocol() = delete;
 public:

  using SomeMethodRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    class SomeMethod_Impl final : private ::fidl::internal::StatusAndError {
      using Super = ::fidl::internal::StatusAndError;
     public:
      SomeMethod_Impl(::zx::unowned_channel _client_end);
      ~SomeMethod_Impl() = default;
      SomeMethod_Impl(SomeMethod_Impl&& other) = default;
      SomeMethod_Impl& operator=(SomeMethod_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
    };

   public:
    using SomeMethod = SomeMethod_Impl;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    class SomeMethod_Impl final : private ::fidl::internal::StatusAndError {
      using Super = ::fidl::internal::StatusAndError;
     public:
      SomeMethod_Impl(::zx::unowned_channel _client_end);
      ~SomeMethod_Impl() = default;
      SomeMethod_Impl(SomeMethod_Impl&& other) = default;
      SomeMethod_Impl& operator=(SomeMethod_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
    };

   public:
    using SomeMethod = SomeMethod_Impl;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 16 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::SomeMethod SomeMethod();


   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Allocates 16 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::SomeMethod SomeMethod(::zx::unowned_channel _client_end);


  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    static ::fidl::internal::StatusAndError SomeMethod(::zx::unowned_channel _client_end);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = SomeProtocol;
    using _Base = ::fidl::CompleterBase;

    using SomeMethodCompleter = ::fidl::Completer<>;

    virtual void SomeMethod(SomeMethodCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }


  // Helper functions to fill in the transaction header in a |DecodedMessage<TransactionalMessage>|.
  class SetTransactionHeaderFor final {
    SetTransactionHeaderFor() = delete;
   public:
    static void SomeMethodRequest(const ::fidl::DecodedMessage<SomeProtocol::SomeMethodRequest>& _msg);
  };
};

extern "C" const fidl_type_t v1_test_name_HandlesTable;

struct Handles {
  static constexpr const fidl_type_t* Type = &v1_test_name_HandlesTable;
  static constexpr uint32_t MaxNumHandles = 28;
  static constexpr uint32_t PrimarySize = 112;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  ::zx::handle plain_handle = {};

  ::zx::bti bti_handle = {};

  ::zx::channel channel_handle = {};

  ::zx::debuglog debuglog_handle = {};

  ::zx::event event_handle = {};

  ::zx::eventpair eventpair_handle = {};

  ::zx::exception exception_handle = {};

  ::zx::fifo fifo_handle = {};

  ::zx::guest guest_handle = {};

  ::zx::interrupt interrupt_handle = {};

  ::zx::iommu iommu_handle = {};

  ::zx::job job_handle = {};

  ::zx::pager pager_handle = {};

  ::zx::pcidevice pcidevice_handle = {};

  ::zx::pmt pmt_handle = {};

  ::zx::port port_handle = {};

  ::zx::process process_handle = {};

  ::zx::profile profile_handle = {};

  ::zx::resource resource_handle = {};

  ::zx::socket socket_handle = {};

  ::zx::suspendtoken suspendtoken_handle = {};

  ::zx::thread thread_handle = {};

  ::zx::timer timer_handle = {};

  ::zx::vcpu vcpu_handle = {};

  ::zx::vmar vmar_handle = {};

  ::zx::vmo vmo_handle = {};

  ::zx::channel some_protocol = {};

  ::zx::channel request_some_protocol = {};
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::Handles> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::Handles>);
static_assert(offsetof(::llcpp::test::name::Handles, plain_handle) == 0);
static_assert(offsetof(::llcpp::test::name::Handles, bti_handle) == 4);
static_assert(offsetof(::llcpp::test::name::Handles, channel_handle) == 8);
static_assert(offsetof(::llcpp::test::name::Handles, debuglog_handle) == 12);
static_assert(offsetof(::llcpp::test::name::Handles, event_handle) == 16);
static_assert(offsetof(::llcpp::test::name::Handles, eventpair_handle) == 20);
static_assert(offsetof(::llcpp::test::name::Handles, exception_handle) == 24);
static_assert(offsetof(::llcpp::test::name::Handles, fifo_handle) == 28);
static_assert(offsetof(::llcpp::test::name::Handles, guest_handle) == 32);
static_assert(offsetof(::llcpp::test::name::Handles, interrupt_handle) == 36);
static_assert(offsetof(::llcpp::test::name::Handles, iommu_handle) == 40);
static_assert(offsetof(::llcpp::test::name::Handles, job_handle) == 44);
static_assert(offsetof(::llcpp::test::name::Handles, pager_handle) == 48);
static_assert(offsetof(::llcpp::test::name::Handles, pcidevice_handle) == 52);
static_assert(offsetof(::llcpp::test::name::Handles, pmt_handle) == 56);
static_assert(offsetof(::llcpp::test::name::Handles, port_handle) == 60);
static_assert(offsetof(::llcpp::test::name::Handles, process_handle) == 64);
static_assert(offsetof(::llcpp::test::name::Handles, profile_handle) == 68);
static_assert(offsetof(::llcpp::test::name::Handles, resource_handle) == 72);
static_assert(offsetof(::llcpp::test::name::Handles, socket_handle) == 76);
static_assert(offsetof(::llcpp::test::name::Handles, suspendtoken_handle) == 80);
static_assert(offsetof(::llcpp::test::name::Handles, thread_handle) == 84);
static_assert(offsetof(::llcpp::test::name::Handles, timer_handle) == 88);
static_assert(offsetof(::llcpp::test::name::Handles, vcpu_handle) == 92);
static_assert(offsetof(::llcpp::test::name::Handles, vmar_handle) == 96);
static_assert(offsetof(::llcpp::test::name::Handles, vmo_handle) == 100);
static_assert(offsetof(::llcpp::test::name::Handles, some_protocol) == 104);
static_assert(offsetof(::llcpp::test::name::Handles, request_some_protocol) == 108);
static_assert(sizeof(::llcpp::test::name::Handles) == ::llcpp::test::name::Handles::PrimarySize);

}  // namespace fidl
