// WARNING: This file is machine generated by fidlgen.

#include <error.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

void ::llcpp::fidl::test::json::Example_foo_Result::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Example_foo_Result) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Example_foo_Result, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Example_foo_Result, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]] constexpr uint64_t kExample_foo_GenOrdinal =
    0xbaf4e613e45f29blu;
extern "C" const fidl_type_t fidl_test_json_ExamplefooRequestTable;
extern "C" const fidl_type_t fidl_test_json_ExamplefooResponseTable;

}  // namespace
template <>
Example::ResultOf::foo_Impl<Example::fooResponse>::foo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::StringView s) {
  fooRequest _request = {};
  _request.s = std::move(s);
  auto _linearized = ::fidl::internal::Linearized<fooRequest>(&_request);
  auto& _linearize_result = _linearized.result();
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<fooRequest> _decoded_request =
      std::move(_linearize_result.message);
  Super::SetResult(Example::InPlace::foo(std::move(_client_end),
                                         std::move(_decoded_request),
                                         Super::response_buffer()));
}

Example::ResultOf::foo Example::SyncClient::foo(::fidl::StringView s) {
  return ResultOf::foo(::zx::unowned_channel(this->channel_), std::move(s));
}

Example::ResultOf::foo Example::Call::foo(::zx::unowned_channel _client_end,
                                          ::fidl::StringView s) {
  return ResultOf::foo(std::move(_client_end), std::move(s));
}

template <>
Example::UnownedResultOf::foo_Impl<Example::fooResponse>::foo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::fidl::StringView s, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < fooRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<fooResponse>(
        ZX_ERR_BUFFER_TOO_SMALL, ::fidl::kErrorRequestBufferTooSmall));
    return;
  }
  fooRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<fooRequest> _decoded_request =
      std::move(_linearize_result.message);
  Super::SetResult(Example::InPlace::foo(std::move(_client_end),
                                         std::move(_decoded_request),
                                         std::move(_response_buffer)));
}

Example::UnownedResultOf::foo Example::SyncClient::foo(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(::zx::unowned_channel(this->channel_),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

Example::UnownedResultOf::foo Example::Call::foo(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::fidl::StringView s, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(std::move(_client_end),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

::fidl::DecodeResult<Example::fooResponse> Example::InPlace::foo(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<fooRequest> params,
    ::fidl::BytePart response_buffer) {
  Example::SetTransactionHeaderFor::fooRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Example::fooResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<fooRequest, fooResponse>(
      std::move(_client_end), std::move(_encode_request_result.message),
      std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Example::fooResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

Example::ResultOf::foo Example::ClientImpl::foo_Sync(::fidl::StringView s) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::foo(_binding->channel(), std::move(s));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

Example::UnownedResultOf::foo Example::ClientImpl::foo_Sync(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::foo(_binding->channel(), std::move(_request_buffer),
                                std::move(s), std::move(_response_buffer));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Example::ClientImpl::foo(
    ::fidl::StringView s,
    ::fit::callback<void(::llcpp::fidl::test::json::Example_foo_Result result)>
        _cb) {
  class ManagedResponseContext : public fooResponseContext {
   public:
    ManagedResponseContext(
        ::fit::callback<
            void(::llcpp::fidl::test::json::Example_foo_Result result)>
            cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<fooResponse> msg) override {
      auto message = msg.message();
      cb_(std::move(message->result));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::fidl::test::json::Example_foo_Result result)>
        cb_;
  };
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      fooRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed =
      std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error =
      foo(_write_bytes_array.view(), std::move(s), _context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError Example::ClientImpl::foo(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    fooResponseContext* _context) {
  if (_request_buffer.capacity() < fooRequest::PrimarySize) {
    return ::fidl::StatusAndError(ZX_ERR_BUFFER_TOO_SMALL,
                                  ::fidl::kErrorRequestBufferTooSmall);
  }
  fooRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return std::move(_linearize_result);
  }
  ::fidl::DecodedMessage<fooRequest> _decoded_request =
      std::move(_linearize_result.message);

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  SetTransactionHeaderFor::fooRequest(_decoded_request, _context->Txid());
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return ::fidl::DecodeResult<fooResponse>::FromFailure(
        std::move(_encode_request_result));
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t Example::ClientImpl::Dispatch(
    fidl_msg_t* msg, ::fidl::internal::ResponseContext* context) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kExample_foo_GenOrdinal: {
      auto result = ::fidl::DecodeAs<fooResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return result.status;
      }
      static_cast<fooResponseContext*>(context)->OnReply(
          std::move(result.message));
      break;
    }
    case kFidlOrdinalEpitaph:
      if (context) return ZX_ERR_INVALID_ARGS;
      ::fidl::internal::ClientBase::Close(
          reinterpret_cast<fidl_epitaph_t*>(hdr)->error);
      break;
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context) context->OnError();
      return ZX_ERR_NOT_SUPPORTED;
  }
  return ZX_OK;
}

bool Example::TryDispatch(Interface* impl, fidl_msg_t* msg,
                          ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kExample_foo_GenOrdinal: {
      auto result = ::fidl::DecodeAs<fooRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->foo(std::move(message->s), Interface::fooCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Example::Dispatch(Interface* impl, fidl_msg_t* msg,
                       ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void Example::Interface::fooCompleterBase::Reply(
    ::llcpp::fidl::test::json::Example_foo_Result result) {
  fooResponse _response = {};
  Example::SetTransactionHeaderFor::fooResponse(
      ::fidl::DecodedMessage<fooResponse>(::fidl::BytePart(
          reinterpret_cast<uint8_t*>(&_response), fooResponse::PrimarySize,
          fooResponse::PrimarySize)));
  _response.result = std::move(result);
  auto _linearized = ::fidl::internal::Linearized<fooResponse>(&_response);
  auto& _linearize_result = _linearized.result();
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}
void Example::Interface::fooCompleterBase::ReplySuccess(int64_t y) {
  ::fidl::aligned<Example_foo_Response> response;
  response.value.y = std::move(y);

  Reply(Example_foo_Result::WithResponse(::fidl::unowned_ptr(&response)));
}
void Example::Interface::fooCompleterBase::ReplyError(uint32_t error) {
  Reply(Example_foo_Result::WithErr(::fidl::unowned_ptr(&error)));
}

void Example::Interface::fooCompleterBase::Reply(
    ::fidl::BytePart _buffer,
    ::llcpp::fidl::test::json::Example_foo_Result result) {
  if (_buffer.capacity() < fooResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  fooResponse _response = {};
  Example::SetTransactionHeaderFor::fooResponse(
      ::fidl::DecodedMessage<fooResponse>(::fidl::BytePart(
          reinterpret_cast<uint8_t*>(&_response), fooResponse::PrimarySize,
          fooResponse::PrimarySize)));
  _response.result = std::move(result);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}
void Example::Interface::fooCompleterBase::ReplySuccess(
    ::fidl::BytePart _buffer, int64_t y) {
  ::fidl::aligned<Example_foo_Response> response;
  response.value.y = std::move(y);

  Reply(std::move(_buffer),
        Example_foo_Result::WithResponse(::fidl::unowned_ptr(&response)));
}

void Example::Interface::fooCompleterBase::Reply(
    ::fidl::DecodedMessage<fooResponse> params) {
  Example::SetTransactionHeaderFor::fooResponse(params);
  CompleterBase::SendReply(std::move(params));
}

void Example::SetTransactionHeaderFor::fooRequest(
    const ::fidl::DecodedMessage<Example::fooRequest>& _msg, zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid, kExample_foo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Example::SetTransactionHeaderFor::fooResponse(
    const ::fidl::DecodedMessage<Example::fooResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, kExample_foo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
