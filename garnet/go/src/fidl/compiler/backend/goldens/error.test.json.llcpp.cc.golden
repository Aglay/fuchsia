// WARNING: This file is machine generated by fidlgen.

#include <error.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

void ::llcpp::fidl::test::json::Example_foo_Result::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Example_foo_Result) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Example_foo_Result, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Example_foo_Result, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]] constexpr uint64_t kExample_foo_Ordinal = 841977834905137819lu;
extern "C" const fidl_type_t fidl_test_json_ExamplefooRequestTable;
extern "C" const fidl_type_t fidl_test_json_ExamplefooResponseTable;

}  // namespace
Example::ResultOf::foo::foo(zx_handle_t _client, const ::fidl::StringView& s) {
  fooOwnedRequest _request(0, s);
  _request.GetFidlMessage().Call(
      fooResponse::Type, _client, bytes_,
      fooResponse::PrimarySize + fooResponse::MaxOutOfLine);
  status_ = _request.status();
  error_ = _request.error();
}

Example::ResultOf::foo Example::SyncClient::foo(::fidl::StringView s) {
  return ResultOf::foo(this->channel().get(), s);
}

Example::ResultOf::foo Example::Call::foo(::zx::unowned_channel _client_end,
                                          ::fidl::StringView s) {
  return ResultOf::foo(_client_end->get(), s);
}

template <>
Example::UnownedResultOf::foo_Impl<Example::fooResponse>::foo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::fidl::StringView s, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < fooRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<fooResponse>(
        ZX_ERR_BUFFER_TOO_SMALL, ::fidl::kErrorRequestBufferTooSmall));
    return;
  }
  fooRequest _request(0, s);
  auto _encode_result = ::fidl::LinearizeAndEncode<fooRequest>(
      &_request, std::move(_request_buffer));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<fooRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::SetResult(Example::InPlace::foo(std::move(_client_end),
                                         std::move(_encoded_request),
                                         std::move(_response_buffer)));
}

Example::UnownedResultOf::foo Example::SyncClient::foo(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(::zx::unowned_channel(this->channel_),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

Example::UnownedResultOf::foo Example::Call::foo(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::fidl::StringView s, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(std::move(_client_end),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

::fidl::DecodeResult<Example::fooResponse> Example::InPlace::foo(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<fooRequest> params,
    ::fidl::BytePart response_buffer) {
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Example::fooResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  return foo(std::move(_client_end), std::move(_encode_request_result.message),
             std::move(response_buffer));
}

::fidl::DecodeResult<Example::fooResponse> Example::InPlace::foo(
    ::zx::unowned_channel _client_end,
    ::fidl::EncodedMessage<fooRequest> params,
    ::fidl::BytePart response_buffer) {
  fooRequest* request = reinterpret_cast<fooRequest*>(params.bytes().data());
  fidl_init_txn_header(&request->_hdr, 0, kExample_foo_Ordinal);
  auto _call_result = ::fidl::Call<fooRequest, fooResponse>(
      std::move(_client_end), std::move(params), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<Example::fooResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

Example::ResultOf::foo Example::ClientImpl::foo_Sync(::fidl::StringView s) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::foo(_binding->handle(), s);
  }
  return Example::ResultOf::foo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

Example::UnownedResultOf::foo Example::ClientImpl::foo_Sync(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::foo(_binding->channel(), std::move(_request_buffer),
                                std::move(s), std::move(_response_buffer));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Example::ClientImpl::foo(
    ::fidl::StringView s,
    ::fit::callback<void(::llcpp::fidl::test::json::Example_foo_Result result)>
        _cb) {
  class ManagedResponseContext : public fooResponseContext {
   public:
    ManagedResponseContext(
        ::fit::callback<
            void(::llcpp::fidl::test::json::Example_foo_Result result)>
            cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<fooResponse> msg) override {
      auto message = msg.message();
      cb_(std::move(message->result));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::fidl::test::json::Example_foo_Result result)>
        cb_;
  };
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      fooRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed =
      std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error =
      foo(_write_bytes_array.view(), std::move(s), _context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError Example::ClientImpl::foo(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    fooResponseContext* _context) {
  if (_request_buffer.capacity() < fooRequest::PrimarySize) {
    return ::fidl::StatusAndError(ZX_ERR_BUFFER_TOO_SMALL,
                                  ::fidl::kErrorRequestBufferTooSmall);
  }

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  fooRequest _request(_context->Txid(), s);
  auto _encode_request_result = ::fidl::LinearizeAndEncode<fooRequest>(
      &_request, std::move(_request_buffer));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return std::move(_encode_request_result);
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> Example::ClientImpl::Dispatch(
    fidl_msg_t* msg, ::fidl::internal::ResponseContext* context) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kExample_foo_Ordinal: {
      auto result = ::fidl::DecodeAs<fooResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kDecodeError,
                                  result.status};
      }
      static_cast<fooResponseContext*>(context)->OnReply(
          std::move(result.message));
      break;
    }
    case kFidlOrdinalEpitaph:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context)
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                  ZX_ERR_INVALID_ARGS};
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kPeerClosed,
                                reinterpret_cast<fidl_epitaph_t*>(hdr)->error};
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context) context->OnError();
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

bool Example::TryDispatch(Interface* impl, fidl_msg_t* msg,
                          ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kExample_foo_Ordinal: {
      auto result = ::fidl::DecodeAs<fooRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->foo(std::move(message->s), Interface::fooCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Example::Dispatch(Interface* impl, fidl_msg_t* msg,
                       ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

zx_status_t Example::Interface::fooCompleterBase::ReplyWithStatus(
    ::llcpp::fidl::test::json::Example_foo_Result result) {
  fooResponse _response{result};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<fooResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

void Example::Interface::fooCompleterBase::Reply(
    ::llcpp::fidl::test::json::Example_foo_Result result) {
  ReplyWithStatus(std::move(result));
}
zx_status_t Example::Interface::fooCompleterBase::ReplySuccessWithStatus(
    int64_t y) {
  ::fidl::aligned<Example_foo_Response> response;
  response.value.y = std::move(y);

  return ReplyWithStatus(
      Example_foo_Result::WithResponse(::fidl::unowned_ptr(&response)));
}

void Example::Interface::fooCompleterBase::ReplySuccess(int64_t y) {
  ::fidl::aligned<Example_foo_Response> response;
  response.value.y = std::move(y);

  ReplyWithStatus(
      Example_foo_Result::WithResponse(::fidl::unowned_ptr(&response)));
}
zx_status_t Example::Interface::fooCompleterBase::ReplyErrorWithStatus(
    uint32_t error) {
  return ReplyWithStatus(
      Example_foo_Result::WithErr(::fidl::unowned_ptr(&error)));
}

void Example::Interface::fooCompleterBase::ReplyError(uint32_t error) {
  ReplyWithStatus(Example_foo_Result::WithErr(::fidl::unowned_ptr(&error)));
}

zx_status_t Example::Interface::fooCompleterBase::ReplyWithStatus(
    ::fidl::BytePart _buffer,
    ::llcpp::fidl::test::json::Example_foo_Result result) {
  if (_buffer.capacity() < fooResponse::PrimarySize) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, ZX_ERR_BUFFER_TOO_SMALL});
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  fooResponse _response{result};
  auto _encode_result =
      ::fidl::LinearizeAndEncode<fooResponse>(&_response, std::move(_buffer));
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

void Example::Interface::fooCompleterBase::Reply(
    ::fidl::BytePart _buffer,
    ::llcpp::fidl::test::json::Example_foo_Result result) {
  ReplyWithStatus(std::move(_buffer), std::move(result));
}
zx_status_t Example::Interface::fooCompleterBase::ReplySuccessWithStatus(
    ::fidl::BytePart _buffer, int64_t y) {
  ::fidl::aligned<Example_foo_Response> response;
  response.value.y = std::move(y);

  return ReplyWithStatus(
      std::move(_buffer),
      Example_foo_Result::WithResponse(::fidl::unowned_ptr(&response)));
}

void Example::Interface::fooCompleterBase::ReplySuccess(
    ::fidl::BytePart _buffer, int64_t y) {
  ::fidl::aligned<Example_foo_Response> response;
  response.value.y = std::move(y);

  ReplyWithStatus(std::move(_buffer), Example_foo_Result::WithResponse(
                                          ::fidl::unowned_ptr(&response)));
}

zx_status_t Example::Interface::fooCompleterBase::ReplyWithStatus(
    ::fidl::DecodedMessage<fooResponse> params) {
  ZX_DEBUG_ASSERT(params.message()->_hdr.magic_number ==
                  kFidlWireFormatMagicNumberInitial);
  ZX_DEBUG_ASSERT(params.message()->_hdr.ordinal == kExample_foo_Ordinal);
  return CompleterBase::SendReply(std::move(params));
}

void Example::Interface::fooCompleterBase::Reply(
    ::fidl::DecodedMessage<fooResponse> params) {
  ReplyWithStatus(std::move(params));
}

void Example::fooRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kExample_foo_Ordinal);
}

void Example::fooResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kExample_foo_Ordinal);
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
