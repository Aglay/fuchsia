// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/txn_header.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

#include <variant>

namespace llcpp {

namespace test {
namespace name {

enum class EnumType : int32_t {
  VALUE = 1u,
  true_ = 2u,
};

class BitsType final {
 public:
  constexpr BitsType() : value_(0u) {}
  explicit constexpr BitsType(uint32_t value) : value_(value) {}
  const static BitsType VALUE;
  const static BitsType true_;
  const static BitsType mask;

  explicit constexpr inline operator uint32_t() const { return value_; }
  explicit constexpr inline operator bool() const {
    return static_cast<bool>(value_);
  }
  constexpr inline bool operator==(const BitsType& other) const {
    return value_ == other.value_;
  }
  constexpr inline bool operator!=(const BitsType& other) const {
    return value_ != other.value_;
  }
  constexpr inline BitsType operator~() const;
  constexpr inline BitsType operator|(const BitsType& other) const;
  constexpr inline BitsType operator&(const BitsType& other) const;
  constexpr inline BitsType operator^(const BitsType& other) const;
  constexpr inline void operator|=(const BitsType& other);
  constexpr inline void operator&=(const BitsType& other);
  constexpr inline void operator^=(const BitsType& other);

 private:
  uint32_t value_;
};
constexpr const ::llcpp::test::name::BitsType BitsType::VALUE =
    ::llcpp::test::name::BitsType(1u);
constexpr const ::llcpp::test::name::BitsType BitsType::true_ =
    ::llcpp::test::name::BitsType(2u);
constexpr const ::llcpp::test::name::BitsType BitsType::mask =
    ::llcpp::test::name::BitsType(3u);

constexpr inline ::llcpp::test::name::BitsType BitsType::operator~() const {
  return ::llcpp::test::name::BitsType(
      static_cast<uint32_t>(~this->value_ & mask.value_));
}

constexpr inline ::llcpp::test::name::BitsType BitsType::operator|(
    const ::llcpp::test::name::BitsType& other) const {
  return ::llcpp::test::name::BitsType(
      static_cast<uint32_t>(this->value_ | other.value_));
}

constexpr inline ::llcpp::test::name::BitsType BitsType::operator&(
    const ::llcpp::test::name::BitsType& other) const {
  return ::llcpp::test::name::BitsType(
      static_cast<uint32_t>(this->value_ & other.value_));
}

constexpr inline ::llcpp::test::name::BitsType BitsType::operator^(
    const ::llcpp::test::name::BitsType& other) const {
  return ::llcpp::test::name::BitsType(
      static_cast<uint32_t>(this->value_ ^ other.value_));
}

constexpr inline void BitsType::operator|=(
    const ::llcpp::test::name::BitsType& other) {
  this->value_ |= other.value_;
}

constexpr inline void BitsType::operator&=(
    const ::llcpp::test::name::BitsType& other) {
  this->value_ &= other.value_;
}

constexpr inline void BitsType::operator^=(
    const ::llcpp::test::name::BitsType& other) {
  this->value_ ^= other.value_;
}

extern const char USERNAME[];

constexpr uint32_t POPULATION_USA_2018 = 330000000u;

constexpr int8_t OFFSET = -33;

constexpr float MIN_TEMP = -273.15;

constexpr uint64_t FUCHSIA = 4054509061583223046u;

constexpr ::llcpp::test::name::EnumType enumVal = EnumType::VALUE;

constexpr ::llcpp::test::name::EnumType enumTrue = EnumType::true_;

constexpr int32_t enumPrimitiveVal = EnumType::VALUE;

constexpr int32_t enumPrimitiveTrue = EnumType::true_;

constexpr bool ENABLED_FLAG = true;

constexpr uint64_t DIAMOND = 1746410393481133080u;

constexpr double CONVERSION_FACTOR = 1.41421;

constexpr ::llcpp::test::name::BitsType bitsVal = BitsType::VALUE;

constexpr ::llcpp::test::name::BitsType bitsTrue = BitsType::true_;

constexpr int32_t bitsPrimitiveVal = BitsType::VALUE;

constexpr int32_t bitsPrimitiveTrue = BitsType::true_;

constexpr uint16_t ANSWER_IN_BINARY = 42u;

constexpr uint16_t ANSWER = 42u;

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::EnumType> : public std::true_type {};

template <>
struct IsFidlType<::llcpp::test::name::BitsType> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::BitsType>);
static_assert(sizeof(::llcpp::test::name::BitsType) == sizeof(uint32_t));

}  // namespace fidl

namespace llcpp {

namespace test {
namespace name {}  // namespace name
}  // namespace test
}  // namespace llcpp
