// WARNING: This file is machine generated by fidlgen.

#include <encapsulated_structs.test.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace fidl {
namespace test {
namespace encapsulatedstructs {

extern "C" const fidl_type_t
    fidl_test_encapsulatedstructs_NonInlineStructTestStructTable;
const fidl_type_t* NonInlineStructTestStruct::FidlType =
    &fidl_test_encapsulatedstructs_NonInlineStructTestStructTable;

void NonInlineStructTestStruct::Encode(::fidl::Encoder* _encoder,
                                       size_t _offset) {
  ::fidl::Encode(_encoder, &element, _offset + 0);
  ::fidl::Encode(_encoder, &h, _offset + 8);
}

void NonInlineStructTestStruct::Decode(::fidl::Decoder* _decoder,
                                       NonInlineStructTestStruct* value,
                                       size_t _offset) {
  ::fidl::Decode(_decoder, &value->element, _offset + 0);
  ::fidl::Decode(_decoder, &value->h, _offset + 8);
}

zx_status_t NonInlineStructTestStruct::Clone(
    NonInlineStructTestStruct* _result) const {
  zx_status_t _status = ::fidl::Clone(element, &_result->element);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(h, &_result->h);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}
extern "C" const fidl_type_t fidl_test_encapsulatedstructs_Int8Int32Table;
const fidl_type_t* Int8Int32::FidlType =
    &fidl_test_encapsulatedstructs_Int8Int32Table;

void Int8Int32::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &a, _offset + 0);
  ::fidl::Encode(_encoder, &b, _offset + 4);
}

void Int8Int32::Decode(::fidl::Decoder* _decoder, Int8Int32* value,
                       size_t _offset) {
  ::fidl::Decode(_decoder, &value->a, _offset + 0);
  ::fidl::Decode(_decoder, &value->b, _offset + 4);
}

zx_status_t Int8Int32::Clone(Int8Int32* _result) const {
  zx_status_t _status = ::fidl::Clone(a, &_result->a);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(b, &_result->b);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}
extern "C" const fidl_type_t fidl_test_encapsulatedstructs_Int16Int8Table;
const fidl_type_t* Int16Int8::FidlType =
    &fidl_test_encapsulatedstructs_Int16Int8Table;

void Int16Int8::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &a, _offset + 0);
  ::fidl::Encode(_encoder, &b, _offset + 2);
}

void Int16Int8::Decode(::fidl::Decoder* _decoder, Int16Int8* value,
                       size_t _offset) {
  ::fidl::Decode(_decoder, &value->a, _offset + 0);
  ::fidl::Decode(_decoder, &value->b, _offset + 2);
}

zx_status_t Int16Int8::Clone(Int16Int8* _result) const {
  zx_status_t _status = ::fidl::Clone(a, &_result->a);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(b, &_result->b);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}
extern "C" const fidl_type_t fidl_test_encapsulatedstructs_ArrayInt16Int8Table;
const fidl_type_t* ArrayInt16Int8::FidlType =
    &fidl_test_encapsulatedstructs_ArrayInt16Int8Table;

void ArrayInt16Int8::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &arr, _offset + 0);
}

void ArrayInt16Int8::Decode(::fidl::Decoder* _decoder, ArrayInt16Int8* value,
                            size_t _offset) {
  ::fidl::Decode(_decoder, &value->arr, _offset + 0);
}

zx_status_t ArrayInt16Int8::Clone(ArrayInt16Int8* _result) const {
  zx_status_t _status = ::fidl::Clone(arr, &_result->arr);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}
extern "C" const fidl_type_t
    fidl_test_encapsulatedstructs_StructPaddingTestStructTable;
const fidl_type_t* StructPaddingTestStruct::FidlType =
    &fidl_test_encapsulatedstructs_StructPaddingTestStructTable;

void StructPaddingTestStruct::Encode(::fidl::Encoder* _encoder,
                                     size_t _offset) {
  ::fidl::Encode(_encoder, &trailing, _offset + 0);
  ::fidl::Encode(_encoder, &inner, _offset + 4);
  ::fidl::Encode(_encoder, &array, _offset + 12);
}

void StructPaddingTestStruct::Decode(::fidl::Decoder* _decoder,
                                     StructPaddingTestStruct* value,
                                     size_t _offset) {
  ::fidl::Decode(_decoder, &value->trailing, _offset + 0);
  ::fidl::Decode(_decoder, &value->inner, _offset + 4);
  ::fidl::Decode(_decoder, &value->array, _offset + 12);
}

zx_status_t StructPaddingTestStruct::Clone(
    StructPaddingTestStruct* _result) const {
  zx_status_t _status = ::fidl::Clone(trailing, &_result->trailing);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(inner, &_result->inner);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(array, &_result->array);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}
extern "C" const fidl_type_t fidl_test_encapsulatedstructs_TopLevelStructTable;
const fidl_type_t* TopLevelStruct::FidlType =
    &fidl_test_encapsulatedstructs_TopLevelStructTable;

void TopLevelStruct::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &a, _offset + 0);
  ::fidl::Encode(_encoder, &b, _offset + 24);
}

void TopLevelStruct::Decode(::fidl::Decoder* _decoder, TopLevelStruct* value,
                            size_t _offset) {
  ::fidl::Decode(_decoder, &value->a, _offset + 0);
  ::fidl::Decode(_decoder, &value->b, _offset + 24);
}

zx_status_t TopLevelStruct::Clone(TopLevelStruct* _result) const {
  zx_status_t _status = ::fidl::Clone(a, &_result->a);
  if (_status != ZX_OK) return _status;
  _status = ::fidl::Clone(b, &_result->b);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}
}  // namespace encapsulatedstructs
}  // namespace test
}  // namespace fidl
