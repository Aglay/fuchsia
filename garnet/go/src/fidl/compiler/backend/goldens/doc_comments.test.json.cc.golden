// WARNING: This file is machine generated by fidlgen.

#include <doc_comments.test.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace test {
namespace name {

extern "C" const fidl_type_t v1_test_name_UnionTable;
const fidl_type_t* Union::FidlType = &v1_test_name_UnionTable;

Union::Union() {}

Union::~Union() {
  Destroy();
}

Union::Union(Union&& other) : tag_(other.tag_) {
  switch (tag_) {
    case Tag::kField:
      Field_ = std::move(other.Field_);
      break;
    case static_cast<fidl_xunion_tag_t>(Tag::Invalid):
      break;
  }
}

Union& Union::operator=(Union&& other) {
  if (this != &other) {
    Destroy();
    tag_ = other.tag_;
    switch (tag_) {
      case Tag::kField:
        Field_ = std::move(other.Field_);
        break;
      case static_cast<fidl_xunion_tag_t>(Tag::Invalid):
        break;
    }
  }
  return *this;
}

Union Union::WithField(int32_t&& val) {
  Union result;
  result.set_Field(std::move(val));
  return result;
}


void Union::Encode(::fidl::Encoder* encoder, size_t offset) {
  const size_t length_before = encoder->CurrentLength();
  const size_t handles_before = encoder->CurrentHandleCount();

  size_t envelope_offset = 0;

  switch (tag_) {
    case Tag::kField: {
      envelope_offset = encoder->Alloc(::fidl::EncodingInlineSize<int32_t, ::fidl::Encoder>(encoder));
      ::fidl::Encode(encoder, &Field_, envelope_offset);
      break;
    }
    default:
       break;
  }

  fidl_xunion_t* xunion = encoder->GetPtr<fidl_xunion_t>(offset);
  assert(xunion->envelope.presence == FIDL_ALLOC_ABSENT);

  if (envelope_offset) {
    xunion->tag = tag_;
    xunion->envelope.num_bytes = encoder->CurrentLength() - length_before;
    xunion->envelope.num_handles = encoder->CurrentHandleCount() - handles_before;
    xunion->envelope.presence = FIDL_ALLOC_PRESENT;
  }
}

void Union::Decode(::fidl::Decoder* decoder, Union* value, size_t offset) {
  fidl_xunion_t* xunion = decoder->GetPtr<fidl_xunion_t>(offset);

  if (!xunion->envelope.data) {
    value->EnsureStorageInitialized(static_cast<fidl_xunion_tag_t>(Tag::Invalid));
    return;
  }

  value->EnsureStorageInitialized(xunion->tag);


  const size_t envelope_offset = decoder->GetOffset(xunion->envelope.data);

  switch (value->tag_) {
    case Tag::kField:
      ::fidl::Decode(decoder, &value->Field_, envelope_offset);
      break;
  }

}

zx_status_t Union::Clone(Union* result) const {
  result->Destroy();
  result->tag_ = tag_;
  switch (tag_) {
    case Tag::kField:
      return ::fidl::Clone(Field_, &result->Field_);
    default:
      return ZX_OK;
  }
}

Union& Union::set_Field(int32_t value) {
  EnsureStorageInitialized(Tag::kField);
  Field_ = std::move(value);
  return *this;
}

void Union::Destroy() {
  switch (tag_) {
    case Tag::kField:
      break;
  
    default:
      break;
  
  }
  tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
}

void Union::EnsureStorageInitialized(::fidl_xunion_tag_t tag) {
  if (tag_ != tag) {
    Destroy();
    tag_ = tag;
    switch (tag_) {
      case static_cast<fidl_xunion_tag_t>(Tag::Invalid):
        break;
      case Tag::kField:
        new (&Field_) int32_t();
        break;
      default:
        break;
    }
  }
}
extern "C" const fidl_type_t v1_test_name_TableTable;
const fidl_type_t* Table::FidlType = &v1_test_name_TableTable;

Table::Table() :
  has_Field_(false) {
}

Table::Table(Table&& other) {
  has_Field_ = other.has_Field_;
  if (has_Field_) {
    Construct(&Field_value_.value, std::move(other.Field_value_.value));
  }
}

Table::~Table() {
  if (has_Field_) {
    Destruct(&Field_value_.value);
  }
}

Table& Table::operator=(Table&& other) {
  if (other.has_Field_) {
    if (has_Field_) {
      Field_value_.value = std::move(other.Field_value_.value);
    } else {
      has_Field_ = true;
      Construct(&Field_value_.value, std::move(other.Field_value_.value));
    }
  } else if (has_Field_) {
    has_Field_ = false;
    Destruct(&Field_value_.value);
  }
  return *this;
}

bool Table::IsEmpty() const {
  if (has_Field_) return false;
  return true;
}

void Table::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  size_t max_ordinal = 0;
  if (has_Field_) max_ordinal = 1;
  ::fidl::EncodeVectorPointer(_encoder, max_ordinal, _offset);
  if (max_ordinal == 0) return;
  size_t base = _encoder->Alloc(max_ordinal * 2 * sizeof(uint64_t));
  if (has_Field_) {
    const size_t length_before = _encoder->CurrentLength();
    const size_t handles_before = _encoder->CurrentHandleCount();
    ::fidl::Encode(
        _encoder,
        &Field_value_.value,
        _encoder->Alloc(::fidl::EncodingInlineSize<int32_t, ::fidl::Encoder>(_encoder)));
    size_t envelope_base = base + (1 - 1) * 2 * sizeof(uint64_t);
    uint64_t num_bytes_then_num_handles =
        (_encoder->CurrentLength() - length_before) |
        ((_encoder->CurrentHandleCount() - handles_before) << 32);
    ::fidl::Encode(_encoder, &num_bytes_then_num_handles, envelope_base);
    *_encoder->GetPtr<uintptr_t>(envelope_base + sizeof(uint64_t)) = FIDL_ALLOC_PRESENT;
  }
}

void Table::Decode(::fidl::Decoder* _decoder, Table* _value, size_t _offset) {
  fidl_vector_t* encoded = _decoder->GetPtr<fidl_vector_t>(_offset);
  size_t base;
  size_t count;
  if (!encoded->data) {
    goto clear_all;
  }

  base = _decoder->GetOffset(encoded->data);
  count = encoded->count;
  if (count >= 1) {
    size_t envelope_base = base + (1 - 1) * 2 * sizeof(uint64_t);
    uint64_t presence;
    ::fidl::Decode(_decoder, &presence, envelope_base + sizeof(uint64_t));
    if (presence != 0) {
      ::fidl::Decode(_decoder, _value->mutable_Field(), _decoder->GetOffset(presence));
    } else {
      _value->clear_Field();
    }
  } else {
    goto done_1;
  }

  return;

  // Clear unset values.
clear_all:
done_1:
  _value->clear_Field();
  return;
}

zx_status_t Table::Clone(Table* result) const {
  if (has_Field_) {
    zx_status_t _status = ::fidl::Clone(Field_value_.value, result->mutable_Field());
    if (_status != ZX_OK)
      return _status;
  } else {
    result->clear_Field();
  }
  return ZX_OK;
}
extern "C" const fidl_type_t v1_test_name_StructTable;
const fidl_type_t* Struct::FidlType = &v1_test_name_StructTable;

void Struct::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &Field, _offset + 0);
}

void Struct::Decode(::fidl::Decoder* _decoder, Struct* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->Field, _offset + 0);
}

zx_status_t Struct::Clone(Struct* _result) const {
  zx_status_t _status = ::fidl::Clone(Field, &_result->Field);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
#ifdef __Fuchsia__
namespace {

extern "C" const fidl_type_t v1_test_name_InterfaceMethodRequestTable;

extern "C" const fidl_type_t v1_test_name_InterfaceOnEventEventTable;

}  // namespace

Interface::~Interface() = default;

const fidl_type_t* Interface_RequestDecoder::GetType(uint64_t ordinal, bool* out_needs_response) {
  switch (ordinal) {
    case internal::kInterface_Method_Ordinal:
    case internal::kInterface_Method_GenOrdinal:
      *out_needs_response = false;
      return &v1_test_name_InterfaceMethodRequestTable;
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* Interface_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case internal::kInterface_OnEvent_Ordinal:
    case internal::kInterface_OnEvent_GenOrdinal:
      return &v1_test_name_InterfaceOnEventEventTable;
    default:
      return nullptr;
  }
}

Interface_EventSender::~Interface_EventSender() = default;

Interface_Sync::~Interface_Sync() = default;

Interface_Proxy::Interface_Proxy(::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

Interface_Proxy::~Interface_Proxy() = default;

zx_status_t Interface_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    case internal::kInterface_OnEvent_Ordinal:
    case internal::kInterface_OnEvent_GenOrdinal:
    {
      if (!OnEvent) {
        status = ZX_OK;
        break;
      }
      const char* error_msg = nullptr;
      status = message.Decode(&v1_test_name_InterfaceOnEventEventTable, &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(message, &v1_test_name_InterfaceOnEventEventTable, error_msg);
        break;
      }
      OnEvent();
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}


void Interface_Proxy::Method() {
  ::fidl::Encoder _encoder(internal::kInterface_Method_GenOrdinal);
  controller_->Send(&v1_test_name_InterfaceMethodRequestTable, Interface_RequestEncoder::Method(&_encoder), nullptr);
}

Interface_Stub::Interface_Stub(Interface_clazz* impl) : impl_(impl) {
  (void)impl_;
}

Interface_Stub::~Interface_Stub() = default;

namespace {

}  // namespace

zx_status_t Interface_Stub::Dispatch_(
    ::fidl::Message message,
    ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type = Interface_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type, "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case internal::kInterface_Method_Ordinal:
    case internal::kInterface_Method_GenOrdinal:
    {
      impl_->Method();
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}
void Interface_Stub::OnEvent() {
  ::fidl::Encoder _encoder(internal::kInterface_OnEvent_GenOrdinal);
  sender_()->Send(&v1_test_name_InterfaceOnEventEventTable, Interface_ResponseEncoder::OnEvent(&_encoder));
}

Interface_SyncProxy::Interface_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

Interface_SyncProxy::~Interface_SyncProxy() = default;

zx_status_t Interface_SyncProxy::Method() {
  ::fidl::Encoder _encoder(internal::kInterface_Method_GenOrdinal);
  return proxy_.Send(&v1_test_name_InterfaceMethodRequestTable, Interface_RequestEncoder::Method(&_encoder));
}

#endif // __Fuchsia__

}  // namespace name
}  // namespace test

