// WARNING: This file is machine generated by fidlc.

#include <lib/fidl/internal.h>

extern "C" {

extern const fidl_type_t test_name_HandlesTable;


static const fidl_type_t HandlehandlenonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_NONE, ::fidl::kNonnullable));

static const fidl_type_t HandlebtinonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_BTI, ::fidl::kNonnullable));

static const fidl_type_t HandlechannelnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_CHANNEL, ::fidl::kNonnullable));

static const fidl_type_t HandledebuglognonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_LOG, ::fidl::kNonnullable));

static const fidl_type_t HandleeventnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_EVENT, ::fidl::kNonnullable));

static const fidl_type_t HandleeventpairnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_EVENTPAIR, ::fidl::kNonnullable));

static const fidl_type_t HandleexceptionnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_EXCEPTION, ::fidl::kNonnullable));

static const fidl_type_t HandlefifononnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_FIFO, ::fidl::kNonnullable));

static const fidl_type_t HandleguestnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_GUEST, ::fidl::kNonnullable));

static const fidl_type_t HandleinterruptnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_INTERRUPT, ::fidl::kNonnullable));

static const fidl_type_t HandleiommunonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_IOMMU, ::fidl::kNonnullable));

static const fidl_type_t HandlejobnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_JOB, ::fidl::kNonnullable));

static const fidl_type_t HandlepagernonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_PAGER, ::fidl::kNonnullable));

static const fidl_type_t HandlepcidevicenonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_PCI_DEVICE, ::fidl::kNonnullable));

static const fidl_type_t HandlepmtnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_PMT, ::fidl::kNonnullable));

static const fidl_type_t HandleportnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_PORT, ::fidl::kNonnullable));

static const fidl_type_t HandleprocessnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_PROCESS, ::fidl::kNonnullable));

static const fidl_type_t HandleprofilenonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_PROFILE, ::fidl::kNonnullable));

static const fidl_type_t HandleresourcenonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_RESOURCE, ::fidl::kNonnullable));

static const fidl_type_t HandlesocketnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_SOCKET, ::fidl::kNonnullable));

static const fidl_type_t HandlesuspendtokennonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_SUSPEND_TOKEN, ::fidl::kNonnullable));

static const fidl_type_t HandlethreadnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_THREAD, ::fidl::kNonnullable));

static const fidl_type_t HandletimernonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_TIMER, ::fidl::kNonnullable));

static const fidl_type_t HandlevcpunonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_VCPU, ::fidl::kNonnullable));

static const fidl_type_t HandlevmarnonnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_VMAR, ::fidl::kNonnullable));

static const fidl_type_t HandlevmononnullableTable = fidl_type_t(::fidl::FidlCodedHandle(ZX_OBJ_TYPE_VMO, ::fidl::kNonnullable));


static const ::fidl::FidlStructField Fields17test_name_Handles[] = {
    ::fidl::FidlStructField(&HandlehandlenonnullableTable, 0u, 0u),
    ::fidl::FidlStructField(&HandlebtinonnullableTable, 4u, 0u),
    ::fidl::FidlStructField(&HandlechannelnonnullableTable, 8u, 0u),
    ::fidl::FidlStructField(&HandledebuglognonnullableTable, 12u, 0u),
    ::fidl::FidlStructField(&HandleeventnonnullableTable, 16u, 0u),
    ::fidl::FidlStructField(&HandleeventpairnonnullableTable, 20u, 0u),
    ::fidl::FidlStructField(&HandleexceptionnonnullableTable, 24u, 0u),
    ::fidl::FidlStructField(&HandlefifononnullableTable, 28u, 0u),
    ::fidl::FidlStructField(&HandleguestnonnullableTable, 32u, 0u),
    ::fidl::FidlStructField(&HandleinterruptnonnullableTable, 36u, 0u),
    ::fidl::FidlStructField(&HandleiommunonnullableTable, 40u, 0u),
    ::fidl::FidlStructField(&HandlejobnonnullableTable, 44u, 0u),
    ::fidl::FidlStructField(&HandlepagernonnullableTable, 48u, 0u),
    ::fidl::FidlStructField(&HandlepcidevicenonnullableTable, 52u, 0u),
    ::fidl::FidlStructField(&HandlepmtnonnullableTable, 56u, 0u),
    ::fidl::FidlStructField(&HandleportnonnullableTable, 60u, 0u),
    ::fidl::FidlStructField(&HandleprocessnonnullableTable, 64u, 0u),
    ::fidl::FidlStructField(&HandleprofilenonnullableTable, 68u, 0u),
    ::fidl::FidlStructField(&HandleresourcenonnullableTable, 72u, 0u),
    ::fidl::FidlStructField(&HandlesocketnonnullableTable, 76u, 0u),
    ::fidl::FidlStructField(&HandlesuspendtokennonnullableTable, 80u, 0u),
    ::fidl::FidlStructField(&HandlethreadnonnullableTable, 84u, 0u),
    ::fidl::FidlStructField(&HandletimernonnullableTable, 88u, 0u),
    ::fidl::FidlStructField(&HandlevcpunonnullableTable, 92u, 0u),
    ::fidl::FidlStructField(&HandlevmarnonnullableTable, 96u, 0u),
    ::fidl::FidlStructField(&HandlevmononnullableTable, 100u, 0u)
};
const fidl_type_t test_name_HandlesTable = fidl_type_t(::fidl::FidlCodedStruct(Fields17test_name_Handles, 26u, 104u, "test.name/Handles"));

} // extern "C"
