// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace fidl {
namespace test {
namespace nullable {

class StructWithNullableVector;
class StructWithNullableUnion;
class StructWithNullableStruct;
class StructWithNullableString;
class StructWithNullableRequest;
class StructWithNullableProtocol;
class StructWithNullableHandle;
#ifdef __Fuchsia__

class SimpleProtocol;
using SimpleProtocolPtr = ::fidl::InterfacePtr<SimpleProtocol>;
class SimpleProtocol_Proxy;
class SimpleProtocol_Stub;
class SimpleProtocol_EventSender;
class SimpleProtocol_Sync;
using SimpleProtocolSyncPtr = ::fidl::SynchronousInterfacePtr<SimpleProtocol>;
class SimpleProtocol_SyncProxy;
using SimpleProtocolHandle = ::fidl::InterfaceHandle<SimpleProtocol>;
namespace internal {
constexpr uint64_t kSimpleProtocol_Add_Ordinal = 0x11fe4d2400000000lu;
constexpr uint64_t kSimpleProtocol_Add_GenOrdinal = 0x113010d7832f175dlu;

}  // namespace
#endif // __Fuchsia__
class SimpleUnion;
class Int32Wrapper;

class StructWithNullableVector final {
 public:
  static const fidl_type_t* FidlType;
  
  ::fidl::VectorPtr<int32_t> val{};

  static inline ::std::unique_ptr<StructWithNullableVector> New() { return ::std::make_unique<StructWithNullableVector>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructWithNullableVector* value, size_t _offset);
  zx_status_t Clone(StructWithNullableVector* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableVector& _value,
                         ::fidl::test::nullable::StructWithNullableVector* _result) {
  return _value.Clone(_result);
}

using StructWithNullableVectorPtr = ::std::unique_ptr<StructWithNullableVector>;

class StructWithNullableUnion final {
 public:
  static const fidl_type_t* FidlType;
  
  ::std::unique_ptr<SimpleUnion> val{};

  static inline ::std::unique_ptr<StructWithNullableUnion> New() { return ::std::make_unique<StructWithNullableUnion>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructWithNullableUnion* value, size_t _offset);
  zx_status_t Clone(StructWithNullableUnion* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableUnion& _value,
                         ::fidl::test::nullable::StructWithNullableUnion* _result) {
  return _value.Clone(_result);
}

using StructWithNullableUnionPtr = ::std::unique_ptr<StructWithNullableUnion>;

class StructWithNullableStruct final {
 public:
  static const fidl_type_t* FidlType;
  
  ::std::unique_ptr<Int32Wrapper> val{};

  static inline ::std::unique_ptr<StructWithNullableStruct> New() { return ::std::make_unique<StructWithNullableStruct>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructWithNullableStruct* value, size_t _offset);
  zx_status_t Clone(StructWithNullableStruct* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableStruct& _value,
                         ::fidl::test::nullable::StructWithNullableStruct* _result) {
  return _value.Clone(_result);
}

using StructWithNullableStructPtr = ::std::unique_ptr<StructWithNullableStruct>;

class StructWithNullableString final {
 public:
  static const fidl_type_t* FidlType;
  
  ::fidl::StringPtr val{};

  static inline ::std::unique_ptr<StructWithNullableString> New() { return ::std::make_unique<StructWithNullableString>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructWithNullableString* value, size_t _offset);
  zx_status_t Clone(StructWithNullableString* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableString& _value,
                         ::fidl::test::nullable::StructWithNullableString* _result) {
  return _value.Clone(_result);
}

using StructWithNullableStringPtr = ::std::unique_ptr<StructWithNullableString>;

class StructWithNullableRequest final {
 public:
  static const fidl_type_t* FidlType;
  
  ::fidl::InterfaceRequest<SimpleProtocol> val{};

  static inline ::std::unique_ptr<StructWithNullableRequest> New() { return ::std::make_unique<StructWithNullableRequest>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructWithNullableRequest* value, size_t _offset);
  zx_status_t Clone(StructWithNullableRequest* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableRequest& _value,
                         ::fidl::test::nullable::StructWithNullableRequest* _result) {
  return _value.Clone(_result);
}

using StructWithNullableRequestPtr = ::std::unique_ptr<StructWithNullableRequest>;

class StructWithNullableProtocol final {
 public:
  static const fidl_type_t* FidlType;
  
  ::fidl::InterfaceHandle<class SimpleProtocol> val{};

  static inline ::std::unique_ptr<StructWithNullableProtocol> New() { return ::std::make_unique<StructWithNullableProtocol>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructWithNullableProtocol* value, size_t _offset);
  zx_status_t Clone(StructWithNullableProtocol* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableProtocol& _value,
                         ::fidl::test::nullable::StructWithNullableProtocol* _result) {
  return _value.Clone(_result);
}

using StructWithNullableProtocolPtr = ::std::unique_ptr<StructWithNullableProtocol>;

class StructWithNullableHandle final {
 public:
  static const fidl_type_t* FidlType;
  
  ::zx::vmo val{};

  static inline ::std::unique_ptr<StructWithNullableHandle> New() { return ::std::make_unique<StructWithNullableHandle>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructWithNullableHandle* value, size_t _offset);
  zx_status_t Clone(StructWithNullableHandle* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableHandle& _value,
                         ::fidl::test::nullable::StructWithNullableHandle* _result) {
  return _value.Clone(_result);
}

using StructWithNullableHandlePtr = ::std::unique_ptr<StructWithNullableHandle>;
#ifdef __Fuchsia__

class SimpleProtocol {
 public:
  using Proxy_ = SimpleProtocol_Proxy;
  using Stub_ = SimpleProtocol_Stub;
  using EventSender_ = SimpleProtocol_EventSender;
  using Sync_ = SimpleProtocol_Sync;
  virtual ~SimpleProtocol();
  using AddCallback =
      fit::function<void(int32_t)>;
      
  virtual void Add(int32_t a, int32_t b, AddCallback callback) = 0;
};

class SimpleProtocol_RequestEncoder {
 public:
  static ::fidl::Message Add(::fidl::Encoder* _encoder, int32_t* a, int32_t* b) {
    _encoder->Alloc(24 - sizeof(fidl_message_header_t));
    ::fidl::Encode(_encoder, a, 16);
    ::fidl::Encode(_encoder, b, 20);
    return _encoder->GetMessage();
  }
};

class SimpleProtocol_RequestDecoder {
 public:
  SimpleProtocol_RequestDecoder() = default;
  virtual ~SimpleProtocol_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  zx_status_t Decode_(::fidl::Message request) {
    bool needs_response;
    const fidl_type_t* request_type = GetType(request.ordinal(), &needs_response);
    if (request_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = request.Decode(request_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(request, request_type, error_msg);
      return status;
    }
    ::fidl::Decoder request_decoder(std::move(request));
    switch (request.ordinal()) {
      case internal::kSimpleProtocol_Add_Ordinal:
      case internal::kSimpleProtocol_Add_GenOrdinal:
      {
        auto arg0 = ::fidl::DecodeAs<int32_t>(&request_decoder, 16);
        auto arg1 = ::fidl::DecodeAs<int32_t>(&request_decoder, 20);
        Add(std::move(arg0), std::move(arg1));
        break;
      }
      default: {
        status = ZX_ERR_NOT_SUPPORTED;
        break;
      }
    }
    return status;
  }
  virtual void Add(int32_t a, int32_t b) = 0;
};

class SimpleProtocol_ResponseEncoder {
 public:
  static ::fidl::Message Add(::fidl::Encoder* _encoder, int32_t* sum) {
    _encoder->Alloc(24 - sizeof(fidl_message_header_t));
    ::fidl::Encode(_encoder, sum, 16);
    return _encoder->GetMessage();
  }
};

class SimpleProtocol_ResponseDecoder {
 public:
  SimpleProtocol_ResponseDecoder() = default;
  virtual ~SimpleProtocol_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  zx_status_t Decode_(::fidl::Message response) {
    const fidl_type_t* response_type = GetType(response.ordinal());
    if (response_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = response.Decode(response_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(response, response_type, error_msg);
      return status;
    }
    ::fidl::Decoder response_decoder(std::move(response));
    switch (response.ordinal()) {
      case internal::kSimpleProtocol_Add_Ordinal:
      case internal::kSimpleProtocol_Add_GenOrdinal:
      {
        auto arg0 = ::fidl::DecodeAs<int32_t>(&response_decoder, 16);
        Add(std::move(arg0));
        break;
      }
      default: {
        break;
      }
    }
    return ZX_OK;
  }
  virtual void Add(int32_t sum) = 0;
};

class SimpleProtocol_EventSender {
 public:
  virtual ~SimpleProtocol_EventSender();
};

class SimpleProtocol_Sync {
 public:
  using Proxy_ = SimpleProtocol_SyncProxy;
  virtual ~SimpleProtocol_Sync();
  virtual zx_status_t Add(int32_t a, int32_t b, int32_t* out_sum) = 0;
};

class SimpleProtocol_Proxy final : public ::fidl::internal::Proxy, public SimpleProtocol {
 public:
  explicit SimpleProtocol_Proxy(::fidl::internal::ProxyController* controller);
  ~SimpleProtocol_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void Add(int32_t a, int32_t b, AddCallback callback) override;

 private:
  SimpleProtocol_Proxy(const SimpleProtocol_Proxy&) = delete;
  SimpleProtocol_Proxy& operator=(const SimpleProtocol_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class SimpleProtocol_Stub final : public ::fidl::internal::Stub, public SimpleProtocol_EventSender {
 public:
  typedef class ::fidl::test::nullable::SimpleProtocol SimpleProtocol_clazz;
  explicit SimpleProtocol_Stub(SimpleProtocol_clazz* impl);
  ~SimpleProtocol_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;

 private:
  SimpleProtocol_clazz* impl_;
};

class SimpleProtocol_SyncProxy : public SimpleProtocol_Sync {
 public:
  explicit SimpleProtocol_SyncProxy(::zx::channel channel);
  ~SimpleProtocol_SyncProxy() override;
  zx_status_t Add(int32_t a, int32_t b, int32_t* out_sum) override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<SimpleProtocol>;
};
#endif // __Fuchsia__

class SimpleUnion final {
 public:
 static const fidl_type_t* FidlType;

  SimpleUnion();
  ~SimpleUnion();

  SimpleUnion(SimpleUnion&&);
  SimpleUnion& operator=(SimpleUnion&&);

  
  static SimpleUnion WithA(int32_t&&);
  static SimpleUnion WithB(float&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  
    kA = 1,  // 0x1
    kB = 2,  // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<SimpleUnion> New() { return ::std::make_unique<SimpleUnion>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, SimpleUnion* value, size_t offset);
  zx_status_t Clone(SimpleUnion* result) const;

  bool has_invalid_tag() const {
    return tag_ == Invalid;
  }

  bool is_a() const { return tag_ == Tag::kA; }
  
  int32_t& a() {
    EnsureStorageInitialized(Tag::kA);
    return a_;
  }
  
  const int32_t& a() const {
    ZX_ASSERT(is_a());
    return a_;
  }
  SimpleUnion& set_a(int32_t value);

  bool is_b() const { return tag_ == Tag::kB; }
  
  float& b() {
    EnsureStorageInitialized(Tag::kB);
    return b_;
  }
  
  const float& b() const {
    ZX_ASSERT(is_b());
    return b_;
  }
  SimpleUnion& set_b(float value);

  Tag Which() const {
    
    return Tag(tag_);
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    return nullptr;
  }

  friend ::fidl::Equality<::fidl::test::nullable::SimpleUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    int32_t a_;
    float b_;
  };
};

inline zx_status_t Clone(const ::fidl::test::nullable::SimpleUnion& value,
                         ::fidl::test::nullable::SimpleUnion* result) {
  return value.Clone(result);
}

using SimpleUnionPtr = ::std::unique_ptr<SimpleUnion>;

class Int32Wrapper final {
 public:
  static const fidl_type_t* FidlType;
  
  int32_t val{};

  static inline ::std::unique_ptr<Int32Wrapper> New() { return ::std::make_unique<Int32Wrapper>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Int32Wrapper* value, size_t _offset);
  zx_status_t Clone(Int32Wrapper* result) const;
};

inline zx_status_t Clone(const ::fidl::test::nullable::Int32Wrapper& _value,
                         ::fidl::test::nullable::Int32Wrapper* _result) {
  return _value.Clone(_result);
}

using Int32WrapperPtr = ::std::unique_ptr<Int32Wrapper>;
}  // namespace nullable
}  // namespace test
}  // namespace fidl
namespace fidl {

template <>
struct CodingTraits<::fidl::test::nullable::StructWithNullableVector>
    : public EncodableCodingTraits<::fidl::test::nullable::StructWithNullableVector, 16> {};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableVector& value,
                         ::fidl::test::nullable::StructWithNullableVector* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::StructWithNullableVector> {
  bool operator()(const ::fidl::test::nullable::StructWithNullableVector& _lhs, const ::fidl::test::nullable::StructWithNullableVector& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::fidl::test::nullable::StructWithNullableUnion>
    : public EncodableCodingTraits<::fidl::test::nullable::StructWithNullableUnion, 24> {};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableUnion& value,
                         ::fidl::test::nullable::StructWithNullableUnion* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::StructWithNullableUnion> {
  bool operator()(const ::fidl::test::nullable::StructWithNullableUnion& _lhs, const ::fidl::test::nullable::StructWithNullableUnion& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::fidl::test::nullable::StructWithNullableStruct>
    : public EncodableCodingTraits<::fidl::test::nullable::StructWithNullableStruct, 8> {};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableStruct& value,
                         ::fidl::test::nullable::StructWithNullableStruct* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::StructWithNullableStruct> {
  bool operator()(const ::fidl::test::nullable::StructWithNullableStruct& _lhs, const ::fidl::test::nullable::StructWithNullableStruct& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::fidl::test::nullable::StructWithNullableString>
    : public EncodableCodingTraits<::fidl::test::nullable::StructWithNullableString, 16> {};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableString& value,
                         ::fidl::test::nullable::StructWithNullableString* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::StructWithNullableString> {
  bool operator()(const ::fidl::test::nullable::StructWithNullableString& _lhs, const ::fidl::test::nullable::StructWithNullableString& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::fidl::test::nullable::StructWithNullableRequest>
    : public EncodableCodingTraits<::fidl::test::nullable::StructWithNullableRequest, 4> {};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableRequest& value,
                         ::fidl::test::nullable::StructWithNullableRequest* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::StructWithNullableRequest> {
  bool operator()(const ::fidl::test::nullable::StructWithNullableRequest& _lhs, const ::fidl::test::nullable::StructWithNullableRequest& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::fidl::test::nullable::StructWithNullableProtocol>
    : public EncodableCodingTraits<::fidl::test::nullable::StructWithNullableProtocol, 4> {};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableProtocol& value,
                         ::fidl::test::nullable::StructWithNullableProtocol* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::StructWithNullableProtocol> {
  bool operator()(const ::fidl::test::nullable::StructWithNullableProtocol& _lhs, const ::fidl::test::nullable::StructWithNullableProtocol& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::fidl::test::nullable::StructWithNullableHandle>
    : public EncodableCodingTraits<::fidl::test::nullable::StructWithNullableHandle, 4> {};

inline zx_status_t Clone(const ::fidl::test::nullable::StructWithNullableHandle& value,
                         ::fidl::test::nullable::StructWithNullableHandle* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::StructWithNullableHandle> {
  bool operator()(const ::fidl::test::nullable::StructWithNullableHandle& _lhs, const ::fidl::test::nullable::StructWithNullableHandle& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<::fidl::test::nullable::SimpleUnion> : public std::true_type {};

template <>
struct CodingTraits<::fidl::test::nullable::SimpleUnion>
    : public EncodableCodingTraits<::fidl::test::nullable::SimpleUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::fidl::test::nullable::SimpleUnion>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::fidl::test::nullable::SimpleUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::fidl::test::nullable::SimpleUnion>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::fidl::test::nullable::SimpleUnion);

    ::fidl::test::nullable::SimpleUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::fidl::test::nullable::SimpleUnion& value,
                         ::fidl::test::nullable::SimpleUnion* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::SimpleUnion> {
  bool operator()(const ::fidl::test::nullable::SimpleUnion& _lhs, const ::fidl::test::nullable::SimpleUnion& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(::fidl::test::nullable::SimpleUnion::Tag::Invalid):
        return true;
      case ::fidl::test::nullable::SimpleUnion::Tag::kA:
        return ::fidl::Equals(_lhs.a_, _rhs.a_);
      case ::fidl::test::nullable::SimpleUnion::Tag::kB:
        return ::fidl::Equals(_lhs.b_, _rhs.b_);
      
      default:
        return false;
      }
    }
};
template <>
struct CodingTraits<::fidl::test::nullable::Int32Wrapper>
    : public EncodableCodingTraits<::fidl::test::nullable::Int32Wrapper, 4> {};

inline zx_status_t Clone(const ::fidl::test::nullable::Int32Wrapper& value,
                         ::fidl::test::nullable::Int32Wrapper* result) {
  return ::fidl::test::nullable::Clone(value, result);
}

template<>
struct Equality<::fidl::test::nullable::Int32Wrapper> {
  bool operator()(const ::fidl::test::nullable::Int32Wrapper& _lhs, const ::fidl::test::nullable::Int32Wrapper& _rhs) const {
    if (!::fidl::Equals(_lhs.val, _rhs.val)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
