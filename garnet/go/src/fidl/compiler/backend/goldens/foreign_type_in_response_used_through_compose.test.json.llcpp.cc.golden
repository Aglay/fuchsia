// WARNING: This file is machine generated by fidlgen.

#include <foreign_type_in_response_used_through_compose.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace top {

namespace {

[[maybe_unused]] constexpr uint64_t kTop_GetFoo_Ordinal = 7703637629648977298lu;
extern "C" const fidl_type_t top_TopGetFooRequestTable;
extern "C" const fidl_type_t top_TopGetFooResponseTable;

}  // namespace
Top::ResultOf::GetFoo::GetFoo(zx_handle_t _client) {
  GetFooOwnedRequest _request(0);
  _request.GetFidlMessage().Call(
      GetFooResponse::Type, _client, bytes_,
      GetFooResponse::PrimarySize + GetFooResponse::MaxOutOfLine);
  status_ = _request.status();
  error_ = _request.error();
}

Top::ResultOf::GetFoo Top::SyncClient::GetFoo() {
  return ResultOf::GetFoo(this->channel().get());
}

Top::ResultOf::GetFoo Top::Call::GetFoo(::zx::unowned_channel _client_end) {
  return ResultOf::GetFoo(_client_end->get());
}

Top::UnownedResultOf::GetFoo::GetFoo(zx_handle_t _client,
                                     uint8_t* _response_bytes,
                                     uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  GetFooOwnedRequest _request(0);
  _request.GetFidlMessage().Call(GetFooResponse::Type, _client, _response_bytes,
                                 _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}

Top::UnownedResultOf::GetFoo Top::SyncClient::GetFoo(
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFoo(this->channel().get(), _response_buffer.data(),
                                 _response_buffer.capacity());
}

Top::UnownedResultOf::GetFoo Top::Call::GetFoo(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetFoo(_client_end->get(), _response_buffer.data(),
                                 _response_buffer.capacity());
}

Top::ResultOf::GetFoo Top::ClientImpl::GetFoo_Sync() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::GetFoo(_binding->handle());
  }
  return Top::ResultOf::GetFoo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

Top::UnownedResultOf::GetFoo Top::ClientImpl::GetFoo_Sync(
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::GetFoo(_binding->handle(), _response_buffer.data(),
                                   _response_buffer.capacity());
  }
  return Top::UnownedResultOf::GetFoo(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

Top::GetFooResponseContext::GetFooResponseContext()
    : ::fidl::internal::ResponseContext(GetFooResponse::Type,
                                        kTop_GetFoo_Ordinal) {}

void Top::GetFooResponseContext::OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<GetFooResponse*>(reply));
}

::fidl::Result Top::ClientImpl::GetFoo(
    ::fit::callback<void(::llcpp::bottom::Foo foo)> _cb) {
  class ResponseContext final : public GetFooResponseContext {
   public:
    ResponseContext(::fit::callback<void(::llcpp::bottom::Foo foo)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(GetFooResponse* message) override {
      cb_(std::move(message->foo));

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(::llcpp::bottom::Foo foo)> cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  GetFooOwnedRequest _request(_context->Txid());
  return _request.GetFidlMessage().Write(this, _context);
}

::fidl::Result Top::ClientImpl::GetFoo(GetFooResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  GetFooOwnedRequest _request(_context->Txid());
  return _request.GetFidlMessage().Write(this, _context);
}

std::optional<::fidl::UnbindInfo> Top::ClientImpl::DispatchEvent(
    fidl_msg_t* msg) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

bool Top::TryDispatch(Interface* impl, fidl_msg_t* msg,
                      ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kTop_GetFoo_Ordinal: {
      auto result = ::fidl::DecodeAs<GetFooRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      impl->GetFoo(Interface::GetFooCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Top::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

zx_status_t Top::Interface::GetFooCompleterBase::ReplyWithStatus(
    ::llcpp::bottom::Foo foo) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(GetFooResponse)];
  auto& _response = *new (_response_buffer) GetFooResponse{foo};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<GetFooResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

void Top::Interface::GetFooCompleterBase::Reply(::llcpp::bottom::Foo foo) {
  ReplyWithStatus(std::move(foo));
}

zx_status_t Top::Interface::GetFooCompleterBase::ReplyWithStatus(
    ::fidl::BytePart _buffer, ::llcpp::bottom::Foo foo) {
  if (_buffer.capacity() < GetFooResponse::PrimarySize) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, ZX_ERR_BUFFER_TOO_SMALL});
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  new (_buffer.data()) GetFooResponse{foo};
  _buffer.set_actual(sizeof(GetFooResponse));
  return CompleterBase::SendReply(
      ::fidl::DecodedMessage<GetFooResponse>(std::move(_buffer)));
}

void Top::Interface::GetFooCompleterBase::Reply(::fidl::BytePart _buffer,
                                                ::llcpp::bottom::Foo foo) {
  ReplyWithStatus(std::move(_buffer), std::move(foo));
}

zx_status_t Top::Interface::GetFooCompleterBase::ReplyWithStatus(
    ::fidl::DecodedMessage<GetFooResponse> params) {
  ZX_DEBUG_ASSERT(params.message()->_hdr.magic_number ==
                  kFidlWireFormatMagicNumberInitial);
  ZX_DEBUG_ASSERT(params.message()->_hdr.ordinal == kTop_GetFoo_Ordinal);
  return CompleterBase::SendReply(std::move(params));
}

void Top::Interface::GetFooCompleterBase::Reply(
    ::fidl::DecodedMessage<GetFooResponse> params) {
  ReplyWithStatus(std::move(params));
}

void Top::GetFooRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kTop_GetFoo_Ordinal);
}

void Top::GetFooResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kTop_GetFoo_Ordinal);
}

}  // namespace top
}  // namespace llcpp
