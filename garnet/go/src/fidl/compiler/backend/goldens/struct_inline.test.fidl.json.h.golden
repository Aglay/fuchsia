// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class BasicStruct;

class BasicStruct final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t x{};
  
  ::std::string y{};

  static inline ::std::unique_ptr<BasicStruct> New() { return ::std::make_unique<BasicStruct>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, BasicStruct* value, size_t _offset);
  zx_status_t Clone(BasicStruct* result) const;
};

inline zx_status_t Clone(const ::test::name::BasicStruct& _value,
                         ::test::name::BasicStruct* _result) {
  return _value.Clone(_result);
}

using BasicStructPtr = ::std::unique_ptr<BasicStruct>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::BasicStruct>
    : public EncodableCodingTraits<::test::name::BasicStruct, 24> {};

inline zx_status_t Clone(const ::test::name::BasicStruct& value,
                         ::test::name::BasicStruct* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::BasicStruct> {
  static inline bool Equals(const ::test::name::BasicStruct& _lhs, const ::test::name::BasicStruct& _rhs) {
    if (!::fidl::Equals(_lhs.x, _rhs.x)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.y, _rhs.y)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
