// WARNING: This file is machine generated by fidlgen.

#include <protocol_request.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace test {
namespace name {

namespace {

[[maybe_unused]] constexpr uint64_t kParent_GetChild_Ordinal =
    6332745893922832518lu;
extern "C" const fidl_type_t test_name_ParentGetChildRequestTable;
extern "C" const fidl_type_t test_name_ParentGetChildResponseTable;
[[maybe_unused]] constexpr uint64_t kParent_GetChildRequest_Ordinal =
    26635226975931008lu;
extern "C" const fidl_type_t test_name_ParentGetChildRequestRequestTable;
extern "C" const fidl_type_t test_name_ParentGetChildRequestResponseTable;
[[maybe_unused]] constexpr uint64_t kParent_TakeChild_Ordinal =
    7680932945371199613lu;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestTable;
extern "C" const fidl_type_t test_name_ParentTakeChildResponseTable;
[[maybe_unused]] constexpr uint64_t kParent_TakeChildRequest_Ordinal =
    7803173423056840247lu;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestRequestTable;
extern "C" const fidl_type_t test_name_ParentTakeChildRequestResponseTable;

}  // namespace
Parent::ResultOf::GetChild::GetChild(zx_handle_t _client) {
  GetChildOwnedRequest _request(0);
  _request.GetFidlMessage().Call(
      GetChildResponse::Type, _client, bytes_,
      GetChildResponse::PrimarySize + GetChildResponse::MaxOutOfLine);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::ResultOf::GetChild Parent::SyncClient::GetChild() {
  return ResultOf::GetChild(this->channel().get());
}

Parent::ResultOf::GetChild Parent::Call::GetChild(
    ::zx::unowned_channel _client_end) {
  return ResultOf::GetChild(_client_end->get());
}

Parent::UnownedResultOf::GetChild::GetChild(zx_handle_t _client,
                                            uint8_t* _response_bytes,
                                            uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  GetChildOwnedRequest _request(0);
  _request.GetFidlMessage().Call(GetChildResponse::Type, _client,
                                 _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::UnownedResultOf::GetChild Parent::SyncClient::GetChild(
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetChild(this->channel().get(),
                                   _response_buffer.data(),
                                   _response_buffer.capacity());
}

Parent::UnownedResultOf::GetChild Parent::Call::GetChild(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetChild(_client_end->get(), _response_buffer.data(),
                                   _response_buffer.capacity());
}

Parent::ResultOf::GetChildRequest::GetChildRequest(zx_handle_t _client) {
  GetChildRequestOwnedRequest _request(0);
  _request.GetFidlMessage().Call(GetChildRequestResponse::Type, _client, bytes_,
                                 GetChildRequestResponse::PrimarySize +
                                     GetChildRequestResponse::MaxOutOfLine);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::ResultOf::GetChildRequest Parent::SyncClient::GetChildRequest() {
  return ResultOf::GetChildRequest(this->channel().get());
}

Parent::ResultOf::GetChildRequest Parent::Call::GetChildRequest(
    ::zx::unowned_channel _client_end) {
  return ResultOf::GetChildRequest(_client_end->get());
}

Parent::UnownedResultOf::GetChildRequest::GetChildRequest(
    zx_handle_t _client, uint8_t* _response_bytes,
    uint32_t _response_byte_capacity)
    : bytes_(_response_bytes) {
  GetChildRequestOwnedRequest _request(0);
  _request.GetFidlMessage().Call(GetChildRequestResponse::Type, _client,
                                 _response_bytes, _response_byte_capacity);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::UnownedResultOf::GetChildRequest Parent::SyncClient::GetChildRequest(
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetChildRequest(this->channel().get(),
                                          _response_buffer.data(),
                                          _response_buffer.capacity());
}

Parent::UnownedResultOf::GetChildRequest Parent::Call::GetChildRequest(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::GetChildRequest(
      _client_end->get(), _response_buffer.data(), _response_buffer.capacity());
}

Parent::ResultOf::TakeChild::TakeChild(zx_handle_t _client, ::zx::channel& c) {
  TakeChildOwnedRequest _request(0, c);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::ResultOf::TakeChild Parent::SyncClient::TakeChild(::zx::channel c) {
  return ResultOf::TakeChild(this->channel().get(), c);
}

Parent::ResultOf::TakeChild Parent::Call::TakeChild(
    ::zx::unowned_channel _client_end, ::zx::channel c) {
  return ResultOf::TakeChild(_client_end->get(), c);
}

Parent::UnownedResultOf::TakeChild::TakeChild(zx_handle_t _client,
                                              uint8_t* _request_bytes,
                                              uint32_t _request_byte_capacity,
                                              ::zx::channel& c) {
  TakeChildUnownedRequest _request(_request_bytes, _request_byte_capacity, 0,
                                   c);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::UnownedResultOf::TakeChild Parent::SyncClient::TakeChild(
    ::fidl::BytePart _request_buffer, ::zx::channel c) {
  return UnownedResultOf::TakeChild(this->channel().get(),
                                    _request_buffer.data(),
                                    _request_buffer.capacity(), c);
}

Parent::UnownedResultOf::TakeChild Parent::Call::TakeChild(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel c) {
  return UnownedResultOf::TakeChild(_client_end->get(), _request_buffer.data(),
                                    _request_buffer.capacity(), c);
}

Parent::ResultOf::TakeChildRequest::TakeChildRequest(zx_handle_t _client,
                                                     ::zx::channel& r) {
  TakeChildRequestOwnedRequest _request(0, r);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::ResultOf::TakeChildRequest Parent::SyncClient::TakeChildRequest(
    ::zx::channel r) {
  return ResultOf::TakeChildRequest(this->channel().get(), r);
}

Parent::ResultOf::TakeChildRequest Parent::Call::TakeChildRequest(
    ::zx::unowned_channel _client_end, ::zx::channel r) {
  return ResultOf::TakeChildRequest(_client_end->get(), r);
}

Parent::UnownedResultOf::TakeChildRequest::TakeChildRequest(
    zx_handle_t _client, uint8_t* _request_bytes,
    uint32_t _request_byte_capacity, ::zx::channel& r) {
  TakeChildRequestUnownedRequest _request(_request_bytes,
                                          _request_byte_capacity, 0, r);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

Parent::UnownedResultOf::TakeChildRequest Parent::SyncClient::TakeChildRequest(
    ::fidl::BytePart _request_buffer, ::zx::channel r) {
  return UnownedResultOf::TakeChildRequest(this->channel().get(),
                                           _request_buffer.data(),
                                           _request_buffer.capacity(), r);
}

Parent::UnownedResultOf::TakeChildRequest Parent::Call::TakeChildRequest(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::zx::channel r) {
  return UnownedResultOf::TakeChildRequest(_client_end->get(),
                                           _request_buffer.data(),
                                           _request_buffer.capacity(), r);
}

Parent::ResultOf::GetChild Parent::ClientImpl::GetChild_Sync() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::GetChild(_binding->handle());
  }
  return Parent::ResultOf::GetChild(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

Parent::UnownedResultOf::GetChild Parent::ClientImpl::GetChild_Sync(
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::GetChild(_binding->handle(),
                                     _response_buffer.data(),
                                     _response_buffer.capacity());
  }
  return Parent::UnownedResultOf::GetChild(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

Parent::GetChildResponseContext::GetChildResponseContext()
    : ::fidl::internal::ResponseContext(GetChildResponse::Type,
                                        kParent_GetChild_Ordinal) {}

void Parent::GetChildResponseContext::OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<GetChildResponse*>(reply));
}

::fidl::Result Parent::ClientImpl::GetChild(
    ::fit::callback<void(::zx::channel c)> _cb) {
  class ResponseContext final : public GetChildResponseContext {
   public:
    ResponseContext(::fit::callback<void(::zx::channel c)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(GetChildResponse* message) override {
      cb_(std::move(message->c));

      fidl_close_handles(type(), message, nullptr);

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(::zx::channel c)> cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  GetChildOwnedRequest _request(_context->Txid());
  return _request.GetFidlMessage().Write(this, _context);
}

::fidl::Result Parent::ClientImpl::GetChild(GetChildResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  GetChildOwnedRequest _request(_context->Txid());
  return _request.GetFidlMessage().Write(this, _context);
}

Parent::ResultOf::GetChildRequest Parent::ClientImpl::GetChildRequest_Sync() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::GetChildRequest(_binding->handle());
  }
  return Parent::ResultOf::GetChildRequest(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

Parent::UnownedResultOf::GetChildRequest
Parent::ClientImpl::GetChildRequest_Sync(::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::GetChildRequest(_binding->handle(),
                                            _response_buffer.data(),
                                            _response_buffer.capacity());
  }
  return Parent::UnownedResultOf::GetChildRequest(
      ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound));
}

Parent::GetChildRequestResponseContext::GetChildRequestResponseContext()
    : ::fidl::internal::ResponseContext(GetChildRequestResponse::Type,
                                        kParent_GetChildRequest_Ordinal) {}

void Parent::GetChildRequestResponseContext::OnReply(uint8_t* reply) {
  OnReply(reinterpret_cast<GetChildRequestResponse*>(reply));
}

::fidl::Result Parent::ClientImpl::GetChildRequest(
    ::fit::callback<void(::zx::channel r)> _cb) {
  class ResponseContext final : public GetChildRequestResponseContext {
   public:
    ResponseContext(::fit::callback<void(::zx::channel r)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(GetChildRequestResponse* message) override {
      cb_(std::move(message->r));

      fidl_close_handles(type(), message, nullptr);

      delete this;
    }

    void OnError() override { delete this; }

   private:
    ::fit::callback<void(::zx::channel r)> cb_;
  };

  auto* _context = new ResponseContext(std::move(_cb));
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  GetChildRequestOwnedRequest _request(_context->Txid());
  return _request.GetFidlMessage().Write(this, _context);
}

::fidl::Result Parent::ClientImpl::GetChildRequest(
    GetChildRequestResponseContext* _context) {
  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);

  GetChildRequestOwnedRequest _request(_context->Txid());
  return _request.GetFidlMessage().Write(this, _context);
}

::fidl::Result Parent::ClientImpl::TakeChild(::zx::channel c) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::TakeChild(_binding->handle(), c);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result Parent::ClientImpl::TakeChild(::fidl::BytePart _request_buffer,
                                             ::zx::channel c) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res =
        UnownedResultOf::TakeChild(_binding->handle(), _request_buffer.data(),
                                   _request_buffer.capacity(), c);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result Parent::ClientImpl::TakeChildRequest(::zx::channel r) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::TakeChildRequest(_binding->handle(), r);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result Parent::ClientImpl::TakeChildRequest(
    ::fidl::BytePart _request_buffer, ::zx::channel r) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = UnownedResultOf::TakeChildRequest(
        _binding->handle(), _request_buffer.data(), _request_buffer.capacity(),
        r);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> Parent::ClientImpl::DispatchEvent(
    fidl_msg_t* msg) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

bool Parent::TryDispatch(Interface* impl, fidl_msg_t* msg,
                         ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kParent_GetChild_Ordinal: {
      auto result = ::fidl::DecodeAs<GetChildRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      impl->GetChild(Interface::GetChildCompleter::Sync(txn));
      return true;
    }
    case kParent_GetChildRequest_Ordinal: {
      auto result = ::fidl::DecodeAs<GetChildRequestRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      impl->GetChildRequest(Interface::GetChildRequestCompleter::Sync(txn));
      return true;
    }
    case kParent_TakeChild_Ordinal: {
      auto result = ::fidl::DecodeAs<TakeChildRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->TakeChild(std::move(message->c),
                      Interface::TakeChildCompleter::Sync(txn));
      return true;
    }
    case kParent_TakeChildRequest_Ordinal: {
      auto result = ::fidl::DecodeAs<TakeChildRequestRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      auto message = result.message.message();
      impl->TakeChildRequest(std::move(message->r),
                             Interface::TakeChildRequestCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Parent::Dispatch(Interface* impl, fidl_msg_t* msg,
                      ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

zx_status_t Parent::Interface::GetChildCompleterBase::Reply(::zx::channel c) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(GetChildResponse)];
  auto& _response = *new (_response_buffer) GetChildResponse{c};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<GetChildResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

zx_status_t Parent::Interface::GetChildCompleterBase::Reply(
    ::fidl::BytePart _buffer, ::zx::channel c) {
  if (_buffer.capacity() < GetChildResponse::PrimarySize) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, ZX_ERR_BUFFER_TOO_SMALL});
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  new (_buffer.data()) GetChildResponse{c};
  _buffer.set_actual(sizeof(GetChildResponse));
  return CompleterBase::SendReply(
      ::fidl::DecodedMessage<GetChildResponse>(std::move(_buffer)));
}

zx_status_t Parent::Interface::GetChildRequestCompleterBase::Reply(
    ::zx::channel r) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(GetChildRequestResponse)];
  auto& _response = *new (_response_buffer) GetChildRequestResponse{r};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<GetChildRequestResponse>(
          &_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, _encode_result.status});
    return _encode_result.status;
  }
  return CompleterBase::SendReply(std::move(_encode_result.message));
}

zx_status_t Parent::Interface::GetChildRequestCompleterBase::Reply(
    ::fidl::BytePart _buffer, ::zx::channel r) {
  if (_buffer.capacity() < GetChildRequestResponse::PrimarySize) {
    CompleterBase::InternalError(
        {::fidl::UnbindInfo::kEncodeError, ZX_ERR_BUFFER_TOO_SMALL});
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  new (_buffer.data()) GetChildRequestResponse{r};
  _buffer.set_actual(sizeof(GetChildRequestResponse));
  return CompleterBase::SendReply(
      ::fidl::DecodedMessage<GetChildRequestResponse>(std::move(_buffer)));
}

void Parent::GetChildRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kParent_GetChild_Ordinal);
}

void Parent::GetChildResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kParent_GetChild_Ordinal);
}

void Parent::GetChildRequestRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kParent_GetChildRequest_Ordinal);
}

void Parent::GetChildRequestResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kParent_GetChildRequest_Ordinal);
}

void Parent::TakeChildRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kParent_TakeChild_Ordinal);
}

void Parent::TakeChildRequestRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kParent_TakeChildRequest_Ordinal);
}

namespace {}  // namespace

std::optional<::fidl::UnbindInfo> Child::ClientImpl::DispatchEvent(
    fidl_msg_t* msg) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

bool Child::TryDispatch(Interface* impl, fidl_msg_t* msg,
                        ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    default: {
      return false;
    }
  }
}

bool Child::Dispatch(Interface* impl, fidl_msg_t* msg,
                     ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
