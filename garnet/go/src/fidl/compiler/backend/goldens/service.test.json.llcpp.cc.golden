// WARNING: This file is machine generated by fidlgen.

#include <service.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace test {
namespace name {

namespace {

[[maybe_unused]] constexpr uint64_t kSecondProtocol_MethodOnSecond_Ordinal =
    6306721464597794337lu;
extern "C" const fidl_type_t test_name_SecondProtocolMethodOnSecondRequestTable;
extern "C" const fidl_type_t
    test_name_SecondProtocolMethodOnSecondResponseTable;

}  // namespace
SecondProtocol::ResultOf::MethodOnSecond::MethodOnSecond(zx_handle_t _client) {
  MethodOnSecondOwnedRequest _request(0);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

SecondProtocol::ResultOf::MethodOnSecond
SecondProtocol::SyncClient::MethodOnSecond() {
  return ResultOf::MethodOnSecond(this->channel().get());
}

SecondProtocol::ResultOf::MethodOnSecond SecondProtocol::Call::MethodOnSecond(
    ::zx::unowned_channel _client_end) {
  return ResultOf::MethodOnSecond(_client_end->get());
}

::fidl::internal::StatusAndError SecondProtocol::InPlace::MethodOnSecond(
    ::zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(MethodOnSecondRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::EncodedMessage<MethodOnSecondRequest> params(
      std::move(_request_buffer));
  MethodOnSecondRequest* request =
      reinterpret_cast<MethodOnSecondRequest*>(params.bytes().data());
  fidl_init_txn_header(&request->_hdr, 0,
                       kSecondProtocol_MethodOnSecond_Ordinal);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::Result SecondProtocol::ClientImpl::MethodOnSecond() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::MethodOnSecond(_binding->handle());
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> SecondProtocol::ClientImpl::Dispatch(
    fidl_msg_t*, ::fidl::internal::ResponseContext*) {
  return {};
}

bool SecondProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                 ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kSecondProtocol_MethodOnSecond_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodOnSecondRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      impl->MethodOnSecond(Interface::MethodOnSecondCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool SecondProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                              ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

void SecondProtocol::MethodOnSecondRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kSecondProtocol_MethodOnSecond_Ordinal);
}

namespace {

[[maybe_unused]] constexpr uint64_t kFirstProtocol_MethodOnFirst_Ordinal =
    6344653839727902267lu;
extern "C" const fidl_type_t test_name_FirstProtocolMethodOnFirstRequestTable;
extern "C" const fidl_type_t test_name_FirstProtocolMethodOnFirstResponseTable;

}  // namespace
FirstProtocol::ResultOf::MethodOnFirst::MethodOnFirst(zx_handle_t _client) {
  MethodOnFirstOwnedRequest _request(0);
  _request.GetFidlMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

FirstProtocol::ResultOf::MethodOnFirst
FirstProtocol::SyncClient::MethodOnFirst() {
  return ResultOf::MethodOnFirst(this->channel().get());
}

FirstProtocol::ResultOf::MethodOnFirst FirstProtocol::Call::MethodOnFirst(
    ::zx::unowned_channel _client_end) {
  return ResultOf::MethodOnFirst(_client_end->get());
}

::fidl::internal::StatusAndError FirstProtocol::InPlace::MethodOnFirst(
    ::zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(MethodOnFirstRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::EncodedMessage<MethodOnFirstRequest> params(
      std::move(_request_buffer));
  MethodOnFirstRequest* request =
      reinterpret_cast<MethodOnFirstRequest*>(params.bytes().data());
  fidl_init_txn_header(&request->_hdr, 0, kFirstProtocol_MethodOnFirst_Ordinal);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::Result FirstProtocol::ClientImpl::MethodOnFirst() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::MethodOnFirst(_binding->handle());
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> FirstProtocol::ClientImpl::Dispatch(
    fidl_msg_t*, ::fidl::internal::ResponseContext*) {
  return {};
}

bool FirstProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                ::fidl::Transaction* txn) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kFirstProtocol_MethodOnFirst_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodOnFirstRequest>(msg);
      if (result.status != ZX_OK) {
        txn->InternalError({::fidl::UnbindInfo::kDecodeError, result.status});
        return true;
      }
      impl->MethodOnFirst(Interface::MethodOnFirstCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool FirstProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                             ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return found;
}

void FirstProtocol::MethodOnFirstRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kFirstProtocol_MethodOnFirst_Ordinal);
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
