// WARNING: This file is machine generated by fidlgen.

#include <service.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace test {
namespace name {

namespace {

[[maybe_unused]] constexpr uint64_t kSecondProtocol_MethodOnSecond_Ordinal =
    6306721464597794337lu;
extern "C" const fidl_type_t test_name_SecondProtocolMethodOnSecondRequestTable;
extern "C" const fidl_type_t
    test_name_SecondProtocolMethodOnSecondResponseTable;

}  // namespace

SecondProtocol::ResultOf::MethodOnSecond_Impl::MethodOnSecond_Impl(
    ::zx::unowned_channel _client_end) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(MethodOnSecondRequest)]{};
  auto& _request = *reinterpret_cast<MethodOnSecondRequest*>(_request_buffer);
  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<MethodOnSecondRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<MethodOnSecondRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(
      SecondProtocol::InPlace::MethodOnSecond(std::move(_client_end)));
}

SecondProtocol::ResultOf::MethodOnSecond
SecondProtocol::SyncClient::MethodOnSecond() {
  return ResultOf::MethodOnSecond(::zx::unowned_channel(this->channel_));
}

SecondProtocol::ResultOf::MethodOnSecond SecondProtocol::Call::MethodOnSecond(
    ::zx::unowned_channel _client_end) {
  return ResultOf::MethodOnSecond(std::move(_client_end));
}

::fidl::internal::StatusAndError SecondProtocol::InPlace::MethodOnSecond(
    ::zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(MethodOnSecondRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::EncodedMessage<MethodOnSecondRequest> params(
      std::move(_request_buffer));
  SecondProtocol::SetTransactionHeaderFor::MethodOnSecondRequest(params);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::StatusAndError SecondProtocol::ClientImpl::MethodOnSecond() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::MethodOnSecond(_binding->channel());
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t SecondProtocol::ClientImpl::Dispatch(
    fidl_msg_t*, ::fidl::internal::ResponseContext*) {
  return ZX_OK;
}

bool SecondProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                 ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kSecondProtocol_MethodOnSecond_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodOnSecondRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->MethodOnSecond(Interface::MethodOnSecondCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool SecondProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                              ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void SecondProtocol::SetTransactionHeaderFor::MethodOnSecondRequest(
    const ::fidl::DecodedMessage<SecondProtocol::MethodOnSecondRequest>& _msg,
    zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid,
                       kSecondProtocol_MethodOnSecond_Ordinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void SecondProtocol::SetTransactionHeaderFor::MethodOnSecondRequest(
    const ::fidl::EncodedMessage<SecondProtocol::MethodOnSecondRequest>& _msg,
    zx_txid_t _txid) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(_msg.bytes().data());
  fidl_init_txn_header(hdr, _txid, kSecondProtocol_MethodOnSecond_Ordinal);
  hdr->flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

namespace {

[[maybe_unused]] constexpr uint64_t kFirstProtocol_MethodOnFirst_Ordinal =
    6344653839727902267lu;
extern "C" const fidl_type_t test_name_FirstProtocolMethodOnFirstRequestTable;
extern "C" const fidl_type_t test_name_FirstProtocolMethodOnFirstResponseTable;

}  // namespace

FirstProtocol::ResultOf::MethodOnFirst_Impl::MethodOnFirst_Impl(
    ::zx::unowned_channel _client_end) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(MethodOnFirstRequest)]{};
  auto& _request = *reinterpret_cast<MethodOnFirstRequest*>(_request_buffer);
  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<MethodOnFirstRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<MethodOnFirstRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(
      FirstProtocol::InPlace::MethodOnFirst(std::move(_client_end)));
}

FirstProtocol::ResultOf::MethodOnFirst
FirstProtocol::SyncClient::MethodOnFirst() {
  return ResultOf::MethodOnFirst(::zx::unowned_channel(this->channel_));
}

FirstProtocol::ResultOf::MethodOnFirst FirstProtocol::Call::MethodOnFirst(
    ::zx::unowned_channel _client_end) {
  return ResultOf::MethodOnFirst(std::move(_client_end));
}

::fidl::internal::StatusAndError FirstProtocol::InPlace::MethodOnFirst(
    ::zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(MethodOnFirstRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::EncodedMessage<MethodOnFirstRequest> params(
      std::move(_request_buffer));
  FirstProtocol::SetTransactionHeaderFor::MethodOnFirstRequest(params);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::StatusAndError FirstProtocol::ClientImpl::MethodOnFirst() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::MethodOnFirst(_binding->channel());
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t FirstProtocol::ClientImpl::Dispatch(
    fidl_msg_t*, ::fidl::internal::ResponseContext*) {
  return ZX_OK;
}

bool FirstProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kFirstProtocol_MethodOnFirst_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodOnFirstRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->MethodOnFirst(Interface::MethodOnFirstCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool FirstProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                             ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void FirstProtocol::SetTransactionHeaderFor::MethodOnFirstRequest(
    const ::fidl::DecodedMessage<FirstProtocol::MethodOnFirstRequest>& _msg,
    zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid,
                       kFirstProtocol_MethodOnFirst_Ordinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void FirstProtocol::SetTransactionHeaderFor::MethodOnFirstRequest(
    const ::fidl::EncodedMessage<FirstProtocol::MethodOnFirstRequest>& _msg,
    zx_txid_t _txid) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(_msg.bytes().data());
  fidl_init_txn_header(hdr, _txid, kFirstProtocol_MethodOnFirst_Ordinal);
  hdr->flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
