// WARNING: This file is machine generated by fidlgen.

#include <doc_comments.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace test {
namespace name {

void ::llcpp::test::name::Union::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Union) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Union, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Union, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void Union::_CloseHandles() {}

void Table::_CloseHandles() {}

void Struct::_CloseHandles() {}

namespace {

[[maybe_unused]] constexpr uint64_t kInterface_Method_Ordinal =
    6982550709377523448lu;
extern "C" const fidl_type_t test_name_InterfaceMethodRequestTable;
extern "C" const fidl_type_t test_name_InterfaceMethodResponseTable;
[[maybe_unused]] constexpr uint64_t kInterface_OnEvent_Ordinal =
    654361314665317613lu;
extern "C" const fidl_type_t test_name_InterfaceOnEventRequestTable;
extern "C" const fidl_type_t test_name_InterfaceOnEventEventTable;

}  // namespace
Interface::ResultOf::Method::Method(zx_handle_t _client) {
  MethodRequest::OwnedOutgoingMessage _request(zx_txid_t(0));
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

::fidl::Result Interface::ClientImpl::Method() {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = ResultOf::Method(_channel->handle());
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> Interface::ClientImpl::DispatchEvent(
    fidl_msg_t* msg) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kInterface_OnEvent_Ordinal: {
      const char* error_message;
      zx_status_t status =
          fidl_decode(OnEventResponse::Type, msg->bytes, msg->num_bytes,
                      msg->handles, msg->num_handles, &error_message);
      if (status != ZX_OK) {
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kDecodeError, status};
      }
      if (!handlers_.on_event) {
        return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                  ZX_ERR_NOT_SUPPORTED};
      }
      handlers_.on_event();
      break;
    }
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                                ZX_ERR_NOT_SUPPORTED};
  }
  return {};
}

::fidl::Result Interface::Call::HandleEvents(
    ::zx::unowned_channel client_end, Interface::EventHandlers& handlers) {
  zx_status_t status =
      client_end->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                           ::zx::time::infinite(), nullptr);
  if (status != ZX_OK) {
    return ::fidl::Result(status, ::fidl::kErrorWaitOneFailed);
  }
  constexpr uint32_t kReadAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::internal::ClampedMessageSize<
            OnEventResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<
          OnEventResponse, ::fidl::MessageDirection::kReceiving>();
    }
    return x;
  })();
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (OnEventResponse::MaxNumHandles >= x) {
      x = OnEventResponse::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  ::fidl::internal::ByteStorage<kReadAllocSize> read_storage;
  uint8_t* read_bytes = read_storage.buffer().data();
  zx_handle_t read_handles[kHandleAllocSize];
  uint32_t actual_bytes;
  uint32_t actual_handles;
  status = client_end->read(ZX_CHANNEL_READ_MAY_DISCARD, read_bytes,
                            read_handles, kReadAllocSize, kHandleAllocSize,
                            &actual_bytes, &actual_handles);
  if (status == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return ::fidl::Result(handlers.unknown(), nullptr);
  }
  if (status != ZX_OK) {
    return ::fidl::Result(status, ::fidl::kErrorReadFailed);
  }
  if (actual_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(read_handles, actual_handles);
    return ::fidl::Result(ZX_ERR_INVALID_ARGS, ::fidl::kErrorInvalidHeader);
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(read_bytes);
  status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    zx_handle_close_many(read_handles, actual_handles);
    return ::fidl::Result(status, ::fidl::kErrorInvalidHeader);
  }
  switch (hdr->ordinal) {
    case kInterface_OnEvent_Ordinal: {
      const char* error_message;
      zx_status_t status =
          fidl_decode(OnEventResponse::Type, read_bytes, actual_bytes,
                      read_handles, actual_handles, &error_message);
      if (status != ZX_OK) {
        return ::fidl::Result(status, error_message);
      }
      return ::fidl::Result(handlers.on_event(), nullptr);
    }
    default: {
      zx_handle_close_many(read_handles, actual_handles);
      return ::fidl::Result(handlers.unknown(), nullptr);
    }
  }
}

namespace methods {

void InterfaceDispatchMethod(void* interface, void* bytes,
                             ::fidl::Transaction* txn) {
  Interface::Interface::MethodCompleter::Sync completer(txn);
  reinterpret_cast<Interface::Interface*>(interface)->Method(completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry Interface[] = {
    {kInterface_Method_Ordinal, Interface::MethodRequest::Type,
     methods::InterfaceDispatchMethod},
};

}  // namespace entries

::fidl::DispatchResult Interface::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                              ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::Interface,
      entries::Interface +
          sizeof(entries::Interface) / sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult Interface::Dispatch(Interface* impl, fidl_msg_t* msg,
                                           ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}

zx_status_t Interface::SendOnEventEvent(::zx::unowned_channel _channel) {
  OnEventResponse::OwnedOutgoingMessage _response{};
  _response.Write(_channel->get());
  return _response.status();
}

void Interface::MethodRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kInterface_Method_Ordinal);
}

void Interface::OnEventResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kInterface_OnEvent_Ordinal);
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
