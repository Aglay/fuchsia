// WARNING: This file is machine generated by fidlgen.

#include <doc_comments.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace test {
namespace name {

void ::llcpp::test::name::Union::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(Union) == sizeof(fidl_xunion_t));
  static_assert(offsetof(Union, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(Union, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]] constexpr uint64_t kInterface_Method_Ordinal =
    6982550709377523448lu;
extern "C" const fidl_type_t test_name_InterfaceMethodRequestTable;
extern "C" const fidl_type_t test_name_InterfaceMethodResponseTable;
[[maybe_unused]] constexpr uint64_t kInterface_OnEvent_Ordinal =
    654361314665317613lu;
extern "C" const fidl_type_t test_name_InterfaceOnEventRequestTable;
extern "C" const fidl_type_t test_name_InterfaceOnEventEventTable;

}  // namespace

Interface::ResultOf::Method_Impl::Method_Impl(
    ::zx::unowned_channel _client_end) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(MethodRequest)];
  auto& _request = *new (_request_buffer) MethodRequest(0);

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<MethodRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<MethodRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(Interface::InPlace::Method(std::move(_client_end)));
}

Interface::ResultOf::Method Interface::SyncClient::Method() {
  return ResultOf::Method(::zx::unowned_channel(this->channel_));
}

Interface::ResultOf::Method Interface::Call::Method(
    ::zx::unowned_channel _client_end) {
  return ResultOf::Method(std::move(_client_end));
}

::fidl::internal::StatusAndError Interface::InPlace::Method(
    ::zx::unowned_channel _client_end) {
  constexpr uint32_t _write_num_bytes = sizeof(MethodRequest);
  ::fidl::internal::AlignedBuffer<_write_num_bytes> _write_bytes;
  ::fidl::BytePart _request_buffer = _write_bytes.view();
  _request_buffer.set_actual(_write_num_bytes);
  ::fidl::EncodedMessage<MethodRequest> params(std::move(_request_buffer));
  MethodRequest* request =
      reinterpret_cast<MethodRequest*>(params.bytes().data());
  fidl_init_txn_header(&request->_hdr, 0, kInterface_Method_Ordinal);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::StatusAndError Interface::ClientImpl::Method() {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::Method(_binding->channel());
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t Interface::ClientImpl::Dispatch(
    fidl_msg_t* msg, ::fidl::internal::ResponseContext* context) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kInterface_OnEvent_Ordinal: {
      auto result = ::fidl::DecodeAs<OnEventResponse>(msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      if (!handlers_.on_event) return ZX_ERR_NOT_SUPPORTED;
      handlers_.on_event();
      break;
    }
    case kFidlOrdinalEpitaph:
      if (context) return ZX_ERR_INVALID_ARGS;
      ::fidl::internal::ClientBase::Close(
          reinterpret_cast<fidl_epitaph_t*>(hdr)->error);
      break;
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context) context->OnError();
      return ZX_ERR_NOT_SUPPORTED;
  }
  return ZX_OK;
}

zx_status_t Interface::SyncClient::HandleEvents(
    Interface::EventHandlers handlers) {
  return Interface::Call::HandleEvents(::zx::unowned_channel(channel_),
                                       std::move(handlers));
}

zx_status_t Interface::Call::HandleEvents(::zx::unowned_channel client_end,
                                          Interface::EventHandlers handlers) {
  zx_status_t status =
      client_end->wait_one(ZX_CHANNEL_READABLE | ZX_CHANNEL_PEER_CLOSED,
                           ::zx::time::infinite(), nullptr);
  if (status != ZX_OK) {
    return status;
  }
  constexpr uint32_t kReadAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (::fidl::internal::ClampedMessageSize<
            OnEventResponse, ::fidl::MessageDirection::kReceiving>() >= x) {
      x = ::fidl::internal::ClampedMessageSize<
          OnEventResponse, ::fidl::MessageDirection::kReceiving>();
    }
    return x;
  })();
  constexpr uint32_t kHandleAllocSize = ([]() constexpr {
    uint32_t x = 0;
    if (OnEventResponse::MaxNumHandles >= x) {
      x = OnEventResponse::MaxNumHandles;
    }
    if (x > ZX_CHANNEL_MAX_MSG_HANDLES) {
      x = ZX_CHANNEL_MAX_MSG_HANDLES;
    }
    return x;
  })();
  ::fidl::internal::ByteStorage<kReadAllocSize> read_storage;
  uint8_t* read_bytes = read_storage.buffer().data();
  zx_handle_t read_handles[kHandleAllocSize];
  uint32_t actual_bytes;
  uint32_t actual_handles;
  status = client_end->read(ZX_CHANNEL_READ_MAY_DISCARD, read_bytes,
                            read_handles, kReadAllocSize, kHandleAllocSize,
                            &actual_bytes, &actual_handles);
  if (status == ZX_ERR_BUFFER_TOO_SMALL) {
    // Message size is unexpectedly larger than calculated.
    // This can only be due to a newer version of the protocol defining a new
    // event, whose size exceeds the maximum of known events in the current
    // protocol.
    return handlers.unknown();
  }
  if (status != ZX_OK) {
    return status;
  }
  if (actual_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(read_handles, actual_handles);
    return ZX_ERR_INVALID_ARGS;
  }
  auto msg = fidl_msg_t{.bytes = read_bytes,
                        .handles = read_handles,
                        .num_bytes = actual_bytes,
                        .num_handles = actual_handles};
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg.bytes);
  status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    return status;
  }
  switch (hdr->ordinal) {
    case kInterface_OnEvent_Ordinal: {
      auto result = ::fidl::DecodeAs<OnEventResponse>(&msg);
      if (result.status != ZX_OK) {
        return result.status;
      }
      return handlers.on_event();
    }
    default:
      zx_handle_close_many(read_handles, actual_handles);
      return handlers.unknown();
  }
}

bool Interface::TryDispatch(Interface* impl, fidl_msg_t* msg,
                            ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kInterface_Method_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Method(Interface::MethodCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Interface::Dispatch(Interface* impl, fidl_msg_t* msg,
                         ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

zx_status_t Interface::SendOnEventEvent(::zx::unowned_channel _chan) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _response_buffer[sizeof(OnEventResponse)];
  auto& _response = *new (_response_buffer) OnEventResponse{};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<OnEventResponse>(&_response);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    return _encode_result.status;
  }
  return ::fidl::Write(::zx::unowned_channel(_chan),
                       std::move(_encode_result.message));
}

void Interface::MethodRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kInterface_Method_Ordinal);
}

void Interface::OnEventResponse::_InitHeader() {
  fidl_init_txn_header(&_hdr, 0, kInterface_OnEvent_Ordinal);
}

}  // namespace name
}  // namespace test
}  // namespace llcpp
