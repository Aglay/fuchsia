// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace escapeme {

class DocCommentWithQuotes;

/// "pleaseescapethisdocommentproperly"
class DocCommentWithQuotes final {
 public:
  static const fidl_type_t* FidlType;
  
  uint8_t __reserved = 0u;

  static inline ::std::unique_ptr<DocCommentWithQuotes> New() { return ::std::make_unique<DocCommentWithQuotes>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, DocCommentWithQuotes* value, size_t _offset);
  zx_status_t Clone(DocCommentWithQuotes* result) const;
};

inline zx_status_t Clone(const ::escapeme::DocCommentWithQuotes& _value,
                         ::escapeme::DocCommentWithQuotes* _result) {
  return _value.Clone(_result);
}

using DocCommentWithQuotesPtr = ::std::unique_ptr<DocCommentWithQuotes>;
}  // namespace escapeme
namespace fidl {

template <>
struct CodingTraits<::escapeme::DocCommentWithQuotes>
    : public EncodableCodingTraits<::escapeme::DocCommentWithQuotes, 1> {};

inline zx_status_t Clone(const ::escapeme::DocCommentWithQuotes& value,
                         ::escapeme::DocCommentWithQuotes* result) {
  return ::escapeme::Clone(value, result);
}

template<>
struct Equality<::escapeme::DocCommentWithQuotes> {
  bool operator()(const ::escapeme::DocCommentWithQuotes& _lhs, const ::escapeme::DocCommentWithQuotes& _rhs) const {
    if (!::fidl::Equals(_lhs.__reserved, _rhs.__reserved)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
