// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"

#include <test/name/cpp/fidl.h>

namespace fidl {
namespace fuzzing {


using MyStrictEnum = ::test::name::MyStrictEnum;
using MyEnum = ::test::name::MyEnum;


template<>
struct MinSize<MyStrictEnum> {
  operator size_t() { return sizeof(MyStrictEnum); }
};
template<>
struct Allocate<MyStrictEnum> {
  MyStrictEnum operator()(FuzzInput* src, size_t* size) {
    MyStrictEnum out;
    ZX_ASSERT(*size >= sizeof(MyStrictEnum));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(MyStrictEnum);
    return out;
  }
};
template<>
struct MinSize<MyEnum> {
  operator size_t() { return sizeof(MyEnum); }
};
template<>
struct Allocate<MyEnum> {
  MyEnum operator()(FuzzInput* src, size_t* size) {
    MyEnum out;
    ZX_ASSERT(*size >= sizeof(MyEnum));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(MyEnum);
    return out;
  }
};

}  // namespace fuzzing
}  // namespace fidl
