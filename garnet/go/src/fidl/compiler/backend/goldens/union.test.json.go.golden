// Code generated by fidlgen; DO NOT EDIT.

package json


import (
	_bindings "syscall/zx/fidl"
)





type Pizza struct {
	_ struct{} `fidl:"s" fidl_size_v1:"16" fidl_alignment_v1:"8"`
	Toppings []string`fidl:"0,,16" fidl_offset_v1:"0" fidl_bounds:",16"`
}

var _mPizza = _bindings.CreateLazyMarshaler(Pizza{})

func (msg *Pizza) Marshaler() _bindings.Marshaler {
	return _mPizza
}

type Pasta struct {
	_ struct{} `fidl:"s" fidl_size_v1:"16" fidl_alignment_v1:"8"`
	Sauce string`fidl:"0,16" fidl_offset_v1:"0" fidl_bounds:"16"`
}

var _mPasta = _bindings.CreateLazyMarshaler(Pasta{})

func (msg *Pasta) Marshaler() _bindings.Marshaler {
	return _mPasta
}

type NullableUnionStruct struct {
	_ struct{} `fidl:"s" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	TheUnion *Union`fidl:"0" fidl_offset_v1:"0"`
}

var _mNullableUnionStruct = _bindings.CreateLazyMarshaler(NullableUnionStruct{})

func (msg *NullableUnionStruct) Marshaler() _bindings.Marshaler {
	return _mNullableUnionStruct
}
type I_pizzaOrPastaTag uint64
const (
	PizzaOrPastaPizza = 1 // 0x00000001
	PizzaOrPastaPasta = 2 // 0x00000002
)


type PizzaOrPasta struct {
	I_pizzaOrPastaTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Pizza Pizza  `fidl:"1" fidl_ordinal:"1"`
	Pasta Pasta  `fidl:"2" fidl_ordinal:"2"`
}

func (_m *PizzaOrPasta) Which() I_pizzaOrPastaTag {
	return _m.I_pizzaOrPastaTag
}

func (_m *PizzaOrPasta) Ordinal() uint64 {
	return uint64(_m.I_pizzaOrPastaTag)
}

func (_m *PizzaOrPasta) SetPizza(pizza Pizza) {
	_m.I_pizzaOrPastaTag = PizzaOrPastaPizza
	_m.Pizza = pizza
}

func PizzaOrPastaWithPizza(pizza Pizza) PizzaOrPasta {
	var _u PizzaOrPasta
	_u.SetPizza(pizza)
	return _u
}

func (_m *PizzaOrPasta) SetPasta(pasta Pasta) {
	_m.I_pizzaOrPastaTag = PizzaOrPastaPasta
	_m.Pasta = pasta
}

func PizzaOrPastaWithPasta(pasta Pasta) PizzaOrPasta {
	var _u PizzaOrPasta
	_u.SetPasta(pasta)
	return _u
}


type I_explicitPizzaOrPastaTag uint64
const (
	ExplicitPizzaOrPastaPizza = 1 // 0x00000001
	ExplicitPizzaOrPastaPasta = 4 // 0x00000004
)


type ExplicitPizzaOrPasta struct {
	I_explicitPizzaOrPastaTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Pizza Pizza  `fidl:"1" fidl_ordinal:"1"`
	Pasta Pasta  `fidl:"4" fidl_ordinal:"4"`
}

func (_m *ExplicitPizzaOrPasta) Which() I_explicitPizzaOrPastaTag {
	return _m.I_explicitPizzaOrPastaTag
}

func (_m *ExplicitPizzaOrPasta) Ordinal() uint64 {
	return uint64(_m.I_explicitPizzaOrPastaTag)
}

func (_m *ExplicitPizzaOrPasta) SetPizza(pizza Pizza) {
	_m.I_explicitPizzaOrPastaTag = ExplicitPizzaOrPastaPizza
	_m.Pizza = pizza
}

func ExplicitPizzaOrPastaWithPizza(pizza Pizza) ExplicitPizzaOrPasta {
	var _u ExplicitPizzaOrPasta
	_u.SetPizza(pizza)
	return _u
}

func (_m *ExplicitPizzaOrPasta) SetPasta(pasta Pasta) {
	_m.I_explicitPizzaOrPastaTag = ExplicitPizzaOrPastaPasta
	_m.Pasta = pasta
}

func ExplicitPizzaOrPastaWithPasta(pasta Pasta) ExplicitPizzaOrPasta {
	var _u ExplicitPizzaOrPasta
	_u.SetPasta(pasta)
	return _u
}


type I_flexiblePizzaOrPastaTag uint64
const (
	FlexiblePizzaOrPasta_unknownData = 0  // 0x00000000
	FlexiblePizzaOrPastaPizza = 1 // 0x00000001
	FlexiblePizzaOrPastaPasta = 2 // 0x00000002
)


type FlexiblePizzaOrPasta struct {
	I_flexiblePizzaOrPastaTag `fidl:"x" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I_unknownData []byte
	Pizza Pizza  `fidl:"1" fidl_ordinal:"1"`
	Pasta Pasta  `fidl:"2" fidl_ordinal:"2"`
}

func (_m *FlexiblePizzaOrPasta) Which() I_flexiblePizzaOrPastaTag {
	switch _m.I_flexiblePizzaOrPastaTag {
	case 1:
		return FlexiblePizzaOrPastaPizza
	case 2:
		return FlexiblePizzaOrPastaPasta
	default:
		return FlexiblePizzaOrPasta_unknownData
	}
}

func (_m *FlexiblePizzaOrPasta) Ordinal() uint64 {
	return uint64(_m.I_flexiblePizzaOrPastaTag)
}

func (_m *FlexiblePizzaOrPasta) SetPizza(pizza Pizza) {
	_m.I_flexiblePizzaOrPastaTag = FlexiblePizzaOrPastaPizza
	_m.Pizza = pizza
}

func FlexiblePizzaOrPastaWithPizza(pizza Pizza) FlexiblePizzaOrPasta {
	var _u FlexiblePizzaOrPasta
	_u.SetPizza(pizza)
	return _u
}

func (_m *FlexiblePizzaOrPasta) SetPasta(pasta Pasta) {
	_m.I_flexiblePizzaOrPastaTag = FlexiblePizzaOrPastaPasta
	_m.Pasta = pasta
}

func FlexiblePizzaOrPastaWithPasta(pasta Pasta) FlexiblePizzaOrPasta {
	var _u FlexiblePizzaOrPasta
	_u.SetPasta(pasta)
	return _u
}


type I_strictPizzaOrPastaTag uint64
const (
	StrictPizzaOrPastaPizza = 1 // 0x00000001
	StrictPizzaOrPastaPasta = 2 // 0x00000002
)


type StrictPizzaOrPasta struct {
	I_strictPizzaOrPastaTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Pizza Pizza  `fidl:"1" fidl_ordinal:"1"`
	Pasta Pasta  `fidl:"2" fidl_ordinal:"2"`
}

func (_m *StrictPizzaOrPasta) Which() I_strictPizzaOrPastaTag {
	return _m.I_strictPizzaOrPastaTag
}

func (_m *StrictPizzaOrPasta) Ordinal() uint64 {
	return uint64(_m.I_strictPizzaOrPastaTag)
}

func (_m *StrictPizzaOrPasta) SetPizza(pizza Pizza) {
	_m.I_strictPizzaOrPastaTag = StrictPizzaOrPastaPizza
	_m.Pizza = pizza
}

func StrictPizzaOrPastaWithPizza(pizza Pizza) StrictPizzaOrPasta {
	var _u StrictPizzaOrPasta
	_u.SetPizza(pizza)
	return _u
}

func (_m *StrictPizzaOrPasta) SetPasta(pasta Pasta) {
	_m.I_strictPizzaOrPastaTag = StrictPizzaOrPastaPasta
	_m.Pasta = pasta
}

func StrictPizzaOrPastaWithPasta(pasta Pasta) StrictPizzaOrPasta {
	var _u StrictPizzaOrPasta
	_u.SetPasta(pasta)
	return _u
}


type I_unionTag uint64
const (
	UnionPrimitive = 1 // 0x00000001
	UnionStringNeedsConstructor = 2 // 0x00000002
	UnionVectorStringAlsoNeedsConstructor = 3 // 0x00000003
)


type Union struct {
	I_unionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Primitive int32  `fidl:"1" fidl_ordinal:"1"`
	StringNeedsConstructor string  `fidl:"2," fidl_bounds:"" fidl_ordinal:"2"`
	VectorStringAlsoNeedsConstructor []string  `fidl:"3,," fidl_bounds:"" fidl_ordinal:"3"`
}

func (_m *Union) Which() I_unionTag {
	return _m.I_unionTag
}

func (_m *Union) Ordinal() uint64 {
	return uint64(_m.I_unionTag)
}

func (_m *Union) SetPrimitive(primitive int32) {
	_m.I_unionTag = UnionPrimitive
	_m.Primitive = primitive
}

func UnionWithPrimitive(primitive int32) Union {
	var _u Union
	_u.SetPrimitive(primitive)
	return _u
}

func (_m *Union) SetStringNeedsConstructor(stringNeedsConstructor string) {
	_m.I_unionTag = UnionStringNeedsConstructor
	_m.StringNeedsConstructor = stringNeedsConstructor
}

func UnionWithStringNeedsConstructor(stringNeedsConstructor string) Union {
	var _u Union
	_u.SetStringNeedsConstructor(stringNeedsConstructor)
	return _u
}

func (_m *Union) SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) {
	_m.I_unionTag = UnionVectorStringAlsoNeedsConstructor
	_m.VectorStringAlsoNeedsConstructor = vectorStringAlsoNeedsConstructor
}

func UnionWithVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) Union {
	var _u Union
	_u.SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor)
	return _u
}


type I_flexibleUnionTag uint64
const (
	FlexibleUnion_unknownData = 0  // 0x00000000
	FlexibleUnionPrimitive = 1 // 0x00000001
	FlexibleUnionStringNeedsConstructor = 2 // 0x00000002
	FlexibleUnionVectorStringAlsoNeedsConstructor = 3 // 0x00000003
)


type FlexibleUnion struct {
	I_flexibleUnionTag `fidl:"x" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I_unknownData []byte
	Primitive int32  `fidl:"1" fidl_ordinal:"1"`
	StringNeedsConstructor string  `fidl:"2," fidl_bounds:"" fidl_ordinal:"2"`
	VectorStringAlsoNeedsConstructor []string  `fidl:"3,," fidl_bounds:"" fidl_ordinal:"3"`
}

func (_m *FlexibleUnion) Which() I_flexibleUnionTag {
	switch _m.I_flexibleUnionTag {
	case 1:
		return FlexibleUnionPrimitive
	case 2:
		return FlexibleUnionStringNeedsConstructor
	case 3:
		return FlexibleUnionVectorStringAlsoNeedsConstructor
	default:
		return FlexibleUnion_unknownData
	}
}

func (_m *FlexibleUnion) Ordinal() uint64 {
	return uint64(_m.I_flexibleUnionTag)
}

func (_m *FlexibleUnion) SetPrimitive(primitive int32) {
	_m.I_flexibleUnionTag = FlexibleUnionPrimitive
	_m.Primitive = primitive
}

func FlexibleUnionWithPrimitive(primitive int32) FlexibleUnion {
	var _u FlexibleUnion
	_u.SetPrimitive(primitive)
	return _u
}

func (_m *FlexibleUnion) SetStringNeedsConstructor(stringNeedsConstructor string) {
	_m.I_flexibleUnionTag = FlexibleUnionStringNeedsConstructor
	_m.StringNeedsConstructor = stringNeedsConstructor
}

func FlexibleUnionWithStringNeedsConstructor(stringNeedsConstructor string) FlexibleUnion {
	var _u FlexibleUnion
	_u.SetStringNeedsConstructor(stringNeedsConstructor)
	return _u
}

func (_m *FlexibleUnion) SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) {
	_m.I_flexibleUnionTag = FlexibleUnionVectorStringAlsoNeedsConstructor
	_m.VectorStringAlsoNeedsConstructor = vectorStringAlsoNeedsConstructor
}

func FlexibleUnionWithVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) FlexibleUnion {
	var _u FlexibleUnion
	_u.SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor)
	return _u
}


type I_strictUnionTag uint64
const (
	StrictUnionPrimitive = 1 // 0x00000001
	StrictUnionStringNeedsConstructor = 2 // 0x00000002
	StrictUnionVectorStringAlsoNeedsConstructor = 3 // 0x00000003
)


type StrictUnion struct {
	I_strictUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Primitive int32  `fidl:"1" fidl_ordinal:"1"`
	StringNeedsConstructor string  `fidl:"2," fidl_bounds:"" fidl_ordinal:"2"`
	VectorStringAlsoNeedsConstructor []string  `fidl:"3,," fidl_bounds:"" fidl_ordinal:"3"`
}

func (_m *StrictUnion) Which() I_strictUnionTag {
	return _m.I_strictUnionTag
}

func (_m *StrictUnion) Ordinal() uint64 {
	return uint64(_m.I_strictUnionTag)
}

func (_m *StrictUnion) SetPrimitive(primitive int32) {
	_m.I_strictUnionTag = StrictUnionPrimitive
	_m.Primitive = primitive
}

func StrictUnionWithPrimitive(primitive int32) StrictUnion {
	var _u StrictUnion
	_u.SetPrimitive(primitive)
	return _u
}

func (_m *StrictUnion) SetStringNeedsConstructor(stringNeedsConstructor string) {
	_m.I_strictUnionTag = StrictUnionStringNeedsConstructor
	_m.StringNeedsConstructor = stringNeedsConstructor
}

func StrictUnionWithStringNeedsConstructor(stringNeedsConstructor string) StrictUnion {
	var _u StrictUnion
	_u.SetStringNeedsConstructor(stringNeedsConstructor)
	return _u
}

func (_m *StrictUnion) SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) {
	_m.I_strictUnionTag = StrictUnionVectorStringAlsoNeedsConstructor
	_m.VectorStringAlsoNeedsConstructor = vectorStringAlsoNeedsConstructor
}

func StrictUnionWithVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor []string) StrictUnion {
	var _u StrictUnion
	_u.SetVectorStringAlsoNeedsConstructor(vectorStringAlsoNeedsConstructor)
	return _u
}


type I_fieldCollisionTag uint64
const (
	FieldCollisionFieldCollisionTag = 1 // 0x00000001
)


type FieldCollision struct {
	I_fieldCollisionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	FieldCollisionTag int32  `fidl:"1" fidl_ordinal:"1"`
}

func (_m *FieldCollision) Which() I_fieldCollisionTag {
	return _m.I_fieldCollisionTag
}

func (_m *FieldCollision) Ordinal() uint64 {
	return uint64(_m.I_fieldCollisionTag)
}

func (_m *FieldCollision) SetFieldCollisionTag(fieldCollisionTag int32) {
	_m.I_fieldCollisionTag = FieldCollisionFieldCollisionTag
	_m.FieldCollisionTag = fieldCollisionTag
}

func FieldCollisionWithFieldCollisionTag(fieldCollisionTag int32) FieldCollision {
	var _u FieldCollision
	_u.SetFieldCollisionTag(fieldCollisionTag)
	return _u
}


type I_explicitUnionTag uint64
const (
	ExplicitUnionPrimitive = 1 // 0x00000001
	ExplicitUnionStringNeedsConstructor = 3 // 0x00000003
)


type ExplicitUnion struct {
	I_explicitUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Primitive int32  `fidl:"1" fidl_ordinal:"1"`
	StringNeedsConstructor string  `fidl:"3," fidl_bounds:"" fidl_ordinal:"3"`
}

func (_m *ExplicitUnion) Which() I_explicitUnionTag {
	return _m.I_explicitUnionTag
}

func (_m *ExplicitUnion) Ordinal() uint64 {
	return uint64(_m.I_explicitUnionTag)
}

func (_m *ExplicitUnion) SetPrimitive(primitive int32) {
	_m.I_explicitUnionTag = ExplicitUnionPrimitive
	_m.Primitive = primitive
}

func ExplicitUnionWithPrimitive(primitive int32) ExplicitUnion {
	var _u ExplicitUnion
	_u.SetPrimitive(primitive)
	return _u
}

func (_m *ExplicitUnion) SetStringNeedsConstructor(stringNeedsConstructor string) {
	_m.I_explicitUnionTag = ExplicitUnionStringNeedsConstructor
	_m.StringNeedsConstructor = stringNeedsConstructor
}

func ExplicitUnionWithStringNeedsConstructor(stringNeedsConstructor string) ExplicitUnion {
	var _u ExplicitUnion
	_u.SetStringNeedsConstructor(stringNeedsConstructor)
	return _u
}


type I_reverseOrdinalUnionTag uint64
const (
	ReverseOrdinalUnionSecond = 2 // 0x00000002
	ReverseOrdinalUnionFirst = 1 // 0x00000001
)


type ReverseOrdinalUnion struct {
	I_reverseOrdinalUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Second uint32  `fidl:"2" fidl_ordinal:"2"`
	First uint32  `fidl:"1" fidl_ordinal:"1"`
}

func (_m *ReverseOrdinalUnion) Which() I_reverseOrdinalUnionTag {
	return _m.I_reverseOrdinalUnionTag
}

func (_m *ReverseOrdinalUnion) Ordinal() uint64 {
	return uint64(_m.I_reverseOrdinalUnionTag)
}

func (_m *ReverseOrdinalUnion) SetSecond(second uint32) {
	_m.I_reverseOrdinalUnionTag = ReverseOrdinalUnionSecond
	_m.Second = second
}

func ReverseOrdinalUnionWithSecond(second uint32) ReverseOrdinalUnion {
	var _u ReverseOrdinalUnion
	_u.SetSecond(second)
	return _u
}

func (_m *ReverseOrdinalUnion) SetFirst(first uint32) {
	_m.I_reverseOrdinalUnionTag = ReverseOrdinalUnionFirst
	_m.First = first
}

func ReverseOrdinalUnionWithFirst(first uint32) ReverseOrdinalUnion {
	var _u ReverseOrdinalUnion
	_u.SetFirst(first)
	return _u
}


