// WARNING: This file is machine generated by fidlgen.

#include <request_flexible_envelope.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

void ::llcpp::fidl::test::json::StrictFoo::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(StrictFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(StrictFoo, ordinal_) == offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(StrictFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}
auto ::llcpp::fidl::test::json::FlexibleFoo::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kS:
    case Ordinal::kI:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::json::FlexibleFoo::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(FlexibleFoo) == sizeof(fidl_xunion_t));
  static_assert(offsetof(FlexibleFoo, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(FlexibleFoo, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace {

[[maybe_unused]] constexpr uint64_t
    kProtocol_RequestStrictResponseFlexible_GenOrdinal = 0x72b1a46e5e2af282lu;
extern "C" const fidl_type_t
    fidl_test_json_ProtocolRequestStrictResponseFlexibleRequestTable;
extern "C" const fidl_type_t
    fidl_test_json_ProtocolRequestStrictResponseFlexibleResponseTable;
[[maybe_unused]] constexpr uint64_t
    kProtocol_RequestFlexibleResponseStrict_GenOrdinal = 0x42a34ad5c4a1d952lu;
extern "C" const fidl_type_t
    fidl_test_json_ProtocolRequestFlexibleResponseStrictRequestTable;
extern "C" const fidl_type_t
    fidl_test_json_ProtocolRequestFlexibleResponseStrictResponseTable;

}  // namespace
template <>
Protocol::ResultOf::RequestStrictResponseFlexible_Impl<
    Protocol::RequestStrictResponseFlexibleResponse>::
    RequestStrictResponseFlexible_Impl(::zx::unowned_channel _client_end,
                                       ::llcpp::fidl::test::json::StrictFoo s) {
  RequestStrictResponseFlexibleRequest _request = {};
  _request.s = std::move(s);
  auto _linearized =
      ::fidl::internal::Linearized<RequestStrictResponseFlexibleRequest>(
          &_request);
  auto& _linearize_result = _linearized.result();
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<RequestStrictResponseFlexibleRequest>
      _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(Protocol::InPlace::RequestStrictResponseFlexible(
      std::move(_client_end), std::move(_decoded_request),
      Super::response_buffer()));
}

Protocol::ResultOf::RequestStrictResponseFlexible
Protocol::SyncClient::RequestStrictResponseFlexible(
    ::llcpp::fidl::test::json::StrictFoo s) {
  return ResultOf::RequestStrictResponseFlexible(
      ::zx::unowned_channel(this->channel_), std::move(s));
}

Protocol::ResultOf::RequestStrictResponseFlexible
Protocol::Call::RequestStrictResponseFlexible(
    ::zx::unowned_channel _client_end, ::llcpp::fidl::test::json::StrictFoo s) {
  return ResultOf::RequestStrictResponseFlexible(std::move(_client_end),
                                                 std::move(s));
}

template <>
Protocol::UnownedResultOf::RequestStrictResponseFlexible_Impl<
    Protocol::RequestStrictResponseFlexibleResponse>::
    RequestStrictResponseFlexible_Impl(::zx::unowned_channel _client_end,
                                       ::fidl::BytePart _request_buffer,
                                       ::llcpp::fidl::test::json::StrictFoo s,
                                       ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() <
      RequestStrictResponseFlexibleRequest::PrimarySize) {
    Super::SetFailure(
        ::fidl::DecodeResult<RequestStrictResponseFlexibleResponse>(
            ZX_ERR_BUFFER_TOO_SMALL, ::fidl::kErrorRequestBufferTooSmall));
    return;
  }
  RequestStrictResponseFlexibleRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<RequestStrictResponseFlexibleRequest>
      _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(Protocol::InPlace::RequestStrictResponseFlexible(
      std::move(_client_end), std::move(_decoded_request),
      std::move(_response_buffer)));
}

Protocol::UnownedResultOf::RequestStrictResponseFlexible
Protocol::SyncClient::RequestStrictResponseFlexible(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::StrictFoo s,
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::RequestStrictResponseFlexible(
      ::zx::unowned_channel(this->channel_), std::move(_request_buffer),
      std::move(s), std::move(_response_buffer));
}

Protocol::UnownedResultOf::RequestStrictResponseFlexible
Protocol::Call::RequestStrictResponseFlexible(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::llcpp::fidl::test::json::StrictFoo s, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::RequestStrictResponseFlexible(
      std::move(_client_end), std::move(_request_buffer), std::move(s),
      std::move(_response_buffer));
}

::fidl::DecodeResult<Protocol::RequestStrictResponseFlexibleResponse>
Protocol::InPlace::RequestStrictResponseFlexible(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<RequestStrictResponseFlexibleRequest> params,
    ::fidl::BytePart response_buffer) {
  Protocol::SetTransactionHeaderFor::RequestStrictResponseFlexibleRequest(
      params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<
        Protocol::RequestStrictResponseFlexibleResponse>::
        FromFailure(std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<RequestStrictResponseFlexibleRequest,
                                   RequestStrictResponseFlexibleResponse>(
      std::move(_client_end), std::move(_encode_request_result.message),
      std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<
        Protocol::RequestStrictResponseFlexibleResponse>::
        FromFailure(std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

template <>
Protocol::ResultOf::RequestFlexibleResponseStrict_Impl<
    Protocol::RequestFlexibleResponseStrictResponse>::
    RequestFlexibleResponseStrict_Impl(
        ::zx::unowned_channel _client_end,
        ::llcpp::fidl::test::json::FlexibleFoo s) {
  RequestFlexibleResponseStrictRequest _request = {};
  _request.s = std::move(s);
  auto _linearized =
      ::fidl::internal::Linearized<RequestFlexibleResponseStrictRequest>(
          &_request);
  auto& _linearize_result = _linearized.result();
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<RequestFlexibleResponseStrictRequest>
      _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(Protocol::InPlace::RequestFlexibleResponseStrict(
      std::move(_client_end), std::move(_decoded_request),
      Super::response_buffer()));
}

Protocol::ResultOf::RequestFlexibleResponseStrict
Protocol::SyncClient::RequestFlexibleResponseStrict(
    ::llcpp::fidl::test::json::FlexibleFoo s) {
  return ResultOf::RequestFlexibleResponseStrict(
      ::zx::unowned_channel(this->channel_), std::move(s));
}

Protocol::ResultOf::RequestFlexibleResponseStrict
Protocol::Call::RequestFlexibleResponseStrict(
    ::zx::unowned_channel _client_end,
    ::llcpp::fidl::test::json::FlexibleFoo s) {
  return ResultOf::RequestFlexibleResponseStrict(std::move(_client_end),
                                                 std::move(s));
}

template <>
Protocol::UnownedResultOf::RequestFlexibleResponseStrict_Impl<
    Protocol::RequestFlexibleResponseStrictResponse>::
    RequestFlexibleResponseStrict_Impl(::zx::unowned_channel _client_end,
                                       ::fidl::BytePart _request_buffer,
                                       ::llcpp::fidl::test::json::FlexibleFoo s,
                                       ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() <
      RequestFlexibleResponseStrictRequest::PrimarySize) {
    Super::SetFailure(
        ::fidl::DecodeResult<RequestFlexibleResponseStrictResponse>(
            ZX_ERR_BUFFER_TOO_SMALL, ::fidl::kErrorRequestBufferTooSmall));
    return;
  }
  RequestFlexibleResponseStrictRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<RequestFlexibleResponseStrictRequest>
      _decoded_request = std::move(_linearize_result.message);
  Super::SetResult(Protocol::InPlace::RequestFlexibleResponseStrict(
      std::move(_client_end), std::move(_decoded_request),
      std::move(_response_buffer)));
}

Protocol::UnownedResultOf::RequestFlexibleResponseStrict
Protocol::SyncClient::RequestFlexibleResponseStrict(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::FlexibleFoo s,
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::RequestFlexibleResponseStrict(
      ::zx::unowned_channel(this->channel_), std::move(_request_buffer),
      std::move(s), std::move(_response_buffer));
}

Protocol::UnownedResultOf::RequestFlexibleResponseStrict
Protocol::Call::RequestFlexibleResponseStrict(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::llcpp::fidl::test::json::FlexibleFoo s,
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::RequestFlexibleResponseStrict(
      std::move(_client_end), std::move(_request_buffer), std::move(s),
      std::move(_response_buffer));
}

::fidl::DecodeResult<Protocol::RequestFlexibleResponseStrictResponse>
Protocol::InPlace::RequestFlexibleResponseStrict(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<RequestFlexibleResponseStrictRequest> params,
    ::fidl::BytePart response_buffer) {
  Protocol::SetTransactionHeaderFor::RequestFlexibleResponseStrictRequest(
      params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<
        Protocol::RequestFlexibleResponseStrictResponse>::
        FromFailure(std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<RequestFlexibleResponseStrictRequest,
                                   RequestFlexibleResponseStrictResponse>(
      std::move(_client_end), std::move(_encode_request_result.message),
      std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<
        Protocol::RequestFlexibleResponseStrictResponse>::
        FromFailure(std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

Protocol::ResultOf::RequestStrictResponseFlexible
Protocol::ClientImpl::RequestStrictResponseFlexible_Sync(
    ::llcpp::fidl::test::json::StrictFoo s) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::RequestStrictResponseFlexible(_binding->channel(),
                                                   std::move(s));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

Protocol::UnownedResultOf::RequestStrictResponseFlexible
Protocol::ClientImpl::RequestStrictResponseFlexible_Sync(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::StrictFoo s,
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::RequestStrictResponseFlexible(
        _binding->channel(), std::move(_request_buffer), std::move(s),
        std::move(_response_buffer));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Protocol::ClientImpl::RequestStrictResponseFlexible(
    ::llcpp::fidl::test::json::StrictFoo s,
    ::fit::callback<void(::llcpp::fidl::test::json::FlexibleFoo f)> _cb) {
  class ManagedResponseContext
      : public RequestStrictResponseFlexibleResponseContext {
   public:
    ManagedResponseContext(
        ::fit::callback<void(::llcpp::fidl::test::json::FlexibleFoo f)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<RequestStrictResponseFlexibleResponse>
                     msg) override {
      auto message = msg.message();
      cb_(std::move(message->f));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::fidl::test::json::FlexibleFoo f)> cb_;
  };
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      RequestStrictResponseFlexibleRequest,
      ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed =
      std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error = RequestStrictResponseFlexible(
      _write_bytes_array.view(), std::move(s), _context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError Protocol::ClientImpl::RequestStrictResponseFlexible(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::StrictFoo s,
    RequestStrictResponseFlexibleResponseContext* _context) {
  if (_request_buffer.capacity() <
      RequestStrictResponseFlexibleRequest::PrimarySize) {
    return ::fidl::StatusAndError(ZX_ERR_BUFFER_TOO_SMALL,
                                  ::fidl::kErrorRequestBufferTooSmall);
  }
  RequestStrictResponseFlexibleRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return std::move(_linearize_result);
  }
  ::fidl::DecodedMessage<RequestStrictResponseFlexibleRequest>
      _decoded_request = std::move(_linearize_result.message);

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  SetTransactionHeaderFor::RequestStrictResponseFlexibleRequest(
      _decoded_request, _context->Txid());
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return ::fidl::DecodeResult<RequestStrictResponseFlexibleResponse>::
        FromFailure(std::move(_encode_request_result));
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

Protocol::ResultOf::RequestFlexibleResponseStrict
Protocol::ClientImpl::RequestFlexibleResponseStrict_Sync(
    ::llcpp::fidl::test::json::FlexibleFoo s) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return ResultOf::RequestFlexibleResponseStrict(_binding->channel(),
                                                   std::move(s));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

Protocol::UnownedResultOf::RequestFlexibleResponseStrict
Protocol::ClientImpl::RequestFlexibleResponseStrict_Sync(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::FlexibleFoo s,
    ::fidl::BytePart _response_buffer) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    return UnownedResultOf::RequestFlexibleResponseStrict(
        _binding->channel(), std::move(_request_buffer), std::move(s),
        std::move(_response_buffer));
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError Protocol::ClientImpl::RequestFlexibleResponseStrict(
    ::llcpp::fidl::test::json::FlexibleFoo s,
    ::fit::callback<void(::llcpp::fidl::test::json::StrictFoo f)> _cb) {
  class ManagedResponseContext
      : public RequestFlexibleResponseStrictResponseContext {
   public:
    ManagedResponseContext(
        ::fit::callback<void(::llcpp::fidl::test::json::StrictFoo f)> cb)
        : cb_(std::move(cb)) {}

    void OnReply(::fidl::DecodedMessage<RequestFlexibleResponseStrictResponse>
                     msg) override {
      auto message = msg.message();
      cb_(std::move(message->f));
      delete this;
    }

    void OnError() override { delete this; }

    ::fit::callback<void(::llcpp::fidl::test::json::StrictFoo f)> cb_;
  };
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      RequestFlexibleResponseStrictRequest,
      ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed =
      std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;

  auto* _context = new ManagedResponseContext(std::move(_cb));
  auto status_and_error = RequestFlexibleResponseStrict(
      _write_bytes_array.view(), std::move(s), _context);
  if (!status_and_error.ok()) {
    delete _context;
  }
  return status_and_error;
}

::fidl::StatusAndError Protocol::ClientImpl::RequestFlexibleResponseStrict(
    ::fidl::BytePart _request_buffer, ::llcpp::fidl::test::json::FlexibleFoo s,
    RequestFlexibleResponseStrictResponseContext* _context) {
  if (_request_buffer.capacity() <
      RequestFlexibleResponseStrictRequest::PrimarySize) {
    return ::fidl::StatusAndError(ZX_ERR_BUFFER_TOO_SMALL,
                                  ::fidl::kErrorRequestBufferTooSmall);
  }
  RequestFlexibleResponseStrictRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    return std::move(_linearize_result);
  }
  ::fidl::DecodedMessage<RequestFlexibleResponseStrictRequest>
      _decoded_request = std::move(_linearize_result.message);

  ::fidl::internal::ClientBase::PrepareAsyncTxn(_context);
  SetTransactionHeaderFor::RequestFlexibleResponseStrictRequest(
      _decoded_request, _context->Txid());
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
    return ::fidl::DecodeResult<RequestFlexibleResponseStrictResponse>::
        FromFailure(std::move(_encode_request_result));
  }

  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    zx_status_t _write_status = ::fidl::Write(
        _binding->channel(), std::move(_encode_request_result.message));
    if (_write_status != ZX_OK) {
      ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
      return ::fidl::StatusAndError(_write_status, ::fidl::kErrorWriteFailed);
    }
    return ::fidl::StatusAndError(ZX_OK, nullptr);
  }
  ::fidl::internal::ClientBase::ForgetAsyncTxn(_context);
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t Protocol::ClientImpl::Dispatch(
    fidl_msg_t* msg, ::fidl::internal::ResponseContext* context) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kProtocol_RequestStrictResponseFlexible_GenOrdinal: {
      auto result =
          ::fidl::DecodeAs<RequestStrictResponseFlexibleResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return result.status;
      }
      static_cast<RequestStrictResponseFlexibleResponseContext*>(context)
          ->OnReply(std::move(result.message));
      break;
    }
    case kProtocol_RequestFlexibleResponseStrict_GenOrdinal: {
      auto result =
          ::fidl::DecodeAs<RequestFlexibleResponseStrictResponse>(msg);
      if (result.status != ZX_OK) {
        context->OnError();
        return result.status;
      }
      static_cast<RequestFlexibleResponseStrictResponseContext*>(context)
          ->OnReply(std::move(result.message));
      break;
    }
    case kFidlOrdinalEpitaph:
      if (context) return ZX_ERR_INVALID_ARGS;
      ::fidl::internal::ClientBase::Close(
          reinterpret_cast<fidl_epitaph_t*>(hdr)->error);
      break;
    default:
      zx_handle_close_many(msg->handles, msg->num_handles);
      if (context) context->OnError();
      return ZX_ERR_NOT_SUPPORTED;
  }
  return ZX_OK;
}

bool Protocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                           ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kProtocol_RequestStrictResponseFlexible_GenOrdinal: {
      auto result = ::fidl::DecodeAs<RequestStrictResponseFlexibleRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->RequestStrictResponseFlexible(
          std::move(message->s),
          Interface::RequestStrictResponseFlexibleCompleter::Sync(txn));
      return true;
    }
    case kProtocol_RequestFlexibleResponseStrict_GenOrdinal: {
      auto result = ::fidl::DecodeAs<RequestFlexibleResponseStrictRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->RequestFlexibleResponseStrict(
          std::move(message->s),
          Interface::RequestFlexibleResponseStrictCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Protocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                        ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void Protocol::Interface::RequestStrictResponseFlexibleCompleterBase::Reply(
    ::llcpp::fidl::test::json::FlexibleFoo f) {
  RequestStrictResponseFlexibleResponse _response = {};
  Protocol::SetTransactionHeaderFor::RequestStrictResponseFlexibleResponse(
      ::fidl::DecodedMessage<RequestStrictResponseFlexibleResponse>(
          ::fidl::BytePart(
              reinterpret_cast<uint8_t*>(&_response),
              RequestStrictResponseFlexibleResponse::PrimarySize,
              RequestStrictResponseFlexibleResponse::PrimarySize)));
  _response.f = std::move(f);
  auto _linearized =
      ::fidl::internal::Linearized<RequestStrictResponseFlexibleResponse>(
          &_response);
  auto& _linearize_result = _linearized.result();
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Protocol::Interface::RequestStrictResponseFlexibleCompleterBase::Reply(
    ::fidl::BytePart _buffer, ::llcpp::fidl::test::json::FlexibleFoo f) {
  if (_buffer.capacity() < RequestStrictResponseFlexibleResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  RequestStrictResponseFlexibleResponse _response = {};
  Protocol::SetTransactionHeaderFor::RequestStrictResponseFlexibleResponse(
      ::fidl::DecodedMessage<RequestStrictResponseFlexibleResponse>(
          ::fidl::BytePart(
              reinterpret_cast<uint8_t*>(&_response),
              RequestStrictResponseFlexibleResponse::PrimarySize,
              RequestStrictResponseFlexibleResponse::PrimarySize)));
  _response.f = std::move(f);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Protocol::Interface::RequestStrictResponseFlexibleCompleterBase::Reply(
    ::fidl::DecodedMessage<RequestStrictResponseFlexibleResponse> params) {
  Protocol::SetTransactionHeaderFor::RequestStrictResponseFlexibleResponse(
      params);
  CompleterBase::SendReply(std::move(params));
}

void Protocol::Interface::RequestFlexibleResponseStrictCompleterBase::Reply(
    ::llcpp::fidl::test::json::StrictFoo f) {
  RequestFlexibleResponseStrictResponse _response = {};
  Protocol::SetTransactionHeaderFor::RequestFlexibleResponseStrictResponse(
      ::fidl::DecodedMessage<RequestFlexibleResponseStrictResponse>(
          ::fidl::BytePart(
              reinterpret_cast<uint8_t*>(&_response),
              RequestFlexibleResponseStrictResponse::PrimarySize,
              RequestFlexibleResponseStrictResponse::PrimarySize)));
  _response.f = std::move(f);
  auto _linearized =
      ::fidl::internal::Linearized<RequestFlexibleResponseStrictResponse>(
          &_response);
  auto& _linearize_result = _linearized.result();
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Protocol::Interface::RequestFlexibleResponseStrictCompleterBase::Reply(
    ::fidl::BytePart _buffer, ::llcpp::fidl::test::json::StrictFoo f) {
  if (_buffer.capacity() < RequestFlexibleResponseStrictResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  RequestFlexibleResponseStrictResponse _response = {};
  Protocol::SetTransactionHeaderFor::RequestFlexibleResponseStrictResponse(
      ::fidl::DecodedMessage<RequestFlexibleResponseStrictResponse>(
          ::fidl::BytePart(
              reinterpret_cast<uint8_t*>(&_response),
              RequestFlexibleResponseStrictResponse::PrimarySize,
              RequestFlexibleResponseStrictResponse::PrimarySize)));
  _response.f = std::move(f);
  auto _linearize_result = ::fidl::Linearize(&_response, std::move(_buffer));
  if (_linearize_result.status != ZX_OK) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  CompleterBase::SendReply(std::move(_linearize_result.message));
}

void Protocol::Interface::RequestFlexibleResponseStrictCompleterBase::Reply(
    ::fidl::DecodedMessage<RequestFlexibleResponseStrictResponse> params) {
  Protocol::SetTransactionHeaderFor::RequestFlexibleResponseStrictResponse(
      params);
  CompleterBase::SendReply(std::move(params));
}

void Protocol::SetTransactionHeaderFor::RequestStrictResponseFlexibleRequest(
    const ::fidl::DecodedMessage<
        Protocol::RequestStrictResponseFlexibleRequest>& _msg,
    zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid,
                       kProtocol_RequestStrictResponseFlexible_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Protocol::SetTransactionHeaderFor::RequestStrictResponseFlexibleResponse(
    const ::fidl::DecodedMessage<
        Protocol::RequestStrictResponseFlexibleResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0,
                       kProtocol_RequestStrictResponseFlexible_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

void Protocol::SetTransactionHeaderFor::RequestFlexibleResponseStrictRequest(
    const ::fidl::DecodedMessage<
        Protocol::RequestFlexibleResponseStrictRequest>& _msg,
    zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid,
                       kProtocol_RequestFlexibleResponseStrict_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void Protocol::SetTransactionHeaderFor::RequestFlexibleResponseStrictResponse(
    const ::fidl::DecodedMessage<
        Protocol::RequestFlexibleResponseStrictResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0,
                       kProtocol_RequestFlexibleResponseStrict_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
