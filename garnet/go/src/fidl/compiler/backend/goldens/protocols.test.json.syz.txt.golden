# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
#
# WARNING: This file is machine generated by fidlgen.

include <test/name/c/fidl.h>
test_name_ErrorEnun = test_name_ErrorEnun_ERR_FOO, test_name_ErrorEnun_ERR_BAR
test_name_WithErrorSyntax_ResponseAsStruct_ResponseInLine {
       a int64
       b int64
       c int64
} [packed]
test_name_WithErrorSyntax_ResponseAsStruct_ResponseOutOfLine {
       void void
} [packed]
test_name_WithErrorSyntax_ResponseAsStruct_ResponseHandles {
       void void
} [packed]
test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseInLine {
       padding int8
} [packed]
test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseOutOfLine {
       void void
} [packed]
test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseHandles {
       void void
} [packed]
test_name_WithErrorSyntax_ErrorAsEnum_ResponseInLine {
       padding int8
} [packed]
test_name_WithErrorSyntax_ErrorAsEnum_ResponseOutOfLine {
       void void
} [packed]
test_name_WithErrorSyntax_ErrorAsEnum_ResponseHandles {
       void void
} [packed]
test_name_WithErrorSyntax_ResponseAsStruct_ResultInLine [
       responseInLine fidl_union_member[test_name_WithErrorSyntax_ResponseAsStruct_ResultTag_response, test_name_WithErrorSyntax_ResponseAsStruct_ResponseInLine]
       err fidl_union_member[test_name_WithErrorSyntax_ResponseAsStruct_ResultTag_err, int32]
]
test_name_WithErrorSyntax_ResponseAsStruct_ResultOutOfLine [
       responseOutOfLine test_name_WithErrorSyntax_ResponseAsStruct_ResponseOutOfLine
][varlen]
test_name_WithErrorSyntax_ResponseAsStruct_ResultHandles [
       response test_name_WithErrorSyntax_ResponseAsStruct_ResponseHandles
][varlen]
test_name_WithErrorSyntax_ErrorAsPrimitive_ResultInLine [
       responseInLine fidl_union_member[test_name_WithErrorSyntax_ErrorAsPrimitive_ResultTag_response, test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseInLine]
       err fidl_union_member[test_name_WithErrorSyntax_ErrorAsPrimitive_ResultTag_err, int32]
]
test_name_WithErrorSyntax_ErrorAsPrimitive_ResultOutOfLine [
       responseOutOfLine test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseOutOfLine
][varlen]
test_name_WithErrorSyntax_ErrorAsPrimitive_ResultHandles [
       response test_name_WithErrorSyntax_ErrorAsPrimitive_ResponseHandles
][varlen]
test_name_WithErrorSyntax_ErrorAsEnum_ResultInLine [
       responseInLine fidl_union_member[test_name_WithErrorSyntax_ErrorAsEnum_ResultTag_response, test_name_WithErrorSyntax_ErrorAsEnum_ResponseInLine]
       err fidl_union_member[test_name_WithErrorSyntax_ErrorAsEnum_ResultTag_err, flags[test_name_ErrorEnun, int32]]
]
test_name_WithErrorSyntax_ErrorAsEnum_ResultOutOfLine [
       responseOutOfLine test_name_WithErrorSyntax_ErrorAsEnum_ResponseOutOfLine
][varlen]
test_name_WithErrorSyntax_ErrorAsEnum_ResultHandles [
       response test_name_WithErrorSyntax_ErrorAsEnum_ResponseHandles
][varlen]


test_name_WithAndWithoutRequestResponseNoRequestNoResponseRequest {
       hdr fidl_message_header[2162845427462832128]
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestNoResponseRequestHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseRequest {
       hdr fidl_message_header[5617919293065789440]
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseResponse {
       hdr fidl_message_header[5617919293065789440]
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestWithResponseRequest {
       hdr fidl_message_header[461856421957337088]
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestWithResponseRequestHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestWithResponseResponse {
       hdr fidl_message_header[461856421957337088]
       retInLine fidl_string
       retOutOfLine fidl_aligned[stringnoz]
} [packed]
test_name_WithAndWithoutRequestResponseNoRequestWithResponseResponseHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequest {
       hdr fidl_message_header[1856067372482297856]
       argInLine fidl_string
       argOutOfLine fidl_aligned[stringnoz]
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequestHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequest {
       hdr fidl_message_header[8570976206923497472]
       argInLine fidl_string
       argOutOfLine fidl_aligned[stringnoz]
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseResponse {
       hdr fidl_message_header[8570976206923497472]
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequest {
       hdr fidl_message_header[1833854690685616128]
       argInLine fidl_string
       argOutOfLine fidl_aligned[stringnoz]
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequestHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestWithResponseResponse {
       hdr fidl_message_header[1833854690685616128]
       retInLine fidl_string
       retOutOfLine fidl_aligned[stringnoz]
} [packed]
test_name_WithAndWithoutRequestResponseWithRequestWithResponseResponseHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseOnEmptyResponseEvent {
       hdr fidl_message_header[7602031305773023232]
} [packed]
test_name_WithAndWithoutRequestResponseOnEmptyResponseEventHandles {
       void void
} [packed]
test_name_WithAndWithoutRequestResponseOnWithResponseEvent {
       hdr fidl_message_header[8811031017247735808]
       retInLine fidl_string
       retOutOfLine fidl_aligned[stringnoz]
} [packed]
test_name_WithAndWithoutRequestResponseOnWithResponseEventHandles {
       void void
} [packed]

resource zx_chan_test_name_WithAndWithoutRequestResponse_client[zx_chan]
resource zx_chan_test_name_WithAndWithoutRequestResponse_server[zx_chan]

zx_channel_create$test_name_WithAndWithoutRequestResponse(options const[0], out0 ptr[out, zx_chan_test_name_WithAndWithoutRequestResponse_client], out1 ptr[out, zx_chan_test_name_WithAndWithoutRequestResponse_server])
fdio_service_connect$test_name_WithAndWithoutRequestResponse(path ptr[in, string["/svc/"]], handle zx_chan_test_name_WithAndWithoutRequestResponse_server)
zx_channel_write$test_name_WithAndWithoutRequestResponseNoRequestNoResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[in, test_name_WithAndWithoutRequestResponseNoRequestNoResponseRequest], num_bytes bytesize[bytes], handles ptr[in, test_name_WithAndWithoutRequestResponseNoRequestNoResponseRequestHandles], num_handles bytesize[handles])
zx_channel_call$test_name_WithAndWithoutRequestResponseNoRequestEmptyResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseRequest, test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_WithAndWithoutRequestResponseNoRequestEmptyResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_WithAndWithoutRequestResponseNoRequestWithResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_WithAndWithoutRequestResponseNoRequestWithResponseRequest, test_name_WithAndWithoutRequestResponseNoRequestWithResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_WithAndWithoutRequestResponseNoRequestWithResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_write$test_name_WithAndWithoutRequestResponseWithRequestNoResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[in, test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequest], num_bytes bytesize[bytes], handles ptr[in, test_name_WithAndWithoutRequestResponseWithRequestNoResponseRequestHandles], num_handles bytesize[handles])
zx_channel_call$test_name_WithAndWithoutRequestResponseWithRequestEmptyResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequest, test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_WithAndWithoutRequestResponseWithRequestEmptyResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_WithAndWithoutRequestResponseWithRequestWithResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequest, test_name_WithAndWithoutRequestResponseWithRequestWithResponseRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_WithAndWithoutRequestResponseWithRequestWithResponseResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$test_name_WithAndWithoutRequestResponseOnEmptyResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_name_WithAndWithoutRequestResponseOnEmptyResponseEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_read$test_name_WithAndWithoutRequestResponseOnWithResponse(handle zx_chan_test_name_WithAndWithoutRequestResponse_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_name_WithAndWithoutRequestResponseOnWithResponseEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_name_WithErrorSyntaxResponseAsStructRequest {
       hdr fidl_message_header[5709494219224121344]
} [packed]
test_name_WithErrorSyntaxResponseAsStructRequestHandles {
       void void
} [packed]
test_name_WithErrorSyntaxResponseAsStructResponse {
       hdr fidl_message_header[5709494219224121344]
       resultInLine test_name_WithErrorSyntax_ResponseAsStruct_ResultInLine
       resultOutOfLine test_name_WithErrorSyntax_ResponseAsStruct_ResultOutOfLine
} [packed]
test_name_WithErrorSyntaxResponseAsStructResponseHandles {
       result test_name_WithErrorSyntax_ResponseAsStruct_ResultHandles
} [packed]
test_name_WithErrorSyntaxErrorAsPrimitiveRequest {
       hdr fidl_message_header[8887872801126481920]
} [packed]
test_name_WithErrorSyntaxErrorAsPrimitiveRequestHandles {
       void void
} [packed]
test_name_WithErrorSyntaxErrorAsPrimitiveResponse {
       hdr fidl_message_header[8887872801126481920]
       resultInLine test_name_WithErrorSyntax_ErrorAsPrimitive_ResultInLine
       resultOutOfLine test_name_WithErrorSyntax_ErrorAsPrimitive_ResultOutOfLine
} [packed]
test_name_WithErrorSyntaxErrorAsPrimitiveResponseHandles {
       result test_name_WithErrorSyntax_ErrorAsPrimitive_ResultHandles
} [packed]
test_name_WithErrorSyntaxErrorAsEnumRequest {
       hdr fidl_message_header[5518561143137763328]
} [packed]
test_name_WithErrorSyntaxErrorAsEnumRequestHandles {
       void void
} [packed]
test_name_WithErrorSyntaxErrorAsEnumResponse {
       hdr fidl_message_header[5518561143137763328]
       resultInLine test_name_WithErrorSyntax_ErrorAsEnum_ResultInLine
       resultOutOfLine test_name_WithErrorSyntax_ErrorAsEnum_ResultOutOfLine
} [packed]
test_name_WithErrorSyntaxErrorAsEnumResponseHandles {
       result test_name_WithErrorSyntax_ErrorAsEnum_ResultHandles
} [packed]

resource zx_chan_test_name_WithErrorSyntax_client[zx_chan]
resource zx_chan_test_name_WithErrorSyntax_server[zx_chan]

zx_channel_create$test_name_WithErrorSyntax(options const[0], out0 ptr[out, zx_chan_test_name_WithErrorSyntax_client], out1 ptr[out, zx_chan_test_name_WithErrorSyntax_server])
fdio_service_connect$test_name_WithErrorSyntax(path ptr[in, string["/svc/"]], handle zx_chan_test_name_WithErrorSyntax_server)
zx_channel_call$test_name_WithErrorSyntaxResponseAsStruct(handle zx_chan_test_name_WithErrorSyntax_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_WithErrorSyntaxResponseAsStructRequest, test_name_WithErrorSyntaxResponseAsStructRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_WithErrorSyntaxResponseAsStructResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_WithErrorSyntaxErrorAsPrimitive(handle zx_chan_test_name_WithErrorSyntax_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_WithErrorSyntaxErrorAsPrimitiveRequest, test_name_WithErrorSyntaxErrorAsPrimitiveRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_WithErrorSyntaxErrorAsPrimitiveResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_WithErrorSyntaxErrorAsEnum(handle zx_chan_test_name_WithErrorSyntax_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_WithErrorSyntaxErrorAsEnumRequest, test_name_WithErrorSyntaxErrorAsEnumRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_WithErrorSyntaxErrorAsEnumResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])


test_name_ChannelProtocolMethodARequest {
       hdr fidl_message_header[6153768471000776704]
       a int64
       b int64
} [packed]
test_name_ChannelProtocolMethodARequestHandles {
       void void
} [packed]
test_name_ChannelProtocolEventAEvent {
       hdr fidl_message_header[2051602944112984064]
       a int64
       b int64
} [packed]
test_name_ChannelProtocolEventAEventHandles {
       void void
} [packed]
test_name_ChannelProtocolMethodBRequest {
       hdr fidl_message_header[776401560220467200]
       a int64
       b int64
} [packed]
test_name_ChannelProtocolMethodBRequestHandles {
       void void
} [packed]
test_name_ChannelProtocolMethodBResponse {
       hdr fidl_message_header[776401560220467200]
       result int64
} [packed]
test_name_ChannelProtocolMethodBResponseHandles {
       void void
} [packed]
test_name_ChannelProtocolMutateSocketRequest {
       hdr fidl_message_header[5405131567951511552]
       a flags[fidl_handle_presence, int32]
} [packed]
test_name_ChannelProtocolMutateSocketRequestHandles {
       a zx_socket
} [packed]
test_name_ChannelProtocolMutateSocketResponse {
       hdr fidl_message_header[5405131567951511552]
       b flags[fidl_handle_presence, int32]
} [packed]
test_name_ChannelProtocolMutateSocketResponseHandles {
       b zx_socket
} [packed]

resource zx_chan_test_name_ChannelProtocol_client[zx_chan]
resource zx_chan_test_name_ChannelProtocol_server[zx_chan]

zx_channel_create$test_name_ChannelProtocol(options const[0], out0 ptr[out, zx_chan_test_name_ChannelProtocol_client], out1 ptr[out, zx_chan_test_name_ChannelProtocol_server])
fdio_service_connect$test_name_ChannelProtocol(path ptr[in, string["/svc/"]], handle zx_chan_test_name_ChannelProtocol_server)
zx_channel_write$test_name_ChannelProtocolMethodA(handle zx_chan_test_name_ChannelProtocol_client, options const[0], bytes ptr[in, test_name_ChannelProtocolMethodARequest], num_bytes bytesize[bytes], handles ptr[in, test_name_ChannelProtocolMethodARequestHandles], num_handles bytesize[handles])
zx_channel_read$test_name_ChannelProtocolEventA(handle zx_chan_test_name_ChannelProtocol_client, options const[0], bytes ptr[out, array[int8, ZX_CHANNEL_MAX_MSG_BYTES]], num_bytes bytesize[bytes], handles ptr[out, test_name_ChannelProtocolEventAEventHandles], num_handles bytesize[handles], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_ChannelProtocolMethodB(handle zx_chan_test_name_ChannelProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_ChannelProtocolMethodBRequest, test_name_ChannelProtocolMethodBRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_ChannelProtocolMethodBResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])
zx_channel_call$test_name_ChannelProtocolMutateSocket(handle zx_chan_test_name_ChannelProtocol_client, options const[0], deadline zx_time, args ptr[in, fidl_call_args[test_name_ChannelProtocolMutateSocketRequest, test_name_ChannelProtocolMutateSocketRequestHandles, array[int8, ZX_CHANNEL_MAX_MSG_BYTES], test_name_ChannelProtocolMutateSocketResponseHandles]], actual_bytes ptr[out, int32], actual_handles ptr[out, int32])

