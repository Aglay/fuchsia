// WARNING: This file is machine generated by fidlgen.

#include <inheritance.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

namespace {

[[maybe_unused]] constexpr uint64_t ksuper_foo_Ordinal = 0x2f16c1bc00000000lu;
[[maybe_unused]] constexpr uint64_t ksuper_foo_GenOrdinal =
    0x4f6c089228ba7c92lu;
extern "C" const fidl_type_t v1_fidl_test_json_superfooRequestTable;
extern "C" const fidl_type_t v1_fidl_test_json_superfooResponseTable;

}  // namespace
template <>
super::ResultOf::foo_Impl<super::fooResponse>::foo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::StringView s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      fooRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed =
      std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  fooRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<fooRequest> _decoded_request =
      std::move(_linearize_result.message);
  Super::SetResult(super::InPlace::foo(std::move(_client_end),
                                       std::move(_decoded_request),
                                       Super::response_buffer()));
}

super::ResultOf::foo super::SyncClient::foo(::fidl::StringView s) {
  return ResultOf::foo(::zx::unowned_channel(this->channel_), std::move(s));
}

super::ResultOf::foo super::Call::foo(::zx::unowned_channel _client_end,
                                      ::fidl::StringView s) {
  return ResultOf::foo(std::move(_client_end), std::move(s));
}

template <>
super::UnownedResultOf::foo_Impl<super::fooResponse>::foo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::fidl::StringView s, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < fooRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<fooResponse>(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  fooRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<fooRequest> _decoded_request =
      std::move(_linearize_result.message);
  Super::SetResult(super::InPlace::foo(std::move(_client_end),
                                       std::move(_decoded_request),
                                       std::move(_response_buffer)));
}

super::UnownedResultOf::foo super::SyncClient::foo(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(::zx::unowned_channel(this->channel_),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

super::UnownedResultOf::foo super::Call::foo(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::fidl::StringView s, ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(std::move(_client_end),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

::fidl::DecodeResult<super::fooResponse> super::InPlace::foo(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<fooRequest> params,
    ::fidl::BytePart response_buffer) {
  super::SetTransactionHeaderFor::fooRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<super::fooResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<fooRequest, fooResponse>(
      std::move(_client_end), std::move(_encode_request_result.message),
      std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<super::fooResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

bool super::TryDispatch(Interface* impl, fidl_msg_t* msg,
                        ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case ksuper_foo_Ordinal:
    case ksuper_foo_GenOrdinal: {
      auto result = ::fidl::DecodeAs<fooRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->foo(std::move(message->s), Interface::fooCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool super::Dispatch(Interface* impl, fidl_msg_t* msg,
                     ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void super::Interface::fooCompleterBase::Reply(int64_t y) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      fooResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<fooResponse*>(_write_bytes);
  super::SetTransactionHeaderFor::fooResponse(
      ::fidl::DecodedMessage<fooResponse>(::fidl::BytePart(
          reinterpret_cast<uint8_t*>(&_response), fooResponse::PrimarySize,
          fooResponse::PrimarySize)));
  _response.y = std::move(y);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize,
                                   sizeof(fooResponse));
  CompleterBase::SendReply(
      ::fidl::DecodedMessage<fooResponse>(std::move(_response_bytes)));
}

void super::Interface::fooCompleterBase::Reply(::fidl::BytePart _buffer,
                                               int64_t y) {
  if (_buffer.capacity() < fooResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<fooResponse*>(_buffer.data());
  super::SetTransactionHeaderFor::fooResponse(
      ::fidl::DecodedMessage<fooResponse>(::fidl::BytePart(
          reinterpret_cast<uint8_t*>(&_response), fooResponse::PrimarySize,
          fooResponse::PrimarySize)));
  _response.y = std::move(y);
  _buffer.set_actual(sizeof(fooResponse));
  CompleterBase::SendReply(
      ::fidl::DecodedMessage<fooResponse>(std::move(_buffer)));
}

void super::Interface::fooCompleterBase::Reply(
    ::fidl::DecodedMessage<fooResponse> params) {
  super::SetTransactionHeaderFor::fooResponse(params);
  CompleterBase::SendReply(std::move(params));
}

void super::SetTransactionHeaderFor::fooRequest(
    const ::fidl::DecodedMessage<super::fooRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, ksuper_foo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void super::SetTransactionHeaderFor::fooResponse(
    const ::fidl::DecodedMessage<super::fooResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, ksuper_foo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

namespace {

[[maybe_unused]] constexpr uint64_t ksub_foo_Ordinal = 0x2f16c1bc00000000lu;
[[maybe_unused]] constexpr uint64_t ksub_foo_GenOrdinal = 0x4f6c089228ba7c92lu;
extern "C" const fidl_type_t v1_fidl_test_json_subfooRequestTable;
extern "C" const fidl_type_t v1_fidl_test_json_subfooResponseTable;

}  // namespace
template <>
sub::ResultOf::foo_Impl<sub::fooResponse>::foo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::StringView s) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      fooRequest, ::fidl::MessageDirection::kSending>();
  std::unique_ptr _write_bytes_boxed =
      std::make_unique<::fidl::internal::AlignedBuffer<_kWriteAllocSize>>();
  auto& _write_bytes_array = *_write_bytes_boxed;
  fooRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, _write_bytes_array.view());
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<fooRequest> _decoded_request =
      std::move(_linearize_result.message);
  Super::SetResult(sub::InPlace::foo(std::move(_client_end),
                                     std::move(_decoded_request),
                                     Super::response_buffer()));
}

sub::ResultOf::foo sub::SyncClient::foo(::fidl::StringView s) {
  return ResultOf::foo(::zx::unowned_channel(this->channel_), std::move(s));
}

sub::ResultOf::foo sub::Call::foo(::zx::unowned_channel _client_end,
                                  ::fidl::StringView s) {
  return ResultOf::foo(std::move(_client_end), std::move(s));
}

template <>
sub::UnownedResultOf::foo_Impl<sub::fooResponse>::foo_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::fidl::StringView s, ::fidl::BytePart _response_buffer) {
  if (_request_buffer.capacity() < fooRequest::PrimarySize) {
    Super::SetFailure(::fidl::DecodeResult<fooResponse>(
        ZX_ERR_BUFFER_TOO_SMALL,
        ::fidl::internal::kErrorRequestBufferTooSmall));
    return;
  }
  fooRequest _request = {};
  _request.s = std::move(s);
  auto _linearize_result =
      ::fidl::Linearize(&_request, std::move(_request_buffer));
  if (_linearize_result.status != ZX_OK) {
    Super::SetFailure(std::move(_linearize_result));
    return;
  }
  ::fidl::DecodedMessage<fooRequest> _decoded_request =
      std::move(_linearize_result.message);
  Super::SetResult(sub::InPlace::foo(std::move(_client_end),
                                     std::move(_decoded_request),
                                     std::move(_response_buffer)));
}

sub::UnownedResultOf::foo sub::SyncClient::foo(
    ::fidl::BytePart _request_buffer, ::fidl::StringView s,
    ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(::zx::unowned_channel(this->channel_),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

sub::UnownedResultOf::foo sub::Call::foo(::zx::unowned_channel _client_end,
                                         ::fidl::BytePart _request_buffer,
                                         ::fidl::StringView s,
                                         ::fidl::BytePart _response_buffer) {
  return UnownedResultOf::foo(std::move(_client_end),
                              std::move(_request_buffer), std::move(s),
                              std::move(_response_buffer));
}

::fidl::DecodeResult<sub::fooResponse> sub::InPlace::foo(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<fooRequest> params,
    ::fidl::BytePart response_buffer) {
  sub::SetTransactionHeaderFor::fooRequest(params);
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<sub::fooResponse>::FromFailure(
        std::move(_encode_request_result));
  }
  auto _call_result = ::fidl::Call<fooRequest, fooResponse>(
      std::move(_client_end), std::move(_encode_request_result.message),
      std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<sub::fooResponse>::FromFailure(
        std::move(_call_result));
  }
  return ::fidl::Decode(std::move(_call_result.message));
}

bool sub::TryDispatch(Interface* impl, fidl_msg_t* msg,
                      ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case ksub_foo_Ordinal:
    case ksub_foo_GenOrdinal: {
      auto result = ::fidl::DecodeAs<fooRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->foo(std::move(message->s), Interface::fooCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool sub::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void sub::Interface::fooCompleterBase::Reply(int64_t y) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<
      fooResponse, ::fidl::MessageDirection::kSending>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<fooResponse*>(_write_bytes);
  sub::SetTransactionHeaderFor::fooResponse(::fidl::DecodedMessage<fooResponse>(
      ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
                       fooResponse::PrimarySize, fooResponse::PrimarySize)));
  _response.y = std::move(y);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize,
                                   sizeof(fooResponse));
  CompleterBase::SendReply(
      ::fidl::DecodedMessage<fooResponse>(std::move(_response_bytes)));
}

void sub::Interface::fooCompleterBase::Reply(::fidl::BytePart _buffer,
                                             int64_t y) {
  if (_buffer.capacity() < fooResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<fooResponse*>(_buffer.data());
  sub::SetTransactionHeaderFor::fooResponse(::fidl::DecodedMessage<fooResponse>(
      ::fidl::BytePart(reinterpret_cast<uint8_t*>(&_response),
                       fooResponse::PrimarySize, fooResponse::PrimarySize)));
  _response.y = std::move(y);
  _buffer.set_actual(sizeof(fooResponse));
  CompleterBase::SendReply(
      ::fidl::DecodedMessage<fooResponse>(std::move(_buffer)));
}

void sub::Interface::fooCompleterBase::Reply(
    ::fidl::DecodedMessage<fooResponse> params) {
  sub::SetTransactionHeaderFor::fooResponse(params);
  CompleterBase::SendReply(std::move(params));
}

void sub::SetTransactionHeaderFor::fooRequest(
    const ::fidl::DecodedMessage<sub::fooRequest>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, ksub_foo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}
void sub::SetTransactionHeaderFor::fooResponse(
    const ::fidl::DecodedMessage<sub::fooResponse>& _msg) {
  fidl_init_txn_header(&_msg.message()->_hdr, 0, ksub_foo_GenOrdinal);
  _msg.message()->_hdr.flags[0] |= FIDL_TXN_HEADER_UNION_FROM_XUNION_FLAG;
}

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
