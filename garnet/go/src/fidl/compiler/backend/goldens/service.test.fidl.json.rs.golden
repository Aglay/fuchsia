// WARNING: This file is machine generated by fidlgen.

#![allow(
	deprecated, // FIDL Impl struct pattern is referenced internally
	unused_parens, // one-element-tuple-case is not a tuple
	unused_mut, // not all args require mutation, but many do
	nonstandard_style, // auto-caps does its best, but is not always successful
)]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;
#[allow(unused_imports)]
use fidl::{
	fidl_bits,
	fidl_enum,
	fidl_empty_struct,
	fidl_struct,
	fidl_table,
	fidl_union,
	fidl_xunion,
};



#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct FirstProtocolMarker;

impl fidl::endpoints::ServiceMarker for FirstProtocolMarker {
	type Proxy = FirstProtocolProxy;
	type RequestStream = FirstProtocolRequestStream;
	const DEBUG_NAME: &'static str = "(anonymous) FirstProtocol";
}

pub trait FirstProtocolProxyInterface: Send + Sync {
	fn method_on_first(&self,
	)-> Result<(), fidl::Error>;
}

#[derive(Debug)]
pub struct FirstProtocolSynchronousProxy {
	client: fidl::client::sync::Client,
}

impl FirstProtocolSynchronousProxy {
	pub fn new(channel: zx::Channel) -> Self {
		Self { client: fidl::client::sync::Client::new(channel) }
	}

	pub fn into_channel(self) -> zx::Channel {
		self.client.into_channel()
	}
	pub fn method_on_first(&mut self,) -> Result<(), fidl::Error> {self.client.send(&mut (),
				0x2838a83100000000,
			)}
}

#[derive(Debug, Clone)]
pub struct FirstProtocolProxy {
	client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for FirstProtocolProxy {
	type Service = FirstProtocolMarker;
	fn from_channel(inner: ::fuchsia_async::Channel) -> Self {
		Self::new(inner)
	}
}

impl ::std::ops::Deref for FirstProtocolProxy {
	type Target = fidl::client::Client;

	fn deref(&self) -> &Self::Target {
		&self.client
	}
}

/// Proxy object for communicating with interface FirstProtocol
impl FirstProtocolProxy {
	/// Create a new Proxy for FirstProtocol
	pub fn new(channel: ::fuchsia_async::Channel) -> Self {
		Self { client: fidl::client::Client::new(channel) }
	}

	/// Attempt to convert the Proxy back into a channel.
	///
	/// This will only succeed if there are no active clones of this Proxy
	/// and no currently-alive EventStream or response futures that came from
	/// this Proxy.
	pub fn into_channel(self) -> Result<::fuchsia_async::Channel, Self> {
		self.client.into_channel().map_err(|client| Self { client })
	}

	/// Get a Stream of events from the remote end of the FirstProtocol interface
	pub fn take_event_stream(&self) -> FirstProtocolEventStream {
		FirstProtocolEventStream {
			event_receiver: self.client.take_event_receiver(),
		}
	}
	pub fn method_on_first(&self,
	)-> Result<(), fidl::Error> {
		FirstProtocolProxyInterface::method_on_first(self,
		)
	}
}

impl FirstProtocolProxyInterface for FirstProtocolProxy {
	fn method_on_first(&self,
	)-> Result<(), fidl::Error> {
		self.client.send(&mut (), 0x2838a83100000000)
	}}

pub struct FirstProtocolEventStream {
	event_receiver: fidl::client::EventReceiver,
}

impl ::std::marker::Unpin for FirstProtocolEventStream {}

impl futures::stream::FusedStream for FirstProtocolEventStream {
	fn is_terminated(&self) -> bool {
		self.event_receiver.is_terminated()
	}
}

impl futures::Stream for FirstProtocolEventStream {
	type Item = Result<FirstProtocolEvent, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
		-> futures::Poll<Option<Self::Item>>
	{
		let mut buf = match futures::ready!(
			futures::stream::StreamExt::poll_next_unpin(&mut self.event_receiver, cx)?
		) {
			Some(buf) => buf,
			None => return futures::Poll::Ready(None),
		};
		let (bytes, _handles) = buf.split_mut();
		let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

		#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
		futures::Poll::Ready(Some(match tx_header.ordinal {
			_ => Err(fidl::Error::UnknownOrdinal {
				ordinal: tx_header.ordinal,
				service_name: <FirstProtocolMarker as fidl::endpoints::ServiceMarker>::DEBUG_NAME,
			})
		}))
	}
}

#[derive(Debug)]
pub enum FirstProtocolEvent {
	
	}

impl FirstProtocolEvent {
}

/// A type which can be used to send events into a borrowed channel.
///
/// Note: this should only be used when the channel must be temporarily
/// borrowed. For a typical sending of events, use the send_ methods
/// on the ControlHandle types, which can be acquired through a
/// RequestStream or Responder type.
pub struct FirstProtocolEventSender<'a> {
	// Some protocols don't define events which would render this channel unused.
	#[allow(unused)]
	channel: &'a zx::Channel,
}

impl <'a> FirstProtocolEventSender<'a> {
	pub fn new(channel: &'a zx::Channel) -> Self {
		Self { channel }
	}
}

/// A Stream of incoming requests for FirstProtocol
pub struct FirstProtocolRequestStream {
	inner: ::std::sync::Arc<fidl::ServeInner>,
	is_terminated: bool,
}

impl ::std::marker::Unpin for FirstProtocolRequestStream {}

impl futures::stream::FusedStream for FirstProtocolRequestStream {
	fn is_terminated(&self) -> bool {
		self.is_terminated
	}
}

impl fidl::endpoints::RequestStream for FirstProtocolRequestStream {
	type Service = FirstProtocolMarker;

	/// Consume a channel to make a FirstProtocolRequestStream
	fn from_channel(channel: ::fuchsia_async::Channel) -> Self {
		Self {
			inner: ::std::sync::Arc::new(fidl::ServeInner::new(channel)),
			is_terminated: false,
		}
	}

	/// ControlHandle for the remote connection
	type ControlHandle = FirstProtocolControlHandle;

	/// ControlHandle for the remote connection
	fn control_handle(&self) -> Self::ControlHandle {
		FirstProtocolControlHandle { inner: self.inner.clone() }
	}

	fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
		(self.inner, self.is_terminated)
	}

	fn from_inner(inner: ::std::sync::Arc<fidl::ServeInner>, is_terminated: bool)
		-> Self
	{
		Self { inner, is_terminated }
	}
}

impl futures::Stream for FirstProtocolRequestStream {
	type Item = Result<FirstProtocolRequest, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
		-> futures::Poll<Option<Self::Item>>
	{
		let this = &mut *self;
		if this.inner.poll_shutdown(cx) {
			this.is_terminated = true;
			return futures::Poll::Ready(None);
		}
		if this.is_terminated {
			panic!("polled FirstProtocolRequestStream after completion");
		}
		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			match this.inner.channel().read(cx, bytes, handles) {
				futures::Poll::Ready(Ok(())) => {},
				futures::Poll::Pending => return futures::Poll::Pending,
				futures::Poll::Ready(Err(zx::Status::PEER_CLOSED)) => {
					this.is_terminated = true;
					return futures::Poll::Ready(None)
				},
				futures::Poll::Ready(Err(e)) =>
				return futures::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e)))),
			}

			// A message has been received from the channel
			let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

			#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
			futures::Poll::Ready(Some(match header.ordinal {
				0x2838a83100000000 => {
					let mut req: () = fidl::encoding::Decodable::new_empty();
					fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
					let control_handle = FirstProtocolControlHandle {
						inner: this.inner.clone(),
					};

					Ok(FirstProtocolRequest::MethodOnFirst {control_handle,})
				}
				_ => Err(fidl::Error::UnknownOrdinal {
					ordinal: header.ordinal,
					service_name: <FirstProtocolMarker as fidl::endpoints::ServiceMarker>::DEBUG_NAME,
				}),
			}))
		})
	}
}
#[derive(Debug)]
pub enum FirstProtocolRequest {
	MethodOnFirst {
		control_handle: FirstProtocolControlHandle,},
}

impl FirstProtocolRequest {
	#[allow(irrefutable_let_patterns)]
	pub fn into_method_on_first(self) -> Option<(FirstProtocolControlHandle
	)> {
		if let FirstProtocolRequest::MethodOnFirst {control_handle,
		} = self {
			Some((control_handle))
		} else {
			None
		}
	}
	

        /// Name of the method defined in FIDL
        pub fn method_name(&self) -> &'static str {
          match *self {
                FirstProtocolRequest::MethodOnFirst{..} => "method_on_first",
          }
        }
}

pub struct FirstProtocolEncoder;
impl FirstProtocolEncoder {
	pub fn encode_method_on_first_request<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {tx_id: 0,ordinal: 0x2838a83100000000,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}}

#[derive(Debug, Clone)]
pub struct FirstProtocolControlHandle {
	inner: ::std::sync::Arc<fidl::ServeInner>,
}

impl ::std::ops::Deref for FirstProtocolControlHandle {
	type Target = ::std::sync::Arc<fidl::ServeInner>;

	fn deref(&self) -> &Self::Target {
		&self.inner
	}
}

impl FirstProtocolControlHandle {
	pub fn shutdown(&self) {
		self.inner.shutdown()
	}}

/* beginning of response types */


#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SecondProtocolMarker;

impl fidl::endpoints::ServiceMarker for SecondProtocolMarker {
	type Proxy = SecondProtocolProxy;
	type RequestStream = SecondProtocolRequestStream;
	const DEBUG_NAME: &'static str = "(anonymous) SecondProtocol";
}

pub trait SecondProtocolProxyInterface: Send + Sync {
	fn method_on_second(&self,
	)-> Result<(), fidl::Error>;
}

#[derive(Debug)]
pub struct SecondProtocolSynchronousProxy {
	client: fidl::client::sync::Client,
}

impl SecondProtocolSynchronousProxy {
	pub fn new(channel: zx::Channel) -> Self {
		Self { client: fidl::client::sync::Client::new(channel) }
	}

	pub fn into_channel(self) -> zx::Channel {
		self.client.into_channel()
	}
	pub fn method_on_second(&mut self,) -> Result<(), fidl::Error> {self.client.send(&mut (),
				0xd09c00f00000000,
			)}
}

#[derive(Debug, Clone)]
pub struct SecondProtocolProxy {
	client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for SecondProtocolProxy {
	type Service = SecondProtocolMarker;
	fn from_channel(inner: ::fuchsia_async::Channel) -> Self {
		Self::new(inner)
	}
}

impl ::std::ops::Deref for SecondProtocolProxy {
	type Target = fidl::client::Client;

	fn deref(&self) -> &Self::Target {
		&self.client
	}
}

/// Proxy object for communicating with interface SecondProtocol
impl SecondProtocolProxy {
	/// Create a new Proxy for SecondProtocol
	pub fn new(channel: ::fuchsia_async::Channel) -> Self {
		Self { client: fidl::client::Client::new(channel) }
	}

	/// Attempt to convert the Proxy back into a channel.
	///
	/// This will only succeed if there are no active clones of this Proxy
	/// and no currently-alive EventStream or response futures that came from
	/// this Proxy.
	pub fn into_channel(self) -> Result<::fuchsia_async::Channel, Self> {
		self.client.into_channel().map_err(|client| Self { client })
	}

	/// Get a Stream of events from the remote end of the SecondProtocol interface
	pub fn take_event_stream(&self) -> SecondProtocolEventStream {
		SecondProtocolEventStream {
			event_receiver: self.client.take_event_receiver(),
		}
	}
	pub fn method_on_second(&self,
	)-> Result<(), fidl::Error> {
		SecondProtocolProxyInterface::method_on_second(self,
		)
	}
}

impl SecondProtocolProxyInterface for SecondProtocolProxy {
	fn method_on_second(&self,
	)-> Result<(), fidl::Error> {
		self.client.send(&mut (), 0xd09c00f00000000)
	}}

pub struct SecondProtocolEventStream {
	event_receiver: fidl::client::EventReceiver,
}

impl ::std::marker::Unpin for SecondProtocolEventStream {}

impl futures::stream::FusedStream for SecondProtocolEventStream {
	fn is_terminated(&self) -> bool {
		self.event_receiver.is_terminated()
	}
}

impl futures::Stream for SecondProtocolEventStream {
	type Item = Result<SecondProtocolEvent, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
		-> futures::Poll<Option<Self::Item>>
	{
		let mut buf = match futures::ready!(
			futures::stream::StreamExt::poll_next_unpin(&mut self.event_receiver, cx)?
		) {
			Some(buf) => buf,
			None => return futures::Poll::Ready(None),
		};
		let (bytes, _handles) = buf.split_mut();
		let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

		#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
		futures::Poll::Ready(Some(match tx_header.ordinal {
			_ => Err(fidl::Error::UnknownOrdinal {
				ordinal: tx_header.ordinal,
				service_name: <SecondProtocolMarker as fidl::endpoints::ServiceMarker>::DEBUG_NAME,
			})
		}))
	}
}

#[derive(Debug)]
pub enum SecondProtocolEvent {
	
	}

impl SecondProtocolEvent {
}

/// A type which can be used to send events into a borrowed channel.
///
/// Note: this should only be used when the channel must be temporarily
/// borrowed. For a typical sending of events, use the send_ methods
/// on the ControlHandle types, which can be acquired through a
/// RequestStream or Responder type.
pub struct SecondProtocolEventSender<'a> {
	// Some protocols don't define events which would render this channel unused.
	#[allow(unused)]
	channel: &'a zx::Channel,
}

impl <'a> SecondProtocolEventSender<'a> {
	pub fn new(channel: &'a zx::Channel) -> Self {
		Self { channel }
	}
}

/// A Stream of incoming requests for SecondProtocol
pub struct SecondProtocolRequestStream {
	inner: ::std::sync::Arc<fidl::ServeInner>,
	is_terminated: bool,
}

impl ::std::marker::Unpin for SecondProtocolRequestStream {}

impl futures::stream::FusedStream for SecondProtocolRequestStream {
	fn is_terminated(&self) -> bool {
		self.is_terminated
	}
}

impl fidl::endpoints::RequestStream for SecondProtocolRequestStream {
	type Service = SecondProtocolMarker;

	/// Consume a channel to make a SecondProtocolRequestStream
	fn from_channel(channel: ::fuchsia_async::Channel) -> Self {
		Self {
			inner: ::std::sync::Arc::new(fidl::ServeInner::new(channel)),
			is_terminated: false,
		}
	}

	/// ControlHandle for the remote connection
	type ControlHandle = SecondProtocolControlHandle;

	/// ControlHandle for the remote connection
	fn control_handle(&self) -> Self::ControlHandle {
		SecondProtocolControlHandle { inner: self.inner.clone() }
	}

	fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
		(self.inner, self.is_terminated)
	}

	fn from_inner(inner: ::std::sync::Arc<fidl::ServeInner>, is_terminated: bool)
		-> Self
	{
		Self { inner, is_terminated }
	}
}

impl futures::Stream for SecondProtocolRequestStream {
	type Item = Result<SecondProtocolRequest, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, cx: &mut std::task::Context<'_>)
		-> futures::Poll<Option<Self::Item>>
	{
		let this = &mut *self;
		if this.inner.poll_shutdown(cx) {
			this.is_terminated = true;
			return futures::Poll::Ready(None);
		}
		if this.is_terminated {
			panic!("polled SecondProtocolRequestStream after completion");
		}
		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			match this.inner.channel().read(cx, bytes, handles) {
				futures::Poll::Ready(Ok(())) => {},
				futures::Poll::Pending => return futures::Poll::Pending,
				futures::Poll::Ready(Err(zx::Status::PEER_CLOSED)) => {
					this.is_terminated = true;
					return futures::Poll::Ready(None)
				},
				futures::Poll::Ready(Err(e)) =>
				return futures::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e)))),
			}

			// A message has been received from the channel
			let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

			#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
			futures::Poll::Ready(Some(match header.ordinal {
				0xd09c00f00000000 => {
					let mut req: () = fidl::encoding::Decodable::new_empty();
					fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
					let control_handle = SecondProtocolControlHandle {
						inner: this.inner.clone(),
					};

					Ok(SecondProtocolRequest::MethodOnSecond {control_handle,})
				}
				_ => Err(fidl::Error::UnknownOrdinal {
					ordinal: header.ordinal,
					service_name: <SecondProtocolMarker as fidl::endpoints::ServiceMarker>::DEBUG_NAME,
				}),
			}))
		})
	}
}
#[derive(Debug)]
pub enum SecondProtocolRequest {
	MethodOnSecond {
		control_handle: SecondProtocolControlHandle,},
}

impl SecondProtocolRequest {
	#[allow(irrefutable_let_patterns)]
	pub fn into_method_on_second(self) -> Option<(SecondProtocolControlHandle
	)> {
		if let SecondProtocolRequest::MethodOnSecond {control_handle,
		} = self {
			Some((control_handle))
		} else {
			None
		}
	}
	

        /// Name of the method defined in FIDL
        pub fn method_name(&self) -> &'static str {
          match *self {
                SecondProtocolRequest::MethodOnSecond{..} => "method_on_second",
          }
        }
}

pub struct SecondProtocolEncoder;
impl SecondProtocolEncoder {
	pub fn encode_method_on_second_request<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {tx_id: 0,ordinal: 0xd09c00f00000000,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}}

#[derive(Debug, Clone)]
pub struct SecondProtocolControlHandle {
	inner: ::std::sync::Arc<fidl::ServeInner>,
}

impl ::std::ops::Deref for SecondProtocolControlHandle {
	type Target = ::std::sync::Arc<fidl::ServeInner>;

	fn deref(&self) -> &Self::Target {
		&self.inner
	}
}

impl SecondProtocolControlHandle {
	pub fn shutdown(&self) {
		self.inner.shutdown()
	}}

/* beginning of response types */
