// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/txn_header.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

#include <variant>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

struct Example_foo_Response;
class Example_foo_Result;
class Example;

extern "C" const fidl_type_t fidl_test_json_Example_foo_ResultTable;

class Example_foo_Result {
 public:
  Example_foo_Result() : ordinal_(Ordinal::Invalid), envelope_{} {}

  Example_foo_Result(Example_foo_Result&&) = default;
  Example_foo_Result& operator=(Example_foo_Result&&) = default;

  ~Example_foo_Result() { reset_ptr(nullptr); }

  enum class Tag : fidl_xunion_tag_t {
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_response() const { return ordinal_ == Ordinal::kResponse; }

  static Example_foo_Result WithResponse(
      ::fidl::tracking_ptr<::llcpp::fidl::test::json::Example_foo_Response>&&
          val) {
    Example_foo_Result result;
    result.set_response(std::move(val));
    return result;
  }

  void set_response(
      ::fidl::tracking_ptr<::llcpp::fidl::test::json::Example_foo_Response>&&
          elem) {
    ordinal_ = Ordinal::kResponse;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  ::llcpp::fidl::test::json::Example_foo_Response& mutable_response() {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<::llcpp::fidl::test::json::Example_foo_Response*>(
        envelope_.data.get());
  }
  const ::llcpp::fidl::test::json::Example_foo_Response& response() const {
    ZX_ASSERT(ordinal_ == Ordinal::kResponse);
    return *static_cast<::llcpp::fidl::test::json::Example_foo_Response*>(
        envelope_.data.get());
  }

  bool is_err() const { return ordinal_ == Ordinal::kErr; }

  static Example_foo_Result WithErr(::fidl::tracking_ptr<uint32_t>&& val) {
    Example_foo_Result result;
    result.set_err(std::move(val));
    return result;
  }

  void set_err(::fidl::tracking_ptr<uint32_t>&& elem) {
    ordinal_ = Ordinal::kErr;
    reset_ptr(static_cast<::fidl::tracking_ptr<void>>(std::move(elem)));
  }

  uint32_t& mutable_err() {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  const uint32_t& err() const {
    ZX_ASSERT(ordinal_ == Ordinal::kErr);
    return *static_cast<uint32_t*>(envelope_.data.get());
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal_);
  }

  static constexpr const fidl_type_t* Type =
      &fidl_test_json_Example_foo_ResultTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;
  static constexpr bool IsResource = false;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kResponse = 1,  // 0x1
    kErr = 2,       // 0x2
  };

  void reset_ptr(::fidl::tracking_ptr<void>&& new_ptr) {
    // To clear the existing value, std::move it and let it go out of scope.
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1: {
        ::fidl::tracking_ptr<::llcpp::fidl::test::json::Example_foo_Response>
            to_destroy = static_cast<::fidl::tracking_ptr<
                ::llcpp::fidl::test::json::Example_foo_Response>>(
                std::move(envelope_.data));
        break;
      }
      case 2: {
        ::fidl::tracking_ptr<uint32_t> to_destroy =
            static_cast<::fidl::tracking_ptr<uint32_t>>(
                std::move(envelope_.data));
        break;
      }
    }

    envelope_.data = std::move(new_ptr);
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  ::fidl::Envelope<void> envelope_;
};

extern "C" const fidl_type_t fidl_test_json_Example_foo_ResponseTable;

struct Example_foo_Response {
  static constexpr const fidl_type_t* Type =
      &fidl_test_json_Example_foo_ResponseTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  int64_t y = {};
};

extern "C" const fidl_type_t fidl_test_json_ExamplefooRequestTable;
extern "C" const fidl_type_t fidl_test_json_ExamplefooResponseTable;

class Example final {
  Example() = delete;

 public:
  struct fooResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fidl::test::json::Example_foo_Result result;

    static constexpr const fidl_type_t* Type =
        &fidl_test_json_ExamplefooResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 8;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  struct fooRequest final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::fidl::StringView s;

    static constexpr const fidl_type_t* Type =
        &fidl_test_json_ExamplefooRequestTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 4294967295;
    static constexpr uint32_t AltPrimarySize = 32;
    static constexpr uint32_t AltMaxOutOfLine = 4294967295;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool IsResource = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kRequest;
    using ResponseType = fooResponse;
  };

  // Collection of return types of FIDL calls in this protocol.
  class ResultOf final {
    ResultOf() = delete;

   private:
    template <typename ResponseType>
    class foo_Impl final
        : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;

     public:
      foo_Impl(::zx::unowned_channel _client_end, ::fidl::StringView s);
      ~foo_Impl() = default;
      foo_Impl(foo_Impl&& other) = default;
      foo_Impl& operator=(foo_Impl&& other) = default;
      foo_Impl(::fidl::internal::StatusAndError&& other)
          : Super(std::move(other)) {}
      using Super::error;
      using Super::ok;
      using Super::status;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using foo = foo_Impl<fooResponse>;
  };

  // Collection of return types of FIDL calls in this protocol,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;

   private:
    template <typename ResponseType>
    class foo_Impl final
        : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;

     public:
      foo_Impl(::zx::unowned_channel _client_end,
               ::fidl::BytePart _request_buffer, ::fidl::StringView s,
               ::fidl::BytePart _response_buffer);
      ~foo_Impl() = default;
      foo_Impl(foo_Impl&& other) = default;
      foo_Impl& operator=(foo_Impl&& other) = default;
      foo_Impl(::fidl::internal::StatusAndError&& other)
          : Super(std::move(other)) {}
      using Super::error;
      using Super::ok;
      using Super::status;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using foo = foo_Impl<fooResponse>;
  };

  class SyncClient final {
   public:
    SyncClient() = default;
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 48 bytes of response buffer on the stack. Request is
    // heap-allocated.
    ResultOf::foo foo(::fidl::StringView s);

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    UnownedResultOf::foo foo(::fidl::BytePart _request_buffer,
                             ::fidl::StringView s,
                             ::fidl::BytePart _response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding
  // setting up a client.
  class Call final {
    Call() = delete;

   public:
    // Allocates 48 bytes of response buffer on the stack. Request is
    // heap-allocated.
    static ResultOf::foo foo(::zx::unowned_channel _client_end,
                             ::fidl::StringView s);

    // Caller provides the backing storage for FIDL message via request and
    // response buffers.
    static UnownedResultOf::foo foo(::zx::unowned_channel _client_end,
                                    ::fidl::BytePart _request_buffer,
                                    ::fidl::StringView s,
                                    ::fidl::BytePart _response_buffer);
  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL
  // wire-format.
  class InPlace final {
    InPlace() = delete;

   public:
    static ::fidl::DecodeResult<fooResponse> foo(
        ::zx::unowned_channel _client_end,
        ::fidl::DecodedMessage<fooRequest> params,
        ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<fooResponse> foo(
        ::zx::unowned_channel _client_end,
        ::fidl::EncodedMessage<fooRequest> params,
        ::fidl::BytePart response_buffer);
  };

  struct AsyncEventHandlers;
  class fooResponseContext;
  class ClientImpl;

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = Example;
    using _Base = ::fidl::CompleterBase;

    class fooCompleterBase : public _Base {
     public:
      void Reply(::llcpp::fidl::test::json::Example_foo_Result result);
      void ReplySuccess(int64_t y);
      void ReplyError(uint32_t error);
      void Reply(::fidl::BytePart _buffer,
                 ::llcpp::fidl::test::json::Example_foo_Result result);
      void ReplySuccess(::fidl::BytePart _buffer, int64_t y);
      void Reply(::fidl::DecodedMessage<fooResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using fooCompleter = ::fidl::Completer<fooCompleterBase>;

    virtual void foo(::fidl::StringView s, fooCompleter::Sync _completer) = 0;
  };

  // Attempts to dispatch the incoming message to a handler function in the
  // server implementation. If there is no matching handler, it returns false,
  // leaving the message and transaction intact. In all other cases, it consumes
  // the message and returns true. It is possible to chain multiple TryDispatch
  // functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg,
                          ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the
  // protocol. If there is no matching handler, it closes all the handles in
  // |msg| and closes the channel with a |ZX_ERR_NOT_SUPPORTED| epitaph, before
  // returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg,
                       ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used
  // with |fidl::Bind| to reduce template expansion. Do not call this method
  // manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg,
                                 ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  class EventSender;

  // Helper functions to fill in the transaction header in a
  // |DecodedMessage<TransactionalMessage>|.
  class SetTransactionHeaderFor final {
    SetTransactionHeaderFor() = delete;

   public:
    static void fooRequest(
        const ::fidl::DecodedMessage<Example::fooRequest>& _msg,
        zx_txid_t _txid = 0);
    static void fooRequest(
        const ::fidl::EncodedMessage<Example::fooRequest>& _msg,
        zx_txid_t _txid = 0);
    static void fooResponse(
        const ::fidl::DecodedMessage<Example::fooResponse>& _msg);
    static void fooResponse(
        const ::fidl::EncodedMessage<Example::fooResponse>& _msg);
  };
};

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fidl::test::json::Example_foo_Response>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::json::Example_foo_Response>);
static_assert(offsetof(::llcpp::fidl::test::json::Example_foo_Response, y) ==
              0);
static_assert(sizeof(::llcpp::fidl::test::json::Example_foo_Response) ==
              ::llcpp::fidl::test::json::Example_foo_Response::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::json::Example_foo_Result>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::json::Example_foo_Result>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::Example::fooRequest>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fidl::test::json::Example::fooRequest>
    : public std::true_type {};
static_assert(sizeof(::llcpp::fidl::test::json::Example::fooRequest) ==
              ::llcpp::fidl::test::json::Example::fooRequest::PrimarySize);
static_assert(offsetof(::llcpp::fidl::test::json::Example::fooRequest, s) ==
              16);

template <>
struct IsFidlType<::llcpp::fidl::test::json::Example::fooResponse>
    : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fidl::test::json::Example::fooResponse>
    : public std::true_type {};
static_assert(sizeof(::llcpp::fidl::test::json::Example::fooResponse) ==
              ::llcpp::fidl::test::json::Example::fooResponse::PrimarySize);
static_assert(offsetof(::llcpp::fidl::test::json::Example::fooResponse,
                       result) == 16);

}  // namespace fidl

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

struct Example::AsyncEventHandlers {};

class Example::fooResponseContext : public ::fidl::internal::ResponseContext {
 public:
  virtual ~fooResponseContext() = default;
  virtual void OnReply(::fidl::DecodedMessage<fooResponse> msg) = 0;

 protected:
  fooResponseContext() = default;
};

class Example::ClientImpl final : private ::fidl::internal::ClientBase {
 public:
  // Asynchronous variant of |Example.foo()|. The request and callback are
  // allocated on the heap.
  ::fidl::StatusAndError foo(
      ::fidl::StringView s,
      ::fit::callback<
          void(::llcpp::fidl::test::json::Example_foo_Result result)>
          _cb);

  // Asynchronous variant of |Example.foo()|. Caller provides the backing
  // storage for FIDL message via request and response buffers. Ownership of
  // _context is given unsafely to the binding until OnError() or OnReply() are
  // called on it.
  ::fidl::StatusAndError foo(::fidl::BytePart _request_buffer,
                             ::fidl::StringView s,
                             fooResponseContext* _context);
  // Synchronous variant of |Example.foo()|. Allocates 48 bytes of response
  // buffer on the stack. Request is heap-allocated.
  ResultOf::foo foo_Sync(::fidl::StringView s);

  // Synchronous variant of |Example.foo()|. Caller provides the backing storage
  // for FIDL message via request and response buffers.
  UnownedResultOf::foo foo_Sync(::fidl::BytePart _request_buffer,
                                ::fidl::StringView s,
                                ::fidl::BytePart _response_buffer);

 private:
  friend class ::fidl::Client<Example>;

  ClientImpl(::zx::channel client_end, async_dispatcher_t* dispatcher,
             ::fidl::internal::TypeErasedOnUnboundFn on_unbound,
             AsyncEventHandlers handlers)
      : ::fidl::internal::ClientBase(std::move(client_end), dispatcher,
                                     std::move(on_unbound)),
        handlers_(std::move(handlers)) {}

  zx_status_t Dispatch(fidl_msg_t* msg,
                       ::fidl::internal::ResponseContext* context) override;

  AsyncEventHandlers handlers_;
};

class Example::EventSender {
 public:
 private:
  friend class ::fidl::ServerBinding<Example>;

  explicit EventSender(std::weak_ptr<::fidl::internal::AsyncBinding> binding)
      : binding_(std::move(binding)) {}

  std::weak_ptr<::fidl::internal::AsyncBinding> binding_;
};

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
