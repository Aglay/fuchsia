// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace fidl {
namespace unionsandwich {

class UnionSize8Aligned4;
class Sandwich1;
class UnionSize30Alignment4;
class Sandwich4;
class UnionSize12Aligned4;
class Sandwich2;
class StructSize16Alignment8;
class UnionSize24Alignment8;
class Sandwich3;

class UnionSize8Aligned4 final {
 public:
  UnionSize8Aligned4();
  ~UnionSize8Aligned4();

  UnionSize8Aligned4(UnionSize8Aligned4&&);
  UnionSize8Aligned4& operator=(UnionSize8Aligned4&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<UnionSize8Aligned4> New() { return ::std::make_unique<UnionSize8Aligned4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize8Aligned4* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize8Aligned4* _value, size_t _offset);
  zx_status_t Clone(UnionSize8Aligned4* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  uint32_t& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const uint32_t& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(uint32_t value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:

  using Variant = fit::internal::variant<fit::internal::monostate, uint32_t>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize8Aligned4& value,
                         ::test::fidl::unionsandwich::UnionSize8Aligned4* result) {
  return value.Clone(result);
}

using UnionSize8Aligned4Ptr = ::std::unique_ptr<UnionSize8Aligned4>;

class Sandwich1 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize8Aligned4 union_{};
  
  uint32_t after{};

  static inline ::std::unique_ptr<Sandwich1> New() { return ::std::make_unique<Sandwich1>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Sandwich1* value, size_t _offset);
  zx_status_t Clone(Sandwich1* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich1& _value,
                         ::test::fidl::unionsandwich::Sandwich1* _result) {
  return _value.Clone(_result);
}

using Sandwich1Ptr = ::std::unique_ptr<Sandwich1>;

class UnionSize30Alignment4 final {
 public:
  UnionSize30Alignment4();
  ~UnionSize30Alignment4();

  UnionSize30Alignment4(UnionSize30Alignment4&&);
  UnionSize30Alignment4& operator=(UnionSize30Alignment4&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<UnionSize30Alignment4> New() { return ::std::make_unique<UnionSize30Alignment4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize30Alignment4* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize30Alignment4* _value, size_t _offset);
  zx_status_t Clone(UnionSize30Alignment4* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  ::std::array<uint8_t, 30>& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const ::std::array<uint8_t, 30>& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(::std::array<uint8_t, 30> value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:

  using Variant = fit::internal::variant<fit::internal::monostate, ::std::array<uint8_t, 30>>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize30Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize30Alignment4* result) {
  return value.Clone(result);
}

using UnionSize30Alignment4Ptr = ::std::unique_ptr<UnionSize30Alignment4>;

class Sandwich4 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize30Alignment4 union_{};
  
  uint32_t after{};

  static inline ::std::unique_ptr<Sandwich4> New() { return ::std::make_unique<Sandwich4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Sandwich4* value, size_t _offset);
  zx_status_t Clone(Sandwich4* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich4& _value,
                         ::test::fidl::unionsandwich::Sandwich4* _result) {
  return _value.Clone(_result);
}

using Sandwich4Ptr = ::std::unique_ptr<Sandwich4>;

class UnionSize12Aligned4 final {
 public:
  UnionSize12Aligned4();
  ~UnionSize12Aligned4();

  UnionSize12Aligned4(UnionSize12Aligned4&&);
  UnionSize12Aligned4& operator=(UnionSize12Aligned4&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<UnionSize12Aligned4> New() { return ::std::make_unique<UnionSize12Aligned4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize12Aligned4* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize12Aligned4* _value, size_t _offset);
  zx_status_t Clone(UnionSize12Aligned4* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  ::std::array<uint8_t, 6>& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const ::std::array<uint8_t, 6>& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(::std::array<uint8_t, 6> value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:

  using Variant = fit::internal::variant<fit::internal::monostate, ::std::array<uint8_t, 6>>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize12Aligned4& value,
                         ::test::fidl::unionsandwich::UnionSize12Aligned4* result) {
  return value.Clone(result);
}

using UnionSize12Aligned4Ptr = ::std::unique_ptr<UnionSize12Aligned4>;

class Sandwich2 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize12Aligned4 union_{};
  
  uint32_t after{};

  static inline ::std::unique_ptr<Sandwich2> New() { return ::std::make_unique<Sandwich2>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Sandwich2* value, size_t _offset);
  zx_status_t Clone(Sandwich2* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich2& _value,
                         ::test::fidl::unionsandwich::Sandwich2* _result) {
  return _value.Clone(_result);
}

using Sandwich2Ptr = ::std::unique_ptr<Sandwich2>;

class StructSize16Alignment8 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint64_t f1{};
  
  uint64_t f2{};

  static inline ::std::unique_ptr<StructSize16Alignment8> New() { return ::std::make_unique<StructSize16Alignment8>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructSize16Alignment8* value, size_t _offset);
  zx_status_t Clone(StructSize16Alignment8* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::StructSize16Alignment8& _value,
                         ::test::fidl::unionsandwich::StructSize16Alignment8* _result) {
  return _value.Clone(_result);
}

using StructSize16Alignment8Ptr = ::std::unique_ptr<StructSize16Alignment8>;

class UnionSize24Alignment8 final {
 public:
  UnionSize24Alignment8();
  ~UnionSize24Alignment8();

  UnionSize24Alignment8(UnionSize24Alignment8&&);
  UnionSize24Alignment8& operator=(UnionSize24Alignment8&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<UnionSize24Alignment8> New() { return ::std::make_unique<UnionSize24Alignment8>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset);
  zx_status_t Clone(UnionSize24Alignment8* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  StructSize16Alignment8& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const StructSize16Alignment8& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(StructSize16Alignment8 value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:

  using Variant = fit::internal::variant<fit::internal::monostate, StructSize16Alignment8>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize24Alignment8& value,
                         ::test::fidl::unionsandwich::UnionSize24Alignment8* result) {
  return value.Clone(result);
}

using UnionSize24Alignment8Ptr = ::std::unique_ptr<UnionSize24Alignment8>;

class Sandwich3 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize24Alignment8 union_{};
  
  uint32_t after{};

  static inline ::std::unique_ptr<Sandwich3> New() { return ::std::make_unique<Sandwich3>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Sandwich3* value, size_t _offset);
  zx_status_t Clone(Sandwich3* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich3& _value,
                         ::test::fidl::unionsandwich::Sandwich3* _result) {
  return _value.Clone(_result);
}

using Sandwich3Ptr = ::std::unique_ptr<Sandwich3>;
}  // namespace unionsandwich
}  // namespace fidl
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize8Aligned4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize8Aligned4, 8> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize8Aligned4& value,
                         ::test::fidl::unionsandwich::UnionSize8Aligned4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize8Aligned4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize8Aligned4& _lhs, const ::test::fidl::unionsandwich::UnionSize8Aligned4& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize8Aligned4::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize8Aligned4::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::Sandwich1>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::Sandwich1, 16> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich1& value,
                         ::test::fidl::unionsandwich::Sandwich1* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::Sandwich1> {
  static inline bool Equals(const ::test::fidl::unionsandwich::Sandwich1& _lhs, const ::test::fidl::unionsandwich::Sandwich1& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize30Alignment4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize30Alignment4, 36> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize30Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize30Alignment4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize30Alignment4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize30Alignment4& _lhs, const ::test::fidl::unionsandwich::UnionSize30Alignment4& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize30Alignment4::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize30Alignment4::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::Sandwich4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::Sandwich4, 44> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich4& value,
                         ::test::fidl::unionsandwich::Sandwich4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::Sandwich4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::Sandwich4& _lhs, const ::test::fidl::unionsandwich::Sandwich4& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize12Aligned4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize12Aligned4, 12> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize12Aligned4& value,
                         ::test::fidl::unionsandwich::UnionSize12Aligned4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize12Aligned4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize12Aligned4& _lhs, const ::test::fidl::unionsandwich::UnionSize12Aligned4& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize12Aligned4::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize12Aligned4::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::Sandwich2>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::Sandwich2, 20> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich2& value,
                         ::test::fidl::unionsandwich::Sandwich2* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::Sandwich2> {
  static inline bool Equals(const ::test::fidl::unionsandwich::Sandwich2& _lhs, const ::test::fidl::unionsandwich::Sandwich2& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::StructSize16Alignment8>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::StructSize16Alignment8, 16> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::StructSize16Alignment8& value,
                         ::test::fidl::unionsandwich::StructSize16Alignment8* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::StructSize16Alignment8> {
  static inline bool Equals(const ::test::fidl::unionsandwich::StructSize16Alignment8& _lhs, const ::test::fidl::unionsandwich::StructSize16Alignment8& _rhs) {
    if (!::fidl::Equals(_lhs.f1, _rhs.f1)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.f2, _rhs.f2)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize24Alignment8>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize24Alignment8, 24> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize24Alignment8& value,
                         ::test::fidl::unionsandwich::UnionSize24Alignment8* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize24Alignment8> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize24Alignment8& _lhs, const ::test::fidl::unionsandwich::UnionSize24Alignment8& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize24Alignment8::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize24Alignment8::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::Sandwich3>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::Sandwich3, 40> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::Sandwich3& value,
                         ::test::fidl::unionsandwich::Sandwich3* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::Sandwich3> {
  static inline bool Equals(const ::test::fidl::unionsandwich::Sandwich3& _lhs, const ::test::fidl::unionsandwich::Sandwich3& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
