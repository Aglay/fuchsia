// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace fidl {
namespace unionsandwich {

class UnionSize8Alignment4;
class SandwichUnionSize8Alignment4;
class UnionSize36Alignment4;
class SandwichUnionSize36Alignment4;
class UnionSize12Alignment4;
class SandwichUnionSize12Alignment4;
class StructSize16Alignment8;
class UnionSize24Alignment8;
class SandwichUnionSize24Alignment8;

class UnionSize8Alignment4 final {
 public:
  UnionSize8Alignment4();
  ~UnionSize8Alignment4();

  UnionSize8Alignment4(UnionSize8Alignment4&&);
  UnionSize8Alignment4& operator=(UnionSize8Alignment4&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  enum __attribute__((enum_extensibility(closed))) XUnionTag : fidl_xunion_tag_t {
    kVariant = 551421578,  // 0x20de068a
  };

  static inline ::std::unique_ptr<UnionSize8Alignment4> New() { return ::std::make_unique<UnionSize8Alignment4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  void EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize8Alignment4* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize8Alignment4* _value, size_t _offset);
  zx_status_t Clone(UnionSize8Alignment4* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  uint32_t& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const uint32_t& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(uint32_t value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:
  XUnionTag WhichXUnionTag() const {
    switch (Which()) {
    case Tag::kVariant: return XUnionTag::kVariant;
    case Tag::Invalid: return XUnionTag(0);
    }
  }

  using Variant = fit::internal::variant<fit::internal::monostate, uint32_t>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize8Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize8Alignment4* result) {
  return value.Clone(result);
}

using UnionSize8Alignment4Ptr = ::std::unique_ptr<UnionSize8Alignment4>;

class SandwichUnionSize8Alignment4 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize8Alignment4 union_{};
  
  uint32_t after{};

  static inline ::std::unique_ptr<SandwichUnionSize8Alignment4> New() { return ::std::make_unique<SandwichUnionSize8Alignment4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, SandwichUnionSize8Alignment4* value, size_t _offset);
  zx_status_t Clone(SandwichUnionSize8Alignment4* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize8Alignment4& _value,
                         ::test::fidl::unionsandwich::SandwichUnionSize8Alignment4* _result) {
  return _value.Clone(_result);
}

using SandwichUnionSize8Alignment4Ptr = ::std::unique_ptr<SandwichUnionSize8Alignment4>;

class UnionSize36Alignment4 final {
 public:
  UnionSize36Alignment4();
  ~UnionSize36Alignment4();

  UnionSize36Alignment4(UnionSize36Alignment4&&);
  UnionSize36Alignment4& operator=(UnionSize36Alignment4&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  enum __attribute__((enum_extensibility(closed))) XUnionTag : fidl_xunion_tag_t {
    kVariant = 1000405696,  // 0x3ba0fac0
  };

  static inline ::std::unique_ptr<UnionSize36Alignment4> New() { return ::std::make_unique<UnionSize36Alignment4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  void EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize36Alignment4* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize36Alignment4* _value, size_t _offset);
  zx_status_t Clone(UnionSize36Alignment4* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  ::std::array<uint8_t, 32>& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const ::std::array<uint8_t, 32>& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(::std::array<uint8_t, 32> value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:
  XUnionTag WhichXUnionTag() const {
    switch (Which()) {
    case Tag::kVariant: return XUnionTag::kVariant;
    case Tag::Invalid: return XUnionTag(0);
    }
  }

  using Variant = fit::internal::variant<fit::internal::monostate, ::std::array<uint8_t, 32>>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize36Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize36Alignment4* result) {
  return value.Clone(result);
}

using UnionSize36Alignment4Ptr = ::std::unique_ptr<UnionSize36Alignment4>;

class SandwichUnionSize36Alignment4 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize36Alignment4 union_{};
  
  uint32_t after{};

  static inline ::std::unique_ptr<SandwichUnionSize36Alignment4> New() { return ::std::make_unique<SandwichUnionSize36Alignment4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, SandwichUnionSize36Alignment4* value, size_t _offset);
  zx_status_t Clone(SandwichUnionSize36Alignment4* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize36Alignment4& _value,
                         ::test::fidl::unionsandwich::SandwichUnionSize36Alignment4* _result) {
  return _value.Clone(_result);
}

using SandwichUnionSize36Alignment4Ptr = ::std::unique_ptr<SandwichUnionSize36Alignment4>;

class UnionSize12Alignment4 final {
 public:
  UnionSize12Alignment4();
  ~UnionSize12Alignment4();

  UnionSize12Alignment4(UnionSize12Alignment4&&);
  UnionSize12Alignment4& operator=(UnionSize12Alignment4&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  enum __attribute__((enum_extensibility(closed))) XUnionTag : fidl_xunion_tag_t {
    kVariant = 1305904317,  // 0x4dd684bd
  };

  static inline ::std::unique_ptr<UnionSize12Alignment4> New() { return ::std::make_unique<UnionSize12Alignment4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  void EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize12Alignment4* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize12Alignment4* _value, size_t _offset);
  zx_status_t Clone(UnionSize12Alignment4* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  ::std::array<uint8_t, 6>& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const ::std::array<uint8_t, 6>& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(::std::array<uint8_t, 6> value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:
  XUnionTag WhichXUnionTag() const {
    switch (Which()) {
    case Tag::kVariant: return XUnionTag::kVariant;
    case Tag::Invalid: return XUnionTag(0);
    }
  }

  using Variant = fit::internal::variant<fit::internal::monostate, ::std::array<uint8_t, 6>>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize12Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize12Alignment4* result) {
  return value.Clone(result);
}

using UnionSize12Alignment4Ptr = ::std::unique_ptr<UnionSize12Alignment4>;

class SandwichUnionSize12Alignment4 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize12Alignment4 union_{};
  
  int32_t after{};

  static inline ::std::unique_ptr<SandwichUnionSize12Alignment4> New() { return ::std::make_unique<SandwichUnionSize12Alignment4>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, SandwichUnionSize12Alignment4* value, size_t _offset);
  zx_status_t Clone(SandwichUnionSize12Alignment4* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize12Alignment4& _value,
                         ::test::fidl::unionsandwich::SandwichUnionSize12Alignment4* _result) {
  return _value.Clone(_result);
}

using SandwichUnionSize12Alignment4Ptr = ::std::unique_ptr<SandwichUnionSize12Alignment4>;

class StructSize16Alignment8 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint64_t f1{};
  
  uint64_t f2{};

  static inline ::std::unique_ptr<StructSize16Alignment8> New() { return ::std::make_unique<StructSize16Alignment8>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, StructSize16Alignment8* value, size_t _offset);
  zx_status_t Clone(StructSize16Alignment8* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::StructSize16Alignment8& _value,
                         ::test::fidl::unionsandwich::StructSize16Alignment8* _result) {
  return _value.Clone(_result);
}

using StructSize16Alignment8Ptr = ::std::unique_ptr<StructSize16Alignment8>;

class UnionSize24Alignment8 final {
 public:
  UnionSize24Alignment8();
  ~UnionSize24Alignment8();

  UnionSize24Alignment8(UnionSize24Alignment8&&);
  UnionSize24Alignment8& operator=(UnionSize24Alignment8&&);

  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  enum __attribute__((enum_extensibility(closed))) XUnionTag : fidl_xunion_tag_t {
    kVariant = 711125680,  // 0x2a62eab0
  };

  static inline ::std::unique_ptr<UnionSize24Alignment8> New() { return ::std::make_unique<UnionSize24Alignment8>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  void EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset);
  zx_status_t Clone(UnionSize24Alignment8* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_variant() const { return Which() == Tag(0); }
  
  StructSize16Alignment8& variant() {
    if (!is_variant()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const StructSize16Alignment8& variant() const { return value_.template get<0 + 1>(); }
  void set_variant(StructSize16Alignment8 value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:
  XUnionTag WhichXUnionTag() const {
    switch (Which()) {
    case Tag::kVariant: return XUnionTag::kVariant;
    case Tag::Invalid: return XUnionTag(0);
    }
  }

  using Variant = fit::internal::variant<fit::internal::monostate, StructSize16Alignment8>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize24Alignment8& value,
                         ::test::fidl::unionsandwich::UnionSize24Alignment8* result) {
  return value.Clone(result);
}

using UnionSize24Alignment8Ptr = ::std::unique_ptr<UnionSize24Alignment8>;

class SandwichUnionSize24Alignment8 final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t before{};
  
  UnionSize24Alignment8 union_{};
  
  uint32_t after{};

  static inline ::std::unique_ptr<SandwichUnionSize24Alignment8> New() { return ::std::make_unique<SandwichUnionSize24Alignment8>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, SandwichUnionSize24Alignment8* value, size_t _offset);
  zx_status_t Clone(SandwichUnionSize24Alignment8* result) const;
};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize24Alignment8& _value,
                         ::test::fidl::unionsandwich::SandwichUnionSize24Alignment8* _result) {
  return _value.Clone(_result);
}

using SandwichUnionSize24Alignment8Ptr = ::std::unique_ptr<SandwichUnionSize24Alignment8>;
}  // namespace unionsandwich
}  // namespace fidl
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize8Alignment4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize8Alignment4, 8, 24> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize8Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize8Alignment4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize8Alignment4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize8Alignment4& _lhs, const ::test::fidl::unionsandwich::UnionSize8Alignment4& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize8Alignment4::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize8Alignment4::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::SandwichUnionSize8Alignment4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::SandwichUnionSize8Alignment4, 16, 40> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize8Alignment4& value,
                         ::test::fidl::unionsandwich::SandwichUnionSize8Alignment4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::SandwichUnionSize8Alignment4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::SandwichUnionSize8Alignment4& _lhs, const ::test::fidl::unionsandwich::SandwichUnionSize8Alignment4& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize36Alignment4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize36Alignment4, 36, 24> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize36Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize36Alignment4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize36Alignment4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize36Alignment4& _lhs, const ::test::fidl::unionsandwich::UnionSize36Alignment4& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize36Alignment4::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize36Alignment4::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::SandwichUnionSize36Alignment4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::SandwichUnionSize36Alignment4, 44, 40> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize36Alignment4& value,
                         ::test::fidl::unionsandwich::SandwichUnionSize36Alignment4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::SandwichUnionSize36Alignment4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::SandwichUnionSize36Alignment4& _lhs, const ::test::fidl::unionsandwich::SandwichUnionSize36Alignment4& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize12Alignment4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize12Alignment4, 12, 24> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize12Alignment4& value,
                         ::test::fidl::unionsandwich::UnionSize12Alignment4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize12Alignment4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize12Alignment4& _lhs, const ::test::fidl::unionsandwich::UnionSize12Alignment4& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize12Alignment4::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize12Alignment4::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::SandwichUnionSize12Alignment4>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::SandwichUnionSize12Alignment4, 20, 40> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize12Alignment4& value,
                         ::test::fidl::unionsandwich::SandwichUnionSize12Alignment4* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::SandwichUnionSize12Alignment4> {
  static inline bool Equals(const ::test::fidl::unionsandwich::SandwichUnionSize12Alignment4& _lhs, const ::test::fidl::unionsandwich::SandwichUnionSize12Alignment4& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::StructSize16Alignment8>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::StructSize16Alignment8, 16, 16> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::StructSize16Alignment8& value,
                         ::test::fidl::unionsandwich::StructSize16Alignment8* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::StructSize16Alignment8> {
  static inline bool Equals(const ::test::fidl::unionsandwich::StructSize16Alignment8& _lhs, const ::test::fidl::unionsandwich::StructSize16Alignment8& _rhs) {
    if (!::fidl::Equals(_lhs.f1, _rhs.f1)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.f2, _rhs.f2)) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::UnionSize24Alignment8>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::UnionSize24Alignment8, 24, 24> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::UnionSize24Alignment8& value,
                         ::test::fidl::unionsandwich::UnionSize24Alignment8* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::UnionSize24Alignment8> {
  static inline bool Equals(const ::test::fidl::unionsandwich::UnionSize24Alignment8& _lhs, const ::test::fidl::unionsandwich::UnionSize24Alignment8& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::fidl::unionsandwich::UnionSize24Alignment8::Tag::kVariant:
	return ::fidl::Equals(_lhs.variant(), _rhs.variant());
      case ::test::fidl::unionsandwich::UnionSize24Alignment8::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct CodingTraits<::test::fidl::unionsandwich::SandwichUnionSize24Alignment8>
    : public EncodableCodingTraits<::test::fidl::unionsandwich::SandwichUnionSize24Alignment8, 40, 40> {};

inline zx_status_t Clone(const ::test::fidl::unionsandwich::SandwichUnionSize24Alignment8& value,
                         ::test::fidl::unionsandwich::SandwichUnionSize24Alignment8* result) {
  return ::test::fidl::unionsandwich::Clone(value, result);
}

template<>
struct Equality<::test::fidl::unionsandwich::SandwichUnionSize24Alignment8> {
  static inline bool Equals(const ::test::fidl::unionsandwich::SandwichUnionSize24Alignment8& _lhs, const ::test::fidl::unionsandwich::SandwichUnionSize24Alignment8& _rhs) {
    if (!::fidl::Equals(_lhs.before, _rhs.before)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_, _rhs.union_)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.after, _rhs.after)) {
      return false;
    }
    return true;
  }
};}  // namespace fidl
