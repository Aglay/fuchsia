// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fidl/txn_header.h>
#include <lib/fit/function.h>
#include <lib/zx/handle.h>
#include <someotherlibrary/llcpp/fidl.h>
#include <zircon/fidl.h>

#include <variant>

namespace llcpp {

namespace example {

struct ExampleOfUseOfAliases;

extern "C" const fidl_type_t example_ExampleOfUseOfAliasesTable;

struct ExampleOfUseOfAliases {
  static constexpr const fidl_type_t* Type =
      &example_ExampleOfUseOfAliasesTable;
  static constexpr uint32_t MaxNumHandles = 3;
  static constexpr uint32_t PrimarySize = 120;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  uint32_t field_of_u32 = {};

  ::fidl::VectorView<::fidl::StringView> field_of_vec_at_most_five_of_string =
      {};

  ::fidl::VectorView<uint32_t> field_of_vec_at_most_five_of_uint32 = {};

  ::fidl::VectorView<::fidl::StringView> field_of_vec_of_strings = {};

  ::fidl::VectorView<::fidl::StringView> field_of_vec_of_strings_at_most_nine =
      {};

  ::fidl::VectorView<::fidl::StringView> field_of_vec_of_strings_at_most_5 = {};

  ::fidl::VectorView<::llcpp::someotherlibrary::ReferenceMe>
      field_of_vec_at_most_5_of_reference_me = {};

  ::zx::handle field_of_channel = {};

  ::zx::handle field_of_client_end = {};

  ::zx::handle field_of_nullable_client_end = {};
};

}  // namespace example
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::example::ExampleOfUseOfAliases>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::example::ExampleOfUseOfAliases>);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases, field_of_u32) ==
              0);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_vec_at_most_five_of_string) == 8);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_vec_at_most_five_of_uint32) == 24);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_vec_of_strings) == 40);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_vec_of_strings_at_most_nine) == 56);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_vec_of_strings_at_most_5) == 72);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_vec_at_most_5_of_reference_me) == 88);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_channel) == 104);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_client_end) == 108);
static_assert(offsetof(::llcpp::example::ExampleOfUseOfAliases,
                       field_of_nullable_client_end) == 112);
static_assert(sizeof(::llcpp::example::ExampleOfUseOfAliases) ==
              ::llcpp::example::ExampleOfUseOfAliases::PrimarySize);

}  // namespace fidl

namespace llcpp {

namespace example {}  // namespace example
}  // namespace llcpp
