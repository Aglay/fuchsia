// WARNING: This file is machine generated by fidlgen.

#include <protocols.fidl.json.llcpp.h>
#include <memory>

namespace test {
namespace name {

namespace {

[[maybe_unused]]
constexpr uint32_t kKitchenSink_MethodA_Ordinal = 450577456u;
[[maybe_unused]]
constexpr uint32_t kKitchenSink_EventA_Ordinal = 1795426833u;
[[maybe_unused]]
constexpr uint32_t kKitchenSink_MethodB_Ordinal = 1999489700u;

}  // namespace

zx_status_t KitchenSink::SyncClient::MethodA(int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodARequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodARequest*>(_write_bytes);
  _request._hdr.ordinal = kKitchenSink_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t KitchenSink::SyncClient::MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b) {
  if (_request_buffer.capacity() < MethodARequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodARequest*>(_request_buffer.data());
  _request._hdr.ordinal = kKitchenSink_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t KitchenSink::SyncClient::MethodA(::fidl::DecodedMessage<MethodARequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kKitchenSink_MethodA_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}


zx_status_t KitchenSink::SyncClient::MethodB(int64_t a, int64_t b, int64_t* out_result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodBRequest*>(_write_bytes);
  _request._hdr.ordinal = kKitchenSink_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }

  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

zx_status_t KitchenSink::SyncClient::MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result) {
  if (_request_buffer.capacity() < MethodBRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodBRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kKitchenSink_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

::fidl::DecodeResult<KitchenSink::MethodBResponse> KitchenSink::SyncClient::MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kKitchenSink_MethodB_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<KitchenSink::MethodBResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<KitchenSink::MethodBResponse>());
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<KitchenSink::MethodBResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<KitchenSink::MethodBResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool KitchenSink::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kKitchenSink_MethodA_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodARequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodA(std::move(message->a), std::move(message->b),
        Interface::MethodACompleter::Sync(txn));
      return true;
    }
    case kKitchenSink_MethodB_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodBRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodB(std::move(message->a), std::move(message->b),
        Interface::MethodBCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool KitchenSink::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


zx_status_t KitchenSink::SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventAResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventAResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kKitchenSink_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_response_bytes)));
}

zx_status_t KitchenSink::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b) {
  if (_buffer.capacity() < EventAResponse::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _response = *reinterpret_cast<EventAResponse*>(_buffer.data());
  _response._hdr = {};
  _response._hdr.ordinal = kKitchenSink_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  _buffer.set_actual(sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_buffer)));
}

zx_status_t KitchenSink::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kKitchenSink_EventA_Ordinal;
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(params));
}


void KitchenSink::Interface::MethodBCompleterBase::Reply(int64_t result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<MethodBResponse*>(_write_bytes);
  _response._hdr.ordinal = kKitchenSink_MethodB_Ordinal;
  _response.result = std::move(result);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_response_bytes)));
}

void KitchenSink::Interface::MethodBCompleterBase::Reply(::fidl::BytePart _buffer, int64_t result) {
  if (_buffer.capacity() < MethodBResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<MethodBResponse*>(_buffer.data());
  _response._hdr.ordinal = kKitchenSink_MethodB_Ordinal;
  _response.result = std::move(result);
  _buffer.set_actual(sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_buffer)));
}

void KitchenSink::Interface::MethodBCompleterBase::Reply(::fidl::DecodedMessage<MethodBResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kKitchenSink_MethodB_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


namespace {

[[maybe_unused]]
constexpr uint32_t kChannelProtocol_MethodA_Ordinal = 1432785874u;
[[maybe_unused]]
constexpr uint32_t kChannelProtocol_EventA_Ordinal = 477676034u;
[[maybe_unused]]
constexpr uint32_t kChannelProtocol_MethodB_Ordinal = 180770075u;

}  // namespace

zx_status_t ChannelProtocol::SyncClient::MethodA(int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodARequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodARequest*>(_write_bytes);
  _request._hdr.ordinal = kChannelProtocol_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t ChannelProtocol::SyncClient::MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b) {
  if (_request_buffer.capacity() < MethodARequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodARequest*>(_request_buffer.data());
  _request._hdr.ordinal = kChannelProtocol_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t ChannelProtocol::SyncClient::MethodA(::fidl::DecodedMessage<MethodARequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kChannelProtocol_MethodA_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}


zx_status_t ChannelProtocol::SyncClient::MethodB(int64_t a, int64_t b, int64_t* out_result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodBRequest*>(_write_bytes);
  _request._hdr.ordinal = kChannelProtocol_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }

  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

zx_status_t ChannelProtocol::SyncClient::MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result) {
  if (_request_buffer.capacity() < MethodBRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodBRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kChannelProtocol_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

::fidl::DecodeResult<ChannelProtocol::MethodBResponse> ChannelProtocol::SyncClient::MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kChannelProtocol_MethodB_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ChannelProtocol::MethodBResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<ChannelProtocol::MethodBResponse>());
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<ChannelProtocol::MethodBResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<ChannelProtocol::MethodBResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool ChannelProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kChannelProtocol_MethodA_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodARequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodA(std::move(message->a), std::move(message->b),
        Interface::MethodACompleter::Sync(txn));
      return true;
    }
    case kChannelProtocol_MethodB_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodBRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodB(std::move(message->a), std::move(message->b),
        Interface::MethodBCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool ChannelProtocol::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


zx_status_t ChannelProtocol::SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventAResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventAResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kChannelProtocol_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_response_bytes)));
}

zx_status_t ChannelProtocol::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b) {
  if (_buffer.capacity() < EventAResponse::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _response = *reinterpret_cast<EventAResponse*>(_buffer.data());
  _response._hdr = {};
  _response._hdr.ordinal = kChannelProtocol_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  _buffer.set_actual(sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_buffer)));
}

zx_status_t ChannelProtocol::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kChannelProtocol_EventA_Ordinal;
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(params));
}


void ChannelProtocol::Interface::MethodBCompleterBase::Reply(int64_t result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<MethodBResponse*>(_write_bytes);
  _response._hdr.ordinal = kChannelProtocol_MethodB_Ordinal;
  _response.result = std::move(result);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_response_bytes)));
}

void ChannelProtocol::Interface::MethodBCompleterBase::Reply(::fidl::BytePart _buffer, int64_t result) {
  if (_buffer.capacity() < MethodBResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<MethodBResponse*>(_buffer.data());
  _response._hdr.ordinal = kChannelProtocol_MethodB_Ordinal;
  _response.result = std::move(result);
  _buffer.set_actual(sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_buffer)));
}

void ChannelProtocol::Interface::MethodBCompleterBase::Reply(::fidl::DecodedMessage<MethodBResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kChannelProtocol_MethodB_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


namespace {

[[maybe_unused]]
constexpr uint32_t kSocketControlProtocol_MethodA_Ordinal = 1007842318u;
[[maybe_unused]]
constexpr uint32_t kSocketControlProtocol_EventA_Ordinal = 955483393u;
[[maybe_unused]]
constexpr uint32_t kSocketControlProtocol_MethodB_Ordinal = 677342235u;

}  // namespace

zx_status_t SocketControlProtocol::SyncClient::MethodA(int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodARequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodARequest*>(_write_bytes);
  _request._hdr.ordinal = kSocketControlProtocol_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t SocketControlProtocol::SyncClient::MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b) {
  if (_request_buffer.capacity() < MethodARequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodARequest*>(_request_buffer.data());
  _request._hdr.ordinal = kSocketControlProtocol_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t SocketControlProtocol::SyncClient::MethodA(::fidl::DecodedMessage<MethodARequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kSocketControlProtocol_MethodA_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}


zx_status_t SocketControlProtocol::SyncClient::MethodB(int64_t a, int64_t b, int64_t* out_result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodBRequest*>(_write_bytes);
  _request._hdr.ordinal = kSocketControlProtocol_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }

  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

zx_status_t SocketControlProtocol::SyncClient::MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result) {
  if (_request_buffer.capacity() < MethodBRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodBRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kSocketControlProtocol_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

::fidl::DecodeResult<SocketControlProtocol::MethodBResponse> SocketControlProtocol::SyncClient::MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kSocketControlProtocol_MethodB_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SocketControlProtocol::MethodBResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<SocketControlProtocol::MethodBResponse>());
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<SocketControlProtocol::MethodBResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<SocketControlProtocol::MethodBResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool SocketControlProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kSocketControlProtocol_MethodA_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodARequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodA(std::move(message->a), std::move(message->b),
        Interface::MethodACompleter::Sync(txn));
      return true;
    }
    case kSocketControlProtocol_MethodB_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodBRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodB(std::move(message->a), std::move(message->b),
        Interface::MethodBCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool SocketControlProtocol::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


zx_status_t SocketControlProtocol::SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventAResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventAResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kSocketControlProtocol_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_response_bytes)));
}

zx_status_t SocketControlProtocol::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b) {
  if (_buffer.capacity() < EventAResponse::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _response = *reinterpret_cast<EventAResponse*>(_buffer.data());
  _response._hdr = {};
  _response._hdr.ordinal = kSocketControlProtocol_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  _buffer.set_actual(sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_buffer)));
}

zx_status_t SocketControlProtocol::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kSocketControlProtocol_EventA_Ordinal;
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(params));
}


void SocketControlProtocol::Interface::MethodBCompleterBase::Reply(int64_t result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<MethodBResponse*>(_write_bytes);
  _response._hdr.ordinal = kSocketControlProtocol_MethodB_Ordinal;
  _response.result = std::move(result);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_response_bytes)));
}

void SocketControlProtocol::Interface::MethodBCompleterBase::Reply(::fidl::BytePart _buffer, int64_t result) {
  if (_buffer.capacity() < MethodBResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<MethodBResponse*>(_buffer.data());
  _response._hdr.ordinal = kSocketControlProtocol_MethodB_Ordinal;
  _response.result = std::move(result);
  _buffer.set_actual(sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_buffer)));
}

void SocketControlProtocol::Interface::MethodBCompleterBase::Reply(::fidl::DecodedMessage<MethodBResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kSocketControlProtocol_MethodB_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


namespace {

[[maybe_unused]]
constexpr uint32_t kOvernetInternalProtocol_MethodA_Ordinal = 1993818253u;
[[maybe_unused]]
constexpr uint32_t kOvernetInternalProtocol_EventA_Ordinal = 1746007436u;
[[maybe_unused]]
constexpr uint32_t kOvernetInternalProtocol_MethodB_Ordinal = 952134976u;

}  // namespace

zx_status_t OvernetInternalProtocol::SyncClient::MethodA(int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodARequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodARequest*>(_write_bytes);
  _request._hdr.ordinal = kOvernetInternalProtocol_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t OvernetInternalProtocol::SyncClient::MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b) {
  if (_request_buffer.capacity() < MethodARequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodARequest*>(_request_buffer.data());
  _request._hdr.ordinal = kOvernetInternalProtocol_MethodA_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodARequest));
  ::fidl::DecodedMessage<MethodARequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}

zx_status_t OvernetInternalProtocol::SyncClient::MethodA(::fidl::DecodedMessage<MethodARequest> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kOvernetInternalProtocol_MethodA_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}


zx_status_t OvernetInternalProtocol::SyncClient::MethodB(int64_t a, int64_t b, int64_t* out_result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodBRequest*>(_write_bytes);
  _request._hdr.ordinal = kOvernetInternalProtocol_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }

  constexpr uint32_t _kReadAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _read_bytes[_kReadAllocSize];
  ::fidl::BytePart _response_bytes(_read_bytes, _kReadAllocSize);
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_bytes));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

zx_status_t OvernetInternalProtocol::SyncClient::MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result) {
  if (_request_buffer.capacity() < MethodBRequest::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _request = *reinterpret_cast<MethodBRequest*>(_request_buffer.data());
  _request._hdr.ordinal = kOvernetInternalProtocol_MethodB_Ordinal;
  _request.a = std::move(a);
  _request.b = std::move(b);
  _request_buffer.set_actual(sizeof(MethodBRequest));
  ::fidl::DecodedMessage<MethodBRequest> _decoded_request(std::move(_request_buffer));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(_response_buffer));
  if (_call_result.status != ZX_OK) {
    return _call_result.status;
  }
  auto _decode_result = ::fidl::Decode(std::move(_call_result.message));
  if (_decode_result.status != ZX_OK) {
    return _decode_result.status;
  }
  auto& _response = *_decode_result.message.message();
  *out_result = std::move(_response.result);
  return ZX_OK;
}

::fidl::DecodeResult<OvernetInternalProtocol::MethodBResponse> OvernetInternalProtocol::SyncClient::MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kOvernetInternalProtocol_MethodB_Ordinal;
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::DecodeResult<OvernetInternalProtocol::MethodBResponse>(
      _encode_request_result.status,
      _encode_request_result.error,
      ::fidl::DecodedMessage<OvernetInternalProtocol::MethodBResponse>());
  }
  auto _call_result = ::fidl::Call<MethodBRequest, MethodBResponse>(
    this->channel_, std::move(_encode_request_result.message), std::move(response_buffer));
  if (_call_result.status != ZX_OK) {
    return ::fidl::DecodeResult<OvernetInternalProtocol::MethodBResponse>(
      _call_result.status,
      _call_result.error,
      ::fidl::DecodedMessage<OvernetInternalProtocol::MethodBResponse>());
  }
  return ::fidl::Decode(std::move(_call_result.message));
}


bool OvernetInternalProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kOvernetInternalProtocol_MethodA_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodARequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodA(std::move(message->a), std::move(message->b),
        Interface::MethodACompleter::Sync(txn));
      return true;
    }
    case kOvernetInternalProtocol_MethodB_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodBRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->MethodB(std::move(message->a), std::move(message->b),
        Interface::MethodBCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool OvernetInternalProtocol::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


zx_status_t OvernetInternalProtocol::SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventAResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventAResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kOvernetInternalProtocol_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_response_bytes)));
}

zx_status_t OvernetInternalProtocol::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b) {
  if (_buffer.capacity() < EventAResponse::PrimarySize) {
    return ZX_ERR_BUFFER_TOO_SMALL;
  }
  auto& _response = *reinterpret_cast<EventAResponse*>(_buffer.data());
  _response._hdr = {};
  _response._hdr.ordinal = kOvernetInternalProtocol_EventA_Ordinal;
  _response.a = std::move(a);
  _response.b = std::move(b);
  _buffer.set_actual(sizeof(EventAResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventAResponse>(std::move(_buffer)));
}

zx_status_t OvernetInternalProtocol::SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kOvernetInternalProtocol_EventA_Ordinal;
  return ::fidl::Write(zx::unowned_channel(_chan), std::move(params));
}


void OvernetInternalProtocol::Interface::MethodBCompleterBase::Reply(int64_t result) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodBResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<MethodBResponse*>(_write_bytes);
  _response._hdr.ordinal = kOvernetInternalProtocol_MethodB_Ordinal;
  _response.result = std::move(result);
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_response_bytes)));
}

void OvernetInternalProtocol::Interface::MethodBCompleterBase::Reply(::fidl::BytePart _buffer, int64_t result) {
  if (_buffer.capacity() < MethodBResponse::PrimarySize) {
    CompleterBase::Close(ZX_ERR_INTERNAL);
    return;
  }
  auto& _response = *reinterpret_cast<MethodBResponse*>(_buffer.data());
  _response._hdr.ordinal = kOvernetInternalProtocol_MethodB_Ordinal;
  _response.result = std::move(result);
  _buffer.set_actual(sizeof(MethodBResponse));
  CompleterBase::SendReply(::fidl::DecodedMessage<MethodBResponse>(std::move(_buffer)));
}

void OvernetInternalProtocol::Interface::MethodBCompleterBase::Reply(::fidl::DecodedMessage<MethodBResponse> params) {
  params.message()->_hdr = {};
  params.message()->_hdr.ordinal = kOvernetInternalProtocol_MethodB_Ordinal;
  CompleterBase::SendReply(std::move(params));
}


}  // namespace name
}  // namespace test
