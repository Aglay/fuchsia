// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace fidl {
namespace unionsandwich {

struct UnionSize8Alignment4;
struct SandwichUnionSize8Alignment4;
struct UnionSize36Alignment4;
struct SandwichUnionSize36Alignment4;
struct UnionSize12Alignment4;
struct SandwichUnionSize12Alignment4;
struct StructSize16Alignment8;
struct UnionSize24Alignment8;
struct SandwichUnionSize24Alignment8;

extern "C" const fidl_type_t test_fidl_unionsandwich_UnionSize8Alignment4Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize8Alignment4Table;

struct UnionSize8Alignment4 {
  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  UnionSize8Alignment4();
  ~UnionSize8Alignment4();

  UnionSize8Alignment4(UnionSize8Alignment4&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  UnionSize8Alignment4& operator=(UnionSize8Alignment4&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_variant() const { return tag_ == Tag::kVariant; }

  static UnionSize8Alignment4 WithVariant(uint32_t&& val) {
    UnionSize8Alignment4 result;
    result.set_variant(std::move(val));
    return result;
  }

  uint32_t& mutable_variant();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_copy_assignable<T>::value>
  set_variant(const T& v) {
    mutable_variant() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, uint32_t>::value && std::is_move_assignable<T>::value>
  set_variant(T&& v) {
    mutable_variant() = std::move(v);
  }

  uint32_t const & variant() const { return variant_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_UnionSize8Alignment4Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_UnionSize8Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 8;

 private:
  void Destroy();
  void MoveImpl_(UnionSize8Alignment4&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    uint32_t variant_;
  };
};

extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;

struct SandwichUnionSize8Alignment4 {
  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 8;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize8Alignment4 union_ = {};

  uint32_t after = {};
};

extern "C" const fidl_type_t test_fidl_unionsandwich_UnionSize36Alignment4Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize36Alignment4Table;

struct UnionSize36Alignment4 {
  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  UnionSize36Alignment4();
  ~UnionSize36Alignment4();

  UnionSize36Alignment4(UnionSize36Alignment4&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  UnionSize36Alignment4& operator=(UnionSize36Alignment4&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_variant() const { return tag_ == Tag::kVariant; }

  static UnionSize36Alignment4 WithVariant(::fidl::Array<uint8_t, 32>&& val) {
    UnionSize36Alignment4 result;
    result.set_variant(std::move(val));
    return result;
  }

  ::fidl::Array<uint8_t, 32>& mutable_variant();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::Array<uint8_t, 32>>::value && std::is_copy_assignable<T>::value>
  set_variant(const T& v) {
    mutable_variant() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::Array<uint8_t, 32>>::value && std::is_move_assignable<T>::value>
  set_variant(T&& v) {
    mutable_variant() = std::move(v);
  }

  ::fidl::Array<uint8_t, 32> const & variant() const { return variant_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_UnionSize36Alignment4Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_UnionSize36Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 36;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 32;

 private:
  void Destroy();
  void MoveImpl_(UnionSize36Alignment4&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    ::fidl::Array<uint8_t, 32> variant_;
  };
};

extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;

struct SandwichUnionSize36Alignment4 {
  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 44;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 32;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize36Alignment4 union_ = {};

  uint32_t after = {};
};

extern "C" const fidl_type_t test_fidl_unionsandwich_UnionSize12Alignment4Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize12Alignment4Table;

struct UnionSize12Alignment4 {
  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  UnionSize12Alignment4();
  ~UnionSize12Alignment4();

  UnionSize12Alignment4(UnionSize12Alignment4&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  UnionSize12Alignment4& operator=(UnionSize12Alignment4&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_variant() const { return tag_ == Tag::kVariant; }

  static UnionSize12Alignment4 WithVariant(::fidl::Array<uint8_t, 6>&& val) {
    UnionSize12Alignment4 result;
    result.set_variant(std::move(val));
    return result;
  }

  ::fidl::Array<uint8_t, 6>& mutable_variant();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::Array<uint8_t, 6>>::value && std::is_copy_assignable<T>::value>
  set_variant(const T& v) {
    mutable_variant() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::fidl::Array<uint8_t, 6>>::value && std::is_move_assignable<T>::value>
  set_variant(T&& v) {
    mutable_variant() = std::move(v);
  }

  ::fidl::Array<uint8_t, 6> const & variant() const { return variant_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_UnionSize12Alignment4Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_UnionSize12Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 12;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 8;

 private:
  void Destroy();
  void MoveImpl_(UnionSize12Alignment4&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    ::fidl::Array<uint8_t, 6> variant_;
  };
};

extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;

struct SandwichUnionSize12Alignment4 {
  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 20;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 8;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize12Alignment4 union_ = {};

  int32_t after = {};
};

extern "C" const fidl_type_t test_fidl_unionsandwich_StructSize16Alignment8Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_StructSize16Alignment8Table;

struct StructSize16Alignment8 {
  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_StructSize16Alignment8Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_StructSize16Alignment8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 0;

  uint64_t f1 = {};

  uint64_t f2 = {};
};

extern "C" const fidl_type_t test_fidl_unionsandwich_UnionSize24Alignment8Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize24Alignment8Table;

struct UnionSize24Alignment8 {
  enum class Tag : fidl_union_tag_t {
    kVariant = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  UnionSize24Alignment8();
  ~UnionSize24Alignment8();

  UnionSize24Alignment8(UnionSize24Alignment8&& other) {
    tag_ = Tag::Invalid;
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
  }

  UnionSize24Alignment8& operator=(UnionSize24Alignment8&& other) {
    if (this != &other) {
      MoveImpl_(std::move(other));
    }
    return *this;
  }

  bool has_invalid_tag() const { return tag_ == Tag::Invalid; }

  bool is_variant() const { return tag_ == Tag::kVariant; }

  static UnionSize24Alignment8 WithVariant(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8&& val) {
    UnionSize24Alignment8 result;
    result.set_variant(std::move(val));
    return result;
  }

  ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8& mutable_variant();

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8>::value && std::is_copy_assignable<T>::value>
  set_variant(const T& v) {
    mutable_variant() = v;
  }

  template <typename T>
  std::enable_if_t<std::is_convertible<T, ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8>::value && std::is_move_assignable<T>::value>
  set_variant(T&& v) {
    mutable_variant() = std::move(v);
  }

  ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8 const & variant() const { return variant_; }

  Tag which() const { return tag_; }

  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_UnionSize24Alignment8Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_UnionSize24Alignment8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 16;

 private:
  void Destroy();
  void MoveImpl_(UnionSize24Alignment8&& other);
  static void SizeAndOffsetAssertionHelper();
  Tag tag_;
  union {
    ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8 variant_;
  };
};

extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;
extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;

struct SandwichUnionSize24Alignment8 {
  static constexpr const fidl_type_t* Type = &test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;
  static constexpr const fidl_type_t* AltType = &v1_test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr uint32_t AltPrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t AltMaxOutOfLine = 16;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8 union_ = {};

  uint32_t after = {};
};

}  // namespace unionsandwich
}  // namespace fidl
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize8Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize8Alignment4>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4, union_) == 4);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4, after) == 12);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize36Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize36Alignment4>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4, union_) == 4);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4, after) == 40);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize12Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize12Alignment4>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4, union_) == 4);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4, after) == 16);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::StructSize16Alignment8> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::StructSize16Alignment8>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8, f1) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8, f2) == 8);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8) == ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8, union_) == 8);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8, after) == 32);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8::PrimarySize);

}  // namespace fidl
