// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace fidl {
namespace unionsandwich {

struct UnionSize8Alignment4;
struct SandwichUnionSize8Alignment4;
struct UnionSize36Alignment4;
struct SandwichUnionSize36Alignment4;
struct UnionSize12Alignment4;
struct SandwichUnionSize12Alignment4;
struct StructSize16Alignment8;
struct UnionSize24Alignment8;
struct SandwichUnionSize24Alignment8;

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize8Alignment4Table;

struct UnionSize8Alignment4 {
  UnionSize8Alignment4() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kVariant = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_variant() const { return ordinal() == Ordinal::kVariant; }

  static UnionSize8Alignment4 WithVariant(uint32_t* val) {
    UnionSize8Alignment4 result;
    result.set_variant(val);
    return result;
  }

  void set_variant(uint32_t* elem) {
    ordinal_ = Ordinal::kVariant;
    envelope_.data = static_cast<void*>(elem);
  }

  uint32_t& mutable_variant() {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<uint32_t*>(envelope_.data);
  }
  const uint32_t& variant() const {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<uint32_t*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_UnionSize8Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kVariant = 1,  // 0x1
  };

  Ordinal ordinal() const {
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize36Alignment4Table;

struct UnionSize36Alignment4 {
  UnionSize36Alignment4() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kVariant = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_variant() const { return ordinal() == Ordinal::kVariant; }

  static UnionSize36Alignment4 WithVariant(::fidl::Array<uint8_t, 32>* val) {
    UnionSize36Alignment4 result;
    result.set_variant(val);
    return result;
  }

  void set_variant(::fidl::Array<uint8_t, 32>* elem) {
    ordinal_ = Ordinal::kVariant;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::Array<uint8_t, 32>& mutable_variant() {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<::fidl::Array<uint8_t, 32>*>(envelope_.data);
  }
  const ::fidl::Array<uint8_t, 32>& variant() const {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<::fidl::Array<uint8_t, 32>*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_UnionSize36Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 32;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kVariant = 1,  // 0x1
  };

  Ordinal ordinal() const {
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize12Alignment4Table;

struct UnionSize12Alignment4 {
  UnionSize12Alignment4() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kVariant = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_variant() const { return ordinal() == Ordinal::kVariant; }

  static UnionSize12Alignment4 WithVariant(::fidl::Array<uint8_t, 6>* val) {
    UnionSize12Alignment4 result;
    result.set_variant(val);
    return result;
  }

  void set_variant(::fidl::Array<uint8_t, 6>* elem) {
    ordinal_ = Ordinal::kVariant;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::Array<uint8_t, 6>& mutable_variant() {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<::fidl::Array<uint8_t, 6>*>(envelope_.data);
  }
  const ::fidl::Array<uint8_t, 6>& variant() const {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<::fidl::Array<uint8_t, 6>*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_UnionSize12Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kVariant = 1,  // 0x1
  };

  Ordinal ordinal() const {
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_UnionSize24Alignment8Table;

struct UnionSize24Alignment8 {
  UnionSize24Alignment8() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kVariant = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_variant() const { return ordinal() == Ordinal::kVariant; }

  static UnionSize24Alignment8 WithVariant(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8* val) {
    UnionSize24Alignment8 result;
    result.set_variant(val);
    return result;
  }

  void set_variant(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8* elem) {
    ordinal_ = Ordinal::kVariant;
    envelope_.data = static_cast<void*>(elem);
  }

  ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8& mutable_variant() {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<::llcpp::test::fidl::unionsandwich::StructSize16Alignment8*>(envelope_.data);
  }
  const ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8& variant() const {
    ZX_ASSERT(ordinal() == Ordinal::kVariant);
    return *static_cast<::llcpp::test::fidl::unionsandwich::StructSize16Alignment8*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_UnionSize24Alignment8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 16;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kVariant = 1,  // 0x1
  };

  Ordinal ordinal() const {
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;

struct SandwichUnionSize8Alignment4 {
  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize8Alignment4 union_ = {};

  uint32_t after = {};
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;

struct SandwichUnionSize36Alignment4 {
  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 32;
  static constexpr bool HasPointer = true;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize36Alignment4 union_ = {};

  uint32_t after = {};
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;

struct SandwichUnionSize12Alignment4 {
  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize12Alignment4 union_ = {};

  int32_t after = {};
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_StructSize16Alignment8Table;

struct StructSize16Alignment8 {
  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_StructSize16Alignment8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  uint64_t f1 = {};

  uint64_t f2 = {};
};

extern "C" const fidl_type_t v1_test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;

struct SandwichUnionSize24Alignment8 {
  static constexpr const fidl_type_t* Type = &v1_test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 40;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 16;
  static constexpr bool HasPointer = true;

  uint32_t before = {};

  ::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8 union_ = {};

  uint32_t after = {};
};

}  // namespace unionsandwich
}  // namespace fidl
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize8Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize8Alignment4>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4, union_) == 8);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4, after) == 32);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize8Alignment4::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize36Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize36Alignment4>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4, union_) == 8);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4, after) == 32);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize36Alignment4::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize12Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize12Alignment4>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4, union_) == 8);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4, after) == 32);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize12Alignment4::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::StructSize16Alignment8> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::StructSize16Alignment8>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8, f1) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8, f2) == 8);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::StructSize16Alignment8) == ::llcpp::test::fidl::unionsandwich::StructSize16Alignment8::PrimarySize);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::UnionSize24Alignment8>);

template <>
struct IsFidlType<::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8>);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8, before) == 0);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8, union_) == 8);
static_assert(offsetof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8, after) == 32);
static_assert(sizeof(::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8) == ::llcpp::test::fidl::unionsandwich::SandwichUnionSize24Alignment8::PrimarySize);

}  // namespace fidl
