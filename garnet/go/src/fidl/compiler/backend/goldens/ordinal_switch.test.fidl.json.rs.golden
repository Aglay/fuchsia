// WARNING: This file is machine generated by fidlgen.

#![feature(futures_api)]
#![allow(
	deprecated, // FIDL Impl struct pattern is referenced internally
	unused_parens, // one-element-tuple-case is not a tuple
	unused_mut, // not all args require mutation, but many do
	nonstandard_style, // auto-caps does its best, but is not always successful
)]

#[allow(unused_imports)]
use fuchsia_zircon as zx;
#[allow(unused_imports)]
use fidl::{
	fidl_bits,
	fidl_enum,
	fidl_empty_struct,
	fidl_struct,
	fidl_table,
	fidl_union,
	fidl_xunion,
};



#[derive(Debug, Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct SwitchingOrdinalsMarker;

impl fidl::endpoints::ServiceMarker for SwitchingOrdinalsMarker {
	type Proxy = SwitchingOrdinalsProxy;
	type RequestStream = SwitchingOrdinalsRequestStream;
	const NAME: &'static str = "";
}

pub trait SwitchingOrdinalsProxyInterface: Send + Sync {
	fn ordinal_five(&self,
	)-> Result<(), fidl::Error>;
	fn only_generated_ordinal(&self,
	)-> Result<(), fidl::Error>;
	type EventOrdinalFifteenResponseFut: futures::Future<Output = Result<(), fidl::Error>> + Send;
	type EventOnlyGeneratedOrdinalResponseFut: futures::Future<Output = Result<(), fidl::Error>> + Send;
}

#[derive(Debug)]
pub struct SwitchingOrdinalsSynchronousProxy {
	client: fidl::client::sync::Client,
}

impl SwitchingOrdinalsSynchronousProxy {
	pub fn new(channel: zx::Channel) -> Self {
		Self { client: fidl::client::sync::Client::new(channel) }
	}

	pub fn into_channel(self) -> zx::Channel {
		self.client.into_channel()
	}
	pub fn ordinal_five(&mut self,) -> Result<(), fidl::Error> {self.client.send(&mut (),
				2005164903,
			)}
	pub fn only_generated_ordinal(&mut self,) -> Result<(), fidl::Error> {self.client.send(&mut (),
				667506719,
			)}
}

#[derive(Debug, Clone)]
pub struct SwitchingOrdinalsProxy {
	client: fidl::client::Client,
}

impl fidl::endpoints::Proxy for SwitchingOrdinalsProxy {
	type Service = SwitchingOrdinalsMarker;
	fn from_channel(inner: ::fuchsia_async::Channel) -> Self {
		Self::new(inner)
	}
}

impl ::std::ops::Deref for SwitchingOrdinalsProxy {
	type Target = fidl::client::Client;

	fn deref(&self) -> &Self::Target {
		&self.client
	}
}

/// Proxy object for communicating with interface SwitchingOrdinals
impl SwitchingOrdinalsProxy {
	/// Create a new Proxy for SwitchingOrdinals
	pub fn new(channel: ::fuchsia_async::Channel) -> Self {
		Self { client: fidl::client::Client::new(channel) }
	}

	/// Attempt to convert the Proxy back into a channel.
	///
	/// This will only succeed if there are no active clones of this Proxy
	/// and no currently-alive EventStream or response futures that came from
	/// this Proxy.
	pub fn into_channel(self) -> Result<::fuchsia_async::Channel, Self> {
		self.client.into_channel().map_err(|client| Self { client })
	}

	/// Get a Stream of events from the remote end of the SwitchingOrdinals interface
	pub fn take_event_stream(&self) -> SwitchingOrdinalsEventStream {
		SwitchingOrdinalsEventStream {
			event_receiver: self.client.take_event_receiver(),
		}
	}
	pub fn ordinal_five(&self,
	)-> Result<(), fidl::Error> {
		SwitchingOrdinalsProxyInterface::ordinal_five(self,
		)
	}
	pub fn only_generated_ordinal(&self,
	)-> Result<(), fidl::Error> {
		SwitchingOrdinalsProxyInterface::only_generated_ordinal(self,
		)
	}
}

impl SwitchingOrdinalsProxyInterface for SwitchingOrdinalsProxy {
	fn ordinal_five(&self,
	)-> Result<(), fidl::Error> {
		self.client.send(&mut (), 2005164903)
	}
	fn only_generated_ordinal(&self,
	)-> Result<(), fidl::Error> {
		self.client.send(&mut (), 667506719)
	}
	type EventOrdinalFifteenResponseFut = fidl::client::QueryResponseFut<()>;
	type EventOnlyGeneratedOrdinalResponseFut = fidl::client::QueryResponseFut<()>;}

pub struct SwitchingOrdinalsEventStream {
	event_receiver: fidl::client::EventReceiver,
}

impl ::std::marker::Unpin for SwitchingOrdinalsEventStream {}

impl futures::stream::FusedStream for SwitchingOrdinalsEventStream {
	fn is_terminated(&self) -> bool {
		self.event_receiver.is_terminated()
	}
}

impl futures::Stream for SwitchingOrdinalsEventStream {
	type Item = Result<SwitchingOrdinalsEvent, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, lw: &futures::task::Waker)
		-> futures::Poll<Option<Self::Item>>
	{
		let mut buf = match futures::ready!(
			futures::stream::StreamExt::poll_next_unpin(&mut self.event_receiver, lw)?
		) {
			Some(buf) => buf,
			None => return futures::Poll::Ready(None),
		};
		let (bytes, _handles) = buf.split_mut();
		let (tx_header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

		#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
		futures::Poll::Ready(Some(match tx_header.ordinal {
			1467258273 | 1467258273 => {
				let mut out_tuple: () = fidl::encoding::Decodable::new_empty();
				fidl::encoding::Decoder::decode_into(_body_bytes, _handles, &mut out_tuple)?;
				Ok((
					SwitchingOrdinalsEvent::EventOrdinalFifteen {}
				))
			}
			2146190926 | 2146190926 => {
				let mut out_tuple: () = fidl::encoding::Decodable::new_empty();
				fidl::encoding::Decoder::decode_into(_body_bytes, _handles, &mut out_tuple)?;
				Ok((
					SwitchingOrdinalsEvent::EventOnlyGeneratedOrdinal {}
				))
			}
			_ => Err(fidl::Error::UnknownOrdinal {
				ordinal: tx_header.ordinal,
				service_name: <SwitchingOrdinalsMarker as fidl::endpoints::ServiceMarker>::NAME,
			})
		}))
	}
}

#[derive(Debug)]
pub enum SwitchingOrdinalsEvent {
	
	
	
	
	EventOrdinalFifteen {
		
	},
	
	EventOnlyGeneratedOrdinal {
		
	},}

pub struct SwitchingOrdinalsEventSender<'a> {
	// Some protocols don't define events which would render this channel unused.
	#[allow(unused)]
	channel: zx::Unowned<'a, zx::Channel>,
}
impl <'a> SwitchingOrdinalsEventSender<'a> {
	pub fn new(channel: zx::Unowned<'a, zx::Channel>) -> Self {
		Self { channel }
	}
	pub fn send_event_ordinal_fifteen(&self) -> Result<(), fidl::Error> {
		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			SwitchingOrdinalsEncoder::encode_event_ordinal_fifteen_response(
				bytes, handles,)?;
			self.channel.write(&*bytes, &mut *handles).map_err(fidl::Error::ServerResponseWrite)?;
			Ok(())
		})
	}
	
	pub fn send_event_only_generated_ordinal(&self) -> Result<(), fidl::Error> {
		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			SwitchingOrdinalsEncoder::encode_event_only_generated_ordinal_response(
				bytes, handles,)?;
			self.channel.write(&*bytes, &mut *handles).map_err(fidl::Error::ServerResponseWrite)?;
			Ok(())
		})
	}
	
}

#[deprecated(note = "use SwitchingOrdinalsRequestStream instead")]
pub trait SwitchingOrdinals {
	type OnOpenFut: futures::Future<Output = ()> + Send;
	fn on_open(&mut self, control_handle: SwitchingOrdinalsControlHandle) -> Self::OnOpenFut;
	type OrdinalFiveFut: futures::Future<Output = ()> + Send;
	fn ordinal_five (&mut self,
		control_handle: SwitchingOrdinalsControlHandle
	) -> Self::OrdinalFiveFut;
	
	type OnlyGeneratedOrdinalFut: futures::Future<Output = ()> + Send;
	fn only_generated_ordinal (&mut self,
		control_handle: SwitchingOrdinalsControlHandle
	) -> Self::OnlyGeneratedOrdinalFut;
	

	fn serve(mut self, channel: ::fuchsia_async::Channel)
		-> SwitchingOrdinalsServer<Self>
	where Self: Sized
	{
		let inner = ::std::sync::Arc::new(fidl::ServeInner::new(channel));
		let on_open_fut = self.on_open(
			SwitchingOrdinalsControlHandle {
				inner: inner.clone(),
			}
		);
		SwitchingOrdinalsServer {
			server: self,
			inner: inner.clone(),
			on_open_fut: Some(on_open_fut),ordinal_five_futures: futures::stream::FuturesUnordered::new(),only_generated_ordinal_futures: futures::stream::FuturesUnordered::new(),
		}
	}
}

pub struct SwitchingOrdinalsServer<T: SwitchingOrdinals> {
	#[allow(dead_code)] // not used if no methods are present
	server: T,
	inner: ::std::sync::Arc<fidl::ServeInner>,
	on_open_fut: Option<T::OnOpenFut>,ordinal_five_futures: futures::stream::FuturesUnordered<T::OrdinalFiveFut>,only_generated_ordinal_futures: futures::stream::FuturesUnordered<T::OnlyGeneratedOrdinalFut>,
}

// Safety: only the OnOpen fut is held directly, so it's the only one that
// is projected to, so it's the only one that needs to be Unpin for the Impl
// struct to be Unpin.
impl<T: SwitchingOrdinals> ::std::marker::Unpin for SwitchingOrdinalsServer<T>
where T::OnOpenFut: ::std::marker::Unpin,
{}

impl<T: SwitchingOrdinals> SwitchingOrdinalsServer<T> {
	pub fn control_handle(&self) -> SwitchingOrdinalsControlHandle {
		SwitchingOrdinalsControlHandle {
			inner: self.inner.clone(),
		}
	}
}

impl<T: SwitchingOrdinals> futures::Future for SwitchingOrdinalsServer<T> {
	type Output = Result<(), fidl::Error>;

	fn poll(
		mut self: ::std::pin::Pin<&mut Self>,
		lw: &futures::task::Waker,
	) -> futures::Poll<Self::Output> {
		// safety: the only potentially !Unpin field is on_open_fut, which we make sure
		// isn't moved below
		let this = unsafe { ::std::pin::Pin::get_unchecked_mut(self) };
		loop {
		let mut made_progress_this_loop_iter = false;

		if this.inner.poll_shutdown(lw) {
			return futures::Poll::Ready(Ok(()));
		}

		unsafe {
			// Safety: ensure that on_open isn't moved
			let completed_on_open = if let Some(on_open_fut) = &mut this.on_open_fut {
				match futures::Future::poll(::std::pin::Pin::new_unchecked(on_open_fut), lw) {
					futures::Poll::Ready(()) => true,
					futures::Poll::Pending => false,
				}
			} else {
				false
			};

			if completed_on_open {
				made_progress_this_loop_iter = true;
				this.on_open_fut = None;
			}
		}match futures::stream::StreamExt::poll_next_unpin(
			&mut this.ordinal_five_futures, lw
		) {
			futures::Poll::Ready(Some(())) => made_progress_this_loop_iter = true,
			_ => {},
		}match futures::stream::StreamExt::poll_next_unpin(
			&mut this.only_generated_ordinal_futures, lw
		) {
			futures::Poll::Ready(Some(())) => made_progress_this_loop_iter = true,
			_ => {},
		}

		let poll_done = ::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			match ::futures::ready!(this.inner.channel().read(bytes, handles, lw)) {
				Ok(()) => {},
				Err(zx::Status::PEER_CLOSED) => return futures::Poll::Ready(Ok(true)),
				Err(e) => return futures::Poll::Ready(Err(fidl::Error::ServerRequestRead(e))),
			}

			{
				// A message has been received from the channel
				let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

				#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
				match header.ordinal {
						2005164903 | 2005164903 => {
							let mut req: () = fidl::encoding::Decodable::new_empty();
							fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
							let control_handle = SwitchingOrdinalsControlHandle {
								inner: this.inner.clone(),
							};
							this.ordinal_five_futures.push(
								this.server.ordinal_five(control_handle)
							);
							::futures::Poll::Ready(Ok(false))
						}
						667506719 | 667506719 => {
							let mut req: () = fidl::encoding::Decodable::new_empty();
							fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
							let control_handle = SwitchingOrdinalsControlHandle {
								inner: this.inner.clone(),
							};
							this.only_generated_ordinal_futures.push(
								this.server.only_generated_ordinal(control_handle)
							);
							::futures::Poll::Ready(Ok(false))
						}
					// TODO(cramertj) handle control/fileio messages
					_ => return futures::Poll::Ready(Err(fidl::Error::UnknownOrdinal {
						ordinal: header.ordinal,
						service_name: "unknown fidl", // TODO(cramertj)
					})),
				}
			}
		})?;

		match poll_done {
			::futures::Poll::Ready(true) => return ::futures::Poll::Ready(Ok(())),
			::futures::Poll::Ready(false) => {},
			::futures::Poll::Pending if made_progress_this_loop_iter => {}, // continue
			::futures::Poll::Pending => return ::futures::Poll::Pending,
		}
	}}
}

/// A Stream of incoming requests for SwitchingOrdinals
pub struct SwitchingOrdinalsRequestStream {
	inner: ::std::sync::Arc<fidl::ServeInner>,
	is_terminated: bool,
}

impl ::std::marker::Unpin for SwitchingOrdinalsRequestStream {}

impl futures::stream::FusedStream for SwitchingOrdinalsRequestStream {
	fn is_terminated(&self) -> bool {
		self.is_terminated
	}
}

impl fidl::endpoints::RequestStream for SwitchingOrdinalsRequestStream {
	type Service = SwitchingOrdinalsMarker;

	/// Consume a channel to make a SwitchingOrdinalsRequestStream
	fn from_channel(channel: ::fuchsia_async::Channel) -> Self {
		Self {
			inner: ::std::sync::Arc::new(fidl::ServeInner::new(channel)),
			is_terminated: false,
		}
	}

	/// ControlHandle for the remote connection
	type ControlHandle = SwitchingOrdinalsControlHandle;

	/// ControlHandle for the remote connection
	fn control_handle(&self) -> Self::ControlHandle {
		SwitchingOrdinalsControlHandle { inner: self.inner.clone() }
	}

	fn into_inner(self) -> (::std::sync::Arc<fidl::ServeInner>, bool) {
		(self.inner, self.is_terminated)
	}

	fn from_inner(inner: ::std::sync::Arc<fidl::ServeInner>, is_terminated: bool)
		-> Self
	{
		Self { inner, is_terminated }
	}
}

impl futures::Stream for SwitchingOrdinalsRequestStream {
	type Item = Result<SwitchingOrdinalsRequest, fidl::Error>;

	fn poll_next(mut self: ::std::pin::Pin<&mut Self>, lw: &futures::task::Waker)
		-> futures::Poll<Option<Self::Item>>
	{
		let this = &mut *self;
		if this.inner.poll_shutdown(lw) {
			this.is_terminated = true;
			return futures::Poll::Ready(None);
		}
		if this.is_terminated {
			panic!("polled SwitchingOrdinalsRequestStream after completion");
		}
		::fidl::encoding::with_tls_coding_bufs(|bytes, handles| {
			match this.inner.channel().read(bytes, handles, lw) {
				futures::Poll::Ready(Ok(())) => {},
				futures::Poll::Pending => return futures::Poll::Pending,
				futures::Poll::Ready(Err(zx::Status::PEER_CLOSED)) => {
					this.is_terminated = true;
					return futures::Poll::Ready(None)
				},
				futures::Poll::Ready(Err(e)) =>
				return futures::Poll::Ready(Some(Err(fidl::Error::ServerRequestRead(e)))),
			}

			// A message has been received from the channel
			let (header, _body_bytes) = fidl::encoding::decode_transaction_header(bytes)?;

			#[allow(unreachable_patterns)] // GenOrdinal and Ordinal can overlap
			futures::Poll::Ready(Some(match header.ordinal {
				2005164903 | 2005164903 => {
					let mut req: () = fidl::encoding::Decodable::new_empty();
					fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
					let control_handle = SwitchingOrdinalsControlHandle {
						inner: this.inner.clone(),
					};

					Ok(SwitchingOrdinalsRequest::OrdinalFive {control_handle,})
				}
				667506719 | 667506719 => {
					let mut req: () = fidl::encoding::Decodable::new_empty();
					fidl::encoding::Decoder::decode_into(_body_bytes, handles, &mut req)?;
					let control_handle = SwitchingOrdinalsControlHandle {
						inner: this.inner.clone(),
					};

					Ok(SwitchingOrdinalsRequest::OnlyGeneratedOrdinal {control_handle,})
				}
				_ => Err(fidl::Error::UnknownOrdinal {
					ordinal: header.ordinal,
					service_name: <SwitchingOrdinalsMarker as fidl::endpoints::ServiceMarker>::NAME,
				}),
			}))
		})
	}
}
pub enum SwitchingOrdinalsRequest {
	OrdinalFive {
		control_handle: SwitchingOrdinalsControlHandle,},
	OnlyGeneratedOrdinal {
		control_handle: SwitchingOrdinalsControlHandle,},
}

pub struct SwitchingOrdinalsEncoder;
impl SwitchingOrdinalsEncoder {
	pub fn encode_ordinal_five_request<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {tx_id: 0,flags: 0,
			ordinal: 2005164903,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}
	pub fn encode_only_generated_ordinal_request<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {tx_id: 0,flags: 0,
			ordinal: 667506719,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}
	pub fn encode_event_ordinal_fifteen_response<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {tx_id: 0,flags: 0,
			ordinal: 1467258273,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}
	pub fn encode_event_only_generated_ordinal_response<'a>(
		out_bytes: &'a mut Vec<u8>,
		out_handles: &'a mut Vec<zx::Handle>,) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {tx_id: 0,flags: 0,
			ordinal: 2146190926,
		};
		let mut body = ();
		let mut msg = fidl::encoding::TransactionMessage { header, body: &mut body };
		fidl::encoding::Encoder::encode(out_bytes, out_handles, &mut msg)?;
		Ok(())
	}}

#[deprecated(note = "use SwitchingOrdinalsRequestStream instead")]
pub struct SwitchingOrdinalsImpl<
	State,
OnOpen: FnMut(&mut State, SwitchingOrdinalsControlHandle) -> OnOpenFut,
OnOpenFut: futures::Future<Output = ()> + Send,
	OrdinalFive: FnMut(&mut State,SwitchingOrdinalsControlHandle) -> OrdinalFiveFut,
	OrdinalFiveFut: futures::Future<Output = ()> + Send,
	OnlyGeneratedOrdinal: FnMut(&mut State,SwitchingOrdinalsControlHandle) -> OnlyGeneratedOrdinalFut,
	OnlyGeneratedOrdinalFut: futures::Future<Output = ()> + Send,
> {
	pub state: State,
	pub on_open: OnOpen,
	pub ordinal_five: OrdinalFive,
	pub only_generated_ordinal: OnlyGeneratedOrdinal,
}

// Unpin is never projected for the Impl struct
impl<
	State,
OnOpen: FnMut(&mut State, SwitchingOrdinalsControlHandle) -> OnOpenFut,
OnOpenFut: futures::Future<Output = ()> + Send,
	OrdinalFive: FnMut(&mut State,SwitchingOrdinalsControlHandle) -> OrdinalFiveFut,
	OrdinalFiveFut: futures::Future<Output = ()> + Send,
	OnlyGeneratedOrdinal: FnMut(&mut State,SwitchingOrdinalsControlHandle) -> OnlyGeneratedOrdinalFut,
	OnlyGeneratedOrdinalFut: futures::Future<Output = ()> + Send,
> ::std::marker::Unpin for SwitchingOrdinalsImpl<State, OnOpen, OnOpenFut,
	OrdinalFive,
	OrdinalFiveFut,
	OnlyGeneratedOrdinal,
	OnlyGeneratedOrdinalFut,
>
{}

impl<
	State,
OnOpen: FnMut(&mut State, SwitchingOrdinalsControlHandle) -> OnOpenFut,
OnOpenFut: futures::Future<Output = ()> + Send,
	OrdinalFive: FnMut(&mut State,SwitchingOrdinalsControlHandle) -> OrdinalFiveFut,
	OrdinalFiveFut: futures::Future<Output = ()> + Send,
	OnlyGeneratedOrdinal: FnMut(&mut State,SwitchingOrdinalsControlHandle) -> OnlyGeneratedOrdinalFut,
	OnlyGeneratedOrdinalFut: futures::Future<Output = ()> + Send,
> SwitchingOrdinals for SwitchingOrdinalsImpl<State, OnOpen, OnOpenFut,
	OrdinalFive,
	OrdinalFiveFut,
	OnlyGeneratedOrdinal,
	OnlyGeneratedOrdinalFut,
>
{
	type OnOpenFut = OnOpenFut;
	fn on_open(&mut self, response_chan: SwitchingOrdinalsControlHandle) -> Self::OnOpenFut {
		(self.on_open)(&mut self.state, response_chan)
	}
	type OrdinalFiveFut = OrdinalFiveFut;
	fn ordinal_five (&mut self,
		response_chan: SwitchingOrdinalsControlHandle
	) -> Self::OrdinalFiveFut
	{
		(self.ordinal_five)(
			&mut self.state,
			response_chan
		)
	}
	
	type OnlyGeneratedOrdinalFut = OnlyGeneratedOrdinalFut;
	fn only_generated_ordinal (&mut self,
		response_chan: SwitchingOrdinalsControlHandle
	) -> Self::OnlyGeneratedOrdinalFut
	{
		(self.only_generated_ordinal)(
			&mut self.state,
			response_chan
		)
	}
	
}

#[derive(Clone)]
pub struct SwitchingOrdinalsControlHandle {
	inner: ::std::sync::Arc<fidl::ServeInner>,
}

impl ::std::ops::Deref for SwitchingOrdinalsControlHandle {
	type Target = ::std::sync::Arc<fidl::ServeInner>;

	fn deref(&self) -> &Self::Target {
		&self.inner
	}
}


impl SwitchingOrdinalsControlHandle {
	pub fn shutdown(&self) {
		self.inner.shutdown()
	}
	pub fn send_event_ordinal_fifteen(&self) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id: 0,
			flags: 0,
			ordinal: 1467258273,
		};

		let mut response = ();

		let mut msg = fidl::encoding::TransactionMessage {
			header,
			body: &mut response,
		};

		::fidl::encoding::with_tls_encoded(&mut msg, |bytes, handles| {
			self.inner.channel().write(&*bytes, &mut *handles).map_err(fidl::Error::ServerResponseWrite)
		})?;

		Ok(())
	}
	
	pub fn send_event_only_generated_ordinal(&self) -> Result<(), fidl::Error> {
		let header = fidl::encoding::TransactionHeader {
			tx_id: 0,
			flags: 0,
			ordinal: 2146190926,
		};

		let mut response = ();

		let mut msg = fidl::encoding::TransactionMessage {
			header,
			body: &mut response,
		};

		::fidl::encoding::with_tls_encoded(&mut msg, |bytes, handles| {
			self.inner.channel().write(&*bytes, &mut *handles).map_err(fidl::Error::ServerResponseWrite)
		})?;

		Ok(())
	}
	}

/* beginning of response types */
