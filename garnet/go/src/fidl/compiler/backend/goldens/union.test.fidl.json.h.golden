// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class Union;
class ReverseOrdinalUnion;
class NullableUnionStruct;
class FieldCollision;
class ExplicitUnion;

class Union final {
 public:
 static const fidl_type_t* FidlType;

  Union();
  ~Union();

  Union(Union&&);
  Union& operator=(Union&&);

  
  static Union WithPrimitive(int32_t&&);
  static Union WithStringNeedsConstructor(::std::string&&);
  static Union WithVectorStringAlsoNeedsConstructor(::std::vector<::std::string>&&);

  fidl_xunion_tag_t GetWriteOrdinal(fidl_xunion_tag_t ordinal);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  
    kPrimitive = 1,  // 0x1
    kStringNeedsConstructor = 2,  // 0x2
    kVectorStringAlsoNeedsConstructor = 3,  // 0x3
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<Union> New() { return ::std::make_unique<Union>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, Union* value, size_t offset);
  zx_status_t Clone(Union* result) const;

  bool has_invalid_tag() const {
    return tag_ == Invalid;
  }

  bool is_Primitive() const { return tag_ == Tag::kPrimitive; }
  
  int32_t& Primitive() {
    EnsureStorageInitialized(Tag::kPrimitive);
    return Primitive_;
  }
  
  const int32_t& Primitive() const {
    ZX_ASSERT(is_Primitive());
    return Primitive_;
  }
  Union& set_Primitive(int32_t value);

  bool is_StringNeedsConstructor() const { return tag_ == Tag::kStringNeedsConstructor; }
  
  ::std::string& StringNeedsConstructor() {
    EnsureStorageInitialized(Tag::kStringNeedsConstructor);
    return StringNeedsConstructor_;
  }
  
  const ::std::string& StringNeedsConstructor() const {
    ZX_ASSERT(is_StringNeedsConstructor());
    return StringNeedsConstructor_;
  }
  Union& set_StringNeedsConstructor(::std::string value);

  bool is_VectorStringAlsoNeedsConstructor() const { return tag_ == Tag::kVectorStringAlsoNeedsConstructor; }
  
  ::std::vector<::std::string>& VectorStringAlsoNeedsConstructor() {
    EnsureStorageInitialized(Tag::kVectorStringAlsoNeedsConstructor);
    return VectorStringAlsoNeedsConstructor_;
  }
  
  const ::std::vector<::std::string>& VectorStringAlsoNeedsConstructor() const {
    ZX_ASSERT(is_VectorStringAlsoNeedsConstructor());
    return VectorStringAlsoNeedsConstructor_;
  }
  Union& set_VectorStringAlsoNeedsConstructor(::std::vector<::std::string> value);

  Tag Which() const {
    
    return Tag(tag_);
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    return nullptr;
  }

  friend ::fidl::Equality<::test::name::Union>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    int32_t Primitive_;
    ::std::string StringNeedsConstructor_;
    ::std::vector<::std::string> VectorStringAlsoNeedsConstructor_;
  };
};

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return value.Clone(result);
}

using UnionPtr = ::std::unique_ptr<Union>;

class ReverseOrdinalUnion final {
 public:
 static const fidl_type_t* FidlType;

  ReverseOrdinalUnion();
  ~ReverseOrdinalUnion();

  ReverseOrdinalUnion(ReverseOrdinalUnion&&);
  ReverseOrdinalUnion& operator=(ReverseOrdinalUnion&&);

  
  static ReverseOrdinalUnion WithFirst(uint32_t&&);
  static ReverseOrdinalUnion WithSecond(uint32_t&&);

  fidl_xunion_tag_t GetWriteOrdinal(fidl_xunion_tag_t ordinal);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  
    kFirst = 1,  // 0x1
    kSecond = 2,  // 0x2
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<ReverseOrdinalUnion> New() { return ::std::make_unique<ReverseOrdinalUnion>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, ReverseOrdinalUnion* value, size_t offset);
  zx_status_t Clone(ReverseOrdinalUnion* result) const;

  bool has_invalid_tag() const {
    return tag_ == Invalid;
  }

  bool is_first() const { return tag_ == Tag::kFirst; }
  
  uint32_t& first() {
    EnsureStorageInitialized(Tag::kFirst);
    return first_;
  }
  
  const uint32_t& first() const {
    ZX_ASSERT(is_first());
    return first_;
  }
  ReverseOrdinalUnion& set_first(uint32_t value);

  bool is_second() const { return tag_ == Tag::kSecond; }
  
  uint32_t& second() {
    EnsureStorageInitialized(Tag::kSecond);
    return second_;
  }
  
  const uint32_t& second() const {
    ZX_ASSERT(is_second());
    return second_;
  }
  ReverseOrdinalUnion& set_second(uint32_t value);

  Tag Which() const {
    
    return Tag(tag_);
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    return nullptr;
  }

  friend ::fidl::Equality<::test::name::ReverseOrdinalUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    uint32_t first_;
    uint32_t second_;
  };
};

inline zx_status_t Clone(const ::test::name::ReverseOrdinalUnion& value,
                         ::test::name::ReverseOrdinalUnion* result) {
  return value.Clone(result);
}

using ReverseOrdinalUnionPtr = ::std::unique_ptr<ReverseOrdinalUnion>;

class NullableUnionStruct final {
 public:
  static const fidl_type_t* FidlType;
  
  ::std::unique_ptr<Union> the_union{};

  static inline ::std::unique_ptr<NullableUnionStruct> New() { return ::std::make_unique<NullableUnionStruct>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, NullableUnionStruct* value, size_t _offset);
  zx_status_t Clone(NullableUnionStruct* result) const;
};

inline zx_status_t Clone(const ::test::name::NullableUnionStruct& _value,
                         ::test::name::NullableUnionStruct* _result) {
  return _value.Clone(_result);
}

using NullableUnionStructPtr = ::std::unique_ptr<NullableUnionStruct>;

class FieldCollision final {
 public:
 static const fidl_type_t* FidlType;

  FieldCollision();
  ~FieldCollision();

  FieldCollision(FieldCollision&&);
  FieldCollision& operator=(FieldCollision&&);

  
  static FieldCollision WithFieldCollisionTag(int32_t&&);

  fidl_xunion_tag_t GetWriteOrdinal(fidl_xunion_tag_t ordinal);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  
    kFieldCollisionTag = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<FieldCollision> New() { return ::std::make_unique<FieldCollision>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, FieldCollision* value, size_t offset);
  zx_status_t Clone(FieldCollision* result) const;

  bool has_invalid_tag() const {
    return tag_ == Invalid;
  }

  bool is_field_collision_tag() const { return tag_ == Tag::kFieldCollisionTag; }
  
  int32_t& field_collision_tag() {
    EnsureStorageInitialized(Tag::kFieldCollisionTag);
    return field_collision_tag_;
  }
  
  const int32_t& field_collision_tag() const {
    ZX_ASSERT(is_field_collision_tag());
    return field_collision_tag_;
  }
  FieldCollision& set_field_collision_tag(int32_t value);

  Tag Which() const {
    
    return Tag(tag_);
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    return nullptr;
  }

  friend ::fidl::Equality<::test::name::FieldCollision>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    int32_t field_collision_tag_;
  };
};

inline zx_status_t Clone(const ::test::name::FieldCollision& value,
                         ::test::name::FieldCollision* result) {
  return value.Clone(result);
}

using FieldCollisionPtr = ::std::unique_ptr<FieldCollision>;

class ExplicitUnion final {
 public:
 static const fidl_type_t* FidlType;

  ExplicitUnion();
  ~ExplicitUnion();

  ExplicitUnion(ExplicitUnion&&);
  ExplicitUnion& operator=(ExplicitUnion&&);

  
  static ExplicitUnion WithPrimitive(int32_t&&);
  static ExplicitUnion WithStringNeedsConstructor(::std::string&&);

  fidl_xunion_tag_t GetWriteOrdinal(fidl_xunion_tag_t ordinal);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
  
    kPrimitive = 1,  // 0x1
    kStringNeedsConstructor = 3,  // 0x3
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<ExplicitUnion> New() { return ::std::make_unique<ExplicitUnion>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, ExplicitUnion* value, size_t offset);
  zx_status_t Clone(ExplicitUnion* result) const;

  bool has_invalid_tag() const {
    return tag_ == Invalid;
  }

  bool is_Primitive() const { return tag_ == Tag::kPrimitive; }
  
  int32_t& Primitive() {
    EnsureStorageInitialized(Tag::kPrimitive);
    return Primitive_;
  }
  
  const int32_t& Primitive() const {
    ZX_ASSERT(is_Primitive());
    return Primitive_;
  }
  ExplicitUnion& set_Primitive(int32_t value);

  bool is_StringNeedsConstructor() const { return tag_ == Tag::kStringNeedsConstructor; }
  
  ::std::string& StringNeedsConstructor() {
    EnsureStorageInitialized(Tag::kStringNeedsConstructor);
    return StringNeedsConstructor_;
  }
  
  const ::std::string& StringNeedsConstructor() const {
    ZX_ASSERT(is_StringNeedsConstructor());
    return StringNeedsConstructor_;
  }
  ExplicitUnion& set_StringNeedsConstructor(::std::string value);

  Tag Which() const {
    
    return Tag(tag_);
    
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal() only when you need
  // access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const {
    return tag_;
  }

  const std::vector<uint8_t>* UnknownData() const {
    return nullptr;
  }

  friend ::fidl::Equality<::test::name::ExplicitUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    int32_t Primitive_;
    ::std::string StringNeedsConstructor_;
  };
};

inline zx_status_t Clone(const ::test::name::ExplicitUnion& value,
                         ::test::name::ExplicitUnion* result) {
  return value.Clone(result);
}

using ExplicitUnionPtr = ::std::unique_ptr<ExplicitUnion>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct IsFidlXUnion<::test::name::Union> : public std::true_type {};

template <>
struct CodingTraits<::test::name::Union>
    : public EncodableCodingTraits<::test::name::Union, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::Union>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::Union>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::Union>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::Union);

    ::test::name::Union::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::Union> {
  static inline bool Equals(const ::test::name::Union& _lhs, const ::test::name::Union& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(::test::name::Union::Tag::Invalid):
        return true;
      case ::test::name::Union::Tag::kPrimitive:
        return ::fidl::Equals(_lhs.Primitive_, _rhs.Primitive_);
      case ::test::name::Union::Tag::kStringNeedsConstructor:
        return ::fidl::Equals(_lhs.StringNeedsConstructor_, _rhs.StringNeedsConstructor_);
      case ::test::name::Union::Tag::kVectorStringAlsoNeedsConstructor:
        return ::fidl::Equals(_lhs.VectorStringAlsoNeedsConstructor_, _rhs.VectorStringAlsoNeedsConstructor_);
      
      default:
        return false;
      }
    }
};
template <>
struct IsFidlXUnion<::test::name::ReverseOrdinalUnion> : public std::true_type {};

template <>
struct CodingTraits<::test::name::ReverseOrdinalUnion>
    : public EncodableCodingTraits<::test::name::ReverseOrdinalUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::ReverseOrdinalUnion>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::ReverseOrdinalUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::ReverseOrdinalUnion>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::ReverseOrdinalUnion);

    ::test::name::ReverseOrdinalUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::ReverseOrdinalUnion& value,
                         ::test::name::ReverseOrdinalUnion* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::ReverseOrdinalUnion> {
  static inline bool Equals(const ::test::name::ReverseOrdinalUnion& _lhs, const ::test::name::ReverseOrdinalUnion& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(::test::name::ReverseOrdinalUnion::Tag::Invalid):
        return true;
      case ::test::name::ReverseOrdinalUnion::Tag::kFirst:
        return ::fidl::Equals(_lhs.first_, _rhs.first_);
      case ::test::name::ReverseOrdinalUnion::Tag::kSecond:
        return ::fidl::Equals(_lhs.second_, _rhs.second_);
      
      default:
        return false;
      }
    }
};
template <>
struct CodingTraits<::test::name::NullableUnionStruct>
    : public EncodableCodingTraits<::test::name::NullableUnionStruct, 24> {};

inline zx_status_t Clone(const ::test::name::NullableUnionStruct& value,
                         ::test::name::NullableUnionStruct* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::NullableUnionStruct> {
  static inline bool Equals(const ::test::name::NullableUnionStruct& _lhs, const ::test::name::NullableUnionStruct& _rhs) {
    if (!::fidl::Equals(_lhs.the_union, _rhs.the_union)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<::test::name::FieldCollision> : public std::true_type {};

template <>
struct CodingTraits<::test::name::FieldCollision>
    : public EncodableCodingTraits<::test::name::FieldCollision, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::FieldCollision>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::FieldCollision>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::FieldCollision>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::FieldCollision);

    ::test::name::FieldCollision::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::FieldCollision& value,
                         ::test::name::FieldCollision* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::FieldCollision> {
  static inline bool Equals(const ::test::name::FieldCollision& _lhs, const ::test::name::FieldCollision& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(::test::name::FieldCollision::Tag::Invalid):
        return true;
      case ::test::name::FieldCollision::Tag::kFieldCollisionTag:
        return ::fidl::Equals(_lhs.field_collision_tag_, _rhs.field_collision_tag_);
      
      default:
        return false;
      }
    }
};
template <>
struct IsFidlXUnion<::test::name::ExplicitUnion> : public std::true_type {};

template <>
struct CodingTraits<::test::name::ExplicitUnion>
    : public EncodableCodingTraits<::test::name::ExplicitUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::ExplicitUnion>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder, std::unique_ptr<::test::name::ExplicitUnion>* value, size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder, std::unique_ptr<::test::name::ExplicitUnion>* value, size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::ExplicitUnion);

    ::test::name::ExplicitUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::ExplicitUnion& value,
                         ::test::name::ExplicitUnion* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::ExplicitUnion> {
  static inline bool Equals(const ::test::name::ExplicitUnion& _lhs, const ::test::name::ExplicitUnion& _rhs) {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(::test::name::ExplicitUnion::Tag::Invalid):
        return true;
      case ::test::name::ExplicitUnion::Tag::kPrimitive:
        return ::fidl::Equals(_lhs.Primitive_, _rhs.Primitive_);
      case ::test::name::ExplicitUnion::Tag::kStringNeedsConstructor:
        return ::fidl::Equals(_lhs.StringNeedsConstructor_, _rhs.StringNeedsConstructor_);
      
      default:
        return false;
      }
    }
};}  // namespace fidl
