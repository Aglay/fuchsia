// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class Union;
class FieldCollision;
class ExplicitUnion;

class Union final {
 public:
  Union();
  ~Union();

  Union(Union&&);
  Union& operator=(Union&&);

  enum class Tag : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
    kVectorStringAlsoNeedsConstructor = 2,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  enum __attribute__((enum_extensibility(closed))) XUnionTag : fidl_xunion_tag_t {
    kPrimitive = 1,  // 0x1
    kStringNeedsConstructor = 2,  // 0x2
    kVectorStringAlsoNeedsConstructor = 3,  // 0x3
  };

  static inline ::std::unique_ptr<Union> New() { return ::std::make_unique<Union>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  void EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Union* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, Union* _value, size_t _offset);
  zx_status_t Clone(Union* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_Primitive() const { return Which() == Tag(0); }
  
  int32_t& Primitive() {
    if (!is_Primitive()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const int32_t& Primitive() const { return value_.template get<0 + 1>(); }
  void set_Primitive(int32_t value);

  bool is_StringNeedsConstructor() const { return Which() == Tag(1); }
  
  ::std::string& StringNeedsConstructor() {
    if (!is_StringNeedsConstructor()) {
      value_.emplace<1 + 1>();
    }
    return value_.template get<1 + 1>();
  }
  
  const ::std::string& StringNeedsConstructor() const { return value_.template get<1 + 1>(); }
  void set_StringNeedsConstructor(::std::string value);

  bool is_VectorStringAlsoNeedsConstructor() const { return Which() == Tag(2); }
  
  ::std::vector<::std::string>& VectorStringAlsoNeedsConstructor() {
    if (!is_VectorStringAlsoNeedsConstructor()) {
      value_.emplace<2 + 1>();
    }
    return value_.template get<2 + 1>();
  }
  
  const ::std::vector<::std::string>& VectorStringAlsoNeedsConstructor() const { return value_.template get<2 + 1>(); }
  void set_VectorStringAlsoNeedsConstructor(::std::vector<::std::string> value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:
  XUnionTag WhichXUnionTag() const {
    switch (Which()) {
    case Tag::kPrimitive: return XUnionTag::kPrimitive;
    case Tag::kStringNeedsConstructor: return XUnionTag::kStringNeedsConstructor;
    case Tag::kVectorStringAlsoNeedsConstructor: return XUnionTag::kVectorStringAlsoNeedsConstructor;
    case Tag::Invalid: return XUnionTag(0);
    }
  }

  using Variant = fit::internal::variant<fit::internal::monostate, int32_t, ::std::string, ::std::vector<::std::string>>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return value.Clone(result);
}

using UnionPtr = ::std::unique_ptr<Union>;

class FieldCollision final {
 public:
  FieldCollision();
  ~FieldCollision();

  FieldCollision(FieldCollision&&);
  FieldCollision& operator=(FieldCollision&&);

  enum class Tag : fidl_union_tag_t {
    kFieldCollisionTag = 0,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  enum __attribute__((enum_extensibility(closed))) XUnionTag : fidl_xunion_tag_t {
    kFieldCollisionTag = 1,  // 0x1
  };

  static inline ::std::unique_ptr<FieldCollision> New() { return ::std::make_unique<FieldCollision>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  void EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, FieldCollision* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, FieldCollision* _value, size_t _offset);
  zx_status_t Clone(FieldCollision* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_field_collision_tag() const { return Which() == Tag(0); }
  
  int32_t& field_collision_tag() {
    if (!is_field_collision_tag()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const int32_t& field_collision_tag() const { return value_.template get<0 + 1>(); }
  void set_field_collision_tag(int32_t value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:
  XUnionTag WhichXUnionTag() const {
    switch (Which()) {
    case Tag::kFieldCollisionTag: return XUnionTag::kFieldCollisionTag;
    case Tag::Invalid: return XUnionTag(0);
    }
  }

  using Variant = fit::internal::variant<fit::internal::monostate, int32_t>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::name::FieldCollision& value,
                         ::test::name::FieldCollision* result) {
  return value.Clone(result);
}

using FieldCollisionPtr = ::std::unique_ptr<FieldCollision>;

class ExplicitUnion final {
 public:
  ExplicitUnion();
  ~ExplicitUnion();

  ExplicitUnion(ExplicitUnion&&);
  ExplicitUnion& operator=(ExplicitUnion&&);

  enum class Tag : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  enum __attribute__((enum_extensibility(closed))) XUnionTag : fidl_xunion_tag_t {
    kPrimitive = 1,  // 0x1
    kStringNeedsConstructor = 3,  // 0x3
  };

  static inline ::std::unique_ptr<ExplicitUnion> New() { return ::std::make_unique<ExplicitUnion>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  void EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, ExplicitUnion* _value, size_t _offset);
  static void DecodeFromXUnionBytes(::fidl::Decoder* _decoder, ExplicitUnion* _value, size_t _offset);
  zx_status_t Clone(ExplicitUnion* result) const;

  bool has_invalid_tag() const { return Which() == Tag::Invalid; }

  bool is_Primitive() const { return Which() == Tag(0); }
  
  int32_t& Primitive() {
    if (!is_Primitive()) {
      value_.emplace<0 + 1>();
    }
    return value_.template get<0 + 1>();
  }
  
  const int32_t& Primitive() const { return value_.template get<0 + 1>(); }
  void set_Primitive(int32_t value);

  bool is_StringNeedsConstructor() const { return Which() == Tag(1); }
  
  ::std::string& StringNeedsConstructor() {
    if (!is_StringNeedsConstructor()) {
      value_.emplace<1 + 1>();
    }
    return value_.template get<1 + 1>();
  }
  
  const ::std::string& StringNeedsConstructor() const { return value_.template get<1 + 1>(); }
  void set_StringNeedsConstructor(::std::string value);

  Tag Which() const {
    size_t index = value_.index();
    if (index == 0) {
      return Tag::Invalid;
    } else {
      return Tag(index - 1);
    }
  }

 private:
  XUnionTag WhichXUnionTag() const {
    switch (Which()) {
    case Tag::kPrimitive: return XUnionTag::kPrimitive;
    case Tag::kStringNeedsConstructor: return XUnionTag::kStringNeedsConstructor;
    case Tag::Invalid: return XUnionTag(0);
    }
  }

  using Variant = fit::internal::variant<fit::internal::monostate, int32_t, ::std::string>;
  Variant value_;
};

inline zx_status_t Clone(const ::test::name::ExplicitUnion& value,
                         ::test::name::ExplicitUnion* result) {
  return value.Clone(result);
}

using ExplicitUnionPtr = ::std::unique_ptr<ExplicitUnion>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct IsFidlUnion<::test::name::Union> : public std::true_type {};

template <>
struct CodingTraits<::test::name::Union>
    : public EncodableCodingTraits<::test::name::Union, 24, 24> {};

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::Union> {
  static inline bool Equals(const ::test::name::Union& _lhs, const ::test::name::Union& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::name::Union::Tag::kPrimitive:
	return ::fidl::Equals(_lhs.Primitive(), _rhs.Primitive());
      case ::test::name::Union::Tag::kStringNeedsConstructor:
	return ::fidl::Equals(_lhs.StringNeedsConstructor(), _rhs.StringNeedsConstructor());
      case ::test::name::Union::Tag::kVectorStringAlsoNeedsConstructor:
	return ::fidl::Equals(_lhs.VectorStringAlsoNeedsConstructor(), _rhs.VectorStringAlsoNeedsConstructor());
      case ::test::name::Union::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct IsFidlUnion<::test::name::FieldCollision> : public std::true_type {};

template <>
struct CodingTraits<::test::name::FieldCollision>
    : public EncodableCodingTraits<::test::name::FieldCollision, 8, 24> {};

inline zx_status_t Clone(const ::test::name::FieldCollision& value,
                         ::test::name::FieldCollision* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::FieldCollision> {
  static inline bool Equals(const ::test::name::FieldCollision& _lhs, const ::test::name::FieldCollision& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::name::FieldCollision::Tag::kFieldCollisionTag:
	return ::fidl::Equals(_lhs.field_collision_tag(), _rhs.field_collision_tag());
      case ::test::name::FieldCollision::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};
template <>
struct IsFidlUnion<::test::name::ExplicitUnion> : public std::true_type {};

template <>
struct CodingTraits<::test::name::ExplicitUnion>
    : public EncodableCodingTraits<::test::name::ExplicitUnion, 24, 24> {};

inline zx_status_t Clone(const ::test::name::ExplicitUnion& value,
                         ::test::name::ExplicitUnion* result) {
  return ::test::name::Clone(value, result);
}

template<>
struct Equality<::test::name::ExplicitUnion> {
  static inline bool Equals(const ::test::name::ExplicitUnion& _lhs, const ::test::name::ExplicitUnion& _rhs) {
    if (_lhs.Which() != _rhs.Which()) {
      return false;
    }
    switch (_lhs.Which()) {
      case ::test::name::ExplicitUnion::Tag::kPrimitive:
	return ::fidl::Equals(_lhs.Primitive(), _rhs.Primitive());
      case ::test::name::ExplicitUnion::Tag::kStringNeedsConstructor:
	return ::fidl::Equals(_lhs.StringNeedsConstructor(), _rhs.StringNeedsConstructor());
      case ::test::name::ExplicitUnion::Tag::Invalid:
	return true;
      default:
	return false;
    }
  }
};}  // namespace fidl
