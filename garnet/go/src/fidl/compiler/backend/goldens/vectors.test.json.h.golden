// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"

namespace fidl {
namespace test {
namespace json {

class ExampleUseOfVectors;

class ExampleUseOfVectors final {
 public:
  static const fidl_type_t* FidlType;

  ::std::vector<uint8_t> vector_of_uint8{};

  ::std::vector<::std::vector<bool>> vector_of_vector_of_bool{};

  static inline ::std::unique_ptr<ExampleUseOfVectors> New() {
    return ::std::make_unique<ExampleUseOfVectors>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, ExampleUseOfVectors* value,
                     size_t _offset);
  zx_status_t Clone(ExampleUseOfVectors* result) const;
};

inline zx_status_t Clone(const ::fidl::test::json::ExampleUseOfVectors& _value,
                         ::fidl::test::json::ExampleUseOfVectors* _result) {
  return _value.Clone(_result);
}

using ExampleUseOfVectorsPtr = ::std::unique_ptr<ExampleUseOfVectors>;
}  // namespace json
}  // namespace test
}  // namespace fidl
namespace fidl {

template <>
struct CodingTraits<::fidl::test::json::ExampleUseOfVectors>
    : public EncodableCodingTraits<::fidl::test::json::ExampleUseOfVectors,
                                   32> {};

template <>
struct HasPadding<::fidl::test::json::ExampleUseOfVectors>
    : public std::true_type {};

template <>
struct IsMemcpyCompatible<::fidl::test::json::ExampleUseOfVectors>
    : public internal::BoolConstant<
          !HasPadding<::fidl::test::json::ExampleUseOfVectors>::value &&
          IsMemcpyCompatible<::std::vector<::std::vector<bool>>>::value &&
          IsMemcpyCompatible<::std::vector<uint8_t>>::value> {};

inline zx_status_t Clone(const ::fidl::test::json::ExampleUseOfVectors& value,
                         ::fidl::test::json::ExampleUseOfVectors* result) {
  return ::fidl::test::json::Clone(value, result);
}

template <>
struct Equality<::fidl::test::json::ExampleUseOfVectors> {
  bool operator()(const ::fidl::test::json::ExampleUseOfVectors& _lhs,
                  const ::fidl::test::json::ExampleUseOfVectors& _rhs) const {
    if (!::fidl::Equals(_lhs.vector_of_uint8, _rhs.vector_of_uint8)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.vector_of_vector_of_bool,
                        _rhs.vector_of_vector_of_bool)) {
      return false;
    }
    return true;
  }
};
}  // namespace fidl
