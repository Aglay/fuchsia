// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/fit/optional.h>

#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

struct ExampleUseOfVectors;

extern "C" const fidl_type_t fidl_test_json_ExampleUseOfVectorsTable;

struct ExampleUseOfVectors {
  static constexpr const fidl_type_t* Type =
      &fidl_test_json_ExampleUseOfVectorsTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 32;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;
  static constexpr bool IsResource = false;

  ::fidl::VectorView<uint8_t> vector_of_uint8 = {};

  ::fidl::VectorView<::fidl::VectorView<bool>> vector_of_vector_of_bool = {};
  void _CloseHandles();
};

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fidl::test::json::ExampleUseOfVectors>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::json::ExampleUseOfVectors>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::json::ExampleUseOfVectors>);
static_assert(offsetof(::llcpp::fidl::test::json::ExampleUseOfVectors,
                       vector_of_uint8) == 0);
static_assert(offsetof(::llcpp::fidl::test::json::ExampleUseOfVectors,
                       vector_of_vector_of_bool) == 16);
static_assert(sizeof(::llcpp::fidl::test::json::ExampleUseOfVectors) ==
              ::llcpp::fidl::test::json::ExampleUseOfVectors::PrimarySize);

}  // namespace fidl

namespace llcpp {

namespace fidl {
namespace test {
namespace json {}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
