// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"

namespace test {
namespace name {

class Table;
class Struct;
class StrictUnion;
#ifdef __Fuchsia__

/// interface comment #1
///
/// interface comment #3
class Interface;
using InterfacePtr = ::fidl::InterfacePtr<Interface>;
class Interface_Proxy;
class Interface_Stub;
class Interface_EventSender;
class Interface_Sync;
using InterfaceSyncPtr = ::fidl::SynchronousInterfacePtr<Interface>;
class Interface_SyncProxy;
using InterfaceHandle = ::fidl::InterfaceHandle<Interface>;
namespace internal {
constexpr uint64_t kInterface_Method_Ordinal = 0x60e700e002995ef8lu;
constexpr uint64_t kInterface_OnEvent_Ordinal = 0x914c226136244edlu;

}  // namespace internal
#endif  // __Fuchsia__
#ifdef __Fuchsia__
class Service;
#endif  // __Fuchsia

/// strict enum comment #1.
///
/// strict enum comment #2.
enum class MyStrictEnum : uint32_t {

  /// FOO member comment #1
  ///
  /// FOO member comment #3
  FOO = 1u,

  /// BAR member comment #1
  ///
  /// BAR member comment #3
  BAR = 2u,
};

inline zx_status_t Clone(::test::name::MyStrictEnum value,
                         ::test::name::MyStrictEnum* result) {
  *result = value;
  return ZX_OK;
}

/// strict bits comment #1
///
/// strict bits comment #2
enum class MyStrictBits : uint32_t {

  /// MY_FIRST_BIT member comment #1
  ///
  /// MY_FIRST_BIT member comment #3
  MY_FIRST_BIT = 1u,

  /// MY_OTHER_BIT member comment #1
  ///
  /// MY_OTHER_BIT member comment #3
  MY_OTHER_BIT = 2u,
};

const static MyStrictBits MyStrictBitsMask = static_cast<MyStrictBits>(3u);

inline zx_status_t Clone(::test::name::MyStrictBits value,
                         ::test::name::MyStrictBits* result) {
  *result = value;
  return ZX_OK;
}

constexpr inline ::test::name::MyStrictBits operator|(
    ::test::name::MyStrictBits _lhs, ::test::name::MyStrictBits _rhs) {
  return static_cast<::test::name::MyStrictBits>(static_cast<uint32_t>(_lhs) |
                                                 static_cast<uint32_t>(_rhs));
}

constexpr inline ::test::name::MyStrictBits& operator|=(
    ::test::name::MyStrictBits& _lhs, ::test::name::MyStrictBits _rhs) {
  _lhs = _lhs | _rhs;
  return _lhs;
}

constexpr inline ::test::name::MyStrictBits operator&(
    ::test::name::MyStrictBits _lhs, ::test::name::MyStrictBits _rhs) {
  return static_cast<::test::name::MyStrictBits>(static_cast<uint32_t>(_lhs) &
                                                 static_cast<uint32_t>(_rhs));
}

constexpr inline ::test::name::MyStrictBits& operator&=(
    ::test::name::MyStrictBits& _lhs, ::test::name::MyStrictBits _rhs) {
  _lhs = _lhs & _rhs;
  return _lhs;
}

constexpr inline ::test::name::MyStrictBits operator^(
    ::test::name::MyStrictBits _lhs, ::test::name::MyStrictBits _rhs) {
  return static_cast<::test::name::MyStrictBits>(static_cast<uint32_t>(_lhs) ^
                                                 static_cast<uint32_t>(_rhs));
}

constexpr inline ::test::name::MyStrictBits& operator^=(
    ::test::name::MyStrictBits& _lhs, ::test::name::MyStrictBits _rhs) {
  _lhs = _lhs ^ _rhs;
  return _lhs;
}

constexpr inline ::test::name::MyStrictBits operator~(
    ::test::name::MyStrictBits _value) {
  return static_cast<::test::name::MyStrictBits>(
      ~static_cast<uint32_t>(_value) & static_cast<uint32_t>(MyStrictBitsMask));
}

/// flexible enum comment #1.
///
/// flexible enum comment #2.
enum class MyFlexibleEnum : uint32_t {

  /// FOO member comment #1
  ///
  /// FOO member comment #3
  FOO = 1u,

  /// BAR member comment #1
  ///
  /// BAR member comment #3
  BAR = 2u,
};

inline zx_status_t Clone(::test::name::MyFlexibleEnum value,
                         ::test::name::MyFlexibleEnum* result) {
  *result = value;
  return ZX_OK;
}

/// flexible bits comment #1
///
/// flexible bits comment #2
enum class MyFlexibleBits : uint32_t {

  /// MY_FIRST_BIT member comment #1
  ///
  /// MY_FIRST_BIT member comment #3
  MY_FIRST_BIT = 1u,

  /// MY_OTHER_BIT member comment #1
  ///
  /// MY_OTHER_BIT member comment #3
  MY_OTHER_BIT = 2u,
};

const static MyFlexibleBits MyFlexibleBitsMask =
    static_cast<MyFlexibleBits>(3u);

inline zx_status_t Clone(::test::name::MyFlexibleBits value,
                         ::test::name::MyFlexibleBits* result) {
  *result = value;
  return ZX_OK;
}

constexpr inline ::test::name::MyFlexibleBits operator|(
    ::test::name::MyFlexibleBits _lhs, ::test::name::MyFlexibleBits _rhs) {
  return static_cast<::test::name::MyFlexibleBits>(static_cast<uint32_t>(_lhs) |
                                                   static_cast<uint32_t>(_rhs));
}

constexpr inline ::test::name::MyFlexibleBits& operator|=(
    ::test::name::MyFlexibleBits& _lhs, ::test::name::MyFlexibleBits _rhs) {
  _lhs = _lhs | _rhs;
  return _lhs;
}

constexpr inline ::test::name::MyFlexibleBits operator&(
    ::test::name::MyFlexibleBits _lhs, ::test::name::MyFlexibleBits _rhs) {
  return static_cast<::test::name::MyFlexibleBits>(static_cast<uint32_t>(_lhs) &
                                                   static_cast<uint32_t>(_rhs));
}

constexpr inline ::test::name::MyFlexibleBits& operator&=(
    ::test::name::MyFlexibleBits& _lhs, ::test::name::MyFlexibleBits _rhs) {
  _lhs = _lhs & _rhs;
  return _lhs;
}

constexpr inline ::test::name::MyFlexibleBits operator^(
    ::test::name::MyFlexibleBits _lhs, ::test::name::MyFlexibleBits _rhs) {
  return static_cast<::test::name::MyFlexibleBits>(static_cast<uint32_t>(_lhs) ^
                                                   static_cast<uint32_t>(_rhs));
}

constexpr inline ::test::name::MyFlexibleBits& operator^=(
    ::test::name::MyFlexibleBits& _lhs, ::test::name::MyFlexibleBits _rhs) {
  _lhs = _lhs ^ _rhs;
  return _lhs;
}

constexpr inline ::test::name::MyFlexibleBits operator~(
    ::test::name::MyFlexibleBits _value) {
  return static_cast<::test::name::MyFlexibleBits>(
      ~static_cast<uint32_t>(_value) &
      static_cast<uint32_t>(MyFlexibleBitsMask));
}

class FlexibleUnion;

/// table comment #1
///
/// table comment #3
class Table final {
 public:
  static const fidl_type_t* FidlType;
  /// Returns whether no field is set.
  bool IsEmpty() const;

  /// table field comment #1
  ///
  /// table field comment #3
  const int32_t& Field() const {
    ZX_ASSERT(field_presence_.IsSet<0>());
    return Field_value_.value;
  }
  bool has_Field() const { return field_presence_.IsSet<0>(); }

  /// table field comment #1
  ///
  /// table field comment #3
  int32_t* mutable_Field() {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&Field_value_.value);
    }
    return &Field_value_.value;
  }
  Table& set_Field(int32_t _value) {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&Field_value_.value, std::move(_value));
    } else {
      Field_value_.value = std::move(_value);
    }
    return *this;
  }
  void clear_Field() {
    if (!field_presence_.IsSet<0>()) {
      return;
    }
    field_presence_.Clear<0>();
    Destruct(&Field_value_.value);
  }

  Table();
  Table(Table&& other);
  ~Table();
  Table& operator=(Table&& other);

  static inline ::std::unique_ptr<Table> New() {
    return ::std::make_unique<Table>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Table* _value, size_t _offset);
  zx_status_t Clone(Table* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }

  ::fidl::internal::BitSet<1> field_presence_;
  union ValueUnion_Field {
    ValueUnion_Field() {}
    ~ValueUnion_Field() {}

    int32_t value;
  };
  ValueUnion_Field Field_value_;
};

using TablePtr = ::std::unique_ptr<Table>;

/// struct comment #1
///
/// struct comment #3
class Struct final {
 public:
  static const fidl_type_t* FidlType;

  /// struct member comment #1
  ///
  /// struct member comment #3
  int32_t Field{};

  static inline ::std::unique_ptr<Struct> New() {
    return ::std::make_unique<Struct>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Struct* value, size_t _offset);
  zx_status_t Clone(Struct* result) const;
};

inline zx_status_t Clone(const ::test::name::Struct& _value,
                         ::test::name::Struct* _result) {
  return _value.Clone(_result);
}

using StructPtr = ::std::unique_ptr<Struct>;

/// strict union comment #1
///
/// strict union comment #3
class StrictUnion final {
 public:
  static const fidl_type_t* FidlType;

  StrictUnion();
  ~StrictUnion();

  StrictUnion(StrictUnion&&);
  StrictUnion& operator=(StrictUnion&&);

  static StrictUnion WithField(int32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {

    kField = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<StrictUnion> New() {
    return ::std::make_unique<StrictUnion>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, StrictUnion* value,
                     size_t offset);
  zx_status_t Clone(StrictUnion* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_Field() const { return tag_ == Tag::kField; }

  /// union member comment #1
  ///
  /// union member comment #3
  int32_t& Field() {
    EnsureStorageInitialized(Tag::kField);
    return Field_;
  }

  /// union member comment #1
  ///
  /// union member comment #3
  const int32_t& Field() const {
    ZX_ASSERT(is_Field());
    return Field_;
  }
  StrictUnion& set_Field(int32_t value);

  Tag Which() const { return Tag(tag_); }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  friend ::fidl::Equality<::test::name::StrictUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    int32_t Field_;
  };
};

inline zx_status_t Clone(const ::test::name::StrictUnion& value,
                         ::test::name::StrictUnion* result) {
  return value.Clone(result);
}

using StrictUnionPtr = ::std::unique_ptr<StrictUnion>;
#ifdef __Fuchsia__

/// interface comment #1
///
/// interface comment #3
class Interface {
 public:
  using Proxy_ = Interface_Proxy;
  using Stub_ = Interface_Stub;
  using EventSender_ = Interface_EventSender;
  using Sync_ = Interface_Sync;
  virtual ~Interface();

  /// method comment #1
  ///
  /// method comment #3
  virtual void Method() = 0;
  using OnEventCallback = fit::function<void()>;
};

class Interface_RequestDecoder {
 public:
  Interface_RequestDecoder() = default;
  virtual ~Interface_RequestDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal, bool* out_needs_response);
  zx_status_t Decode_(::fidl::Message request) {
    bool needs_response;
    const fidl_type_t* request_type =
        GetType(request.ordinal(), &needs_response);
    if (request_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = request.Decode(request_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(request, request_type, error_msg);
      return status;
    }
    ::fidl::Decoder request_decoder(std::move(request));
    switch (request.ordinal()) {
      case internal::kInterface_Method_Ordinal: {
        Method();
        break;
      }
      default: {
        status = ZX_ERR_NOT_SUPPORTED;
        break;
      }
    }
    return status;
  }
  virtual void Method() = 0;
};

class Interface_RequestEncoder {
 public:
  static ::fidl::Message Method(::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));

    bool needs_response;  // unused
    fidl_trace(DidHLCPPEncode,
               Interface_RequestDecoder::GetType(
                   internal::kInterface_Method_Ordinal, &needs_response),
               _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
               _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};

class Interface_ResponseDecoder {
 public:
  Interface_ResponseDecoder() = default;
  virtual ~Interface_ResponseDecoder() = default;
  static const fidl_type_t* GetType(uint64_t ordinal);
  zx_status_t Decode_(::fidl::Message response) {
    const fidl_type_t* response_type = GetType(response.ordinal());
    if (response_type == nullptr) {
      return ZX_ERR_NOT_SUPPORTED;
    }
    const char* error_msg = nullptr;
    zx_status_t status = response.Decode(response_type, &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(response, response_type, error_msg);
      return status;
    }
    ::fidl::Decoder response_decoder(std::move(response));
    switch (response.ordinal()) {
      case internal::kInterface_OnEvent_Ordinal: {
        OnEvent();
        break;
      }
      default: {
        break;
      }
    }
    return ZX_OK;
  }
  virtual void OnEvent() = 0;
};

class Interface_ResponseEncoder {
 public:
  static ::fidl::Message OnEvent(::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode,
               Interface_ResponseDecoder::GetType(
                   internal::kInterface_OnEvent_Ordinal),
               _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
               _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
};

class Interface_EventSender {
 public:
  virtual ~Interface_EventSender();
  virtual void OnEvent() = 0;
};

class Interface_Sync {
 public:
  using Proxy_ = Interface_SyncProxy;
  virtual ~Interface_Sync();
  virtual zx_status_t Method() = 0;
};

class Interface_Proxy final : public ::fidl::internal::Proxy, public Interface {
 public:
  explicit Interface_Proxy(::fidl::internal::ProxyController* controller);
  ~Interface_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void Method() override;
  OnEventCallback OnEvent;

 private:
  Interface_Proxy(const Interface_Proxy&) = delete;
  Interface_Proxy& operator=(const Interface_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class Interface_Stub final : public ::fidl::internal::Stub,
                             public Interface_EventSender {
 public:
  typedef class ::test::name::Interface Interface_clazz;
  explicit Interface_Stub(Interface_clazz* impl);
  ~Interface_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;
  void OnEvent() override;

 private:
  Interface_clazz* impl_;
};

class Interface_SyncProxy : public Interface_Sync {
 public:
  explicit Interface_SyncProxy(::zx::channel channel);
  ~Interface_SyncProxy() override;
  zx_status_t Method() override;

 private:
  ::fidl::internal::SynchronousProxy proxy_;
  friend class ::fidl::SynchronousInterfacePtr<Interface>;
};
#endif  // __Fuchsia__
#ifdef __Fuchsia__

/// service comment #1
///
/// service comment #3
class Service final {
 public:
  class Handler;

  static constexpr char Name[] = "test.name.Service";

  explicit Service(std::unique_ptr<::fidl::ServiceConnector> service)
      : service_(std::move(service)) {}

  explicit operator bool() const { return !!service_; }
  /// Returns a |fidl::MemberConnector| which can be used to connect to the
  /// member protocol "interface".
  ::fidl::MemberConnector<Interface> interface() const {
    return ::fidl::MemberConnector<Interface>(service_.get(), "interface");
  }

 private:
  std::unique_ptr<::fidl::ServiceConnector> service_;
};

/// Facilitates member protocol registration for servers.
class Service::Handler final {
 public:
  /// Constructs a new |Handler|. Does not take ownership of |service|.
  explicit Handler(::fidl::ServiceHandlerBase* service) : service_(service) {}
  /// Adds member "interface" to the service instance. |handler| is invoked when
  /// a connection is made to the member protocol.
  ///
  /// # Errors
  ///
  /// Returns ZX_ERR_ALREADY_EXISTS if the member was already added.
  zx_status_t add_interface(
      ::fidl::InterfaceRequestHandler<Interface> handler) {
    return service_->AddMember("interface", std::move(handler));
  }

 private:
  ::fidl::ServiceHandlerBase* const service_;
};
#endif  // __Fuchsia

/// flexible union comment #1
///
/// flexible union comment #3
class FlexibleUnion final {
 public:
  static const fidl_type_t* FidlType;

  FlexibleUnion();
  ~FlexibleUnion();

  FlexibleUnion(FlexibleUnion&&);
  FlexibleUnion& operator=(FlexibleUnion&&);

  static FlexibleUnion WithField(int32_t&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
    kUnknown = 0,
    Empty = kUnknown,  // DEPRECATED: use kUnknown instead.

    kField = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<FlexibleUnion> New() {
    return ::std::make_unique<FlexibleUnion>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, FlexibleUnion* value,
                     size_t offset);
  zx_status_t Clone(FlexibleUnion* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_Field() const { return tag_ == Tag::kField; }

  /// union member comment #1
  ///
  /// union member comment #3
  int32_t& Field() {
    EnsureStorageInitialized(Tag::kField);
    return Field_;
  }

  /// union member comment #1
  ///
  /// union member comment #3
  const int32_t& Field() const {
    ZX_ASSERT(is_Field());
    return Field_;
  }
  FlexibleUnion& set_Field(int32_t value);
  FlexibleUnion& _experimental_set_unknown_data(fidl_xunion_tag_t ordinal,
                                                std::vector<uint8_t> bytes);

  Tag Which() const {
    switch (tag_) {
      case Tag::Invalid:
      case Tag::kField:
        return Tag(tag_);
      default:
        return Tag::kUnknown;
    }
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }
  const std::vector<uint8_t>* UnknownBytes() const {
    if (Which() != Tag::kUnknown) {
      return nullptr;
    }
    return &unknown_data_.bytes;
  }

  friend ::fidl::Equality<::test::name::FlexibleUnion>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    int32_t Field_;
    ::fidl::UnknownBytes unknown_data_;
  };
};

inline zx_status_t Clone(const ::test::name::FlexibleUnion& value,
                         ::test::name::FlexibleUnion* result) {
  return value.Clone(result);
}

using FlexibleUnionPtr = ::std::unique_ptr<FlexibleUnion>;

/// const comment #1
///
/// const comment #3
constexpr int32_t C = 4u;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::Table>
    : public EncodableCodingTraits<::test::name::Table, 16> {};

inline zx_status_t Clone(const ::test::name::Table& _value,
                         ::test::name::Table* result) {
  return _value.Clone(result);
}
template <>
struct Equality<::test::name::Table> {
  bool operator()(const ::test::name::Table& _lhs,
                  const ::test::name::Table& _rhs) const {
    if (_lhs.has_Field()) {
      if (!_rhs.has_Field()) {
        return false;
      }
      if (!::fidl::Equals(_lhs.Field(), _rhs.Field())) {
        return false;
      }
    } else if (_rhs.has_Field()) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::name::Struct>
    : public EncodableCodingTraits<::test::name::Struct, 4> {};

template <>
struct IsMemcpyCompatible<::test::name::Struct>
    : public internal::BoolConstant<!HasPadding<::test::name::Struct>::value &&
                                    IsMemcpyCompatible<int32_t>::value> {};

inline zx_status_t Clone(const ::test::name::Struct& value,
                         ::test::name::Struct* result) {
  return ::test::name::Clone(value, result);
}

template <>
struct Equality<::test::name::Struct> {
  bool operator()(const ::test::name::Struct& _lhs,
                  const ::test::name::Struct& _rhs) const {
    if (!::fidl::Equals(_lhs.Field, _rhs.Field)) {
      return false;
    }
    return true;
  }
};
template <>
struct IsFidlXUnion<::test::name::StrictUnion> : public std::true_type {};

template <>
struct CodingTraits<::test::name::StrictUnion>
    : public EncodableCodingTraits<::test::name::StrictUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::StrictUnion>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder,
                     std::unique_ptr<::test::name::StrictUnion>* value,
                     size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder,
                     std::unique_ptr<::test::name::StrictUnion>* value,
                     size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::StrictUnion);

    ::test::name::StrictUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::StrictUnion& value,
                         ::test::name::StrictUnion* result) {
  return ::test::name::Clone(value, result);
}

template <>
struct Equality<::test::name::StrictUnion> {
  bool operator()(const ::test::name::StrictUnion& _lhs,
                  const ::test::name::StrictUnion& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::name::StrictUnion::Tag::Invalid):
        return true;
      case ::test::name::StrictUnion::Tag::kField:
        return ::fidl::Equals(_lhs.Field_, _rhs.Field_);

      default:
        return false;
    }
  }
};
template <>
struct CodingTraits<::test::name::MyStrictEnum> {
  static constexpr size_t inline_size_old = sizeof(::test::name::MyStrictEnum);
  static constexpr size_t inline_size_v1_no_ee =
      sizeof(::test::name::MyStrictEnum);
  static void Encode(Encoder* encoder, ::test::name::MyStrictEnum* value,
                     size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(Decoder* decoder, ::test::name::MyStrictEnum* value,
                     size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::test::name::MyStrictEnum>(underlying);
  }
};

inline zx_status_t Clone(::test::name::MyStrictEnum value,
                         ::test::name::MyStrictEnum* result) {
  return ::test::name::Clone(value, result);
}
template <>
struct Equality<::test::name::MyStrictEnum> {
  bool operator()(const ::test::name::MyStrictEnum& _lhs,
                  const ::test::name::MyStrictEnum& _rhs) const {
    return _lhs == _rhs;
  }
};

template <>
struct CodingTraits<::test::name::MyStrictBits> {
  static constexpr size_t inline_size_old = sizeof(::test::name::MyStrictBits);
  static constexpr size_t inline_size_v1_no_ee =
      sizeof(::test::name::MyStrictBits);
  static void Encode(Encoder* encoder, ::test::name::MyStrictBits* value,
                     size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(Decoder* decoder, ::test::name::MyStrictBits* value,
                     size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::test::name::MyStrictBits>(underlying);
  }
};

inline zx_status_t Clone(::test::name::MyStrictBits value,
                         ::test::name::MyStrictBits* result) {
  return ::test::name::Clone(value, result);
}

template <>
struct Equality<::test::name::MyStrictBits> {
  bool operator()(const ::test::name::MyStrictBits& _lhs,
                  const ::test::name::MyStrictBits& _rhs) const {
    uint32_t _lhs_underlying = static_cast<uint32_t>(_lhs);
    uint32_t _rhs_underlying = static_cast<uint32_t>(_rhs);
    return ::fidl::Equals(_lhs_underlying, _rhs_underlying);
  }
};
template <>
struct CodingTraits<::test::name::MyFlexibleEnum> {
  static constexpr size_t inline_size_old =
      sizeof(::test::name::MyFlexibleEnum);
  static constexpr size_t inline_size_v1_no_ee =
      sizeof(::test::name::MyFlexibleEnum);
  static void Encode(Encoder* encoder, ::test::name::MyFlexibleEnum* value,
                     size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(Decoder* decoder, ::test::name::MyFlexibleEnum* value,
                     size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::test::name::MyFlexibleEnum>(underlying);
  }
};

inline zx_status_t Clone(::test::name::MyFlexibleEnum value,
                         ::test::name::MyFlexibleEnum* result) {
  return ::test::name::Clone(value, result);
}
template <>
struct Equality<::test::name::MyFlexibleEnum> {
  bool operator()(const ::test::name::MyFlexibleEnum& _lhs,
                  const ::test::name::MyFlexibleEnum& _rhs) const {
    return _lhs == _rhs;
  }
};

template <>
struct CodingTraits<::test::name::MyFlexibleBits> {
  static constexpr size_t inline_size_old =
      sizeof(::test::name::MyFlexibleBits);
  static constexpr size_t inline_size_v1_no_ee =
      sizeof(::test::name::MyFlexibleBits);
  static void Encode(Encoder* encoder, ::test::name::MyFlexibleBits* value,
                     size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(Decoder* decoder, ::test::name::MyFlexibleBits* value,
                     size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::test::name::MyFlexibleBits>(underlying);
  }
};

inline zx_status_t Clone(::test::name::MyFlexibleBits value,
                         ::test::name::MyFlexibleBits* result) {
  return ::test::name::Clone(value, result);
}

template <>
struct Equality<::test::name::MyFlexibleBits> {
  bool operator()(const ::test::name::MyFlexibleBits& _lhs,
                  const ::test::name::MyFlexibleBits& _rhs) const {
    uint32_t _lhs_underlying = static_cast<uint32_t>(_lhs);
    uint32_t _rhs_underlying = static_cast<uint32_t>(_rhs);
    return ::fidl::Equals(_lhs_underlying, _rhs_underlying);
  }
};
template <>
struct IsFidlXUnion<::test::name::FlexibleUnion> : public std::true_type {};

template <>
struct CodingTraits<::test::name::FlexibleUnion>
    : public EncodableCodingTraits<::test::name::FlexibleUnion, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::FlexibleUnion>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder,
                     std::unique_ptr<::test::name::FlexibleUnion>* value,
                     size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder,
                     std::unique_ptr<::test::name::FlexibleUnion>* value,
                     size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::FlexibleUnion);

    ::test::name::FlexibleUnion::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::FlexibleUnion& value,
                         ::test::name::FlexibleUnion* result) {
  return ::test::name::Clone(value, result);
}

template <>
struct Equality<::test::name::FlexibleUnion> {
  bool operator()(const ::test::name::FlexibleUnion& _lhs,
                  const ::test::name::FlexibleUnion& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::name::FlexibleUnion::Tag::Invalid):
        return true;
      case ::test::name::FlexibleUnion::Tag::kField:
        return ::fidl::Equals(_lhs.Field_, _rhs.Field_);
      default:
        return ::fidl::Equals(_lhs.unknown_data_, _rhs.unknown_data_);
    }
  }
};
}  // namespace fidl
