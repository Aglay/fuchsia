// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/zx/vmo.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace test {
namespace name {

struct UnionWithHandle;
class TableWithHandle;
struct HandlesInTypes;

extern "C" const fidl_type_t v1_test_name_UnionWithHandleTable;

struct UnionWithHandle {
  UnionWithHandle() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kH = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_h() const { return ordinal() == Ordinal::kH; }

  static UnionWithHandle WithH(::zx::vmo* val) {
    UnionWithHandle result;
    result.set_h(val);
    return result;
  }

  void set_h(::zx::vmo* elem) {
    ordinal_ = Ordinal::kH;
    envelope_.data = static_cast<void*>(elem);
  }

  ::zx::vmo& mutable_h() {
    ZX_ASSERT(ordinal() == Ordinal::kH);
    return *static_cast<::zx::vmo*>(envelope_.data);
  }
  const ::zx::vmo& h() const {
    ZX_ASSERT(ordinal() == Ordinal::kH);
    return *static_cast<::zx::vmo*>(envelope_.data);
  }
  void* unknownData() const {
    ZX_ASSERT(which() == Tag::kUnknown);
    return envelope_.data;
  }
  Tag which() const;

  static constexpr const fidl_type_t* Type = &v1_test_name_UnionWithHandleTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kH = 1,  // 0x1
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 1108158728:
        return Ordinal::kH;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_test_name_TableWithHandleTable;

class TableWithHandle final {
  public:
  // Returns whether no field is set.
  bool IsEmpty() const { return max_ordinal_ == 0; }

  const ::zx::vmo& h() const {
    ZX_ASSERT(has_h());
    return *frame_->h.data;
  }
  ::zx::vmo& h() {
    ZX_ASSERT(has_h());
    return *frame_->h.data;
  }
  bool has_h() const {
    return max_ordinal_ >= 1 && frame_->h.data != nullptr;
  }

  TableWithHandle() = default;
  ~TableWithHandle() = default;
  TableWithHandle(TableWithHandle&& other) noexcept = default;
  TableWithHandle& operator=(TableWithHandle&& other) noexcept = default;

  class Builder;
  friend class Builder;
  static Builder Build();
  static constexpr const fidl_type_t* Type = &v1_test_name_TableWithHandleTable;
  static constexpr uint32_t MaxNumHandles = 1;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 24;
  static constexpr bool HasPointer = true;

  class Frame {
    ::fidl::Envelope<::zx::vmo> h;

    friend class TableWithHandle;
    friend class TableWithHandle::Builder;
  };

 private:
  TableWithHandle(uint64_t max_ordinal, ::fidl::tracking_ptr<Frame> && frame) : max_ordinal_(max_ordinal), frame_(std::move(frame)) {}
  uint64_t max_ordinal_;
  ::fidl::tracking_ptr<Frame> frame_;
};

class TableWithHandle::Builder {
 public:
  TableWithHandle view() { return TableWithHandle(max_ordinal_, ::fidl::unowned_ptr<TableWithHandle::Frame>(&frame_)); }
  ~Builder() = default;
  Builder(Builder&& other) noexcept = default;
  Builder& operator=(Builder&& other) noexcept = default;

  Builder&& set_h(::zx::vmo* elem);

 private:
  Builder() = default;
  friend Builder TableWithHandle::Build();

  uint64_t max_ordinal_ = 0;
  TableWithHandle::Frame frame_ = {};
};

extern "C" const fidl_type_t v1_test_name_HandlesInTypesTable;

struct HandlesInTypes {
  static constexpr const fidl_type_t* Type = &v1_test_name_HandlesInTypesTable;
  static constexpr uint32_t MaxNumHandles = 4294967295;
  static constexpr uint32_t PrimarySize = 104;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

  ::zx::vmo normal_handle = {};

  ::fidl::VectorView<::zx::vmo> handle_in_vec = {};

  ::fidl::Array<::zx::vmo, 5> handle_in_array = {};

  ::fidl::VectorView<::fidl::Array<::zx::vmo, 5>> handle_in_mixed_vec_array = {};

  ::llcpp::test::name::TableWithHandle table_with_handle = {};

  ::llcpp::test::name::UnionWithHandle union_with_handle = {};
};

}  // namespace name
}  // namespace test
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::test::name::UnionWithHandle> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::UnionWithHandle>);

template <>
struct IsFidlType<::llcpp::test::name::TableWithHandle> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::TableWithHandle>);

template <>
struct IsFidlType<::llcpp::test::name::HandlesInTypes> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::test::name::HandlesInTypes>);
static_assert(offsetof(::llcpp::test::name::HandlesInTypes, normal_handle) == 0);
static_assert(offsetof(::llcpp::test::name::HandlesInTypes, handle_in_vec) == 8);
static_assert(offsetof(::llcpp::test::name::HandlesInTypes, handle_in_array) == 24);
static_assert(offsetof(::llcpp::test::name::HandlesInTypes, handle_in_mixed_vec_array) == 48);
static_assert(offsetof(::llcpp::test::name::HandlesInTypes, table_with_handle) == 64);
static_assert(offsetof(::llcpp::test::name::HandlesInTypes, union_with_handle) == 80);
static_assert(sizeof(::llcpp::test::name::HandlesInTypes) == ::llcpp::test::name::HandlesInTypes::PrimarySize);

}  // namespace fidl
