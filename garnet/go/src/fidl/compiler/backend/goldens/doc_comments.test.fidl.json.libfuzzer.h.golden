// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"

#include <test/name/cpp/fidl.h>
namespace fuzzing {


using Union = ::test::name::Union;
using Table = ::test::name::Table;
using Struct = ::test::name::Struct;


template<>
struct MinSize<Union> {
  operator size_t() { return sizeof(Union); }
};
template<>
struct Allocate<Union> {
  Union operator()(FuzzInput* src, size_t* size) {
    Union out;
    ZX_ASSERT(*size >= sizeof(Union));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(Union);
    return out;
  }
};
template<>
struct MinSize<Table> {
  operator size_t() {
    return MinSize<int32_t>();
  }
};
template<>
struct Allocate<Table> {
  Table operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Table>());
    const size_t slack_per_member = (*size - MinSize<Table>()) / 1;
    Table out;
    size_t out_size;
    out_size = MinSize<int32_t>() + slack_per_member;
    out.set_Field(Allocate<int32_t>{}(src, &out_size));
    return out;
  }
};
template<>
struct MinSize<Struct> {
  operator size_t() {
    return MinSize<int32_t>();
  }
};
template<>
struct Allocate<Struct> {
  Struct operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<Struct>());
    const size_t slack_per_member = (*size - MinSize<Struct>()) / 1;
    Struct out;
    size_t out_size;
    out_size = MinSize<int32_t>() + slack_per_member;
    out.Field = Allocate<int32_t>{}(src, &out_size);
    return out;
  }
};

}  // namespace fuzzing
