// WARNING: This file is machine generated by fidlgen.

#include <placement_of_attributes.test.json.llcpp.h>

#include <memory>

namespace llcpp {

namespace example {

namespace {

[[maybe_unused]] constexpr uint64_t kExampleProtocol_Method_Ordinal =
    1965996700874037518lu;
extern "C" const fidl_type_t example_ExampleProtocolMethodRequestTable;
extern "C" const fidl_type_t example_ExampleProtocolMethodResponseTable;

}  // namespace

ExampleProtocol::ResultOf::Method_Impl::Method_Impl(
    ::zx::unowned_channel _client_end, ::llcpp::exampleusing::Empty arg) {
  // Destructors can't be called because it will lead to handle double close
  // (here and in fidl::Encode).
  FIDL_ALIGNDECL uint8_t _request_buffer[sizeof(MethodRequest)];
  auto& _request = *new (_request_buffer) MethodRequest{arg};

  auto _encoded =
      ::fidl::internal::LinearizedAndEncoded<MethodRequest>(&_request);
  auto& _encode_result = _encoded.result();
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<MethodRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(ExampleProtocol::InPlace::Method(
      std::move(_client_end), std::move(_encoded_request)));
}

ExampleProtocol::ResultOf::Method ExampleProtocol::SyncClient::Method(
    ::llcpp::exampleusing::Empty arg) {
  return ResultOf::Method(::zx::unowned_channel(this->channel_),
                          std::move(arg));
}

ExampleProtocol::ResultOf::Method ExampleProtocol::Call::Method(
    ::zx::unowned_channel _client_end, ::llcpp::exampleusing::Empty arg) {
  return ResultOf::Method(std::move(_client_end), std::move(arg));
}

ExampleProtocol::UnownedResultOf::Method_Impl::Method_Impl(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::llcpp::exampleusing::Empty arg) {
  if (_request_buffer.capacity() < MethodRequest::PrimarySize) {
    Super::status_ = ZX_ERR_BUFFER_TOO_SMALL;
    Super::error_ = ::fidl::kErrorRequestBufferTooSmall;
    return;
  }
  new (_request_buffer.data()) MethodRequest{arg};
  _request_buffer.set_actual(sizeof(MethodRequest));
  ::fidl::DecodedMessage<MethodRequest> _msg(std::move(_request_buffer));
  auto _encode_result = ::fidl::Encode<MethodRequest>(std::move(_msg));
  if (_encode_result.status != ZX_OK) {
    Super::SetFailure(std::move(_encode_result));
    return;
  }
  ::fidl::EncodedMessage<MethodRequest> _encoded_request =
      std::move(_encode_result.message);
  Super::operator=(ExampleProtocol::InPlace::Method(
      std::move(_client_end), std::move(_encoded_request)));
}

ExampleProtocol::UnownedResultOf::Method ExampleProtocol::SyncClient::Method(
    ::fidl::BytePart _request_buffer, ::llcpp::exampleusing::Empty arg) {
  return UnownedResultOf::Method(::zx::unowned_channel(this->channel_),
                                 std::move(_request_buffer), std::move(arg));
}

ExampleProtocol::UnownedResultOf::Method ExampleProtocol::Call::Method(
    ::zx::unowned_channel _client_end, ::fidl::BytePart _request_buffer,
    ::llcpp::exampleusing::Empty arg) {
  return UnownedResultOf::Method(std::move(_client_end),
                                 std::move(_request_buffer), std::move(arg));
}

::fidl::internal::StatusAndError ExampleProtocol::InPlace::Method(
    ::zx::unowned_channel _client_end,
    ::fidl::DecodedMessage<MethodRequest> params) {
  auto _encode_request_result = ::fidl::Encode(std::move(params));
  if (_encode_request_result.status != ZX_OK) {
    return ::fidl::internal::StatusAndError::FromFailure(
        std::move(_encode_request_result));
  }
  return Method(std::move(_client_end),
                std::move(_encode_request_result.message));
}

::fidl::internal::StatusAndError ExampleProtocol::InPlace::Method(
    ::zx::unowned_channel _client_end,
    ::fidl::EncodedMessage<MethodRequest> params) {
  ExampleProtocol::SetTransactionHeaderFor::MethodRequest(params);
  zx_status_t _write_status =
      ::fidl::Write(std::move(_client_end), std::move(params));
  if (_write_status != ZX_OK) {
    return ::fidl::internal::StatusAndError(_write_status,
                                            ::fidl::kErrorWriteFailed);
  } else {
    return ::fidl::internal::StatusAndError(ZX_OK, nullptr);
  }
}

::fidl::StatusAndError ExampleProtocol::ClientImpl::Method(
    ::llcpp::exampleusing::Empty arg) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = ResultOf::Method(_binding->channel(), std::move(arg));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::StatusAndError ExampleProtocol::ClientImpl::Method(
    ::fidl::BytePart _request_buffer, ::llcpp::exampleusing::Empty arg) {
  if (auto _binding = ::fidl::internal::ClientBase::GetBinding()) {
    auto _res = UnownedResultOf::Method(
        _binding->channel(), std::move(_request_buffer), std::move(arg));
    return ::fidl::StatusAndError(_res.status(), _res.error());
  }
  return ::fidl::StatusAndError(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

zx_status_t ExampleProtocol::ClientImpl::Dispatch(
    fidl_msg_t*, ::fidl::internal::ResponseContext*) {
  return ZX_OK;
}

bool ExampleProtocol::TryDispatch(Interface* impl, fidl_msg_t* msg,
                                  ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  zx_status_t status = fidl_validate_txn_header(hdr);
  if (status != ZX_OK) {
    txn->Close(status);
    return true;
  }
  switch (hdr->ordinal) {
    case kExampleProtocol_Method_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      auto message = result.message.message();
      impl->Method(std::move(message->arg),
                   Interface::MethodCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool ExampleProtocol::Dispatch(Interface* impl, fidl_msg_t* msg,
                               ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}

void ExampleProtocol::SetTransactionHeaderFor::MethodRequest(
    const ::fidl::DecodedMessage<ExampleProtocol::MethodRequest>& _msg,
    zx_txid_t _txid) {
  fidl_init_txn_header(&_msg.message()->_hdr, _txid,
                       kExampleProtocol_Method_Ordinal);
}
void ExampleProtocol::SetTransactionHeaderFor::MethodRequest(
    const ::fidl::EncodedMessage<ExampleProtocol::MethodRequest>& _msg,
    zx_txid_t _txid) {
  fidl_message_header_t* hdr =
      reinterpret_cast<fidl_message_header_t*>(_msg.bytes().data());
  fidl_init_txn_header(hdr, _txid, kExampleProtocol_Method_Ordinal);
}
auto ::llcpp::example::ExampleXUnion::which() const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kVariant:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::example::ExampleXUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExampleXUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExampleXUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExampleXUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::example::ExampleUnion::SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExampleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExampleUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExampleUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

}  // namespace example
}  // namespace llcpp
