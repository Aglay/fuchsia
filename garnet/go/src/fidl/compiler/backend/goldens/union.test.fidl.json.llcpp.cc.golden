// WARNING: This file is machine generated by fidlgen.

#include <union.test.fidl.json.llcpp.h>
#include <memory>

namespace test {
namespace name {

::test::name::Union::Union() {
  tag_ = Tag::Invalid;
  memset(reinterpret_cast<uint8_t*>(&tag_) + sizeof(tag_),
         0,
         offsetof(Union, Primitive_) - sizeof(tag_));
}

::test::name::Union::~Union() {
  Destroy();
}

void ::test::name::Union::Destroy() {
  switch (which()) {
  default:
    break;
  }
  tag_ = Tag::Invalid;
}

void ::test::name::Union::MoveImpl_(Union&& other) {
  switch (other.which()) {
  case Tag::kPrimitive:
    mutable_Primitive() = std::move(other.mutable_Primitive());
    break;
  case Tag::kStringNeedsConstructor:
    mutable_StringNeedsConstructor() = std::move(other.mutable_StringNeedsConstructor());
    break;
  case Tag::kVectorStringAlsoNeedsConstructor:
    mutable_VectorStringAlsoNeedsConstructor() = std::move(other.mutable_VectorStringAlsoNeedsConstructor());
    break;
  default:
    break;
  }
  other.Destroy();
}

void ::test::name::Union::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::test::name::Union, Primitive_) == 8);
  static_assert(offsetof(::test::name::Union, StringNeedsConstructor_) == 8);
  static_assert(offsetof(::test::name::Union, VectorStringAlsoNeedsConstructor_) == 8);
  static_assert(sizeof(::test::name::Union) == ::test::name::Union::PrimarySize);
}


int32_t& ::test::name::Union::mutable_Primitive() {
  if (which() != Tag::kPrimitive) {
    Destroy();
    new (&Primitive_) int32_t;
    memset(reinterpret_cast<uint8_t*>(&Primitive_) + sizeof(int32_t),
           0,
           sizeof(Union) - offsetof(Union, Primitive_) - sizeof(int32_t));
  }
  tag_ = Tag::kPrimitive;
  return Primitive_;
}

::fidl::StringView& ::test::name::Union::mutable_StringNeedsConstructor() {
  if (which() != Tag::kStringNeedsConstructor) {
    Destroy();
    new (&StringNeedsConstructor_) ::fidl::StringView;
    memset(reinterpret_cast<uint8_t*>(&StringNeedsConstructor_) + sizeof(::fidl::StringView),
           0,
           sizeof(Union) - offsetof(Union, StringNeedsConstructor_) - sizeof(::fidl::StringView));
  }
  tag_ = Tag::kStringNeedsConstructor;
  return StringNeedsConstructor_;
}

::fidl::VectorView<::fidl::StringView>& ::test::name::Union::mutable_VectorStringAlsoNeedsConstructor() {
  if (which() != Tag::kVectorStringAlsoNeedsConstructor) {
    Destroy();
    new (&VectorStringAlsoNeedsConstructor_) ::fidl::VectorView<::fidl::StringView>;
    memset(reinterpret_cast<uint8_t*>(&VectorStringAlsoNeedsConstructor_) + sizeof(::fidl::VectorView<::fidl::StringView>),
           0,
           sizeof(Union) - offsetof(Union, VectorStringAlsoNeedsConstructor_) - sizeof(::fidl::VectorView<::fidl::StringView>));
  }
  tag_ = Tag::kVectorStringAlsoNeedsConstructor;
  return VectorStringAlsoNeedsConstructor_;
}


}  // namespace name
}  // namespace test
