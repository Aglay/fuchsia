// WARNING: This file is machine generated by fidlgen.

#include <union.test.fidl.json.llcpp.h>
#include <memory>

namespace test {
namespace name {

::test::name::Union::Union() {
  memset(this, 0, sizeof(Union));
  tag_ = Tag::Invalid;
}

::test::name::Union::~Union() {
  Destroy();
}

void ::test::name::Union::Destroy() {
  switch (which()) {
  default:
    break;
  }
}

void ::test::name::Union::MoveImpl_(Union&& other) {
  switch (other.which()) {
  case Tag::kPrimitive:
    mutable_Primitive() = std::move(other.mutable_Primitive());
    break;
  case Tag::kStringNeedsConstructor:
    mutable_StringNeedsConstructor() = std::move(other.mutable_StringNeedsConstructor());
    break;
  case Tag::kVectorStringAlsoNeedsConstructor:
    mutable_VectorStringAlsoNeedsConstructor() = std::move(other.mutable_VectorStringAlsoNeedsConstructor());
    break;
  default:
    break;
  }
  other.tag_ = Tag::Invalid;
}

void ::test::name::Union::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::test::name::Union, Primitive_) == 8);
  static_assert(offsetof(::test::name::Union, StringNeedsConstructor_) == 8);
  static_assert(offsetof(::test::name::Union, VectorStringAlsoNeedsConstructor_) == 8);
  static_assert(sizeof(::test::name::Union) == ::test::name::Union::PrimarySize);
}

}  // namespace name
}  // namespace test
