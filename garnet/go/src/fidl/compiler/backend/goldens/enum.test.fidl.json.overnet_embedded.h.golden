// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "src/connectivity/overnet/deprecated/lib/embedded/header.h"

#include <test/name/cpp/fidl.h>

namespace test {
namespace name {
namespace embedded {

enum class MyStrictEnum : uint32_t {
  FOO = 1u,
  BAR = 2u,
};

inline zx_status_t Clone(::test::name::embedded::MyStrictEnum value,
                         ::test::name::embedded::MyStrictEnum* result) {
  *result = value;
  return ZX_OK;
}

enum class MyEnum : uint32_t {
  FOO = 1u,
  BAR = 2u,
};

inline zx_status_t Clone(::test::name::embedded::MyEnum value,
                         ::test::name::embedded::MyEnum* result) {
  *result = value;
  return ZX_OK;
}


}  // namespace embedded
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::embedded::MyStrictEnum> {
  static constexpr size_t encoded_size = sizeof(::test::name::embedded::MyStrictEnum);
  static void Encode(::overnet::internal::Encoder* encoder, ::test::name::embedded::MyStrictEnum* value, size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(::overnet::internal::Decoder* decoder, ::test::name::embedded::MyStrictEnum* value, size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::test::name::embedded::MyStrictEnum>(underlying);
  }
};

inline zx_status_t Clone(::test::name::embedded::MyStrictEnum value,
                         ::test::name::embedded::MyStrictEnum* result) {
  return ::test::name::embedded::Clone(value, result);
}
template <>
struct CodingTraits<::test::name::embedded::MyEnum> {
  static constexpr size_t encoded_size = sizeof(::test::name::embedded::MyEnum);
  static void Encode(::overnet::internal::Encoder* encoder, ::test::name::embedded::MyEnum* value, size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(::overnet::internal::Decoder* decoder, ::test::name::embedded::MyEnum* value, size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::test::name::embedded::MyEnum>(underlying);
  }
};

inline zx_status_t Clone(::test::name::embedded::MyEnum value,
                         ::test::name::embedded::MyEnum* result) {
  return ::test::name::embedded::Clone(value, result);
}}  // namespace fidl
