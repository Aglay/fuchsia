// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/buffer_allocator.h>
#include <lib/fidl/llcpp/buffer_then_heap_allocator.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/errors.h>
#include <lib/fidl/llcpp/linearized_and_encoded.h>
#include <lib/fidl/llcpp/memory.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>

#include <variant>
#ifdef __Fuchsia__
#include <lib/fidl/llcpp/client.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/message.h>
#include <lib/fidl/llcpp/result.h>
#include <lib/fidl/llcpp/server.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/txn_header.h>
#endif  // __Fuchsia__
#include <zircon/fidl.h>

namespace llcpp {

namespace fidl {
namespace test {
namespace padding {

struct Padding7ByteMiddle;
struct Padding7ByteEnd;
struct Padding6ByteMiddle;
struct Padding6ByteEnd;
struct Padding5ByteMiddle;
struct Padding5ByteEnd;
struct Padding4ByteMiddle;
struct Padding4ByteEnd;
struct Padding4ByteAlignmentLength12;
struct Padding3ByteMiddle;
struct Padding3ByteEnd;
struct Padding2ByteMiddle;
struct Padding2ByteEnd;
struct Padding2ByteAlignmentLength6;
struct Padding1ByteMiddle;
struct Padding1ByteEnd;

extern "C" const fidl_type_t fidl_test_padding_Padding7ByteMiddleTable;

struct Padding7ByteMiddle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding7ByteMiddleTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint8_t a = {};

  uint64_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding7ByteEndTable;

struct Padding7ByteEnd {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding7ByteEndTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint64_t a = {};

  uint8_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding6ByteMiddleTable;

struct Padding6ByteMiddle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding6ByteMiddleTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint16_t a = {};

  uint64_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding6ByteEndTable;

struct Padding6ByteEnd {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding6ByteEndTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint64_t a = {};

  uint16_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding5ByteMiddleTable;

struct Padding5ByteMiddle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding5ByteMiddleTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint16_t a = {};

  uint8_t b = {};

  uint64_t c = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding5ByteEndTable;

struct Padding5ByteEnd {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding5ByteEndTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint64_t a = {};

  uint16_t b = {};

  uint8_t c = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding4ByteMiddleTable;

struct Padding4ByteMiddle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding4ByteMiddleTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint32_t a = {};

  uint64_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding4ByteEndTable;

struct Padding4ByteEnd {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding4ByteEndTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 16;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint64_t a = {};

  uint32_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t
    fidl_test_padding_Padding4ByteAlignmentLength12Table;

struct Padding4ByteAlignmentLength12 {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding4ByteAlignmentLength12Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 12;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint32_t a = {};

  uint8_t b = {};

  uint16_t c = {};

  uint16_t d = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding3ByteMiddleTable;

struct Padding3ByteMiddle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding3ByteMiddleTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint8_t a = {};

  uint32_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding3ByteEndTable;

struct Padding3ByteEnd {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding3ByteEndTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint32_t a = {};

  uint8_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding2ByteMiddleTable;

struct Padding2ByteMiddle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding2ByteMiddleTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint16_t a = {};

  uint32_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding2ByteEndTable;

struct Padding2ByteEnd {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding2ByteEndTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 8;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint32_t a = {};

  uint16_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t
    fidl_test_padding_Padding2ByteAlignmentLength6Table;

struct Padding2ByteAlignmentLength6 {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding2ByteAlignmentLength6Table;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 6;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint8_t a = {};

  uint16_t b = {};

  uint8_t c = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding1ByteMiddleTable;

struct Padding1ByteMiddle {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding1ByteMiddleTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint8_t a = {};

  uint16_t b = {};
  void _CloseHandles();
};

extern "C" const fidl_type_t fidl_test_padding_Padding1ByteEndTable;

struct Padding1ByteEnd {
  static constexpr const fidl_type_t* Type =
      &fidl_test_padding_Padding1ByteEndTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 4;
  [[maybe_unused]] static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;
  static constexpr bool IsResource = false;

  uint16_t a = {};

  uint8_t b = {};
  void _CloseHandles();
};

}  // namespace padding
}  // namespace test
}  // namespace fidl
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding7ByteMiddle>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding7ByteMiddle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding7ByteMiddle>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding7ByteMiddle, a) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding7ByteMiddle, b) ==
              8);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding7ByteMiddle) ==
              ::llcpp::fidl::test::padding::Padding7ByteMiddle::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding7ByteEnd>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding7ByteEnd>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::padding::Padding7ByteEnd>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding7ByteEnd, a) == 0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding7ByteEnd, b) == 8);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding7ByteEnd) ==
              ::llcpp::fidl::test::padding::Padding7ByteEnd::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding6ByteMiddle>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding6ByteMiddle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding6ByteMiddle>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding6ByteMiddle, a) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding6ByteMiddle, b) ==
              8);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding6ByteMiddle) ==
              ::llcpp::fidl::test::padding::Padding6ByteMiddle::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding6ByteEnd>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding6ByteEnd>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::padding::Padding6ByteEnd>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding6ByteEnd, a) == 0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding6ByteEnd, b) == 8);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding6ByteEnd) ==
              ::llcpp::fidl::test::padding::Padding6ByteEnd::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding5ByteMiddle>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding5ByteMiddle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding5ByteMiddle>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding5ByteMiddle, a) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding5ByteMiddle, b) ==
              2);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding5ByteMiddle, c) ==
              8);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding5ByteMiddle) ==
              ::llcpp::fidl::test::padding::Padding5ByteMiddle::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding5ByteEnd>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding5ByteEnd>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::padding::Padding5ByteEnd>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding5ByteEnd, a) == 0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding5ByteEnd, b) == 8);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding5ByteEnd, c) == 10);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding5ByteEnd) ==
              ::llcpp::fidl::test::padding::Padding5ByteEnd::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding4ByteMiddle>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding4ByteMiddle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding4ByteMiddle>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding4ByteMiddle, a) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding4ByteMiddle, b) ==
              8);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding4ByteMiddle) ==
              ::llcpp::fidl::test::padding::Padding4ByteMiddle::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding4ByteEnd>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding4ByteEnd>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::padding::Padding4ByteEnd>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding4ByteEnd, a) == 0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding4ByteEnd, b) == 8);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding4ByteEnd) ==
              ::llcpp::fidl::test::padding::Padding4ByteEnd::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12>);
static_assert(
    offsetof(::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12, a) ==
    0);
static_assert(
    offsetof(::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12, b) ==
    4);
static_assert(
    offsetof(::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12, c) ==
    6);
static_assert(
    offsetof(::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12, d) ==
    8);
static_assert(
    sizeof(::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12) ==
    ::llcpp::fidl::test::padding::Padding4ByteAlignmentLength12::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding3ByteMiddle>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding3ByteMiddle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding3ByteMiddle>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding3ByteMiddle, a) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding3ByteMiddle, b) ==
              4);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding3ByteMiddle) ==
              ::llcpp::fidl::test::padding::Padding3ByteMiddle::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding3ByteEnd>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding3ByteEnd>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::padding::Padding3ByteEnd>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding3ByteEnd, a) == 0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding3ByteEnd, b) == 4);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding3ByteEnd) ==
              ::llcpp::fidl::test::padding::Padding3ByteEnd::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding2ByteMiddle>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding2ByteMiddle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding2ByteMiddle>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding2ByteMiddle, a) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding2ByteMiddle, b) ==
              4);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding2ByteMiddle) ==
              ::llcpp::fidl::test::padding::Padding2ByteMiddle::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding2ByteEnd>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding2ByteEnd>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::padding::Padding2ByteEnd>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding2ByteEnd, a) == 0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding2ByteEnd, b) == 4);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding2ByteEnd) ==
              ::llcpp::fidl::test::padding::Padding2ByteEnd::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6>);
static_assert(
    offsetof(::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6, a) ==
    0);
static_assert(
    offsetof(::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6, b) ==
    2);
static_assert(
    offsetof(::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6, c) ==
    4);
static_assert(
    sizeof(::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6) ==
    ::llcpp::fidl::test::padding::Padding2ByteAlignmentLength6::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding1ByteMiddle>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding1ByteMiddle>
    : public std::true_type {};
static_assert(std::is_standard_layout_v<
              ::llcpp::fidl::test::padding::Padding1ByteMiddle>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding1ByteMiddle, a) ==
              0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding1ByteMiddle, b) ==
              2);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding1ByteMiddle) ==
              ::llcpp::fidl::test::padding::Padding1ByteMiddle::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::padding::Padding1ByteEnd>
    : public std::true_type {};
template <>
struct IsStruct<::llcpp::fidl::test::padding::Padding1ByteEnd>
    : public std::true_type {};
static_assert(
    std::is_standard_layout_v<::llcpp::fidl::test::padding::Padding1ByteEnd>);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding1ByteEnd, a) == 0);
static_assert(offsetof(::llcpp::fidl::test::padding::Padding1ByteEnd, b) == 2);
static_assert(sizeof(::llcpp::fidl::test::padding::Padding1ByteEnd) ==
              ::llcpp::fidl::test::padding::Padding1ByteEnd::PrimarySize);

}  // namespace fidl

namespace llcpp {

namespace fidl {
namespace test {
namespace padding {}  // namespace padding
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
