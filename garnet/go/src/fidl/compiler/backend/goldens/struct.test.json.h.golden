// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace fidl {
namespace test {
namespace json {

class Simple;
class BasicStruct;

class Simple final {
 public:
  static const fidl_type_t* FidlType;
  
  uint8_t f1{};
  
  bool f2{};

  static inline ::std::unique_ptr<Simple> New() { return ::std::make_unique<Simple>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, Simple* value, size_t _offset);
  zx_status_t Clone(Simple* result) const;
};

inline zx_status_t Clone(const ::fidl::test::json::Simple& _value,
                         ::fidl::test::json::Simple* _result) {
  return _value.Clone(_result);
}

using SimplePtr = ::std::unique_ptr<Simple>;

class BasicStruct final {
 public:
  static const fidl_type_t* FidlType;
  
  uint32_t x{};
  
  ::std::string y{};

  static inline ::std::unique_ptr<BasicStruct> New() { return ::std::make_unique<BasicStruct>(); }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, BasicStruct* value, size_t _offset);
  zx_status_t Clone(BasicStruct* result) const;
};

inline zx_status_t Clone(const ::fidl::test::json::BasicStruct& _value,
                         ::fidl::test::json::BasicStruct* _result) {
  return _value.Clone(_result);
}

using BasicStructPtr = ::std::unique_ptr<BasicStruct>;
}  // namespace json
}  // namespace test
}  // namespace fidl
namespace fidl {

template <>
struct CodingTraits<::fidl::test::json::Simple>
    : public EncodableCodingTraits<::fidl::test::json::Simple, 2> {};

inline zx_status_t Clone(const ::fidl::test::json::Simple& value,
                         ::fidl::test::json::Simple* result) {
  return ::fidl::test::json::Clone(value, result);
}

template<>
struct Equality<::fidl::test::json::Simple> {
  bool operator()(const ::fidl::test::json::Simple& _lhs, const ::fidl::test::json::Simple& _rhs) const {
    if (!::fidl::Equals(_lhs.f1, _rhs.f1)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.f2, _rhs.f2)) {
      return false;
    }
    return true;
  }

  static inline bool Equals(const ::fidl::test::json::Simple& _lhs, const ::fidl::test::json::Simple& _rhs) {
    // TODO(46638): Remove this when all clients have been transitioned to functor.
    return ::fidl::Equality<::fidl::test::json::Simple>{}(_lhs, _rhs);
  }
};
template <>
struct CodingTraits<::fidl::test::json::BasicStruct>
    : public EncodableCodingTraits<::fidl::test::json::BasicStruct, 24> {};

inline zx_status_t Clone(const ::fidl::test::json::BasicStruct& value,
                         ::fidl::test::json::BasicStruct* result) {
  return ::fidl::test::json::Clone(value, result);
}

template<>
struct Equality<::fidl::test::json::BasicStruct> {
  bool operator()(const ::fidl::test::json::BasicStruct& _lhs, const ::fidl::test::json::BasicStruct& _rhs) const {
    if (!::fidl::Equals(_lhs.x, _rhs.x)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.y, _rhs.y)) {
      return false;
    }
    return true;
  }

  static inline bool Equals(const ::fidl::test::json::BasicStruct& _lhs, const ::fidl::test::json::BasicStruct& _rhs) {
    // TODO(46638): Remove this when all clients have been transitioned to functor.
    return ::fidl::Equality<::fidl::test::json::BasicStruct>{}(_lhs, _rhs);
  }
};}  // namespace fidl
