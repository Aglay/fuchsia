// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"

namespace test {
namespace name {

enum class obj_type : uint32_t {

  NONE = 0u,

  VMO = 3u,
};

inline zx_status_t Clone(::test::name::obj_type value,
                         ::test::name::obj_type* result) {
  *result = value;
  return ZX_OK;
}

class UnionWithHandle;
class TableWithHandle;
class HandlesInTypes;

class UnionWithHandle final {
 public:
  static const fidl_type_t* FidlType;

  UnionWithHandle();
  ~UnionWithHandle();

  UnionWithHandle(UnionWithHandle&&);
  UnionWithHandle& operator=(UnionWithHandle&&);

  static UnionWithHandle WithH(::zx::vmo&&);

  enum __attribute__((enum_extensibility(closed))) Tag : fidl_xunion_tag_t {
    kUnknown = 0,
    Empty = kUnknown,  // DEPRECATED: use kUnknown instead.

    kH = 1,  // 0x1
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<UnionWithHandle> New() {
    return ::std::make_unique<UnionWithHandle>();
  }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, UnionWithHandle* value,
                     size_t offset);
  zx_status_t Clone(UnionWithHandle* result) const;

  bool has_invalid_tag() const { return tag_ == Invalid; }

  bool is_h() const { return tag_ == Tag::kH; }

  ::zx::vmo& h() {
    EnsureStorageInitialized(Tag::kH);
    return h_;
  }

  const ::zx::vmo& h() const {
    ZX_ASSERT(is_h());
    return h_;
  }
  UnionWithHandle& set_h(::zx::vmo value);

  Tag Which() const {
    switch (tag_) {
      case Tag::kH:
        return Tag(tag_);
      default:
        return Tag::kUnknown;
    }
  }

  // You probably want to use Which() method instead of Ordinal(). Use Ordinal()
  // only when you need access to the raw integral ordinal value.
  fidl_xunion_tag_t Ordinal() const { return tag_; }

  const std::vector<uint8_t>* UnknownData() const {
    if (Which() != Tag::kUnknown) {
      return nullptr;
    }

    return &unknown_data_;
  }

  friend ::fidl::Equality<::test::name::UnionWithHandle>;

 private:
  void Destroy();
  void EnsureStorageInitialized(::fidl_xunion_tag_t tag);

  ::fidl_xunion_tag_t tag_ = static_cast<fidl_xunion_tag_t>(Tag::Invalid);
  union {
    ::zx::vmo h_;
    std::vector<uint8_t> unknown_data_;
  };
};

inline zx_status_t Clone(const ::test::name::UnionWithHandle& value,
                         ::test::name::UnionWithHandle* result) {
  return value.Clone(result);
}

using UnionWithHandlePtr = ::std::unique_ptr<UnionWithHandle>;

class TableWithHandle final {
 public:
  static const fidl_type_t* FidlType;
  /// Returns whether no field is set.
  bool IsEmpty() const;

  const ::zx::vmo& h() const {
    ZX_ASSERT(field_presence_.IsSet<0>());
    return h_value_.value;
  }
  bool has_h() const { return field_presence_.IsSet<0>(); }

  ::zx::vmo* mutable_h() {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&h_value_.value);
    }
    return &h_value_.value;
  }
  TableWithHandle& set_h(::zx::vmo _value) {
    if (!field_presence_.IsSet<0>()) {
      field_presence_.Set<0>();
      Construct(&h_value_.value, std::move(_value));
    } else {
      h_value_.value = std::move(_value);
    }
    return *this;
  }
  void clear_h() {
    if (!field_presence_.IsSet<0>()) {
      return;
    }
    field_presence_.Clear<0>();
    Destruct(&h_value_.value);
  }

  TableWithHandle();
  TableWithHandle(TableWithHandle&& other);
  ~TableWithHandle();
  TableWithHandle& operator=(TableWithHandle&& other);

  static inline ::std::unique_ptr<TableWithHandle> New() {
    return ::std::make_unique<TableWithHandle>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, TableWithHandle* _value,
                     size_t _offset);
  zx_status_t Clone(TableWithHandle* _result) const;

 private:
  template <class T, class... Args>
  void Construct(T* p, Args&&... args) {
    new (p) T(std::forward<Args>(args)...);
  }

  template <class T>
  void Destruct(T* p) {
    p->~T();
  }

  ::fidl::internal::BitSet<1> field_presence_;
  union ValueUnion_h {
    ValueUnion_h() {}
    ~ValueUnion_h() {}

    ::zx::vmo value;
  };
  ValueUnion_h h_value_;
};

using TableWithHandlePtr = ::std::unique_ptr<TableWithHandle>;

class HandlesInTypes final {
 public:
  static const fidl_type_t* FidlType;

  ::zx::vmo normal_handle{};

  ::std::vector<::zx::vmo> handle_in_vec{};

  ::std::array<::zx::vmo, 5> handle_in_array{};

  ::std::vector<::std::array<::zx::vmo, 5>> handle_in_mixed_vec_array{};

  TableWithHandle table_with_handle{};

  UnionWithHandle union_with_handle{};

  static inline ::std::unique_ptr<HandlesInTypes> New() {
    return ::std::make_unique<HandlesInTypes>();
  }

  void Encode(::fidl::Encoder* _encoder, size_t _offset);
  static void Decode(::fidl::Decoder* _decoder, HandlesInTypes* value,
                     size_t _offset);
  zx_status_t Clone(HandlesInTypes* result) const;
};

inline zx_status_t Clone(const ::test::name::HandlesInTypes& _value,
                         ::test::name::HandlesInTypes* _result) {
  return _value.Clone(_result);
}

using HandlesInTypesPtr = ::std::unique_ptr<HandlesInTypes>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::obj_type> {
  static constexpr size_t inline_size_old = sizeof(::test::name::obj_type);
  static constexpr size_t inline_size_v1_no_ee = sizeof(::test::name::obj_type);
  static void Encode(Encoder* encoder, ::test::name::obj_type* value,
                     size_t offset) {
    uint32_t underlying = static_cast<uint32_t>(*value);
    ::fidl::Encode(encoder, &underlying, offset);
  }
  static void Decode(Decoder* decoder, ::test::name::obj_type* value,
                     size_t offset) {
    uint32_t underlying = {};
    ::fidl::Decode(decoder, &underlying, offset);
    *value = static_cast<::test::name::obj_type>(underlying);
  }
};

inline zx_status_t Clone(::test::name::obj_type value,
                         ::test::name::obj_type* result) {
  return ::test::name::Clone(value, result);
}
template <>
struct Equality<::test::name::obj_type> {
  bool operator()(const ::test::name::obj_type& _lhs,
                  const ::test::name::obj_type& _rhs) const {
    return _lhs == _rhs;
  }
};

template <>
struct IsFidlXUnion<::test::name::UnionWithHandle> : public std::true_type {};

template <>
struct CodingTraits<::test::name::UnionWithHandle>
    : public EncodableCodingTraits<::test::name::UnionWithHandle, 24> {};

template <>
struct CodingTraits<std::unique_ptr<::test::name::UnionWithHandle>> {
  static constexpr size_t inline_size_v1_no_ee = 24;

  static void Encode(Encoder* encoder,
                     std::unique_ptr<::test::name::UnionWithHandle>* value,
                     size_t offset) {
    auto&& p_xunion = *value;
    if (p_xunion) {
      p_xunion->Encode(encoder, offset);
    }
  }

  static void Decode(Decoder* decoder,
                     std::unique_ptr<::test::name::UnionWithHandle>* value,
                     size_t offset) {
    fidl_xunion_t* encoded = decoder->GetPtr<fidl_xunion_t>(offset);
    if (encoded->tag == 0) {
      value->reset(nullptr);
      return;
    }

    value->reset(new ::test::name::UnionWithHandle);

    ::test::name::UnionWithHandle::Decode(decoder, value->get(), offset);
  }
};

inline zx_status_t Clone(const ::test::name::UnionWithHandle& value,
                         ::test::name::UnionWithHandle* result) {
  return ::test::name::Clone(value, result);
}

template <>
struct Equality<::test::name::UnionWithHandle> {
  bool operator()(const ::test::name::UnionWithHandle& _lhs,
                  const ::test::name::UnionWithHandle& _rhs) const {
    if (_lhs.Ordinal() != _rhs.Ordinal()) {
      return false;
    }

    switch (_lhs.Ordinal()) {
      case static_cast<fidl_xunion_tag_t>(
          ::test::name::UnionWithHandle::Tag::Invalid):
        return true;
      case ::test::name::UnionWithHandle::Tag::kH:
        return ::fidl::Equals(_lhs.h_, _rhs.h_);
      default:
        return *_lhs.UnknownData() == *_rhs.UnknownData();
    }
  }
};
template <>
struct CodingTraits<::test::name::TableWithHandle>
    : public EncodableCodingTraits<::test::name::TableWithHandle, 16> {};

inline zx_status_t Clone(const ::test::name::TableWithHandle& _value,
                         ::test::name::TableWithHandle* result) {
  return _value.Clone(result);
}
template <>
struct Equality<::test::name::TableWithHandle> {
  bool operator()(const ::test::name::TableWithHandle& _lhs,
                  const ::test::name::TableWithHandle& _rhs) const {
    if (_lhs.has_h()) {
      if (!_rhs.has_h()) {
        return false;
      }
      if (!::fidl::Equals(_lhs.h(), _rhs.h())) {
        return false;
      }
    } else if (_rhs.has_h()) {
      return false;
    }
    return true;
  }
};
template <>
struct CodingTraits<::test::name::HandlesInTypes>
    : public EncodableCodingTraits<::test::name::HandlesInTypes, 104> {};

template <>
struct HasPadding<::test::name::HandlesInTypes> : public std::true_type {};

template <>
struct IsMemcpyCompatible<::test::name::HandlesInTypes>
    : public internal::BoolConstant<
          !HasPadding<::test::name::HandlesInTypes>::value &&
          IsMemcpyCompatible<::std::array<::zx::vmo, 5>>::value &&
          IsMemcpyCompatible<
              ::std::vector<::std::array<::zx::vmo, 5>>>::value &&
          IsMemcpyCompatible<::std::vector<::zx::vmo>>::value &&
          IsMemcpyCompatible<::test::name::TableWithHandle>::value &&
          IsMemcpyCompatible<::test::name::UnionWithHandle>::value &&
          IsMemcpyCompatible<::zx::vmo>::value> {};

inline zx_status_t Clone(const ::test::name::HandlesInTypes& value,
                         ::test::name::HandlesInTypes* result) {
  return ::test::name::Clone(value, result);
}

template <>
struct Equality<::test::name::HandlesInTypes> {
  bool operator()(const ::test::name::HandlesInTypes& _lhs,
                  const ::test::name::HandlesInTypes& _rhs) const {
    if (!::fidl::Equals(_lhs.normal_handle, _rhs.normal_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.handle_in_vec, _rhs.handle_in_vec)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.handle_in_array, _rhs.handle_in_array)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.handle_in_mixed_vec_array,
                        _rhs.handle_in_mixed_vec_array)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.table_with_handle, _rhs.table_with_handle)) {
      return false;
    }
    if (!::fidl::Equals(_lhs.union_with_handle, _rhs.union_with_handle)) {
      return false;
    }
    return true;
  }
};
}  // namespace fidl
