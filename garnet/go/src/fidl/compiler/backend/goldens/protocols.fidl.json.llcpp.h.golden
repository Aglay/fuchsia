// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/cpp/vector_view.h>
#include <lib/fidl/cpp/string_view.h>
#include <lib/fidl/llcpp/array_wrapper.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace test {
namespace name {

class KitchenSink;
class ChannelProtocol;
class SocketControlProtocol;
class OvernetInternalProtocol;


class KitchenSink final {
 public:

  struct MethodARequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    ~SyncClient() {}

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = KitchenSink;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};


class ChannelProtocol final {
 public:

  struct MethodARequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    ~SyncClient() {}

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = ChannelProtocol;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};


class SocketControlProtocol final {
 public:

  struct MethodARequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    ~SyncClient() {}

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = SocketControlProtocol;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};


class OvernetInternalProtocol final {
 public:

  struct MethodARequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };

  struct EventAResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBResponse {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t result;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 24;
    static constexpr uint32_t MaxOutOfLine = 0;
  };
  struct MethodBRequest {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    int64_t a;
    int64_t b;

    static constexpr const fidl_type_t* Type = nullptr;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 32;
    static constexpr uint32_t MaxOutOfLine = 0;
    using ResponseType = MethodBResponse;
  };


  class SyncClient final {
   public:
    SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}

    ~SyncClient() {}

    zx_status_t MethodA(int64_t a, int64_t b);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodA(::fidl::BytePart _request_buffer, int64_t a, int64_t b);

    // Messages are encoded and decoded in-place.
    zx_status_t MethodA(::fidl::DecodedMessage<MethodARequest> params);

    zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    zx_status_t MethodB(::fidl::BytePart _request_buffer, int64_t a, int64_t b, ::fidl::BytePart _response_buffer, int64_t* out_result);

    // Messages are encoded and decoded in-place.
    ::fidl::DecodeResult<MethodBResponse> MethodB(::fidl::DecodedMessage<MethodBRequest> params, ::fidl::BytePart response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = OvernetInternalProtocol;
    using _Base = ::fidl::CompleterBase;

    using MethodACompleter = ::fidl::Completer<>;

    virtual void MethodA(int64_t a, int64_t b, MethodACompleter::Sync _completer) = 0;

    class MethodBCompleterBase : public _Base {
     public:
      void Reply(int64_t result);
      void Reply(::fidl::BytePart _buffer, int64_t result);
      void Reply(::fidl::DecodedMessage<MethodBResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using MethodBCompleter = ::fidl::Completer<MethodBCompleterBase>;

    virtual void MethodB(int64_t a, int64_t b, MethodBCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }

  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, int64_t a, int64_t b);

  // Caller provides the backing storage for FIDL message via response buffers.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::BytePart _buffer, int64_t a, int64_t b);

  // Messages are encoded in-place.
  static zx_status_t SendEventAEvent(::zx::unowned_channel _chan, ::fidl::DecodedMessage<EventAResponse> params);

};

}  // namespace name
}  // namespace test

namespace fidl {

template <>
struct IsFidlType<::test::name::KitchenSink::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::KitchenSink::MethodARequest> : public std::true_type {};
static_assert(sizeof(::test::name::KitchenSink::MethodARequest)
    == ::test::name::KitchenSink::MethodARequest::PrimarySize);
static_assert(offsetof(::test::name::KitchenSink::MethodARequest, a) == 16);
static_assert(offsetof(::test::name::KitchenSink::MethodARequest, b) == 24);

template <>
struct IsFidlType<::test::name::KitchenSink::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::KitchenSink::EventAResponse> : public std::true_type {};
static_assert(sizeof(::test::name::KitchenSink::EventAResponse)
    == ::test::name::KitchenSink::EventAResponse::PrimarySize);
static_assert(offsetof(::test::name::KitchenSink::EventAResponse, a) == 16);
static_assert(offsetof(::test::name::KitchenSink::EventAResponse, b) == 24);

template <>
struct IsFidlType<::test::name::KitchenSink::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::KitchenSink::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::test::name::KitchenSink::MethodBRequest)
    == ::test::name::KitchenSink::MethodBRequest::PrimarySize);
static_assert(offsetof(::test::name::KitchenSink::MethodBRequest, a) == 16);
static_assert(offsetof(::test::name::KitchenSink::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::test::name::KitchenSink::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::KitchenSink::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::test::name::KitchenSink::MethodBResponse)
    == ::test::name::KitchenSink::MethodBResponse::PrimarySize);
static_assert(offsetof(::test::name::KitchenSink::MethodBResponse, result) == 16);

template <>
struct IsFidlType<::test::name::ChannelProtocol::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::ChannelProtocol::MethodARequest> : public std::true_type {};
static_assert(sizeof(::test::name::ChannelProtocol::MethodARequest)
    == ::test::name::ChannelProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::test::name::ChannelProtocol::MethodARequest, a) == 16);
static_assert(offsetof(::test::name::ChannelProtocol::MethodARequest, b) == 24);

template <>
struct IsFidlType<::test::name::ChannelProtocol::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::ChannelProtocol::EventAResponse> : public std::true_type {};
static_assert(sizeof(::test::name::ChannelProtocol::EventAResponse)
    == ::test::name::ChannelProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::test::name::ChannelProtocol::EventAResponse, a) == 16);
static_assert(offsetof(::test::name::ChannelProtocol::EventAResponse, b) == 24);

template <>
struct IsFidlType<::test::name::ChannelProtocol::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::ChannelProtocol::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::test::name::ChannelProtocol::MethodBRequest)
    == ::test::name::ChannelProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::test::name::ChannelProtocol::MethodBRequest, a) == 16);
static_assert(offsetof(::test::name::ChannelProtocol::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::test::name::ChannelProtocol::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::ChannelProtocol::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::test::name::ChannelProtocol::MethodBResponse)
    == ::test::name::ChannelProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::test::name::ChannelProtocol::MethodBResponse, result) == 16);

template <>
struct IsFidlType<::test::name::SocketControlProtocol::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::SocketControlProtocol::MethodARequest> : public std::true_type {};
static_assert(sizeof(::test::name::SocketControlProtocol::MethodARequest)
    == ::test::name::SocketControlProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::test::name::SocketControlProtocol::MethodARequest, a) == 16);
static_assert(offsetof(::test::name::SocketControlProtocol::MethodARequest, b) == 24);

template <>
struct IsFidlType<::test::name::SocketControlProtocol::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::SocketControlProtocol::EventAResponse> : public std::true_type {};
static_assert(sizeof(::test::name::SocketControlProtocol::EventAResponse)
    == ::test::name::SocketControlProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::test::name::SocketControlProtocol::EventAResponse, a) == 16);
static_assert(offsetof(::test::name::SocketControlProtocol::EventAResponse, b) == 24);

template <>
struct IsFidlType<::test::name::SocketControlProtocol::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::SocketControlProtocol::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::test::name::SocketControlProtocol::MethodBRequest)
    == ::test::name::SocketControlProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::test::name::SocketControlProtocol::MethodBRequest, a) == 16);
static_assert(offsetof(::test::name::SocketControlProtocol::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::test::name::SocketControlProtocol::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::SocketControlProtocol::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::test::name::SocketControlProtocol::MethodBResponse)
    == ::test::name::SocketControlProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::test::name::SocketControlProtocol::MethodBResponse, result) == 16);

template <>
struct IsFidlType<::test::name::OvernetInternalProtocol::MethodARequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::OvernetInternalProtocol::MethodARequest> : public std::true_type {};
static_assert(sizeof(::test::name::OvernetInternalProtocol::MethodARequest)
    == ::test::name::OvernetInternalProtocol::MethodARequest::PrimarySize);
static_assert(offsetof(::test::name::OvernetInternalProtocol::MethodARequest, a) == 16);
static_assert(offsetof(::test::name::OvernetInternalProtocol::MethodARequest, b) == 24);

template <>
struct IsFidlType<::test::name::OvernetInternalProtocol::EventAResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::OvernetInternalProtocol::EventAResponse> : public std::true_type {};
static_assert(sizeof(::test::name::OvernetInternalProtocol::EventAResponse)
    == ::test::name::OvernetInternalProtocol::EventAResponse::PrimarySize);
static_assert(offsetof(::test::name::OvernetInternalProtocol::EventAResponse, a) == 16);
static_assert(offsetof(::test::name::OvernetInternalProtocol::EventAResponse, b) == 24);

template <>
struct IsFidlType<::test::name::OvernetInternalProtocol::MethodBRequest> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::OvernetInternalProtocol::MethodBRequest> : public std::true_type {};
static_assert(sizeof(::test::name::OvernetInternalProtocol::MethodBRequest)
    == ::test::name::OvernetInternalProtocol::MethodBRequest::PrimarySize);
static_assert(offsetof(::test::name::OvernetInternalProtocol::MethodBRequest, a) == 16);
static_assert(offsetof(::test::name::OvernetInternalProtocol::MethodBRequest, b) == 24);

template <>
struct IsFidlType<::test::name::OvernetInternalProtocol::MethodBResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::test::name::OvernetInternalProtocol::MethodBResponse> : public std::true_type {};
static_assert(sizeof(::test::name::OvernetInternalProtocol::MethodBResponse)
    == ::test::name::OvernetInternalProtocol::MethodBResponse::PrimarySize);
static_assert(offsetof(::test::name::OvernetInternalProtocol::MethodBResponse, result) == 16);

}  // namespace fidl
