// Code generated by fidlgen; DO NOT EDIT.

package json


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)





type parentFirstRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Request ParentInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mparentFirstRequest = _bindings.CreateLazyMarshaler(parentFirstRequest{})

func (msg *parentFirstRequest) Marshaler() _bindings.Marshaler {
	return _mparentFirstRequest
}

type parentWithCtxFirstRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Request ParentWithCtxInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mparentWithCtxFirstRequest = _bindings.CreateLazyMarshaler(parentWithCtxFirstRequest{})

func (msg *parentWithCtxFirstRequest) Marshaler() _bindings.Marshaler {
	return _mparentWithCtxFirstRequest
}

type childFirstRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Request ParentInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mchildFirstRequest = _bindings.CreateLazyMarshaler(childFirstRequest{})

func (msg *childFirstRequest) Marshaler() _bindings.Marshaler {
	return _mchildFirstRequest
}

type childWithCtxFirstRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Request ParentWithCtxInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mchildWithCtxFirstRequest = _bindings.CreateLazyMarshaler(childWithCtxFirstRequest{})

func (msg *childWithCtxFirstRequest) Marshaler() _bindings.Marshaler {
	return _mchildWithCtxFirstRequest
}

type childSecondRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Request ParentInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mchildSecondRequest = _bindings.CreateLazyMarshaler(childSecondRequest{})

func (msg *childSecondRequest) Marshaler() _bindings.Marshaler {
	return _mchildSecondRequest
}

type childWithCtxSecondRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Request ParentWithCtxInterfaceRequest`fidl:"0,0" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mchildWithCtxSecondRequest = _bindings.CreateLazyMarshaler(childWithCtxSecondRequest{})

func (msg *childWithCtxSecondRequest) Marshaler() _bindings.Marshaler {
	return _mchildWithCtxSecondRequest
}
const (
	ParentFirstOrdinal uint64 = 0x66a95ddc00000000
	ParentFirstGenOrdinal uint64 = 0x239f8fdea8de880c
)

type ParentWithCtxInterface _bindings.ChannelProxy


func (p *ParentWithCtxInterface) First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error {
	req_ := &parentWithCtxFirstRequest{
		Request: request,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ParentFirstGenOrdinal, req_)
	return err_
}

type ParentInterface _bindings.ChannelProxy


func (p *ParentInterface) First(request ParentInterfaceRequest) error {
	req_ := &parentFirstRequest{
		Request: request,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ParentFirstGenOrdinal, req_)
	return err_
}


type ParentWithCtx interface {
	First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error
}



type ParentWithCtxTransitionalBase struct {}




type Parent interface {
	First(request ParentInterfaceRequest) error
}

type ParentTransitionalBase struct {}


type ParentWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewParentWithCtxInterfaceRequest() (ParentWithCtxInterfaceRequest, *ParentWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ParentWithCtxInterfaceRequest(req), (*ParentWithCtxInterface)(cli), err
}

type ParentInterfaceRequest _bindings.InterfaceRequest

func NewParentInterfaceRequest() (ParentInterfaceRequest, *ParentInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ParentInterfaceRequest(req), (*ParentInterface)(cli), err
}

type ParentStub struct {
	Impl Parent
}

func (s_ *ParentStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	ctx, ok := _bindings.GetMarshalerContext(args_.Ctx)
	if !ok {
		return nil, false, _bindings.ErrMissingMarshalerContext
	}
	return s_.DispatchImplWithCtx2(args_.Ordinal, ctx, args_.Bytes, args_.HandleInfos)
}

func (s_ *ParentStub) DispatchImplWithCtx2(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handleInfos_ []_zx.HandleInfo) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case ParentFirstOrdinal:
		fallthrough
	case ParentFirstGenOrdinal:
		in_ := parentFirstRequest{}
		if _, _, err_ := _bindings.UnmarshalWithContext2(ctx_, data_, handleInfos_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.First(in_.Request)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type ParentWithCtxStub struct {
	Impl ParentWithCtx
}

func (s_ *ParentWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case ParentFirstOrdinal:
		fallthrough
	case ParentFirstGenOrdinal:
		in_ := parentWithCtxFirstRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if _, _, err_ := _bindings.UnmarshalWithContext2(marshalerCtx, args_.Bytes, args_.HandleInfos, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.First(args_.Ctx, in_.Request)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type ParentService struct {
	_bindings.BindingSet
}

func (s *ParentService) Add(impl Parent, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ParentStub{Impl: impl}, c, onError)
}

func (s *ParentService) AddWithCtx(impl ParentWithCtx, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ParentWithCtxStub{Impl: impl}, c, onError)
}

func (s *ParentService) EventProxyFor(key _bindings.BindingKey) (*ParentEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ParentEventProxy)(pxy), err
}

type ParentEventProxy _bindings.ChannelProxy



const (
	ChildFirstOrdinal uint64 = 0x66a95ddc00000000
	ChildFirstGenOrdinal uint64 = 0x239f8fdea8de880c
	ChildSecondOrdinal uint64 = 0x1240cb600000000
	ChildSecondGenOrdinal uint64 = 0x24799ea8916d88af
)

type ChildWithCtxInterface _bindings.ChannelProxy


func (p *ChildWithCtxInterface) First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error {
	req_ := &childWithCtxFirstRequest{
		Request: request,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ChildFirstGenOrdinal, req_)
	return err_
}

func (p *ChildWithCtxInterface) Second(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error {
	req_ := &childWithCtxSecondRequest{
		Request: request,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ChildSecondGenOrdinal, req_)
	return err_
}

type ChildInterface _bindings.ChannelProxy


func (p *ChildInterface) First(request ParentInterfaceRequest) error {
	req_ := &childFirstRequest{
		Request: request,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ChildFirstGenOrdinal, req_)
	return err_
}

func (p *ChildInterface) Second(request ParentInterfaceRequest) error {
	req_ := &childSecondRequest{
		Request: request,
	}
	err_ := ((*_bindings.ChannelProxy)(p)).Send(ChildSecondGenOrdinal, req_)
	return err_
}


type ChildWithCtx interface {
	First(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error
	Second(ctx_ _bindings.Context, request ParentWithCtxInterfaceRequest) error
}



type ChildWithCtxTransitionalBase struct {}




type Child interface {
	First(request ParentInterfaceRequest) error
	Second(request ParentInterfaceRequest) error
}

type ChildTransitionalBase struct {}


type ChildWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewChildWithCtxInterfaceRequest() (ChildWithCtxInterfaceRequest, *ChildWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChildWithCtxInterfaceRequest(req), (*ChildWithCtxInterface)(cli), err
}

type ChildInterfaceRequest _bindings.InterfaceRequest

func NewChildInterfaceRequest() (ChildInterfaceRequest, *ChildInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChildInterfaceRequest(req), (*ChildInterface)(cli), err
}

type ChildStub struct {
	Impl Child
}

func (s_ *ChildStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	ctx, ok := _bindings.GetMarshalerContext(args_.Ctx)
	if !ok {
		return nil, false, _bindings.ErrMissingMarshalerContext
	}
	return s_.DispatchImplWithCtx2(args_.Ordinal, ctx, args_.Bytes, args_.HandleInfos)
}

func (s_ *ChildStub) DispatchImplWithCtx2(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handleInfos_ []_zx.HandleInfo) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case ChildFirstOrdinal:
		fallthrough
	case ChildFirstGenOrdinal:
		in_ := childFirstRequest{}
		if _, _, err_ := _bindings.UnmarshalWithContext2(ctx_, data_, handleInfos_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.First(in_.Request)
		return nil, false, err_
	case ChildSecondOrdinal:
		fallthrough
	case ChildSecondGenOrdinal:
		in_ := childSecondRequest{}
		if _, _, err_ := _bindings.UnmarshalWithContext2(ctx_, data_, handleInfos_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.Second(in_.Request)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type ChildWithCtxStub struct {
	Impl ChildWithCtx
}

func (s_ *ChildWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case ChildFirstOrdinal:
		fallthrough
	case ChildFirstGenOrdinal:
		in_ := childWithCtxFirstRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if _, _, err_ := _bindings.UnmarshalWithContext2(marshalerCtx, args_.Bytes, args_.HandleInfos, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.First(args_.Ctx, in_.Request)
		return nil, false, err_
	case ChildSecondOrdinal:
		fallthrough
	case ChildSecondGenOrdinal:
		in_ := childWithCtxSecondRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if _, _, err_ := _bindings.UnmarshalWithContext2(marshalerCtx, args_.Bytes, args_.HandleInfos, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.Second(args_.Ctx, in_.Request)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type ChildService struct {
	_bindings.BindingSet
}

func (s *ChildService) Add(impl Child, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChildStub{Impl: impl}, c, onError)
}

func (s *ChildService) AddWithCtx(impl ChildWithCtx, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChildWithCtxStub{Impl: impl}, c, onError)
}

func (s *ChildService) EventProxyFor(key _bindings.BindingKey) (*ChildEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ChildEventProxy)(pxy), err
}

type ChildEventProxy _bindings.ChannelProxy



