// WARNING: This file is machine generated by fidlgen.

#include <empty_struct.test.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace fidl {
namespace test {
namespace json {

extern "C" const fidl_type_t v1_fidl_test_json_EmptyTable;
const fidl_type_t* Empty::FidlType = &v1_fidl_test_json_EmptyTable;

void Empty::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &__reserved, _offset + 0);
}

void Empty::Decode(::fidl::Decoder* _decoder, Empty* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->__reserved, _offset + 0);
}

zx_status_t Empty::Clone(Empty* _result) const {
  zx_status_t _status = ::fidl::Clone(__reserved, &_result->__reserved);
  if (_status != ZX_OK) return _status;
  return ZX_OK;
}
#ifdef __Fuchsia__
namespace {

extern "C" const fidl_type_t v1_fidl_test_json_EmptyProtocolSendRequestTable;

extern "C" const fidl_type_t v1_fidl_test_json_EmptyProtocolReceiveEventTable;

extern "C" const fidl_type_t
    v1_fidl_test_json_EmptyProtocolSendAndReceiveRequestTable;
extern "C" const fidl_type_t
    v1_fidl_test_json_EmptyProtocolSendAndReceiveResponseTable;

}  // namespace

EmptyProtocol::~EmptyProtocol() = default;

const fidl_type_t* EmptyProtocol_RequestDecoder::GetType(
    uint64_t ordinal, bool* out_needs_response) {
  switch (ordinal) {
    case internal::kEmptyProtocol_Send_Ordinal:
    case internal::kEmptyProtocol_Send_GenOrdinal:
      *out_needs_response = false;
      return &v1_fidl_test_json_EmptyProtocolSendRequestTable;
    case internal::kEmptyProtocol_SendAndReceive_Ordinal:
    case internal::kEmptyProtocol_SendAndReceive_GenOrdinal:
      *out_needs_response = true;
      return &v1_fidl_test_json_EmptyProtocolSendAndReceiveRequestTable;
    default:
      *out_needs_response = false;
      return nullptr;
  }
}

const fidl_type_t* EmptyProtocol_ResponseDecoder::GetType(uint64_t ordinal) {
  switch (ordinal) {
    case internal::kEmptyProtocol_Receive_Ordinal:
    case internal::kEmptyProtocol_Receive_GenOrdinal:
      return &v1_fidl_test_json_EmptyProtocolReceiveEventTable;
    case internal::kEmptyProtocol_SendAndReceive_Ordinal:
    case internal::kEmptyProtocol_SendAndReceive_GenOrdinal:
      return &v1_fidl_test_json_EmptyProtocolSendAndReceiveResponseTable;
    default:
      return nullptr;
  }
}

EmptyProtocol_EventSender::~EmptyProtocol_EventSender() = default;

EmptyProtocol_Sync::~EmptyProtocol_Sync() = default;

EmptyProtocol_Proxy::EmptyProtocol_Proxy(
    ::fidl::internal::ProxyController* controller)
    : controller_(controller) {
  (void)controller_;
}

EmptyProtocol_Proxy::~EmptyProtocol_Proxy() = default;

zx_status_t EmptyProtocol_Proxy::Dispatch_(::fidl::Message message) {
  zx_status_t status = ZX_OK;
  switch (message.ordinal()) {
    case internal::kEmptyProtocol_Receive_Ordinal:
    case internal::kEmptyProtocol_Receive_GenOrdinal: {
      if (!Receive) {
        status = ZX_OK;
        break;
      }
      const char* error_msg = nullptr;
      status = message.Decode(&v1_fidl_test_json_EmptyProtocolReceiveEventTable,
                              &error_msg);
      if (status != ZX_OK) {
        FIDL_REPORT_DECODING_ERROR(
            message, &v1_fidl_test_json_EmptyProtocolReceiveEventTable,
            error_msg);
        break;
      }
      ::fidl::Decoder decoder(std::move(message));
      auto arg0 = ::fidl::DecodeAs<Empty>(&decoder, 16);
      Receive(std::move(arg0));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}

void EmptyProtocol_Proxy::Send(Empty e) {
  ::fidl::Encoder _encoder(internal::kEmptyProtocol_Send_GenOrdinal);
  controller_->Send(&v1_fidl_test_json_EmptyProtocolSendRequestTable,
                    EmptyProtocol_RequestEncoder::Send(&_encoder, &e), nullptr);
}
namespace {

class EmptyProtocol_SendAndReceive_ResponseHandler final
    : public ::fidl::internal::MessageHandler {
 public:
  EmptyProtocol_SendAndReceive_ResponseHandler(
      EmptyProtocol::SendAndReceiveCallback callback)
      : callback_(std::move(callback)) {
    ZX_DEBUG_ASSERT_MSG(
        callback_,
        "Callback must not be empty for EmptyProtocol::SendAndReceive\n");
  }

  zx_status_t OnMessage(::fidl::Message message) override {
    const char* error_msg = nullptr;
    zx_status_t status = message.Decode(
        &v1_fidl_test_json_EmptyProtocolSendAndReceiveResponseTable,
        &error_msg);
    if (status != ZX_OK) {
      FIDL_REPORT_DECODING_ERROR(
          message, &v1_fidl_test_json_EmptyProtocolSendAndReceiveResponseTable,
          error_msg);
      return status;
    }
    ::fidl::Decoder decoder(std::move(message));
    auto arg0 = ::fidl::DecodeAs<Empty>(&decoder, 16);
    callback_(std::move(arg0));
    return ZX_OK;
  }

 private:
  EmptyProtocol::SendAndReceiveCallback callback_;

  EmptyProtocol_SendAndReceive_ResponseHandler(
      const EmptyProtocol_SendAndReceive_ResponseHandler&) = delete;
  EmptyProtocol_SendAndReceive_ResponseHandler& operator=(
      const EmptyProtocol_SendAndReceive_ResponseHandler&) = delete;
};

}  // namespace
void EmptyProtocol_Proxy::SendAndReceive(Empty e,
                                         SendAndReceiveCallback callback) {
  ::fidl::Encoder _encoder(internal::kEmptyProtocol_SendAndReceive_GenOrdinal);
  controller_->Send(
      &v1_fidl_test_json_EmptyProtocolSendAndReceiveRequestTable,
      EmptyProtocol_RequestEncoder::SendAndReceive(&_encoder, &e),
      std::make_unique<EmptyProtocol_SendAndReceive_ResponseHandler>(
          std::move(callback)));
}

EmptyProtocol_Stub::EmptyProtocol_Stub(EmptyProtocol_clazz* impl)
    : impl_(impl) {
  (void)impl_;
}

EmptyProtocol_Stub::~EmptyProtocol_Stub() = default;

namespace {

class EmptyProtocol_SendAndReceive_Responder final {
 public:
  EmptyProtocol_SendAndReceive_Responder(
      ::fidl::internal::PendingResponse response)
      : response_(std::move(response)) {}

  void operator()(Empty e) {
    ::fidl::Encoder _encoder(
        internal::kEmptyProtocol_SendAndReceive_GenOrdinal);
    response_.Send(
        &v1_fidl_test_json_EmptyProtocolSendAndReceiveResponseTable,
        EmptyProtocol_ResponseEncoder::SendAndReceive(&_encoder, &e));
  }

 private:
  ::fidl::internal::PendingResponse response_;
};

}  // namespace

zx_status_t EmptyProtocol_Stub::Dispatch_(
    ::fidl::Message message, ::fidl::internal::PendingResponse response) {
  bool needs_response;
  const fidl_type_t* request_type =
      EmptyProtocol_RequestDecoder::GetType(message.ordinal(), &needs_response);
  if (request_type == nullptr) {
    return ZX_ERR_NOT_SUPPORTED;
  }
  if (response.needs_response() != needs_response) {
    if (needs_response) {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message needing a response with no txid");
    } else {
      FIDL_REPORT_DECODING_ERROR(message, request_type,
                                 "Message not needing a response with a txid");
    }
    return ZX_ERR_INVALID_ARGS;
  }
  const char* error_msg = nullptr;
  zx_status_t status = message.Decode(request_type, &error_msg);
  if (status != ZX_OK) {
    FIDL_REPORT_DECODING_ERROR(message, request_type, error_msg);
    return status;
  }
  uint64_t ordinal = message.ordinal();
  switch (ordinal) {
    case internal::kEmptyProtocol_Send_Ordinal:
    case internal::kEmptyProtocol_Send_GenOrdinal: {
      ::fidl::Decoder decoder(std::move(message));
      auto arg0 = ::fidl::DecodeAs<Empty>(&decoder, 16);
      impl_->Send(std::move(arg0));
      break;
    }
    case internal::kEmptyProtocol_SendAndReceive_Ordinal:
    case internal::kEmptyProtocol_SendAndReceive_GenOrdinal: {
      ::fidl::Decoder decoder(std::move(message));
      auto arg0 = ::fidl::DecodeAs<Empty>(&decoder, 16);
      impl_->SendAndReceive(
          std::move(arg0),
          EmptyProtocol_SendAndReceive_Responder(std::move(response)));
      break;
    }
    default: {
      status = ZX_ERR_NOT_SUPPORTED;
      break;
    }
  }
  return status;
}
void EmptyProtocol_Stub::Receive(Empty e) {
  ::fidl::Encoder _encoder(internal::kEmptyProtocol_Receive_GenOrdinal);
  sender_()->Send(&v1_fidl_test_json_EmptyProtocolReceiveEventTable,
                  EmptyProtocol_ResponseEncoder::Receive(&_encoder, &e));
}

EmptyProtocol_SyncProxy::EmptyProtocol_SyncProxy(::zx::channel channel)
    : proxy_(::std::move(channel)) {}

EmptyProtocol_SyncProxy::~EmptyProtocol_SyncProxy() = default;

zx_status_t EmptyProtocol_SyncProxy::Send(Empty e) {
  ::fidl::Encoder _encoder(internal::kEmptyProtocol_Send_GenOrdinal);
  return proxy_.Send(&v1_fidl_test_json_EmptyProtocolSendRequestTable,
                     EmptyProtocol_RequestEncoder::Send(&_encoder, &e));
}

zx_status_t EmptyProtocol_SyncProxy::SendAndReceive(Empty e, Empty* out_e) {
  ::fidl::Encoder _encoder(internal::kEmptyProtocol_SendAndReceive_GenOrdinal);
  ::fidl::MessageBuffer buffer_;
  ::fidl::Message response_ = buffer_.CreateEmptyMessage();
  zx_status_t status_ = proxy_.Call(
      &v1_fidl_test_json_EmptyProtocolSendAndReceiveRequestTable,
      &v1_fidl_test_json_EmptyProtocolSendAndReceiveResponseTable,
      EmptyProtocol_RequestEncoder::SendAndReceive(&_encoder, &e), &response_);
  if (status_ != ZX_OK) return status_;
  ::fidl::Decoder decoder_(std::move(response_));
  *out_e = ::fidl::DecodeAs<Empty>(&decoder_, 16);
  return ZX_OK;
}

#endif  // __Fuchsia__

}  // namespace json
}  // namespace test
}  // namespace fidl
