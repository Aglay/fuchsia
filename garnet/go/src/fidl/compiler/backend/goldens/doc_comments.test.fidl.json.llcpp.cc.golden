// WARNING: This file is machine generated by fidlgen.

#include <doc_comments.test.fidl.json.llcpp.h>
#include <memory>

namespace test {
namespace name {

namespace {

[[maybe_unused]]
constexpr uint32_t kInterface_Method_Ordinal = 1061382220u;

}  // namespace

zx_status_t Interface::SyncClient::Method() {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodRequest*>(_write_bytes);
  _request._hdr.ordinal = kInterface_Method_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodRequest));
  ::fidl::DecodedMessage<MethodRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(this->channel_, std::move(_encode_request_result.message));
}


bool Interface::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kInterface_Method_Ordinal: {
      auto result = ::fidl::DecodeAs<MethodRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->Method(
        Interface::MethodCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool Interface::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


void ::test::name::Union::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::test::name::Union, Field_) == 4);
  static_assert(sizeof(::test::name::Union) == ::test::name::Union::PrimarySize);
}

}  // namespace name
}  // namespace test
