// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"
#include <lib/fidl/cpp/overnet_stream.h>


namespace test {
namespace name {

class KitchenSink;
using KitchenSinkPtr = ::fidl::InterfacePtr<KitchenSink>;
class KitchenSink_Proxy;
class KitchenSink_Stub;
class KitchenSink_EventSender;
class KitchenSink_Sync;
using KitchenSinkSyncPtr = ::fidl::SynchronousInterfacePtr<KitchenSink>;
class KitchenSink_SyncProxy;
class KitchenSink;
class KitchenSink_Proxy;
class KitchenSink_Stub;
class KitchenSink;
using KitchenSinkPtr = ::fidl::InterfacePtr<KitchenSink>;
class KitchenSink_Proxy;
class KitchenSink_Stub;
class KitchenSink_EventSender;
class KitchenSink_Sync;
using KitchenSinkSyncPtr = ::fidl::SynchronousInterfacePtr<KitchenSink>;
class KitchenSink_SyncProxy;
class ChannelProtocol;
using ChannelProtocolPtr = ::fidl::InterfacePtr<ChannelProtocol>;
class ChannelProtocol_Proxy;
class ChannelProtocol_Stub;
class ChannelProtocol_EventSender;
class ChannelProtocol_Sync;
using ChannelProtocolSyncPtr = ::fidl::SynchronousInterfacePtr<ChannelProtocol>;
class ChannelProtocol_SyncProxy;
class SocketControlProtocol;
using SocketControlProtocolPtr = ::fidl::InterfacePtr<SocketControlProtocol>;
class SocketControlProtocol_Proxy;
class SocketControlProtocol_Stub;
class SocketControlProtocol_EventSender;
class SocketControlProtocol_Sync;
using SocketControlProtocolSyncPtr = ::fidl::SynchronousInterfacePtr<SocketControlProtocol>;
class SocketControlProtocol_SyncProxy;
class OvernetStreamProtocol;
class OvernetStreamProtocol_Proxy;
class OvernetStreamProtocol_Stub;

class KitchenSink {
 public:
  using Proxy_ = KitchenSink_Proxy;
  using Stub_ = KitchenSink_Stub;
  using EventSender_ = KitchenSink_EventSender;
  using Sync_ = KitchenSink_Sync;
  virtual ~KitchenSink();
      
  virtual void MethodA(int64_t a, int64_t b) = 0;
  using EventACallback =
      fit::function<void(int64_t, int64_t)>;
  using MethodBCallback =
      fit::function<void(int64_t)>;
      
  virtual void MethodB(int64_t a, int64_t b, MethodBCallback callback) = 0;
};

class KitchenSink_EventSender {
 public:
  virtual ~KitchenSink_EventSender();
  virtual void EventA(int64_t a, int64_t b) = 0;
};

class KitchenSink_Sync {
 public:
  using Proxy_ = KitchenSink_SyncProxy;
  virtual ~KitchenSink_Sync();
  virtual zx_status_t MethodA(int64_t a, int64_t b) = 0;
  virtual zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) = 0;
};

class KitchenSink_Proxy : public ::fidl::internal::Proxy, public KitchenSink {
 public:
  explicit KitchenSink_Proxy(::fidl::internal::ProxyController* controller);
  ~KitchenSink_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void MethodA(int64_t a, int64_t b) override;
  EventACallback EventA;
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override;

 private:
  KitchenSink_Proxy(const KitchenSink_Proxy&) = delete;
  KitchenSink_Proxy& operator=(const KitchenSink_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class KitchenSink_Stub : public ::fidl::internal::Stub, public KitchenSink_EventSender {
 public:
  typedef class KitchenSink KitchenSink_clazz;
  explicit KitchenSink_Stub(KitchenSink_clazz* impl);
  ~KitchenSink_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;
  void EventA(int64_t a, int64_t b) override;

 private:
  KitchenSink_clazz* impl_;
};

class KitchenSink_SyncProxy : public KitchenSink_Sync {
 public:
  explicit KitchenSink_SyncProxy(::zx::channel channel);
  ~KitchenSink_SyncProxy() override;

  ::fidl::internal::SynchronousProxy& proxy() { return proxy_; }
  zx_status_t MethodA(int64_t a, int64_t b) override;
  zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
};

class KitchenSink {
 public:
  using Proxy_ = KitchenSink_Proxy;
  using Stub_ = KitchenSink_Stub;
  virtual ~KitchenSink();
      
  virtual void MethodA(int64_t a, int64_t b) = 0;
  virtual void EventA(int64_t a, int64_t b) = 0;
  using MethodBCallback =
      fit::function<void(int64_t)>;
      
  virtual void MethodB(int64_t a, int64_t b, MethodBCallback callback) = 0;
};

class KitchenSink_Proxy : public ::fidl::OvernetStream, public KitchenSink {
 public:
 KitchenSink_Proxy() = default;
  ~KitchenSink_Proxy() override;
  void MethodA(int64_t a, int64_t b) override final;
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override final;

 private:
  zx_status_t Dispatch_(::fidl::Message* message) override final;
  KitchenSink_Proxy(const KitchenSink_Proxy&) = delete;
  KitchenSink_Proxy& operator=(const KitchenSink_Proxy&) = delete;
};

class KitchenSink_Stub : public ::fidl::OvernetStream, public KitchenSink {
 public:
  typedef class KitchenSink KitchenSink_clazz;
  KitchenSink_Stub() = default;
  ~KitchenSink_Stub() override;
  virtual void EventA(int64_t a, int64_t b) override final;

 private:
  zx_status_t Dispatch_(::fidl::Message* message) override final;
};

class KitchenSink {
 public:
  using Proxy_ = KitchenSink_Proxy;
  using Stub_ = KitchenSink_Stub;
  using EventSender_ = KitchenSink_EventSender;
  using Sync_ = KitchenSink_Sync;
  virtual ~KitchenSink();
      
  virtual void MethodA(int64_t a, int64_t b) = 0;
  using EventACallback =
      fit::function<void(int64_t, int64_t)>;
  using MethodBCallback =
      fit::function<void(int64_t)>;
      
  virtual void MethodB(int64_t a, int64_t b, MethodBCallback callback) = 0;
};

class KitchenSink_EventSender {
 public:
  virtual ~KitchenSink_EventSender();
  virtual void EventA(int64_t a, int64_t b) = 0;
};

class KitchenSink_Sync {
 public:
  using Proxy_ = KitchenSink_SyncProxy;
  virtual ~KitchenSink_Sync();
  virtual zx_status_t MethodA(int64_t a, int64_t b) = 0;
  virtual zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) = 0;
};

class KitchenSink_Proxy : public ::fidl::internal::Proxy, public KitchenSink {
 public:
  explicit KitchenSink_Proxy(::fidl::internal::ProxyController* controller);
  ~KitchenSink_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void MethodA(int64_t a, int64_t b) override;
  EventACallback EventA;
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override;

 private:
  KitchenSink_Proxy(const KitchenSink_Proxy&) = delete;
  KitchenSink_Proxy& operator=(const KitchenSink_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class KitchenSink_Stub : public ::fidl::internal::Stub, public KitchenSink_EventSender {
 public:
  typedef class KitchenSink KitchenSink_clazz;
  explicit KitchenSink_Stub(KitchenSink_clazz* impl);
  ~KitchenSink_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;
  void EventA(int64_t a, int64_t b) override;

 private:
  KitchenSink_clazz* impl_;
};

class KitchenSink_SyncProxy : public KitchenSink_Sync {
 public:
  explicit KitchenSink_SyncProxy(::zx::channel channel);
  ~KitchenSink_SyncProxy() override;

  ::fidl::internal::SynchronousProxy& proxy() { return proxy_; }
  zx_status_t MethodA(int64_t a, int64_t b) override;
  zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
};

class ChannelProtocol {
 public:
  using Proxy_ = ChannelProtocol_Proxy;
  using Stub_ = ChannelProtocol_Stub;
  using EventSender_ = ChannelProtocol_EventSender;
  using Sync_ = ChannelProtocol_Sync;
  virtual ~ChannelProtocol();
      
  virtual void MethodA(int64_t a, int64_t b) = 0;
  using EventACallback =
      fit::function<void(int64_t, int64_t)>;
  using MethodBCallback =
      fit::function<void(int64_t)>;
      
  virtual void MethodB(int64_t a, int64_t b, MethodBCallback callback) = 0;
};

class ChannelProtocol_EventSender {
 public:
  virtual ~ChannelProtocol_EventSender();
  virtual void EventA(int64_t a, int64_t b) = 0;
};

class ChannelProtocol_Sync {
 public:
  using Proxy_ = ChannelProtocol_SyncProxy;
  virtual ~ChannelProtocol_Sync();
  virtual zx_status_t MethodA(int64_t a, int64_t b) = 0;
  virtual zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) = 0;
};

class ChannelProtocol_Proxy : public ::fidl::internal::Proxy, public ChannelProtocol {
 public:
  explicit ChannelProtocol_Proxy(::fidl::internal::ProxyController* controller);
  ~ChannelProtocol_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void MethodA(int64_t a, int64_t b) override;
  EventACallback EventA;
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override;

 private:
  ChannelProtocol_Proxy(const ChannelProtocol_Proxy&) = delete;
  ChannelProtocol_Proxy& operator=(const ChannelProtocol_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class ChannelProtocol_Stub : public ::fidl::internal::Stub, public ChannelProtocol_EventSender {
 public:
  typedef class ChannelProtocol ChannelProtocol_clazz;
  explicit ChannelProtocol_Stub(ChannelProtocol_clazz* impl);
  ~ChannelProtocol_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;
  void EventA(int64_t a, int64_t b) override;

 private:
  ChannelProtocol_clazz* impl_;
};

class ChannelProtocol_SyncProxy : public ChannelProtocol_Sync {
 public:
  explicit ChannelProtocol_SyncProxy(::zx::channel channel);
  ~ChannelProtocol_SyncProxy() override;

  ::fidl::internal::SynchronousProxy& proxy() { return proxy_; }
  zx_status_t MethodA(int64_t a, int64_t b) override;
  zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
};

class SocketControlProtocol {
 public:
  using Proxy_ = SocketControlProtocol_Proxy;
  using Stub_ = SocketControlProtocol_Stub;
  using EventSender_ = SocketControlProtocol_EventSender;
  using Sync_ = SocketControlProtocol_Sync;
  virtual ~SocketControlProtocol();
      
  virtual void MethodA(int64_t a, int64_t b) = 0;
  using EventACallback =
      fit::function<void(int64_t, int64_t)>;
  using MethodBCallback =
      fit::function<void(int64_t)>;
      
  virtual void MethodB(int64_t a, int64_t b, MethodBCallback callback) = 0;
};

class SocketControlProtocol_EventSender {
 public:
  virtual ~SocketControlProtocol_EventSender();
  virtual void EventA(int64_t a, int64_t b) = 0;
};

class SocketControlProtocol_Sync {
 public:
  using Proxy_ = SocketControlProtocol_SyncProxy;
  virtual ~SocketControlProtocol_Sync();
  virtual zx_status_t MethodA(int64_t a, int64_t b) = 0;
  virtual zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) = 0;
};

class SocketControlProtocol_Proxy : public ::fidl::internal::Proxy, public SocketControlProtocol {
 public:
  explicit SocketControlProtocol_Proxy(::fidl::internal::ProxyController* controller);
  ~SocketControlProtocol_Proxy() override;

  zx_status_t Dispatch_(::fidl::Message message) override;
  void MethodA(int64_t a, int64_t b) override;
  EventACallback EventA;
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override;

 private:
  SocketControlProtocol_Proxy(const SocketControlProtocol_Proxy&) = delete;
  SocketControlProtocol_Proxy& operator=(const SocketControlProtocol_Proxy&) = delete;

  ::fidl::internal::ProxyController* controller_;
};

class SocketControlProtocol_Stub : public ::fidl::internal::Stub, public SocketControlProtocol_EventSender {
 public:
  typedef class SocketControlProtocol SocketControlProtocol_clazz;
  explicit SocketControlProtocol_Stub(SocketControlProtocol_clazz* impl);
  ~SocketControlProtocol_Stub() override;

  zx_status_t Dispatch_(::fidl::Message message,
                        ::fidl::internal::PendingResponse response) override;
  void EventA(int64_t a, int64_t b) override;

 private:
  SocketControlProtocol_clazz* impl_;
};

class SocketControlProtocol_SyncProxy : public SocketControlProtocol_Sync {
 public:
  explicit SocketControlProtocol_SyncProxy(::zx::channel channel);
  ~SocketControlProtocol_SyncProxy() override;

  ::fidl::internal::SynchronousProxy& proxy() { return proxy_; }
  zx_status_t MethodA(int64_t a, int64_t b) override;
  zx_status_t MethodB(int64_t a, int64_t b, int64_t* out_result) override;

  private:
  ::fidl::internal::SynchronousProxy proxy_;
};

class OvernetStreamProtocol {
 public:
  using Proxy_ = OvernetStreamProtocol_Proxy;
  using Stub_ = OvernetStreamProtocol_Stub;
  virtual ~OvernetStreamProtocol();
      
  virtual void MethodA(int64_t a, int64_t b) = 0;
  virtual void EventA(int64_t a, int64_t b) = 0;
  using MethodBCallback =
      fit::function<void(int64_t)>;
      
  virtual void MethodB(int64_t a, int64_t b, MethodBCallback callback) = 0;
};

class OvernetStreamProtocol_Proxy : public ::fidl::OvernetStream, public OvernetStreamProtocol {
 public:
 OvernetStreamProtocol_Proxy() = default;
  ~OvernetStreamProtocol_Proxy() override;
  void MethodA(int64_t a, int64_t b) override final;
  void MethodB(int64_t a, int64_t b, MethodBCallback callback) override final;

 private:
  zx_status_t Dispatch_(::fidl::Message* message) override final;
  OvernetStreamProtocol_Proxy(const OvernetStreamProtocol_Proxy&) = delete;
  OvernetStreamProtocol_Proxy& operator=(const OvernetStreamProtocol_Proxy&) = delete;
};

class OvernetStreamProtocol_Stub : public ::fidl::OvernetStream, public OvernetStreamProtocol {
 public:
  typedef class OvernetStreamProtocol OvernetStreamProtocol_clazz;
  OvernetStreamProtocol_Stub() = default;
  ~OvernetStreamProtocol_Stub() override;
  virtual void EventA(int64_t a, int64_t b) override final;

 private:
  zx_status_t Dispatch_(::fidl::Message* message) override final;
};
}  // namespace name
}  // namespace test
namespace fidl {
}  // namespace fidl
