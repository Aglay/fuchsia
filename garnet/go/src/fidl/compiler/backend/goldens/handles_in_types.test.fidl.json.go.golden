// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)





type HandlesInTypes struct {
	_ struct{} `fidl:"s" fidl_size_v1:"104" fidl_alignment_v1:"8"`
	NormalHandle _zx.VMO`fidl:"0,0" fidl_offset_v1:"0" fidl_handle_subtype:"vmo" fidl_handle_rights:"2147483648"`
	HandleInVec []_zx.VMO`fidl:"8,,0" fidl_offset_v1:"8" fidl_handle_subtype:"vmo" fidl_handle_rights:"2147483648"`
	HandleInArray [5]_zx.VMO`fidl:"24,0" fidl_offset_v1:"24" fidl_handle_subtype:"vmo" fidl_handle_rights:"2147483648"`
	HandleInMixedVecArray [][5]_zx.VMO`fidl:"48,,0" fidl_offset_v1:"48" fidl_handle_subtype:"vmo" fidl_handle_rights:"2147483648"`
	TableWithHandle TableWithHandle`fidl:"64" fidl_offset_v1:"64"`
	UnionWithHandle UnionWithHandle`fidl:"80" fidl_offset_v1:"80"`
}

var _mHandlesInTypes = _bindings.CreateLazyMarshaler(HandlesInTypes{})

func (msg *HandlesInTypes) Marshaler() _bindings.Marshaler {
	return _mHandlesInTypes
}
type I_unionWithHandleTag uint64
const (
	UnionWithHandle_unknownData = 0  // 0x00000000
	UnionWithHandleH = 1 // 0x00000001
)


type UnionWithHandle struct {
	I_unionWithHandleTag `fidl:"x" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I_unknownData []byte
	H _zx.VMO  `fidl:"1,0" fidl_hashed_ord:"1108158728" fidl_explicit_ord:"1" fidl_handle_subtype:"vmo" fidl_handle_rights:"2147483648"`
}

func (_m *UnionWithHandle) Which() I_unionWithHandleTag {
	switch _m.I_unionWithHandleTag {
	case 1:
		return UnionWithHandleH
	default:
		return UnionWithHandle_unknownData
	}
}

func (_m *UnionWithHandle) Ordinal() uint64 {
	return uint64(_m.I_unionWithHandleTag)
}

func (_m *UnionWithHandle) SetH(h _zx.VMO) {
	_m.I_unionWithHandleTag = UnionWithHandleH
	_m.H = h
}

func UnionWithHandleWithH(h _zx.VMO) UnionWithHandle {
	var _u UnionWithHandle
	_u.SetH(h)
	return _u
}



type TableWithHandle struct {
	_ struct{} `fidl:"t" fidl_size_v1:"16" fidl_alignment_v1:"8"`
	H _zx.VMO `fidl:"1,0" fidl_handle_subtype:"vmo" fidl_handle_rights:"2147483648"`
	HPresent bool
}

func (u *TableWithHandle) SetH(h _zx.VMO) {
	u.H = h
	u.HPresent = true
}

func (u *TableWithHandle) GetH() _zx.VMO {
	return u.H
}

func (u *TableWithHandle) GetHWithDefault(_default _zx.VMO) _zx.VMO {
	if !u.HasH() {
		return _default
	}
	return u.H
}

func (u *TableWithHandle) HasH() bool {
	return u.HPresent
}

func (u *TableWithHandle) ClearH() {
	u.HPresent = false
}
