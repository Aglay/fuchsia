// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"

#include <test/name/cpp/fidl.h>

namespace fidl {
namespace fuzzing {


using SimpleTable = ::test::name::SimpleTable;
using OlderSimpleTable = ::test::name::OlderSimpleTable;
using NewerSimpleTable = ::test::name::NewerSimpleTable;
using EmptyTable = ::test::name::EmptyTable;


template<>
struct MinSize<SimpleTable> {
  operator size_t() {
    return MinSize<int64_t>() + MinSize<int64_t>();
  }
};
template<>
struct Allocate<SimpleTable> {
  SimpleTable operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<SimpleTable>());
    const size_t slack_per_member = (*size - MinSize<SimpleTable>()) / 2;
    SimpleTable out;
    size_t out_size;
    out_size = MinSize<int64_t>() + slack_per_member;
    out.set_x(Allocate<int64_t>{}(src, &out_size));
    out_size = MinSize<int64_t>() + slack_per_member;
    out.set_y(Allocate<int64_t>{}(src, &out_size));
    return out;
  }
};
template<>
struct MinSize<OlderSimpleTable> {
  operator size_t() {
    return MinSize<int64_t>();
  }
};
template<>
struct Allocate<OlderSimpleTable> {
  OlderSimpleTable operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<OlderSimpleTable>());
    const size_t slack_per_member = (*size - MinSize<OlderSimpleTable>()) / 1;
    OlderSimpleTable out;
    size_t out_size;
    out_size = MinSize<int64_t>() + slack_per_member;
    out.set_x(Allocate<int64_t>{}(src, &out_size));
    return out;
  }
};
template<>
struct MinSize<NewerSimpleTable> {
  operator size_t() {
    return MinSize<int64_t>() + MinSize<int64_t>() + MinSize<int64_t>();
  }
};
template<>
struct Allocate<NewerSimpleTable> {
  NewerSimpleTable operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<NewerSimpleTable>());
    const size_t slack_per_member = (*size - MinSize<NewerSimpleTable>()) / 3;
    NewerSimpleTable out;
    size_t out_size;
    out_size = MinSize<int64_t>() + slack_per_member;
    out.set_x(Allocate<int64_t>{}(src, &out_size));
    out_size = MinSize<int64_t>() + slack_per_member;
    out.set_y(Allocate<int64_t>{}(src, &out_size));
    out_size = MinSize<int64_t>() + slack_per_member;
    out.set_z(Allocate<int64_t>{}(src, &out_size));
    return out;
  }
};
template<>
struct MinSize<EmptyTable> {
  operator size_t() {
    return ;
  }
};
template<>
struct Allocate<EmptyTable> {
  EmptyTable operator()(FuzzInput* src, size_t* size) {
    ZX_ASSERT(*size >= MinSize<EmptyTable>());
    const size_t slack_per_member = (*size - MinSize<EmptyTable>()) / 0;
    EmptyTable out;
    size_t out_size;
    return out;
  }
};

}  // namespace fuzzing
}  // namespace fidl
