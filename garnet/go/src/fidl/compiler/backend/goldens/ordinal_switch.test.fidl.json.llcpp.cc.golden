// WARNING: This file is machine generated by fidlgen.

#include <ordinal_switch.test.fidl.json.llcpp.h>
#include <memory>

namespace test {
namespace name {

namespace {

[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_OrdinalFive_Ordinal = 2005164903u;
[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal = 667506719u;
[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_EventOrdinalFifteen_Ordinal = 1467258273u;
[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_EventOnlyGeneratedOrdinal_Ordinal = 2146190926u;

}  // namespace

zx_status_t SwitchingOrdinals::SyncClient::OrdinalFive() {
  return SwitchingOrdinals::Call::OrdinalFive(zx::unowned_channel(this->channel_));
}

zx_status_t SwitchingOrdinals::Call::OrdinalFive(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OrdinalFiveRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<OrdinalFiveRequest*>(_write_bytes);
  _request._hdr.ordinal = kSwitchingOrdinals_OrdinalFive_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OrdinalFiveRequest));
  ::fidl::DecodedMessage<OrdinalFiveRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}


zx_status_t SwitchingOrdinals::SyncClient::OnlyGeneratedOrdinal() {
  return SwitchingOrdinals::Call::OnlyGeneratedOrdinal(zx::unowned_channel(this->channel_));
}

zx_status_t SwitchingOrdinals::Call::OnlyGeneratedOrdinal(zx::unowned_channel _client_end) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OnlyGeneratedOrdinalRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<OnlyGeneratedOrdinalRequest*>(_write_bytes);
  _request._hdr.ordinal = kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OnlyGeneratedOrdinalRequest));
  ::fidl::DecodedMessage<OnlyGeneratedOrdinalRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  return ::fidl::Write(std::move(_client_end), std::move(_encode_request_result.message));
}


bool SwitchingOrdinals::TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  if (msg->num_bytes < sizeof(fidl_message_header_t)) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_INVALID_ARGS);
    return true;
  }
  fidl_message_header_t* hdr = reinterpret_cast<fidl_message_header_t*>(msg->bytes);
  switch (hdr->ordinal) {
    case kSwitchingOrdinals_OrdinalFive_Ordinal: {
      auto result = ::fidl::DecodeAs<OrdinalFiveRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->OrdinalFive(
        Interface::OrdinalFiveCompleter::Sync(txn));
      return true;
    }
    case kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal: {
      auto result = ::fidl::DecodeAs<OnlyGeneratedOrdinalRequest>(msg);
      if (result.status != ZX_OK) {
        txn->Close(ZX_ERR_INVALID_ARGS);
        return true;
      }
      impl->OnlyGeneratedOrdinal(
        Interface::OnlyGeneratedOrdinalCompleter::Sync(txn));
      return true;
    }
    default: {
      return false;
    }
  }
}

bool SwitchingOrdinals::Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
  bool found = TryDispatch(impl, msg, txn);
  if (!found) {
    zx_handle_close_many(msg->handles, msg->num_handles);
    txn->Close(ZX_ERR_NOT_SUPPORTED);
  }
  return found;
}


zx_status_t SwitchingOrdinals::SendEventOrdinalFifteenEvent(::zx::unowned_channel _chan) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventOrdinalFifteenResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventOrdinalFifteenResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kSwitchingOrdinals_EventOrdinalFifteen_Ordinal;
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventOrdinalFifteenResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventOrdinalFifteenResponse>(std::move(_response_bytes)));
}


zx_status_t SwitchingOrdinals::SendEventOnlyGeneratedOrdinalEvent(::zx::unowned_channel _chan) {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<EventOnlyGeneratedOrdinalResponse>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _response = *reinterpret_cast<EventOnlyGeneratedOrdinalResponse*>(_write_bytes);
  _response._hdr = {};
  _response._hdr.ordinal = kSwitchingOrdinals_EventOnlyGeneratedOrdinal_Ordinal;
  ::fidl::BytePart _response_bytes(_write_bytes, _kWriteAllocSize, sizeof(EventOnlyGeneratedOrdinalResponse));
  return ::fidl::Write(zx::unowned_channel(_chan), ::fidl::DecodedMessage<EventOnlyGeneratedOrdinalResponse>(std::move(_response_bytes)));
}


}  // namespace name
}  // namespace test
