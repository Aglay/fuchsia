// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)




const (
	FirstProtocolMethodOnFirstOrdinal uint64 = 0x2838a83100000000
	FirstProtocolMethodOnFirstGenOrdinal uint64 = 0x580cbd0d43ccbe3b
)

type FirstProtocolInterface _bindings.ChannelProxy


func (p *FirstProtocolInterface) MethodOnFirst() error {
	var req_ _bindings.Message
	err_ := ((*_bindings.ChannelProxy)(p)).Send(FirstProtocolMethodOnFirstGenOrdinal, req_)
	return err_
}


type FirstProtocolWithCtx interface {
	MethodOnFirst(ctx_ _bindings.Context) error
}



type FirstProtocolWithCtxTransitionalBase struct {}




type FirstProtocol interface {
	MethodOnFirst() error
}

type FirstProtocolTransitionalBase struct {}


type FirstProtocolInterfaceRequest _bindings.InterfaceRequest

func NewFirstProtocolInterfaceRequest() (FirstProtocolInterfaceRequest, *FirstProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return FirstProtocolInterfaceRequest(req), (*FirstProtocolInterface)(cli), err
}

type FirstProtocolStub struct {
	Impl FirstProtocol
}

func (s_ *FirstProtocolStub) DispatchImpl(ctx_ _bindings.Context, ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	return s_.DispatchImplWithCtx(ordinal_, ctx_.GetMarshalerContext(), data_, handles_)
}

func (s_ *FirstProtocolStub) DispatchImplWithCtx(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case FirstProtocolMethodOnFirstOrdinal:
		fallthrough
	case FirstProtocolMethodOnFirstGenOrdinal:
		err_ := s_.Impl.MethodOnFirst()
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type FirstProtocolWithCtxStub struct {
	Impl FirstProtocolWithCtx
}

func (s_ *FirstProtocolWithCtxStub) DispatchImpl(ctx_ _bindings.Context, ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case FirstProtocolMethodOnFirstOrdinal:
		fallthrough
	case FirstProtocolMethodOnFirstGenOrdinal:
		err_ := s_.Impl.MethodOnFirst(ctx_)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type FirstProtocolService struct {
	_bindings.BindingSet
}

func (s *FirstProtocolService) Add(impl FirstProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&FirstProtocolStub{Impl: impl}, c, onError)
}

func (s *FirstProtocolService) EventProxyFor(key _bindings.BindingKey) (*FirstProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*FirstProtocolEventProxy)(pxy), err
}

type FirstProtocolEventProxy _bindings.ChannelProxy



const (
	SecondProtocolMethodOnSecondOrdinal uint64 = 0xd09c00f00000000
	SecondProtocolMethodOnSecondGenOrdinal uint64 = 0x5785f9c1f2aece21
)

type SecondProtocolInterface _bindings.ChannelProxy


func (p *SecondProtocolInterface) MethodOnSecond() error {
	var req_ _bindings.Message
	err_ := ((*_bindings.ChannelProxy)(p)).Send(SecondProtocolMethodOnSecondGenOrdinal, req_)
	return err_
}


type SecondProtocolWithCtx interface {
	MethodOnSecond(ctx_ _bindings.Context) error
}



type SecondProtocolWithCtxTransitionalBase struct {}




type SecondProtocol interface {
	MethodOnSecond() error
}

type SecondProtocolTransitionalBase struct {}


type SecondProtocolInterfaceRequest _bindings.InterfaceRequest

func NewSecondProtocolInterfaceRequest() (SecondProtocolInterfaceRequest, *SecondProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return SecondProtocolInterfaceRequest(req), (*SecondProtocolInterface)(cli), err
}

type SecondProtocolStub struct {
	Impl SecondProtocol
}

func (s_ *SecondProtocolStub) DispatchImpl(ctx_ _bindings.Context, ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	return s_.DispatchImplWithCtx(ordinal_, ctx_.GetMarshalerContext(), data_, handles_)
}

func (s_ *SecondProtocolStub) DispatchImplWithCtx(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case SecondProtocolMethodOnSecondOrdinal:
		fallthrough
	case SecondProtocolMethodOnSecondGenOrdinal:
		err_ := s_.Impl.MethodOnSecond()
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type SecondProtocolWithCtxStub struct {
	Impl SecondProtocolWithCtx
}

func (s_ *SecondProtocolWithCtxStub) DispatchImpl(ctx_ _bindings.Context, ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case SecondProtocolMethodOnSecondOrdinal:
		fallthrough
	case SecondProtocolMethodOnSecondGenOrdinal:
		err_ := s_.Impl.MethodOnSecond(ctx_)
		return nil, false, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type SecondProtocolService struct {
	_bindings.BindingSet
}

func (s *SecondProtocolService) Add(impl SecondProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&SecondProtocolStub{Impl: impl}, c, onError)
}

func (s *SecondProtocolService) EventProxyFor(key _bindings.BindingKey) (*SecondProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*SecondProtocolEventProxy)(pxy), err
}

type SecondProtocolEventProxy _bindings.ChannelProxy



