// WARNING: This file is machine generated by fidlgen.

#include <union_sandwich.test.fidl.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace test {
namespace fidl {
namespace unionsandwich {

UnionSize8Aligned4::UnionSize8Aligned4() : value_() {}

UnionSize8Aligned4::~UnionSize8Aligned4() {
}

UnionSize8Aligned4::UnionSize8Aligned4(UnionSize8Aligned4&& other) : value_(std::move(other.value_)) {
}

UnionSize8Aligned4& UnionSize8Aligned4::operator=(UnionSize8Aligned4&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize8Aligned4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 4);
    break;
   default:
    break;
  }
}

void UnionSize8Aligned4::Decode(::fidl::Decoder* _decoder, UnionSize8Aligned4* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      uint32_t _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 4);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize8Aligned4::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize8Aligned4* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 1579115687: {
      uint32_t _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize8Aligned4::Clone(UnionSize8Aligned4* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        uint32_t _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize8Aligned4::set_variant(uint32_t value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_Sandwich1Table;
const fidl_type_t* Sandwich1::FidlType = &test_fidl_unionsandwich_Sandwich1Table;

void Sandwich1::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 4);
  ::fidl::Encode(_encoder, &after, _offset + 12);
}

void Sandwich1::Decode(::fidl::Decoder* _decoder, Sandwich1* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 4);
  ::fidl::Decode(_decoder, &value->after, _offset + 12);
}

zx_status_t Sandwich1::Clone(Sandwich1* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
UnionSize30Alignment4::UnionSize30Alignment4() : value_() {}

UnionSize30Alignment4::~UnionSize30Alignment4() {
}

UnionSize30Alignment4::UnionSize30Alignment4(UnionSize30Alignment4&& other) : value_(std::move(other.value_)) {
}

UnionSize30Alignment4& UnionSize30Alignment4::operator=(UnionSize30Alignment4&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize30Alignment4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 4);
    break;
   default:
    break;
  }
}

void UnionSize30Alignment4::Decode(::fidl::Decoder* _decoder, UnionSize30Alignment4* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      ::std::array<uint8_t, 30> _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 4);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize30Alignment4::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize30Alignment4* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 441717490: {
      ::std::array<uint8_t, 30> _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize30Alignment4::Clone(UnionSize30Alignment4* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        ::std::array<uint8_t, 30> _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize30Alignment4::set_variant(::std::array<uint8_t, 30> value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_Sandwich4Table;
const fidl_type_t* Sandwich4::FidlType = &test_fidl_unionsandwich_Sandwich4Table;

void Sandwich4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 4);
  ::fidl::Encode(_encoder, &after, _offset + 40);
}

void Sandwich4::Decode(::fidl::Decoder* _decoder, Sandwich4* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 4);
  ::fidl::Decode(_decoder, &value->after, _offset + 40);
}

zx_status_t Sandwich4::Clone(Sandwich4* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
UnionSize12Aligned4::UnionSize12Aligned4() : value_() {}

UnionSize12Aligned4::~UnionSize12Aligned4() {
}

UnionSize12Aligned4::UnionSize12Aligned4(UnionSize12Aligned4&& other) : value_(std::move(other.value_)) {
}

UnionSize12Aligned4& UnionSize12Aligned4::operator=(UnionSize12Aligned4&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize12Aligned4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 4);
    break;
   default:
    break;
  }
}

void UnionSize12Aligned4::Decode(::fidl::Decoder* _decoder, UnionSize12Aligned4* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      ::std::array<uint8_t, 6> _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 4);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize12Aligned4::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize12Aligned4* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 1432915315: {
      ::std::array<uint8_t, 6> _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize12Aligned4::Clone(UnionSize12Aligned4* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        ::std::array<uint8_t, 6> _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize12Aligned4::set_variant(::std::array<uint8_t, 6> value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_Sandwich2Table;
const fidl_type_t* Sandwich2::FidlType = &test_fidl_unionsandwich_Sandwich2Table;

void Sandwich2::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 4);
  ::fidl::Encode(_encoder, &after, _offset + 16);
}

void Sandwich2::Decode(::fidl::Decoder* _decoder, Sandwich2* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 4);
  ::fidl::Decode(_decoder, &value->after, _offset + 16);
}

zx_status_t Sandwich2::Clone(Sandwich2* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
extern "C" const fidl_type_t test_fidl_unionsandwich_StructSize16Alignment8Table;
const fidl_type_t* StructSize16Alignment8::FidlType = &test_fidl_unionsandwich_StructSize16Alignment8Table;

void StructSize16Alignment8::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &f1, _offset + 0);
  ::fidl::Encode(_encoder, &f2, _offset + 8);
}

void StructSize16Alignment8::Decode(::fidl::Decoder* _decoder, StructSize16Alignment8* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->f1, _offset + 0);
  ::fidl::Decode(_decoder, &value->f2, _offset + 8);
}

zx_status_t StructSize16Alignment8::Clone(StructSize16Alignment8* _result) const {
  zx_status_t _status = ::fidl::Clone(f1, &_result->f1);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(f2, &_result->f2);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
UnionSize24Alignment8::UnionSize24Alignment8() : value_() {}

UnionSize24Alignment8::~UnionSize24Alignment8() {
}

UnionSize24Alignment8::UnionSize24Alignment8(UnionSize24Alignment8&& other) : value_(std::move(other.value_)) {
}

UnionSize24Alignment8& UnionSize24Alignment8::operator=(UnionSize24Alignment8&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize24Alignment8::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 8);
    break;
   default:
    break;
  }
}

void UnionSize24Alignment8::Decode(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      StructSize16Alignment8 _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 8);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize24Alignment8::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 711125680: {
      StructSize16Alignment8 _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize24Alignment8::Clone(UnionSize24Alignment8* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        StructSize16Alignment8 _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize24Alignment8::set_variant(StructSize16Alignment8 value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_Sandwich3Table;
const fidl_type_t* Sandwich3::FidlType = &test_fidl_unionsandwich_Sandwich3Table;

void Sandwich3::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 8);
  ::fidl::Encode(_encoder, &after, _offset + 32);
}

void Sandwich3::Decode(::fidl::Decoder* _decoder, Sandwich3* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 8);
  ::fidl::Decode(_decoder, &value->after, _offset + 32);
}

zx_status_t Sandwich3::Clone(Sandwich3* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
}  // namespace unionsandwich
}  // namespace fidl
}  // namespace test

