// WARNING: This file is machine generated by fidlgen.

#include <union_sandwich.test.fidl.json.h>

#include "lib/fidl/cpp/internal/implementation.h"
namespace test {
namespace fidl {
namespace unionsandwich {

UnionSize8Alignment4::UnionSize8Alignment4() : value_() {}

UnionSize8Alignment4::~UnionSize8Alignment4() {
}

UnionSize8Alignment4::UnionSize8Alignment4(UnionSize8Alignment4&& other) : value_(std::move(other.value_)) {
}

UnionSize8Alignment4& UnionSize8Alignment4::operator=(UnionSize8Alignment4&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize8Alignment4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  if (_encoder->ShouldEncodeUnionAsXUnion()) {
    EncodeAsXUnionBytes(_encoder, _offset);
    return;
  }

  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 4);
    break;
   default:
    break;
  }
}

void UnionSize8Alignment4::EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset) {
  const size_t length_before = _encoder->CurrentLength();
  const size_t handles_before = _encoder->CurrentHandleCount();

  size_t envelope_offset = 0;

  switch (Which()) {
    case Tag::kVariant: {
      envelope_offset = _encoder->Alloc(::fidl::EncodingInlineSize<uint32_t, ::fidl::Encoder>(_encoder));
      ::fidl::Encode(_encoder, &variant(), envelope_offset);
      break;
    }
    default:
       break;
  }

  fidl_xunion_t* xunion = _encoder->GetPtr<fidl_xunion_t>(_offset);
  assert(xunion->envelope.presence == FIDL_ALLOC_ABSENT);

  if (envelope_offset) {
    xunion->tag = WhichXUnionTag();
    xunion->envelope.num_bytes = _encoder->CurrentLength() - length_before;
    xunion->envelope.num_handles = _encoder->CurrentHandleCount() - handles_before;
    xunion->envelope.presence = FIDL_ALLOC_PRESENT;
  }
}

void UnionSize8Alignment4::Decode(::fidl::Decoder* _decoder, UnionSize8Alignment4* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      uint32_t _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 4);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize8Alignment4::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize8Alignment4* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 551421578: {
      uint32_t _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize8Alignment4::Clone(UnionSize8Alignment4* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        uint32_t _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize8Alignment4::set_variant(uint32_t value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;
const fidl_type_t* SandwichUnionSize8Alignment4::FidlType = &test_fidl_unionsandwich_SandwichUnionSize8Alignment4Table;

void SandwichUnionSize8Alignment4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 4);
  ::fidl::Encode(_encoder, &after, _offset + 12);
}

void SandwichUnionSize8Alignment4::Decode(::fidl::Decoder* _decoder, SandwichUnionSize8Alignment4* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 4);
  ::fidl::Decode(_decoder, &value->after, _offset + 12);
}

zx_status_t SandwichUnionSize8Alignment4::Clone(SandwichUnionSize8Alignment4* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
UnionSize36Alignment4::UnionSize36Alignment4() : value_() {}

UnionSize36Alignment4::~UnionSize36Alignment4() {
}

UnionSize36Alignment4::UnionSize36Alignment4(UnionSize36Alignment4&& other) : value_(std::move(other.value_)) {
}

UnionSize36Alignment4& UnionSize36Alignment4::operator=(UnionSize36Alignment4&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize36Alignment4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  if (_encoder->ShouldEncodeUnionAsXUnion()) {
    EncodeAsXUnionBytes(_encoder, _offset);
    return;
  }

  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 4);
    break;
   default:
    break;
  }
}

void UnionSize36Alignment4::EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset) {
  const size_t length_before = _encoder->CurrentLength();
  const size_t handles_before = _encoder->CurrentHandleCount();

  size_t envelope_offset = 0;

  switch (Which()) {
    case Tag::kVariant: {
      envelope_offset = _encoder->Alloc(::fidl::EncodingInlineSize<::std::array<uint8_t, 32>, ::fidl::Encoder>(_encoder));
      ::fidl::Encode(_encoder, &variant(), envelope_offset);
      break;
    }
    default:
       break;
  }

  fidl_xunion_t* xunion = _encoder->GetPtr<fidl_xunion_t>(_offset);
  assert(xunion->envelope.presence == FIDL_ALLOC_ABSENT);

  if (envelope_offset) {
    xunion->tag = WhichXUnionTag();
    xunion->envelope.num_bytes = _encoder->CurrentLength() - length_before;
    xunion->envelope.num_handles = _encoder->CurrentHandleCount() - handles_before;
    xunion->envelope.presence = FIDL_ALLOC_PRESENT;
  }
}

void UnionSize36Alignment4::Decode(::fidl::Decoder* _decoder, UnionSize36Alignment4* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      ::std::array<uint8_t, 32> _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 4);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize36Alignment4::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize36Alignment4* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 1000405696: {
      ::std::array<uint8_t, 32> _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize36Alignment4::Clone(UnionSize36Alignment4* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        ::std::array<uint8_t, 32> _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize36Alignment4::set_variant(::std::array<uint8_t, 32> value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;
const fidl_type_t* SandwichUnionSize36Alignment4::FidlType = &test_fidl_unionsandwich_SandwichUnionSize36Alignment4Table;

void SandwichUnionSize36Alignment4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 4);
  ::fidl::Encode(_encoder, &after, _offset + 40);
}

void SandwichUnionSize36Alignment4::Decode(::fidl::Decoder* _decoder, SandwichUnionSize36Alignment4* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 4);
  ::fidl::Decode(_decoder, &value->after, _offset + 40);
}

zx_status_t SandwichUnionSize36Alignment4::Clone(SandwichUnionSize36Alignment4* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
UnionSize12Alignment4::UnionSize12Alignment4() : value_() {}

UnionSize12Alignment4::~UnionSize12Alignment4() {
}

UnionSize12Alignment4::UnionSize12Alignment4(UnionSize12Alignment4&& other) : value_(std::move(other.value_)) {
}

UnionSize12Alignment4& UnionSize12Alignment4::operator=(UnionSize12Alignment4&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize12Alignment4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  if (_encoder->ShouldEncodeUnionAsXUnion()) {
    EncodeAsXUnionBytes(_encoder, _offset);
    return;
  }

  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 4);
    break;
   default:
    break;
  }
}

void UnionSize12Alignment4::EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset) {
  const size_t length_before = _encoder->CurrentLength();
  const size_t handles_before = _encoder->CurrentHandleCount();

  size_t envelope_offset = 0;

  switch (Which()) {
    case Tag::kVariant: {
      envelope_offset = _encoder->Alloc(::fidl::EncodingInlineSize<::std::array<uint8_t, 6>, ::fidl::Encoder>(_encoder));
      ::fidl::Encode(_encoder, &variant(), envelope_offset);
      break;
    }
    default:
       break;
  }

  fidl_xunion_t* xunion = _encoder->GetPtr<fidl_xunion_t>(_offset);
  assert(xunion->envelope.presence == FIDL_ALLOC_ABSENT);

  if (envelope_offset) {
    xunion->tag = WhichXUnionTag();
    xunion->envelope.num_bytes = _encoder->CurrentLength() - length_before;
    xunion->envelope.num_handles = _encoder->CurrentHandleCount() - handles_before;
    xunion->envelope.presence = FIDL_ALLOC_PRESENT;
  }
}

void UnionSize12Alignment4::Decode(::fidl::Decoder* _decoder, UnionSize12Alignment4* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      ::std::array<uint8_t, 6> _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 4);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize12Alignment4::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize12Alignment4* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 1305904317: {
      ::std::array<uint8_t, 6> _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize12Alignment4::Clone(UnionSize12Alignment4* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        ::std::array<uint8_t, 6> _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize12Alignment4::set_variant(::std::array<uint8_t, 6> value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;
const fidl_type_t* SandwichUnionSize12Alignment4::FidlType = &test_fidl_unionsandwich_SandwichUnionSize12Alignment4Table;

void SandwichUnionSize12Alignment4::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 4);
  ::fidl::Encode(_encoder, &after, _offset + 16);
}

void SandwichUnionSize12Alignment4::Decode(::fidl::Decoder* _decoder, SandwichUnionSize12Alignment4* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 4);
  ::fidl::Decode(_decoder, &value->after, _offset + 16);
}

zx_status_t SandwichUnionSize12Alignment4::Clone(SandwichUnionSize12Alignment4* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
extern "C" const fidl_type_t test_fidl_unionsandwich_StructSize16Alignment8Table;
const fidl_type_t* StructSize16Alignment8::FidlType = &test_fidl_unionsandwich_StructSize16Alignment8Table;

void StructSize16Alignment8::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &f1, _offset + 0);
  ::fidl::Encode(_encoder, &f2, _offset + 8);
}

void StructSize16Alignment8::Decode(::fidl::Decoder* _decoder, StructSize16Alignment8* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->f1, _offset + 0);
  ::fidl::Decode(_decoder, &value->f2, _offset + 8);
}

zx_status_t StructSize16Alignment8::Clone(StructSize16Alignment8* _result) const {
  zx_status_t _status = ::fidl::Clone(f1, &_result->f1);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(f2, &_result->f2);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
UnionSize24Alignment8::UnionSize24Alignment8() : value_() {}

UnionSize24Alignment8::~UnionSize24Alignment8() {
}

UnionSize24Alignment8::UnionSize24Alignment8(UnionSize24Alignment8&& other) : value_(std::move(other.value_)) {
}

UnionSize24Alignment8& UnionSize24Alignment8::operator=(UnionSize24Alignment8&& other) {
  if (this != &other) {
    value_ = std::move(other.value_);
  }
  return *this;
}

void UnionSize24Alignment8::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  if (_encoder->ShouldEncodeUnionAsXUnion()) {
    EncodeAsXUnionBytes(_encoder, _offset);
    return;
  }

  fidl_union_tag_t _tag = static_cast<fidl_union_tag_t>(Which());
  ::fidl::Encode(_encoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    ::fidl::Encode(_encoder, &variant(), _offset + 8);
    break;
   default:
    break;
  }
}

void UnionSize24Alignment8::EncodeAsXUnionBytes(::fidl::Encoder* _encoder, size_t _offset) {
  const size_t length_before = _encoder->CurrentLength();
  const size_t handles_before = _encoder->CurrentHandleCount();

  size_t envelope_offset = 0;

  switch (Which()) {
    case Tag::kVariant: {
      envelope_offset = _encoder->Alloc(::fidl::EncodingInlineSize<class StructSize16Alignment8, ::fidl::Encoder>(_encoder));
      ::fidl::Encode(_encoder, &variant(), envelope_offset);
      break;
    }
    default:
       break;
  }

  fidl_xunion_t* xunion = _encoder->GetPtr<fidl_xunion_t>(_offset);
  assert(xunion->envelope.presence == FIDL_ALLOC_ABSENT);

  if (envelope_offset) {
    xunion->tag = WhichXUnionTag();
    xunion->envelope.num_bytes = _encoder->CurrentLength() - length_before;
    xunion->envelope.num_handles = _encoder->CurrentHandleCount() - handles_before;
    xunion->envelope.presence = FIDL_ALLOC_PRESENT;
  }
}

void UnionSize24Alignment8::Decode(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset) {
  if (_decoder->ShouldDecodeUnionFromXUnion()) {
    DecodeFromXUnionBytes(_decoder, _value, _offset);
    return;
  }

  fidl_union_tag_t _tag;
  ::fidl::Decode(_decoder, &_tag, _offset);
  switch (_tag) {
   case 0:
    {
      StructSize16Alignment8 _member{};
      ::fidl::Decode(_decoder, &_member, _offset + 8);
      _value->set_variant(std::move(_member));
      break;
    }
   default:
    _value->value_.emplace<0>();
  }
}

void UnionSize24Alignment8::DecodeFromXUnionBytes(::fidl::Decoder* _decoder, UnionSize24Alignment8* _value, size_t _offset) {
  fidl_xunion_t* xunion = _decoder->GetPtr<fidl_xunion_t>(_offset);

  uint32_t ordinal;
  ::fidl::Decode(_decoder, &ordinal, _offset);


  const size_t envelope_offset = _decoder->GetOffset(xunion->envelope.data);


switch (ordinal) {
    case 711125680: {
      StructSize16Alignment8 _member{};
      ::fidl::Decode(_decoder, &_member, envelope_offset);
      _value->set_variant(std::move(_member));
      break;
    }
  default:
    _value->value_.emplace<0>();
    break;
  }
}

zx_status_t UnionSize24Alignment8::Clone(UnionSize24Alignment8* _result) const {
  zx_status_t _status = ZX_OK;
  switch (Which()) {
    case Tag::kVariant:
      {
        StructSize16Alignment8 _member{};
        _status = ::fidl::Clone(variant(), &_member);
        if (_status == ZX_OK) {
          _result->set_variant(std::move(_member));
        }
      }
      break;
    case Tag::Invalid:
      _result->value_.emplace<0>();
      break;
  }
  return _status;
}

void UnionSize24Alignment8::set_variant(StructSize16Alignment8 value) {
  value_.emplace<static_cast<size_t>(Tag::kVariant) + 1>(std::move(value));
}
extern "C" const fidl_type_t test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;
const fidl_type_t* SandwichUnionSize24Alignment8::FidlType = &test_fidl_unionsandwich_SandwichUnionSize24Alignment8Table;

void SandwichUnionSize24Alignment8::Encode(::fidl::Encoder* _encoder, size_t _offset) {
  ::fidl::Encode(_encoder, &before, _offset + 0);
  ::fidl::Encode(_encoder, &union_, _offset + 8);
  ::fidl::Encode(_encoder, &after, _offset + 32);
}

void SandwichUnionSize24Alignment8::Decode(::fidl::Decoder* _decoder, SandwichUnionSize24Alignment8* value, size_t _offset) {
  ::fidl::Decode(_decoder, &value->before, _offset + 0);
  ::fidl::Decode(_decoder, &value->union_, _offset + 8);
  ::fidl::Decode(_decoder, &value->after, _offset + 32);
}

zx_status_t SandwichUnionSize24Alignment8::Clone(SandwichUnionSize24Alignment8* _result) const {
  zx_status_t _status = ::fidl::Clone(before, &_result->before);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(union_, &_result->union_);
  if (_status != ZX_OK)
    return _status;
  _status = ::fidl::Clone(after, &_result->after);
  if (_status != ZX_OK)
    return _status;
  return ZX_OK;
}
}  // namespace unionsandwich
}  // namespace fidl
}  // namespace test

