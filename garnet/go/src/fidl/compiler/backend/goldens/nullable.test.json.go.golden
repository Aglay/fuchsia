// Code generated by fidlgen; DO NOT EDIT.

package nullable


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)





type StructWithNullableString struct {
	_ struct{} `fidl:"s" fidl_size_v1:"16" fidl_alignment_v1:"8"`
	Val *string`fidl:"0," fidl_offset_v1:"0"`
}

var _mStructWithNullableString = _bindings.CreateLazyMarshaler(StructWithNullableString{})

func (msg *StructWithNullableString) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableString
}

type StructWithNullableVector struct {
	_ struct{} `fidl:"s" fidl_size_v1:"16" fidl_alignment_v1:"8"`
	Val *[]int32`fidl:"0," fidl_offset_v1:"0"`
}

var _mStructWithNullableVector = _bindings.CreateLazyMarshaler(StructWithNullableVector{})

func (msg *StructWithNullableVector) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableVector
}

type StructWithNullableHandle struct {
	_ struct{} `fidl:"s" fidl_size_v1:"4" fidl_alignment_v1:"4"`
	Val _zx.VMO`fidl:"0,1" fidl_offset_v1:"0" fidl_handle_subtype:"3" fidl_handle_rights:"2147483648"`
}

var _mStructWithNullableHandle = _bindings.CreateLazyMarshaler(StructWithNullableHandle{})

func (msg *StructWithNullableHandle) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableHandle
}

type StructWithNullableProtocol struct {
	_ struct{} `fidl:"s" fidl_size_v1:"4" fidl_alignment_v1:"4"`
	Val SimpleProtocolInterface`fidl:"0" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mStructWithNullableProtocol = _bindings.CreateLazyMarshaler(StructWithNullableProtocol{})

func (msg *StructWithNullableProtocol) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableProtocol
}

type StructWithNullableRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"4" fidl_alignment_v1:"4"`
	Val SimpleProtocolInterfaceRequest`fidl:"0,1" fidl_offset_v1:"0" fidl_handle_subtype:"4"`
}

var _mStructWithNullableRequest = _bindings.CreateLazyMarshaler(StructWithNullableRequest{})

func (msg *StructWithNullableRequest) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableRequest
}

type Int32Wrapper struct {
	_ struct{} `fidl:"s" fidl_size_v1:"4" fidl_alignment_v1:"4"`
	Val int32`fidl:"0" fidl_offset_v1:"0"`
}

var _mInt32Wrapper = _bindings.CreateLazyMarshaler(Int32Wrapper{})

func (msg *Int32Wrapper) Marshaler() _bindings.Marshaler {
	return _mInt32Wrapper
}

type StructWithNullableStruct struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Val *Int32Wrapper`fidl:"0" fidl_offset_v1:"0"`
}

var _mStructWithNullableStruct = _bindings.CreateLazyMarshaler(StructWithNullableStruct{})

func (msg *StructWithNullableStruct) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableStruct
}

type StructWithNullableUnion struct {
	_ struct{} `fidl:"s" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	Val *SimpleUnion`fidl:"0" fidl_offset_v1:"0"`
}

var _mStructWithNullableUnion = _bindings.CreateLazyMarshaler(StructWithNullableUnion{})

func (msg *StructWithNullableUnion) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableUnion
}

type simpleProtocolAddRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	A int32`fidl:"0" fidl_offset_v1:"0"`
	B int32`fidl:"4" fidl_offset_v1:"4"`
}

var _msimpleProtocolAddRequest = _bindings.CreateLazyMarshaler(simpleProtocolAddRequest{})

func (msg *simpleProtocolAddRequest) Marshaler() _bindings.Marshaler {
	return _msimpleProtocolAddRequest
}

type simpleProtocolWithCtxAddRequest struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	A int32`fidl:"0" fidl_offset_v1:"0"`
	B int32`fidl:"4" fidl_offset_v1:"4"`
}

var _msimpleProtocolWithCtxAddRequest = _bindings.CreateLazyMarshaler(simpleProtocolWithCtxAddRequest{})

func (msg *simpleProtocolWithCtxAddRequest) Marshaler() _bindings.Marshaler {
	return _msimpleProtocolWithCtxAddRequest
}

type simpleProtocolAddResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Sum int32`fidl:"0" fidl_offset_v1:"0"`
}

var _msimpleProtocolAddResponse = _bindings.CreateLazyMarshaler(simpleProtocolAddResponse{})

func (msg *simpleProtocolAddResponse) Marshaler() _bindings.Marshaler {
	return _msimpleProtocolAddResponse
}

type simpleProtocolWithCtxAddResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"8" fidl_alignment_v1:"8"`
	Sum int32`fidl:"0" fidl_offset_v1:"0"`
}

var _msimpleProtocolWithCtxAddResponse = _bindings.CreateLazyMarshaler(simpleProtocolWithCtxAddResponse{})

func (msg *simpleProtocolWithCtxAddResponse) Marshaler() _bindings.Marshaler {
	return _msimpleProtocolWithCtxAddResponse
}
type I_simpleUnionTag uint64
const (
	SimpleUnionA = 1 // 0x00000001
	SimpleUnionB = 2 // 0x00000002
)


type SimpleUnion struct {
	I_simpleUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	A int32  `fidl:"1"`
	B float32  `fidl:"2"`
}

func (_m *SimpleUnion) Which() I_simpleUnionTag {
	return _m.I_simpleUnionTag
}

func (_m *SimpleUnion) Ordinal() uint64 {
	return uint64(_m.I_simpleUnionTag)
}

func (_m *SimpleUnion) SetA(a int32) {
	_m.I_simpleUnionTag = SimpleUnionA
	_m.A = a
}

func SimpleUnionWithA(a int32) SimpleUnion {
	var _u SimpleUnion
	_u.SetA(a)
	return _u
}

func (_m *SimpleUnion) SetB(b float32) {
	_m.I_simpleUnionTag = SimpleUnionB
	_m.B = b
}

func SimpleUnionWithB(b float32) SimpleUnion {
	var _u SimpleUnion
	_u.SetB(b)
	return _u
}


const (
	SimpleProtocolAddOrdinal uint64 = 0x11fe4d2400000000
	SimpleProtocolAddGenOrdinal uint64 = 0x113010d7832f175d
)

type SimpleProtocolWithCtxInterface _bindings.ChannelProxy


func (p *SimpleProtocolWithCtxInterface) Add(ctx_ _bindings.Context, a int32, b int32) (int32, error) {
	req_ := &simpleProtocolWithCtxAddRequest{
		A: a,
		B: b,
	}
	resp_ := &simpleProtocolWithCtxAddResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(SimpleProtocolAddGenOrdinal, req_, resp_, SimpleProtocolAddOrdinal, SimpleProtocolAddGenOrdinal)
	return resp_.Sum, err_
}

type SimpleProtocolInterface _bindings.ChannelProxy


func (p *SimpleProtocolInterface) Add(a int32,b int32) (int32, error) {
	req_ := &simpleProtocolAddRequest{
		A: a,
		B: b,
	}
	resp_ := &simpleProtocolAddResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(SimpleProtocolAddGenOrdinal, req_, resp_, SimpleProtocolAddOrdinal, SimpleProtocolAddGenOrdinal)
	return resp_.Sum, err_
}


type SimpleProtocolWithCtx interface {
	Add(ctx_ _bindings.Context, a int32, b int32) (int32, error)
}



type SimpleProtocolWithCtxTransitionalBase struct {}




type SimpleProtocol interface {
	Add(a int32,b int32) (int32, error)
}

type SimpleProtocolTransitionalBase struct {}


type SimpleProtocolWithCtxInterfaceRequest _bindings.InterfaceRequest

func NewSimpleProtocolWithCtxInterfaceRequest() (SimpleProtocolWithCtxInterfaceRequest, *SimpleProtocolWithCtxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return SimpleProtocolWithCtxInterfaceRequest(req), (*SimpleProtocolWithCtxInterface)(cli), err
}

type SimpleProtocolInterfaceRequest _bindings.InterfaceRequest

func NewSimpleProtocolInterfaceRequest() (SimpleProtocolInterfaceRequest, *SimpleProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return SimpleProtocolInterfaceRequest(req), (*SimpleProtocolInterface)(cli), err
}

type SimpleProtocolStub struct {
	Impl SimpleProtocol
}

func (s_ *SimpleProtocolStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	ctx, ok := _bindings.GetMarshalerContext(args_.Ctx)
	if !ok {
		return nil, false, _bindings.ErrMissingMarshalerContext
	}
	return s_.DispatchImplWithCtx2(args_.Ordinal, ctx, args_.Bytes, args_.HandleInfos)
}

func (s_ *SimpleProtocolStub) DispatchImplWithCtx2(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handleInfos_ []_zx.HandleInfo) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case SimpleProtocolAddOrdinal:
		fallthrough
	case SimpleProtocolAddGenOrdinal:
		in_ := simpleProtocolAddRequest{}
		if _, _, err_ := _bindings.UnmarshalWithContext2(ctx_, data_, handleInfos_, &in_); err_ != nil {
			return nil, false, err_
		}
		sum, err_ := s_.Impl.Add(in_.A,in_.B)
		out_ := simpleProtocolAddResponse{}
		out_.Sum = sum
		return &out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

type SimpleProtocolWithCtxStub struct {
	Impl SimpleProtocolWithCtx
}

func (s_ *SimpleProtocolWithCtxStub) Dispatch(args_ _bindings.DispatchArgs) (_bindings.Message, bool, error) {
	switch args_.Ordinal {
	case SimpleProtocolAddOrdinal:
		fallthrough
	case SimpleProtocolAddGenOrdinal:
		in_ := simpleProtocolWithCtxAddRequest{}
		marshalerCtx, ok := _bindings.GetMarshalerContext(args_.Ctx)
		if !ok {
			return nil, false, _bindings.ErrMissingMarshalerContext
		}
		if _, _, err_ := _bindings.UnmarshalWithContext2(marshalerCtx, args_.Bytes, args_.HandleInfos, &in_); err_ != nil {
			return nil, false, err_
		}
		sum, err_ := s_.Impl.Add(args_.Ctx, in_.A, in_.B)
		out_ := simpleProtocolWithCtxAddResponse{}
		out_.Sum = sum
		return &out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type SimpleProtocolService struct {
	_bindings.BindingSet
}

func (s *SimpleProtocolService) Add(impl SimpleProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&SimpleProtocolStub{Impl: impl}, c, onError)
}

func (s *SimpleProtocolService) AddWithCtx(impl SimpleProtocolWithCtx, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&SimpleProtocolWithCtxStub{Impl: impl}, c, onError)
}

func (s *SimpleProtocolService) EventProxyFor(key _bindings.BindingKey) (*SimpleProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*SimpleProtocolEventProxy)(pxy), err
}

type SimpleProtocolEventProxy _bindings.ChannelProxy



