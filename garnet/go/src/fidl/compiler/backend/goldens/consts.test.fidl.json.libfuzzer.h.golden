// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/fuzzing/traits.h"
#include "lib/fidl/cpp/internal/header.h"

#include <test/name/cpp/fidl.h>

namespace fidl {
namespace fuzzing {


using EnumType = ::test::name::EnumType;
using BitsType = ::test::name::BitsType;


template<>
struct MinSize<EnumType> {
  operator size_t() { return sizeof(EnumType); }
};
template<>
struct Allocate<EnumType> {
  EnumType operator()(FuzzInput* src, size_t* size) {
    EnumType out;
    ZX_ASSERT(*size >= sizeof(EnumType));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(EnumType);
    return out;
  }
};
template<>
struct MinSize<BitsType> {
  operator size_t() { return sizeof(BitsType); }
};
template<>
struct Allocate<BitsType> {
  BitsType operator()(FuzzInput* src, size_t* size) {
    BitsType out;
    ZX_ASSERT(*size >= sizeof(BitsType));
    ZX_ASSERT(src->CopyObject(&out));
    *size = sizeof(BitsType);
    return out;
  }
};

}  // namespace fuzzing
}  // namespace fidl
