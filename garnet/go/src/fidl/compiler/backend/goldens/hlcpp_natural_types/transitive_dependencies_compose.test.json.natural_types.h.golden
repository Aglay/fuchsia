// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <bottom/cpp/fidl.h>
#include <middle/cpp/fidl.h>

#include "lib/fidl/cpp/internal/natural_types_header.h"

//
// Domain objects declarations (i.e. "natural types" in unified bindings).
//
namespace top {

#ifdef __Fuchsia__
class Top;
using TopHandle = ::fidl::InterfaceHandle<Top>;
#endif  // __Fuchsia__
#ifdef __Fuchsia__

namespace _internal {
extern "C" const fidl_type_t top_TopGetFooRequestTable;
}

class Top_RequestEncoder {
 public:
  static ::fidl::Message GetFoo(::fidl::Encoder* _encoder) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(16 - sizeof(fidl_message_header_t));

    fidl_trace(DidHLCPPEncode, &_internal::top_TopGetFooRequestTable,
               _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
               _encoder->CurrentHandleCount());

    return _encoder->GetMessage();
  }
};

namespace _internal {
extern "C" const fidl_type_t top_TopGetFooResponseTable;
}

class Top_ResponseEncoder {
 public:
  static ::fidl::Message GetFoo(::fidl::Encoder* _encoder, ::bottom::Foo* foo) {
    fidl_trace(WillHLCPPEncode);
    _encoder->Alloc(24 - sizeof(fidl_message_header_t));
    ::fidl::Encode(_encoder, foo, 16);

    fidl_trace(DidHLCPPEncode, &_internal::top_TopGetFooResponseTable,
               _encoder->GetPtr<const char>(0), _encoder->CurrentLength(),
               _encoder->CurrentHandleCount());
    return _encoder->GetMessage();
  }
};

#endif  // __Fuchsia__
}  // namespace top
namespace fidl {}  // namespace fidl
