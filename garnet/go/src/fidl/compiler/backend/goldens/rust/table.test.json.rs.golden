// WARNING: This file is machine generated by fidlgen.

#![allow(
	deprecated, // FIDL Impl struct pattern is referenced internally
	unused_parens, // one-element-tuple-case is not a tuple
	unused_mut, // not all args require mutation, but many do
	nonstandard_style, // auto-caps does its best, but is not always successful
)]
#![recursion_limit = "512"]

#[cfg(target_os = "fuchsia")]
#[allow(unused_imports)]
use fuchsia_zircon as zx;

#[allow(unused_imports)]
use {
    bitflags::bitflags,
    fidl::{
        client::{decode_transaction_body_fut, QueryResponseFut},
        fidl_empty_struct, fidl_flexible_bits, fidl_flexible_enum, fidl_strict_bits,
        fidl_strict_enum, fidl_struct, fidl_struct_copy, fidl_table, fidl_xunion,
        wrap_handle_metadata,
    },
    fuchsia_zircon_status as zx_status,
    futures::future::{self, MaybeDone, TryFutureExt},
};

#[derive(Debug, PartialEq)]
pub struct EmptyTable {
    #[deprecated = "Use `..EmptyTable::empty()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

fidl_table! {
  name: EmptyTable,
  members: [
  ],
}

#[derive(Debug, PartialEq)]
pub struct SimpleTable {
    pub x: Option<i64>,
    pub y: Option<i64>,
    #[deprecated = "Use `..SimpleTable::empty()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

fidl_table! {
  name: SimpleTable,
  members: [
    x {
      ty: i64,
      ordinal: 1,
    },
    y {
      ty: i64,
      ordinal: 5,
    },
  ],
}

#[derive(Debug, PartialEq)]
pub struct OlderSimpleTable {
    pub x: Option<i64>,
    #[deprecated = "Use `..OlderSimpleTable::empty()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

fidl_table! {
  name: OlderSimpleTable,
  members: [
    x {
      ty: i64,
      ordinal: 1,
    },
  ],
}

#[derive(Debug, PartialEq)]
pub struct NewerSimpleTable {
    pub x: Option<i64>,
    pub y: Option<i64>,
    pub z: Option<i64>,
    #[deprecated = "Use `..NewerSimpleTable::empty()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

fidl_table! {
  name: NewerSimpleTable,
  members: [
    x {
      ty: i64,
      ordinal: 1,
    },
    y {
      ty: i64,
      ordinal: 5,
    },
    z {
      ty: i64,
      ordinal: 6,
    },
  ],
}

#[derive(Debug, PartialEq)]
pub struct ReverseOrdinalTable {
    pub z: Option<i64>,
    pub y: Option<i64>,
    pub x: Option<i64>,
    #[deprecated = "Use `..ReverseOrdinalTable::empty()` to construct and `..` to match."]
    #[doc(hidden)]
    pub __non_exhaustive: (),
}

fidl_table! {
  name: ReverseOrdinalTable,
  members: [
    z {
      ty: i64,
      ordinal: 1,
    },
    y {
      ty: i64,
      ordinal: 2,
    },
    x {
      ty: i64,
      ordinal: 3,
    },
  ],
}
