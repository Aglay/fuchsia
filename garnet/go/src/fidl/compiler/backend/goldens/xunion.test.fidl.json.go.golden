// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)





type Empty struct {
	_ struct{} `fidl:"s" fidl_size_v1:"1" fidl_alignment_v1:"1"`
}

var _mEmpty = _bindings.CreateLazyMarshaler(Empty{})

func (msg *Empty) Marshaler() _bindings.Marshaler {
	return _mEmpty
}

type StructWithNullableXUnion struct {
	_ struct{} `fidl:"s" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	X1 *OlderSimpleUnion`fidl:"0" fidl_offset_v1:"0"`
}

var _mStructWithNullableXUnion = _bindings.CreateLazyMarshaler(StructWithNullableXUnion{})

func (msg *StructWithNullableXUnion) Marshaler() _bindings.Marshaler {
	return _mStructWithNullableXUnion
}
type I_olderSimpleUnionTag uint64
const (
	OlderSimpleUnion_unknownData = 0  // 0x00000000
	OlderSimpleUnionI = 1 // 0x00000001
	OlderSimpleUnionF = 2 // 0x00000002
)


type OlderSimpleUnion struct {
	I_olderSimpleUnionTag `fidl:"x" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I_unknownData []byte
	I int64  `fidl:"1" fidl_hashed_ord:"1026732503" fidl_explicit_ord:"1"`
	F float32  `fidl:"2" fidl_hashed_ord:"1362546558" fidl_explicit_ord:"2"`
}

func (_m *OlderSimpleUnion) Which() I_olderSimpleUnionTag {
	switch _m.I_olderSimpleUnionTag {
	case 1:
		return OlderSimpleUnionI
	case 2:
		return OlderSimpleUnionF
	default:
		return OlderSimpleUnion_unknownData
	}
}

func (_m *OlderSimpleUnion) Ordinal() uint64 {
	return uint64(_m.I_olderSimpleUnionTag)
}

func (_m *OlderSimpleUnion) SetI(i int64) {
	_m.I_olderSimpleUnionTag = OlderSimpleUnionI
	_m.I = i
}

func OlderSimpleUnionWithI(i int64) OlderSimpleUnion {
	var _u OlderSimpleUnion
	_u.SetI(i)
	return _u
}

func (_m *OlderSimpleUnion) SetF(f float32) {
	_m.I_olderSimpleUnionTag = OlderSimpleUnionF
	_m.F = f
}

func OlderSimpleUnionWithF(f float32) OlderSimpleUnion {
	var _u OlderSimpleUnion
	_u.SetF(f)
	return _u
}


type I_newerSimpleUnionTag uint64
const (
	NewerSimpleUnion_unknownData = 0  // 0x00000000
	NewerSimpleUnionI = 1 // 0x00000001
	NewerSimpleUnionS = 2 // 0x00000002
	NewerSimpleUnionV = 3 // 0x00000003
)


type NewerSimpleUnion struct {
	I_newerSimpleUnionTag `fidl:"x" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I_unknownData []byte
	I int64  `fidl:"1" fidl_hashed_ord:"693944286" fidl_explicit_ord:"1"`
	S string  `fidl:"2," fidl_hashed_ord:"473666119" fidl_explicit_ord:"2"`
	V []string  `fidl:"3,," fidl_hashed_ord:"1815655055" fidl_explicit_ord:"3"`
}

func (_m *NewerSimpleUnion) Which() I_newerSimpleUnionTag {
	switch _m.I_newerSimpleUnionTag {
	case 1:
		return NewerSimpleUnionI
	case 2:
		return NewerSimpleUnionS
	case 3:
		return NewerSimpleUnionV
	default:
		return NewerSimpleUnion_unknownData
	}
}

func (_m *NewerSimpleUnion) Ordinal() uint64 {
	return uint64(_m.I_newerSimpleUnionTag)
}

func (_m *NewerSimpleUnion) SetI(i int64) {
	_m.I_newerSimpleUnionTag = NewerSimpleUnionI
	_m.I = i
}

func NewerSimpleUnionWithI(i int64) NewerSimpleUnion {
	var _u NewerSimpleUnion
	_u.SetI(i)
	return _u
}

func (_m *NewerSimpleUnion) SetS(s string) {
	_m.I_newerSimpleUnionTag = NewerSimpleUnionS
	_m.S = s
}

func NewerSimpleUnionWithS(s string) NewerSimpleUnion {
	var _u NewerSimpleUnion
	_u.SetS(s)
	return _u
}

func (_m *NewerSimpleUnion) SetV(v []string) {
	_m.I_newerSimpleUnionTag = NewerSimpleUnionV
	_m.V = v
}

func NewerSimpleUnionWithV(v []string) NewerSimpleUnion {
	var _u NewerSimpleUnion
	_u.SetV(v)
	return _u
}


type I_strictSimpleXUnionTag uint64
const (
	StrictSimpleXUnionI = 1 // 0x00000001
	StrictSimpleXUnionF = 2 // 0x00000002
	StrictSimpleXUnionS = 3 // 0x00000003
)


type StrictSimpleXUnion struct {
	I_strictSimpleXUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I int32  `fidl:"1" fidl_hashed_ord:"1851697276" fidl_explicit_ord:"1"`
	F float32  `fidl:"2" fidl_hashed_ord:"855207063" fidl_explicit_ord:"2"`
	S string  `fidl:"3," fidl_hashed_ord:"850602487" fidl_explicit_ord:"3"`
}

func (_m *StrictSimpleXUnion) Which() I_strictSimpleXUnionTag {
	return _m.I_strictSimpleXUnionTag
}

func (_m *StrictSimpleXUnion) Ordinal() uint64 {
	return uint64(_m.I_strictSimpleXUnionTag)
}

func (_m *StrictSimpleXUnion) SetI(i int32) {
	_m.I_strictSimpleXUnionTag = StrictSimpleXUnionI
	_m.I = i
}

func StrictSimpleXUnionWithI(i int32) StrictSimpleXUnion {
	var _u StrictSimpleXUnion
	_u.SetI(i)
	return _u
}

func (_m *StrictSimpleXUnion) SetF(f float32) {
	_m.I_strictSimpleXUnionTag = StrictSimpleXUnionF
	_m.F = f
}

func StrictSimpleXUnionWithF(f float32) StrictSimpleXUnion {
	var _u StrictSimpleXUnion
	_u.SetF(f)
	return _u
}

func (_m *StrictSimpleXUnion) SetS(s string) {
	_m.I_strictSimpleXUnionTag = StrictSimpleXUnionS
	_m.S = s
}

func StrictSimpleXUnionWithS(s string) StrictSimpleXUnion {
	var _u StrictSimpleXUnion
	_u.SetS(s)
	return _u
}


type I_xUnionContainingEmptyStructTag uint64
const (
	XUnionContainingEmptyStruct_unknownData = 0  // 0x00000000
	XUnionContainingEmptyStructEmpty = 1 // 0x00000001
)


type XUnionContainingEmptyStruct struct {
	I_xUnionContainingEmptyStructTag `fidl:"x" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I_unknownData []byte
	Empty Empty  `fidl:"1" fidl_hashed_ord:"424858069" fidl_explicit_ord:"1"`
}

func (_m *XUnionContainingEmptyStruct) Which() I_xUnionContainingEmptyStructTag {
	switch _m.I_xUnionContainingEmptyStructTag {
	case 1:
		return XUnionContainingEmptyStructEmpty
	default:
		return XUnionContainingEmptyStruct_unknownData
	}
}

func (_m *XUnionContainingEmptyStruct) Ordinal() uint64 {
	return uint64(_m.I_xUnionContainingEmptyStructTag)
}

func (_m *XUnionContainingEmptyStruct) SetEmpty(empty Empty) {
	_m.I_xUnionContainingEmptyStructTag = XUnionContainingEmptyStructEmpty
	_m.Empty = empty
}

func XUnionContainingEmptyStructWithEmpty(empty Empty) XUnionContainingEmptyStruct {
	var _u XUnionContainingEmptyStruct
	_u.SetEmpty(empty)
	return _u
}


type I_strictBoundedXUnionTag uint64
const (
	StrictBoundedXUnionV = 1 // 0x00000001
)


type StrictBoundedXUnion struct {
	I_strictBoundedXUnionTag `fidl:"x!" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	V []uint8  `fidl:"1,10" fidl_hashed_ord:"2024555624" fidl_explicit_ord:"1"`
}

func (_m *StrictBoundedXUnion) Which() I_strictBoundedXUnionTag {
	return _m.I_strictBoundedXUnionTag
}

func (_m *StrictBoundedXUnion) Ordinal() uint64 {
	return uint64(_m.I_strictBoundedXUnionTag)
}

func (_m *StrictBoundedXUnion) SetV(v []uint8) {
	_m.I_strictBoundedXUnionTag = StrictBoundedXUnionV
	_m.V = v
}

func StrictBoundedXUnionWithV(v []uint8) StrictBoundedXUnion {
	var _u StrictBoundedXUnion
	_u.SetV(v)
	return _u
}


type I_explicitXUnionTag uint64
const (
	ExplicitXUnion_unknownData = 0  // 0x00000000
	ExplicitXUnionI = 1 // 0x00000001
	ExplicitXUnionF = 4 // 0x00000004
)


type ExplicitXUnion struct {
	I_explicitXUnionTag `fidl:"x" fidl_size_v1:"24" fidl_alignment_v1:"8"`
	I_unknownData []byte
	I int64  `fidl:"1" fidl_hashed_ord:"625512649" fidl_explicit_ord:"1"`
	F float32  `fidl:"4" fidl_hashed_ord:"182552961" fidl_explicit_ord:"4"`
}

func (_m *ExplicitXUnion) Which() I_explicitXUnionTag {
	switch _m.I_explicitXUnionTag {
	case 1:
		return ExplicitXUnionI
	case 4:
		return ExplicitXUnionF
	default:
		return ExplicitXUnion_unknownData
	}
}

func (_m *ExplicitXUnion) Ordinal() uint64 {
	return uint64(_m.I_explicitXUnionTag)
}

func (_m *ExplicitXUnion) SetI(i int64) {
	_m.I_explicitXUnionTag = ExplicitXUnionI
	_m.I = i
}

func ExplicitXUnionWithI(i int64) ExplicitXUnion {
	var _u ExplicitXUnion
	_u.SetI(i)
	return _u
}

func (_m *ExplicitXUnion) SetF(f float32) {
	_m.I_explicitXUnionTag = ExplicitXUnionF
	_m.F = f
}

func ExplicitXUnionWithF(f float32) ExplicitXUnion {
	var _u ExplicitXUnion
	_u.SetF(f)
	return _u
}


const (
	TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedOrdinal uint64 = 0x71a1b4b700000000
	TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal uint64 = 0x2b158c786064d0de
	TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedOrdinal uint64 = 0x3959ff0900000000
	TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal uint64 = 0x5ecf85aadd137696
)

type testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"24" fidl_alignment_v1:"0"`
	Xu StrictBoundedXUnion`fidl:"16" fidl_offset_v1:"0"`
}

var _mtestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse = _bindings.CreateLazyMarshaler(testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse{})

func (msg *testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse) Marshaler() _bindings.Marshaler {
	return _mtestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse
}

type testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse struct {
	_ struct{} `fidl:"s" fidl_size_v1:"24" fidl_alignment_v1:"0"`
	Xu OlderSimpleUnion`fidl:"16" fidl_offset_v1:"0"`
}

var _mtestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse = _bindings.CreateLazyMarshaler(testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse{})

func (msg *testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse) Marshaler() _bindings.Marshaler {
	return _mtestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse
}

type TestProtocolInterface _bindings.ChannelProxy


func (p *TestProtocolInterface) StrictXUnionHenceResponseMayBeStackAllocated() (StrictBoundedXUnion, error) {
	var req_ _bindings.Message
	resp_ := &testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal, req_, resp_, TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedOrdinal, TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal)
	return resp_.Xu, err_
}

func (p *TestProtocolInterface) FlexibleXUnionHenceResponseMustBeHeapAllocated() (OlderSimpleUnion, error) {
	var req_ _bindings.Message
	resp_ := &testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse{}
	err_ := ((*_bindings.ChannelProxy)(p)).Call(TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal, req_, resp_, TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedOrdinal, TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal)
	return resp_.Xu, err_
}


type TestProtocolWithCtx interface {
	StrictXUnionHenceResponseMayBeStackAllocated(ctx_ _bindings.Context) (StrictBoundedXUnion, error)
	FlexibleXUnionHenceResponseMustBeHeapAllocated(ctx_ _bindings.Context) (OlderSimpleUnion, error)
}



type TestProtocolWithCtxTransitionalBase struct {}




type TestProtocol interface {
	StrictXUnionHenceResponseMayBeStackAllocated() (StrictBoundedXUnion, error)
	FlexibleXUnionHenceResponseMustBeHeapAllocated() (OlderSimpleUnion, error)
}

type TestProtocolTransitionalBase struct {}


type TestProtocolInterfaceRequest _bindings.InterfaceRequest

func NewTestProtocolInterfaceRequest() (TestProtocolInterfaceRequest, *TestProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return TestProtocolInterfaceRequest(req), (*TestProtocolInterface)(cli), err
}

type TestProtocolStub struct {
	Impl TestProtocol
}

func (s_ *TestProtocolStub) DispatchImpl(ctx_ _bindings.Context, ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedOrdinal:
		fallthrough
	case TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal:
		xu, err_ := s_.Impl.StrictXUnionHenceResponseMayBeStackAllocated()
		out_ := testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse{}
		out_.Xu = xu
		return &out_, true, err_
	case TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedOrdinal:
		fallthrough
	case TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal:
		xu, err_ := s_.Impl.FlexibleXUnionHenceResponseMustBeHeapAllocated()
		out_ := testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse{}
		out_.Xu = xu
		return &out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}

func (s_ *TestProtocolStub) DispatchImplWithCtx(ordinal_ uint64, ctx_ _bindings.MarshalerContext, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedOrdinal:
		fallthrough
	case TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedGenOrdinal:
		xu, err_ := s_.Impl.StrictXUnionHenceResponseMayBeStackAllocated()
		out_ := testProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponse{}
		out_.Xu = xu
		return &out_, true, err_
	case TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedOrdinal:
		fallthrough
	case TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedGenOrdinal:
		xu, err_ := s_.Impl.FlexibleXUnionHenceResponseMustBeHeapAllocated()
		out_ := testProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponse{}
		out_.Xu = xu
		return &out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type TestProtocolService struct {
	_bindings.BindingSet
}

func (s *TestProtocolService) Add(impl TestProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&TestProtocolStub{Impl: impl}, c, onError)
}

func (s *TestProtocolService) EventProxyFor(key _bindings.BindingKey) (*TestProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*TestProtocolEventProxy)(pxy), err
}

type TestProtocolEventProxy _bindings.ChannelProxy



