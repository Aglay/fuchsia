// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <lib/fidl/internal.h>
#include <lib/fidl/txn_header.h>
#include <lib/fidl/llcpp/array.h>
#include <lib/fidl/llcpp/coding.h>
#include <lib/fidl/llcpp/connect_service.h>
#include <lib/fidl/llcpp/envelope.h>
#include <lib/fidl/llcpp/service_handler_interface.h>
#include <lib/fidl/llcpp/string_view.h>
#include <lib/fidl/llcpp/sync_call.h>
#include <lib/fidl/llcpp/traits.h>
#include <lib/fidl/llcpp/tracking_ptr.h>
#include <lib/fidl/llcpp/transaction.h>
#include <lib/fidl/llcpp/vector_view.h>
#include <lib/fit/function.h>
#include <lib/zx/channel.h>
#include <zircon/fidl.h>

namespace llcpp {

namespace fidl {
namespace test {
namespace json {

struct StructWithNullableXUnion;
struct StrictSimpleXUnion;
struct StrictFoo;
struct StrictBoundedXUnion;
struct OlderSimpleUnion;
class TestProtocol;
struct NewerSimpleUnion;
struct FlexibleFoo;
struct ExplicitXUnion;
struct ExplicitStrictFoo;
struct ExplicitFoo;
struct Empty;
struct XUnionContainingEmptyStruct;

extern "C" const fidl_type_t v1_fidl_test_json_StrictSimpleXUnionTable;

struct StrictSimpleXUnion {
  StrictSimpleXUnion() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kI = 1,  // 0x1
    kF = 2,  // 0x2
    kS = 3,  // 0x3
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static StrictSimpleXUnion WithI(int32_t* val) {
    StrictSimpleXUnion result;
    result.set_i(val);
    return result;
  }

  void set_i(int32_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int32_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  const int32_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }

  bool is_f() const { return ordinal() == Ordinal::kF; }

  static StrictSimpleXUnion WithF(float* val) {
    StrictSimpleXUnion result;
    result.set_f(val);
    return result;
  }

  void set_f(float* elem) {
    ordinal_ = Ordinal::kF;
    envelope_.data = static_cast<void*>(elem);
  }

  float& mutable_f() {
    ZX_ASSERT(ordinal() == Ordinal::kF);
    return *static_cast<float*>(envelope_.data);
  }
  const float& f() const {
    ZX_ASSERT(ordinal() == Ordinal::kF);
    return *static_cast<float*>(envelope_.data);
  }

  bool is_s() const { return ordinal() == Ordinal::kS; }

  static StrictSimpleXUnion WithS(::fidl::StringView* val) {
    StrictSimpleXUnion result;
    result.set_s(val);
    return result;
  }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Ordinal::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_StrictSimpleXUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kI = 1,  // 0x1
    kF = 2,  // 0x2
    kS = 3,  // 0x3
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 1350988770:
        return Ordinal::kI;
      case 2:
      case 676019752:
        return Ordinal::kF;
      case 3:
      case 384461647:
        return Ordinal::kS;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_StrictFooTable;

struct StrictFoo {
  StrictFoo() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_s() const { return ordinal() == Ordinal::kS; }

  static StrictFoo WithS(::fidl::StringView* val) {
    StrictFoo result;
    result.set_s(val);
    return result;
  }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Ordinal::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static StrictFoo WithI(int32_t* val) {
    StrictFoo result;
    result.set_i(val);
    return result;
  }

  void set_i(int32_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int32_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  const int32_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_StrictFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 215696753:
        return Ordinal::kS;
      case 2:
      case 2063855467:
        return Ordinal::kI;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_StrictBoundedXUnionTable;

struct StrictBoundedXUnion {
  StrictBoundedXUnion() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kV = 1,  // 0x1
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_v() const { return ordinal() == Ordinal::kV; }

  static StrictBoundedXUnion WithV(::fidl::VectorView<uint8_t>* val) {
    StrictBoundedXUnion result;
    result.set_v(val);
    return result;
  }

  void set_v(::fidl::VectorView<uint8_t>* elem) {
    ordinal_ = Ordinal::kV;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::VectorView<uint8_t>& mutable_v() {
    ZX_ASSERT(ordinal() == Ordinal::kV);
    return *static_cast<::fidl::VectorView<uint8_t>*>(envelope_.data);
  }
  const ::fidl::VectorView<uint8_t>& v() const {
    ZX_ASSERT(ordinal() == Ordinal::kV);
    return *static_cast<::fidl::VectorView<uint8_t>*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_StrictBoundedXUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 32;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kV = 1,  // 0x1
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 480655205:
        return Ordinal::kV;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_OlderSimpleUnionTable;

struct OlderSimpleUnion {
  OlderSimpleUnion() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kI = 1,  // 0x1
    kF = 2,  // 0x2
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static OlderSimpleUnion WithI(int64_t* val) {
    OlderSimpleUnion result;
    result.set_i(val);
    return result;
  }

  void set_i(int64_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int64_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }
  const int64_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }

  bool is_f() const { return ordinal() == Ordinal::kF; }

  static OlderSimpleUnion WithF(float* val) {
    OlderSimpleUnion result;
    result.set_f(val);
    return result;
  }

  void set_f(float* elem) {
    ordinal_ = Ordinal::kF;
    envelope_.data = static_cast<void*>(elem);
  }

  float& mutable_f() {
    ZX_ASSERT(ordinal() == Ordinal::kF);
    return *static_cast<float*>(envelope_.data);
  }
  const float& f() const {
    ZX_ASSERT(ordinal() == Ordinal::kF);
    return *static_cast<float*>(envelope_.data);
  }
  void* unknownData() const {
    ZX_ASSERT(which() == Tag::kUnknown);
    return envelope_.data;
  }
  Tag which() const;

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_OlderSimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kI = 1,  // 0x1
    kF = 2,  // 0x2
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 1103730460:
        return Ordinal::kI;
      case 2:
      case 1480211663:
        return Ordinal::kF;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_NewerSimpleUnionTable;

struct NewerSimpleUnion {
  NewerSimpleUnion() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kI = 1,  // 0x1
    kS = 2,  // 0x2
    kV = 3,  // 0x3
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static NewerSimpleUnion WithI(int64_t* val) {
    NewerSimpleUnion result;
    result.set_i(val);
    return result;
  }

  void set_i(int64_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int64_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }
  const int64_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }

  bool is_s() const { return ordinal() == Ordinal::kS; }

  static NewerSimpleUnion WithS(::fidl::StringView* val) {
    NewerSimpleUnion result;
    result.set_s(val);
    return result;
  }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Ordinal::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }

  bool is_v() const { return ordinal() == Ordinal::kV; }

  static NewerSimpleUnion WithV(::fidl::VectorView<::fidl::StringView>* val) {
    NewerSimpleUnion result;
    result.set_v(val);
    return result;
  }

  void set_v(::fidl::VectorView<::fidl::StringView>* elem) {
    ordinal_ = Ordinal::kV;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::VectorView<::fidl::StringView>& mutable_v() {
    ZX_ASSERT(ordinal() == Ordinal::kV);
    return *static_cast<::fidl::VectorView<::fidl::StringView>*>(envelope_.data);
  }
  const ::fidl::VectorView<::fidl::StringView>& v() const {
    ZX_ASSERT(ordinal() == Ordinal::kV);
    return *static_cast<::fidl::VectorView<::fidl::StringView>*>(envelope_.data);
  }
  void* unknownData() const {
    ZX_ASSERT(which() == Tag::kUnknown);
    return envelope_.data;
  }
  Tag which() const;

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_NewerSimpleUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kI = 1,  // 0x1
    kS = 2,  // 0x2
    kV = 3,  // 0x3
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 170200420:
        return Ordinal::kI;
      case 2:
      case 697958567:
        return Ordinal::kS;
      case 3:
      case 57791921:
        return Ordinal::kV;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_FlexibleFooTable;

struct FlexibleFoo {
  FlexibleFoo() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kS = 1,  // 0x1
    kI = 2,  // 0x2
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_s() const { return ordinal() == Ordinal::kS; }

  static FlexibleFoo WithS(::fidl::StringView* val) {
    FlexibleFoo result;
    result.set_s(val);
    return result;
  }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Ordinal::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static FlexibleFoo WithI(int32_t* val) {
    FlexibleFoo result;
    result.set_i(val);
    return result;
  }

  void set_i(int32_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int32_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  const int32_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  void* unknownData() const {
    ZX_ASSERT(which() == Tag::kUnknown);
    return envelope_.data;
  }
  Tag which() const;

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_FlexibleFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 1,  // 0x1
    kI = 2,  // 0x2
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 1056421836:
        return Ordinal::kS;
      case 2:
      case 1911600824:
        return Ordinal::kI;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_ExplicitXUnionTable;

struct ExplicitXUnion {
  ExplicitXUnion() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kI = 1,  // 0x1
    kF = 4,  // 0x4
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static ExplicitXUnion WithI(int64_t* val) {
    ExplicitXUnion result;
    result.set_i(val);
    return result;
  }

  void set_i(int64_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int64_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }
  const int64_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int64_t*>(envelope_.data);
  }

  bool is_f() const { return ordinal() == Ordinal::kF; }

  static ExplicitXUnion WithF(float* val) {
    ExplicitXUnion result;
    result.set_f(val);
    return result;
  }

  void set_f(float* elem) {
    ordinal_ = Ordinal::kF;
    envelope_.data = static_cast<void*>(elem);
  }

  float& mutable_f() {
    ZX_ASSERT(ordinal() == Ordinal::kF);
    return *static_cast<float*>(envelope_.data);
  }
  const float& f() const {
    ZX_ASSERT(ordinal() == Ordinal::kF);
    return *static_cast<float*>(envelope_.data);
  }
  void* unknownData() const {
    ZX_ASSERT(which() == Tag::kUnknown);
    return envelope_.data;
  }
  Tag which() const;

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_ExplicitXUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kI = 1,  // 0x1
    kF = 4,  // 0x4
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 269774049:
        return Ordinal::kI;
      case 4:
      case 898646268:
        return Ordinal::kF;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_ExplicitStrictFooTable;

struct ExplicitStrictFoo {
  ExplicitStrictFoo() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kS = 3,  // 0x3
    kI = 2,  // 0x2
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_s() const { return ordinal() == Ordinal::kS; }

  static ExplicitStrictFoo WithS(::fidl::StringView* val) {
    ExplicitStrictFoo result;
    result.set_s(val);
    return result;
  }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Ordinal::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static ExplicitStrictFoo WithI(int32_t* val) {
    ExplicitStrictFoo result;
    result.set_i(val);
    return result;
  }

  void set_i(int32_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int32_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  const int32_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  Tag which() const {
    ZX_ASSERT(!has_invalid_tag());
    return static_cast<Tag>(ordinal());
  }

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_ExplicitStrictFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 3,  // 0x3
    kI = 2,  // 0x2
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 3:
      case 1579569872:
        return Ordinal::kS;
      case 2:
      case 1284403118:
        return Ordinal::kI;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_ExplicitFooTable;

struct ExplicitFoo {
  ExplicitFoo() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kS = 2,  // 0x2
    kI = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_s() const { return ordinal() == Ordinal::kS; }

  static ExplicitFoo WithS(::fidl::StringView* val) {
    ExplicitFoo result;
    result.set_s(val);
    return result;
  }

  void set_s(::fidl::StringView* elem) {
    ordinal_ = Ordinal::kS;
    envelope_.data = static_cast<void*>(elem);
  }

  ::fidl::StringView& mutable_s() {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }
  const ::fidl::StringView& s() const {
    ZX_ASSERT(ordinal() == Ordinal::kS);
    return *static_cast<::fidl::StringView*>(envelope_.data);
  }

  bool is_i() const { return ordinal() == Ordinal::kI; }

  static ExplicitFoo WithI(int32_t* val) {
    ExplicitFoo result;
    result.set_i(val);
    return result;
  }

  void set_i(int32_t* elem) {
    ordinal_ = Ordinal::kI;
    envelope_.data = static_cast<void*>(elem);
  }

  int32_t& mutable_i() {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  const int32_t& i() const {
    ZX_ASSERT(ordinal() == Ordinal::kI);
    return *static_cast<int32_t*>(envelope_.data);
  }
  void* unknownData() const {
    ZX_ASSERT(which() == Tag::kUnknown);
    return envelope_.data;
  }
  Tag which() const;

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_ExplicitFooTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 4294967295;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kS = 2,  // 0x2
    kI = 1,  // 0x1
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 2:
      case 1104328308:
        return Ordinal::kS;
      case 1:
      case 239266458:
        return Ordinal::kI;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_XUnionContainingEmptyStructTable;

struct XUnionContainingEmptyStruct {
  XUnionContainingEmptyStruct() : ordinal_(Ordinal::Invalid), envelope_{} {}

  enum class Tag : fidl_xunion_tag_t {
    kEmpty = 1,  // 0x1
    kUnknown = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  bool has_invalid_tag() const { return ordinal_ == Ordinal::Invalid; }

  bool is_empty() const { return ordinal() == Ordinal::kEmpty; }

  static XUnionContainingEmptyStruct WithEmpty(::llcpp::fidl::test::json::Empty* val) {
    XUnionContainingEmptyStruct result;
    result.set_empty(val);
    return result;
  }

  void set_empty(::llcpp::fidl::test::json::Empty* elem) {
    ordinal_ = Ordinal::kEmpty;
    envelope_.data = static_cast<void*>(elem);
  }

  ::llcpp::fidl::test::json::Empty& mutable_empty() {
    ZX_ASSERT(ordinal() == Ordinal::kEmpty);
    return *static_cast<::llcpp::fidl::test::json::Empty*>(envelope_.data);
  }
  const ::llcpp::fidl::test::json::Empty& empty() const {
    ZX_ASSERT(ordinal() == Ordinal::kEmpty);
    return *static_cast<::llcpp::fidl::test::json::Empty*>(envelope_.data);
  }
  void* unknownData() const {
    ZX_ASSERT(which() == Tag::kUnknown);
    return envelope_.data;
  }
  Tag which() const;

  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_XUnionContainingEmptyStructTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

 private:
  enum class Ordinal : fidl_xunion_tag_t {
    Invalid = 0,
    kEmpty = 1,  // 0x1
  };

  Ordinal ordinal() const {
    switch (static_cast<fidl_xunion_tag_t>(ordinal_)) {
      case 1:
      case 1720857888:
        return Ordinal::kEmpty;
    }
    return ordinal_;
  }

  static void SizeAndOffsetAssertionHelper();
  Ordinal ordinal_;
  FIDL_ALIGNDECL
  fidl_envelope_t envelope_;
};

extern "C" const fidl_type_t v1_fidl_test_json_StructWithNullableXUnionTable;

struct StructWithNullableXUnion {
  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_StructWithNullableXUnionTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 24;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 8;
  static constexpr bool HasPointer = true;

  ::llcpp::fidl::test::json::OlderSimpleUnion x1 = {};
};

extern "C" const fidl_type_t v1_fidl_test_json_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedRequestTable;
extern "C" const fidl_type_t v1_fidl_test_json_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseTable;
extern "C" const fidl_type_t v1_fidl_test_json_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedRequestTable;
extern "C" const fidl_type_t v1_fidl_test_json_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseTable;

class TestProtocol final {
  TestProtocol() = delete;
 public:

  struct StrictXUnionHenceResponseMayBeStackAllocatedResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fidl::test::json::StrictBoundedXUnion xu;

    static constexpr const fidl_type_t* Type = &v1_fidl_test_json_TestProtocolStrictXUnionHenceResponseMayBeStackAllocatedResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 32;
    static constexpr bool HasFlexibleEnvelope = false;
    static constexpr bool HasPointer = true;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using StrictXUnionHenceResponseMayBeStackAllocatedRequest = ::fidl::AnyZeroArgMessage;

  struct FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse final {
    FIDL_ALIGNDECL
    fidl_message_header_t _hdr;
    ::llcpp::fidl::test::json::OlderSimpleUnion xu;

    static constexpr const fidl_type_t* Type = &v1_fidl_test_json_TestProtocolFlexibleXUnionHenceResponseMustBeHeapAllocatedResponseTable;
    static constexpr uint32_t MaxNumHandles = 0;
    static constexpr uint32_t PrimarySize = 40;
    static constexpr uint32_t MaxOutOfLine = 8;
    static constexpr bool HasFlexibleEnvelope = true;
    static constexpr bool HasPointer = true;
    static constexpr bool ContainsUnion = false;
    static constexpr ::fidl::internal::TransactionalMessageKind MessageKind =
        ::fidl::internal::TransactionalMessageKind::kResponse;
  };
  using FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest = ::fidl::AnyZeroArgMessage;


  // Collection of return types of FIDL calls in this interface.
  class ResultOf final {
    ResultOf() = delete;
   private:
    template <typename ResponseType>
    class StrictXUnionHenceResponseMayBeStackAllocated_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(::zx::unowned_channel _client_end);
      ~StrictXUnionHenceResponseMayBeStackAllocated_Impl() = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl& operator=(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl final : private ::fidl::internal::OwnedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::OwnedSyncCallBase<ResponseType>;
     public:
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(::zx::unowned_channel _client_end);
      ~FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl() = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl& operator=(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using StrictXUnionHenceResponseMayBeStackAllocated = StrictXUnionHenceResponseMayBeStackAllocated_Impl<StrictXUnionHenceResponseMayBeStackAllocatedResponse>;
    using FlexibleXUnionHenceResponseMustBeHeapAllocated = FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>;
  };

  // Collection of return types of FIDL calls in this interface,
  // when the caller-allocate flavor or in-place call is used.
  class UnownedResultOf final {
    UnownedResultOf() = delete;
   private:
    template <typename ResponseType>
    class StrictXUnionHenceResponseMayBeStackAllocated_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~StrictXUnionHenceResponseMayBeStackAllocated_Impl() = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      StrictXUnionHenceResponseMayBeStackAllocated_Impl& operator=(StrictXUnionHenceResponseMayBeStackAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };
    template <typename ResponseType>
    class FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl final : private ::fidl::internal::UnownedSyncCallBase<ResponseType> {
      using Super = ::fidl::internal::UnownedSyncCallBase<ResponseType>;
     public:
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);
      ~FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl() = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl& operator=(FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl&& other) = default;
      using Super::status;
      using Super::error;
      using Super::ok;
      using Super::Unwrap;
      using Super::value;
      using Super::operator->;
      using Super::operator*;
    };

   public:
    using StrictXUnionHenceResponseMayBeStackAllocated = StrictXUnionHenceResponseMayBeStackAllocated_Impl<StrictXUnionHenceResponseMayBeStackAllocatedResponse>;
    using FlexibleXUnionHenceResponseMustBeHeapAllocated = FlexibleXUnionHenceResponseMustBeHeapAllocated_Impl<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>;
  };

  class SyncClient final {
   public:
    explicit SyncClient(::zx::channel channel) : channel_(std::move(channel)) {}
    ~SyncClient() = default;
    SyncClient(SyncClient&&) = default;
    SyncClient& operator=(SyncClient&&) = default;

    const ::zx::channel& channel() const { return channel_; }

    ::zx::channel* mutable_channel() { return &channel_; }

    // Allocates 88 bytes of message buffer on the stack. No heap allocation necessary.
    ResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated();

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated(::fidl::BytePart _response_buffer);

    // Allocates 16 bytes of request buffer on the stack. Response is heap-allocated.
    ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated();

    // Caller provides the backing storage for FIDL message via request and response buffers.
    UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated(::fidl::BytePart _response_buffer);

   private:
    ::zx::channel channel_;
  };

  // Methods to make a sync FIDL call directly on an unowned channel, avoiding setting up a client.
  class Call final {
    Call() = delete;
   public:

    // Allocates 88 bytes of message buffer on the stack. No heap allocation necessary.
    static ResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated(::zx::unowned_channel _client_end);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::StrictXUnionHenceResponseMayBeStackAllocated StrictXUnionHenceResponseMayBeStackAllocated(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

    // Allocates 16 bytes of request buffer on the stack. Response is heap-allocated.
    static ResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated(::zx::unowned_channel _client_end);

    // Caller provides the backing storage for FIDL message via request and response buffers.
    static UnownedResultOf::FlexibleXUnionHenceResponseMustBeHeapAllocated FlexibleXUnionHenceResponseMustBeHeapAllocated(::zx::unowned_channel _client_end, ::fidl::BytePart _response_buffer);

  };

  // Messages are encoded and decoded in-place when these methods are used.
  // Additionally, requests must be already laid-out according to the FIDL wire-format.
  class InPlace final {
    InPlace() = delete;
   public:

    static ::fidl::DecodeResult<StrictXUnionHenceResponseMayBeStackAllocatedResponse> StrictXUnionHenceResponseMayBeStackAllocated(::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

    static ::fidl::DecodeResult<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> FlexibleXUnionHenceResponseMustBeHeapAllocated(::zx::unowned_channel _client_end, ::fidl::BytePart response_buffer);

  };

  // Pure-virtual interface to be implemented by a server.
  class Interface {
   public:
    Interface() = default;
    virtual ~Interface() = default;
    using _Outer = TestProtocol;
    using _Base = ::fidl::CompleterBase;

    class StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase : public _Base {
     public:
      void Reply(::llcpp::fidl::test::json::StrictBoundedXUnion xu);
      void Reply(::fidl::BytePart _buffer, ::llcpp::fidl::test::json::StrictBoundedXUnion xu);
      void Reply(::fidl::DecodedMessage<StrictXUnionHenceResponseMayBeStackAllocatedResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using StrictXUnionHenceResponseMayBeStackAllocatedCompleter = ::fidl::Completer<StrictXUnionHenceResponseMayBeStackAllocatedCompleterBase>;

    virtual void StrictXUnionHenceResponseMayBeStackAllocated(StrictXUnionHenceResponseMayBeStackAllocatedCompleter::Sync _completer) = 0;

    class FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase : public _Base {
     public:
      void Reply(::llcpp::fidl::test::json::OlderSimpleUnion xu);
      void Reply(::fidl::BytePart _buffer, ::llcpp::fidl::test::json::OlderSimpleUnion xu);
      void Reply(::fidl::DecodedMessage<FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> params);

     protected:
      using ::fidl::CompleterBase::CompleterBase;
    };

    using FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter = ::fidl::Completer<FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleterBase>;

    virtual void FlexibleXUnionHenceResponseMustBeHeapAllocated(FlexibleXUnionHenceResponseMustBeHeapAllocatedCompleter::Sync _completer) = 0;

  };

  // Attempts to dispatch the incoming message to a handler function in the server implementation.
  // If there is no matching handler, it returns false, leaving the message and transaction intact.
  // In all other cases, it consumes the message and returns true.
  // It is possible to chain multiple TryDispatch functions in this manner.
  static bool TryDispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Dispatches the incoming message to one of the handlers functions in the interface.
  // If there is no matching handler, it closes all the handles in |msg| and closes the channel with
  // a |ZX_ERR_NOT_SUPPORTED| epitaph, before returning false. The message should then be discarded.
  static bool Dispatch(Interface* impl, fidl_msg_t* msg, ::fidl::Transaction* txn);

  // Same as |Dispatch|, but takes a |void*| instead of |Interface*|. Only used with |fidl::Bind|
  // to reduce template expansion.
  // Do not call this method manually. Use |Dispatch| instead.
  static bool TypeErasedDispatch(void* impl, fidl_msg_t* msg, ::fidl::Transaction* txn) {
    return Dispatch(static_cast<Interface*>(impl), msg, txn);
  }


  // Helper functions to fill in the transaction header in a |DecodedMessage<TransactionalMessage>|.
  class SetTransactionHeaderFor final {
    SetTransactionHeaderFor() = delete;
   public:
    static void StrictXUnionHenceResponseMayBeStackAllocatedRequest(const ::fidl::DecodedMessage<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedRequest>& _msg);
    static void StrictXUnionHenceResponseMayBeStackAllocatedResponse(const ::fidl::DecodedMessage<TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse>& _msg);
    static void FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest(const ::fidl::DecodedMessage<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedRequest>& _msg);
    static void FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse(const ::fidl::DecodedMessage<TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse>& _msg);
  };
};

extern "C" const fidl_type_t v1_fidl_test_json_EmptyTable;

struct Empty {
  static constexpr const fidl_type_t* Type = &v1_fidl_test_json_EmptyTable;
  static constexpr uint32_t MaxNumHandles = 0;
  static constexpr uint32_t PrimarySize = 1;
  [[maybe_unused]]
  static constexpr uint32_t MaxOutOfLine = 0;
  static constexpr bool HasPointer = false;

  uint8_t __reserved = {};
};

}  // namespace json
}  // namespace test
}  // namespace fidl
}  // namespace llcpp

namespace fidl {

template <>
struct IsFidlType<::llcpp::fidl::test::json::StructWithNullableXUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::StructWithNullableXUnion>);
static_assert(offsetof(::llcpp::fidl::test::json::StructWithNullableXUnion, x1) == 0);
static_assert(sizeof(::llcpp::fidl::test::json::StructWithNullableXUnion) == ::llcpp::fidl::test::json::StructWithNullableXUnion::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::json::StrictSimpleXUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::StrictSimpleXUnion>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::StrictFoo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::StrictFoo>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::StrictBoundedXUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::StrictBoundedXUnion>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::OlderSimpleUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::OlderSimpleUnion>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fidl::test::json::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fidl::test::json::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse)
    == ::llcpp::fidl::test::json::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse::PrimarySize);
static_assert(offsetof(::llcpp::fidl::test::json::TestProtocol::StrictXUnionHenceResponseMayBeStackAllocatedResponse, xu) == 16);

template <>
struct IsFidlType<::llcpp::fidl::test::json::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> : public std::true_type {};
template <>
struct IsFidlMessage<::llcpp::fidl::test::json::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse> : public std::true_type {};
static_assert(sizeof(::llcpp::fidl::test::json::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse)
    == ::llcpp::fidl::test::json::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse::PrimarySize);
static_assert(offsetof(::llcpp::fidl::test::json::TestProtocol::FlexibleXUnionHenceResponseMustBeHeapAllocatedResponse, xu) == 16);

template <>
struct IsFidlType<::llcpp::fidl::test::json::NewerSimpleUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::NewerSimpleUnion>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::FlexibleFoo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::FlexibleFoo>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::ExplicitXUnion> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::ExplicitXUnion>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::ExplicitStrictFoo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::ExplicitStrictFoo>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::ExplicitFoo> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::ExplicitFoo>);

template <>
struct IsFidlType<::llcpp::fidl::test::json::Empty> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::Empty>);
static_assert(offsetof(::llcpp::fidl::test::json::Empty, __reserved) == 0);
static_assert(sizeof(::llcpp::fidl::test::json::Empty) == ::llcpp::fidl::test::json::Empty::PrimarySize);

template <>
struct IsFidlType<::llcpp::fidl::test::json::XUnionContainingEmptyStruct> : public std::true_type {};
static_assert(std::is_standard_layout_v<::llcpp::fidl::test::json::XUnionContainingEmptyStruct>);

}  // namespace fidl
