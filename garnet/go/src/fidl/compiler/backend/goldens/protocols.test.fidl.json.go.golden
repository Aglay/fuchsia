// Code generated by fidlgen; DO NOT EDIT.

package name


import (
	_zx "syscall/zx"
	_bindings "syscall/zx/fidl"
)





type ErrorEnun uint32
const (
	ErrorEnunErrFoo ErrorEnun = 1
	ErrorEnunErrBar ErrorEnun = 2
)
func (x ErrorEnun) String() string {
	switch x {
	case 1:
		return "ErrFoo"
	case 2:
		return "ErrBar"
	}
	return "Unknown"
}

type WithErrorSyntaxResponseAsStructResponse struct {
	_ struct{} `fidl:"s,24,8" fidl2:"s,24,8"`
	A int64`fidl:"0"`
	B int64`fidl:"8"`
	C int64`fidl:"16"`
}

var _mWithErrorSyntaxResponseAsStructResponse = _bindings.CreateLazyMarshaler(WithErrorSyntaxResponseAsStructResponse{})

func (msg *WithErrorSyntaxResponseAsStructResponse) Marshaler() _bindings.Marshaler {
	return _mWithErrorSyntaxResponseAsStructResponse
}

type WithErrorSyntaxErrorAsPrimitiveResponse struct {
	_ struct{} `fidl:"s,1,1" fidl2:"s,1,1"`
}

var _mWithErrorSyntaxErrorAsPrimitiveResponse = _bindings.CreateLazyMarshaler(WithErrorSyntaxErrorAsPrimitiveResponse{})

func (msg *WithErrorSyntaxErrorAsPrimitiveResponse) Marshaler() _bindings.Marshaler {
	return _mWithErrorSyntaxErrorAsPrimitiveResponse
}

type WithErrorSyntaxErrorAsEnumResponse struct {
	_ struct{} `fidl:"s,1,1" fidl2:"s,1,1"`
}

var _mWithErrorSyntaxErrorAsEnumResponse = _bindings.CreateLazyMarshaler(WithErrorSyntaxErrorAsEnumResponse{})

func (msg *WithErrorSyntaxErrorAsEnumResponse) Marshaler() _bindings.Marshaler {
	return _mWithErrorSyntaxErrorAsEnumResponse
}
type I_withErrorSyntaxResponseAsStructResultTag uint32
const (
	_ I_withErrorSyntaxResponseAsStructResultTag = iota
	WithErrorSyntaxResponseAsStructResultResponse
	WithErrorSyntaxResponseAsStructResultErr
)


type WithErrorSyntaxResponseAsStructResult struct {
	I_withErrorSyntaxResponseAsStructResultTag `fidl:"u,32,8" fidl2:"u,32,8"`
	Response WithErrorSyntaxResponseAsStructResponse `fidl:"415743989"`
	Err uint32 `fidl:"1728496323"`
}

func (u *WithErrorSyntaxResponseAsStructResult) Which() I_withErrorSyntaxResponseAsStructResultTag {
	return u.I_withErrorSyntaxResponseAsStructResultTag
}

func (u *WithErrorSyntaxResponseAsStructResult) SetResponse(response WithErrorSyntaxResponseAsStructResponse) {
	u.I_withErrorSyntaxResponseAsStructResultTag = WithErrorSyntaxResponseAsStructResultResponse
	u.Response = response
}

func WithErrorSyntaxResponseAsStructResultWithResponse(response WithErrorSyntaxResponseAsStructResponse) WithErrorSyntaxResponseAsStructResult {
	var _u WithErrorSyntaxResponseAsStructResult
	_u.SetResponse(response)
	return _u
}

func (u *WithErrorSyntaxResponseAsStructResult) SetErr(err uint32) {
	u.I_withErrorSyntaxResponseAsStructResultTag = WithErrorSyntaxResponseAsStructResultErr
	u.Err = err
}

func WithErrorSyntaxResponseAsStructResultWithErr(err uint32) WithErrorSyntaxResponseAsStructResult {
	var _u WithErrorSyntaxResponseAsStructResult
	_u.SetErr(err)
	return _u
}
type I_withErrorSyntaxErrorAsPrimitiveResultTag uint32
const (
	_ I_withErrorSyntaxErrorAsPrimitiveResultTag = iota
	WithErrorSyntaxErrorAsPrimitiveResultResponse
	WithErrorSyntaxErrorAsPrimitiveResultErr
)


type WithErrorSyntaxErrorAsPrimitiveResult struct {
	I_withErrorSyntaxErrorAsPrimitiveResultTag `fidl:"u,8,4" fidl2:"u,8,4"`
	Response WithErrorSyntaxErrorAsPrimitiveResponse `fidl:"138512668"`
	Err uint32 `fidl:"1043053528"`
}

func (u *WithErrorSyntaxErrorAsPrimitiveResult) Which() I_withErrorSyntaxErrorAsPrimitiveResultTag {
	return u.I_withErrorSyntaxErrorAsPrimitiveResultTag
}

func (u *WithErrorSyntaxErrorAsPrimitiveResult) SetResponse(response WithErrorSyntaxErrorAsPrimitiveResponse) {
	u.I_withErrorSyntaxErrorAsPrimitiveResultTag = WithErrorSyntaxErrorAsPrimitiveResultResponse
	u.Response = response
}

func WithErrorSyntaxErrorAsPrimitiveResultWithResponse(response WithErrorSyntaxErrorAsPrimitiveResponse) WithErrorSyntaxErrorAsPrimitiveResult {
	var _u WithErrorSyntaxErrorAsPrimitiveResult
	_u.SetResponse(response)
	return _u
}

func (u *WithErrorSyntaxErrorAsPrimitiveResult) SetErr(err uint32) {
	u.I_withErrorSyntaxErrorAsPrimitiveResultTag = WithErrorSyntaxErrorAsPrimitiveResultErr
	u.Err = err
}

func WithErrorSyntaxErrorAsPrimitiveResultWithErr(err uint32) WithErrorSyntaxErrorAsPrimitiveResult {
	var _u WithErrorSyntaxErrorAsPrimitiveResult
	_u.SetErr(err)
	return _u
}
type I_withErrorSyntaxErrorAsEnumResultTag uint32
const (
	_ I_withErrorSyntaxErrorAsEnumResultTag = iota
	WithErrorSyntaxErrorAsEnumResultResponse
	WithErrorSyntaxErrorAsEnumResultErr
)


type WithErrorSyntaxErrorAsEnumResult struct {
	I_withErrorSyntaxErrorAsEnumResultTag `fidl:"u,8,4" fidl2:"u,8,4"`
	Response WithErrorSyntaxErrorAsEnumResponse `fidl:"1951667349"`
	Err ErrorEnun `fidl:"887935114"`
}

func (u *WithErrorSyntaxErrorAsEnumResult) Which() I_withErrorSyntaxErrorAsEnumResultTag {
	return u.I_withErrorSyntaxErrorAsEnumResultTag
}

func (u *WithErrorSyntaxErrorAsEnumResult) SetResponse(response WithErrorSyntaxErrorAsEnumResponse) {
	u.I_withErrorSyntaxErrorAsEnumResultTag = WithErrorSyntaxErrorAsEnumResultResponse
	u.Response = response
}

func WithErrorSyntaxErrorAsEnumResultWithResponse(response WithErrorSyntaxErrorAsEnumResponse) WithErrorSyntaxErrorAsEnumResult {
	var _u WithErrorSyntaxErrorAsEnumResult
	_u.SetResponse(response)
	return _u
}

func (u *WithErrorSyntaxErrorAsEnumResult) SetErr(err ErrorEnun) {
	u.I_withErrorSyntaxErrorAsEnumResultTag = WithErrorSyntaxErrorAsEnumResultErr
	u.Err = err
}

func WithErrorSyntaxErrorAsEnumResultWithErr(err ErrorEnun) WithErrorSyntaxErrorAsEnumResult {
	var _u WithErrorSyntaxErrorAsEnumResult
	_u.SetErr(err)
	return _u
}
const (
	WithAndWithoutRequestResponseNoRequestNoResponseOrdinal uint64 = 0x1e03f87500000000
	WithAndWithoutRequestResponseNoRequestNoResponseGenOrdinal uint64 = 0x3931f96bc77fba8
	WithAndWithoutRequestResponseNoRequestEmptyResponseOrdinal uint64 = 0x4df6dbd500000000
	WithAndWithoutRequestResponseNoRequestEmptyResponseGenOrdinal uint64 = 0x706ec7bd335005f9
	WithAndWithoutRequestResponseNoRequestWithResponseOrdinal uint64 = 0x668d7f800000000
	WithAndWithoutRequestResponseNoRequestWithResponseGenOrdinal uint64 = 0x4625ad5934067a48
	WithAndWithoutRequestResponseWithRequestNoResponseOrdinal uint64 = 0x19c2137100000000
	WithAndWithoutRequestResponseWithRequestNoResponseGenOrdinal uint64 = 0x46e5095902913025
	WithAndWithoutRequestResponseWithRequestEmptyResponseOrdinal uint64 = 0x76f2397300000000
	WithAndWithoutRequestResponseWithRequestEmptyResponseGenOrdinal uint64 = 0x180c481d4a15967
	WithAndWithoutRequestResponseWithRequestWithResponseOrdinal uint64 = 0x1973292000000000
	WithAndWithoutRequestResponseWithRequestWithResponseGenOrdinal uint64 = 0x553860267eceec0
	WithAndWithoutRequestResponseOnEmptyResponseOrdinal uint64 = 0x697fd73200000000
	WithAndWithoutRequestResponseOnEmptyResponseGenOrdinal uint64 = 0x42e90e9a86944b3
	WithAndWithoutRequestResponseOnWithResponseOrdinal uint64 = 0x7a47120700000000
	WithAndWithoutRequestResponseOnWithResponseGenOrdinal uint64 = 0x2a9767b3ae6c2b09
)

type withAndWithoutRequestResponseNoRequestWithResponseResponse struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	Ret string`fidl:"0,"`
}

var _mwithAndWithoutRequestResponseNoRequestWithResponseResponse = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseNoRequestWithResponseResponse{})

func (msg *withAndWithoutRequestResponseNoRequestWithResponseResponse) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseNoRequestWithResponseResponse
}

type withAndWithoutRequestResponseWithRequestNoResponseRequest struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	Arg string`fidl:"0,"`
}

var _mwithAndWithoutRequestResponseWithRequestNoResponseRequest = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestNoResponseRequest{})

func (msg *withAndWithoutRequestResponseWithRequestNoResponseRequest) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestNoResponseRequest
}

type withAndWithoutRequestResponseWithRequestEmptyResponseRequest struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	Arg string`fidl:"0,"`
}

var _mwithAndWithoutRequestResponseWithRequestEmptyResponseRequest = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestEmptyResponseRequest{})

func (msg *withAndWithoutRequestResponseWithRequestEmptyResponseRequest) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestEmptyResponseRequest
}

type withAndWithoutRequestResponseWithRequestWithResponseRequest struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	Arg string`fidl:"0,"`
}

var _mwithAndWithoutRequestResponseWithRequestWithResponseRequest = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestWithResponseRequest{})

func (msg *withAndWithoutRequestResponseWithRequestWithResponseRequest) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestWithResponseRequest
}

type withAndWithoutRequestResponseWithRequestWithResponseResponse struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	Ret string`fidl:"0,"`
}

var _mwithAndWithoutRequestResponseWithRequestWithResponseResponse = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseWithRequestWithResponseResponse{})

func (msg *withAndWithoutRequestResponseWithRequestWithResponseResponse) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseWithRequestWithResponseResponse
}

type withAndWithoutRequestResponseOnWithResponseResponse struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	Ret string`fidl:"0,"`
}

var _mwithAndWithoutRequestResponseOnWithResponseResponse = _bindings.CreateLazyMarshaler(withAndWithoutRequestResponseOnWithResponseResponse{})

func (msg *withAndWithoutRequestResponseOnWithResponseResponse) Marshaler() _bindings.Marshaler {
	return _mwithAndWithoutRequestResponseOnWithResponseResponse
}

type WithAndWithoutRequestResponseInterface _bindings.ChannelProxy


func (p *WithAndWithoutRequestResponseInterface) NoRequestNoResponse() error {
	var req_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseNoRequestNoResponseOrdinal, req_)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) NoRequestEmptyResponse() error {
	var req_ _bindings.Message
	var resp_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseNoRequestEmptyResponseOrdinal, req_, resp_, WithAndWithoutRequestResponseNoRequestEmptyResponseOrdinal, WithAndWithoutRequestResponseNoRequestEmptyResponseGenOrdinal)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) NoRequestWithResponse() (string, error) {
	var req_ _bindings.Message
	resp_ := &withAndWithoutRequestResponseNoRequestWithResponseResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseNoRequestWithResponseOrdinal, req_, resp_, WithAndWithoutRequestResponseNoRequestWithResponseOrdinal, WithAndWithoutRequestResponseNoRequestWithResponseGenOrdinal)
	return resp_.Ret, err
}

func (p *WithAndWithoutRequestResponseInterface) WithRequestNoResponse(arg string) error {
	req_ := &withAndWithoutRequestResponseWithRequestNoResponseRequest{
		Arg: arg,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseWithRequestNoResponseOrdinal, req_)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) WithRequestEmptyResponse(arg string) error {
	req_ := &withAndWithoutRequestResponseWithRequestEmptyResponseRequest{
		Arg: arg,
	}
	var resp_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseWithRequestEmptyResponseOrdinal, req_, resp_, WithAndWithoutRequestResponseWithRequestEmptyResponseOrdinal, WithAndWithoutRequestResponseWithRequestEmptyResponseGenOrdinal)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) WithRequestWithResponse(arg string) (string, error) {
	req_ := &withAndWithoutRequestResponseWithRequestWithResponseRequest{
		Arg: arg,
	}
	resp_ := &withAndWithoutRequestResponseWithRequestWithResponseResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithAndWithoutRequestResponseWithRequestWithResponseOrdinal, req_, resp_, WithAndWithoutRequestResponseWithRequestWithResponseOrdinal, WithAndWithoutRequestResponseWithRequestWithResponseGenOrdinal)
	return resp_.Ret, err
}

func (p *WithAndWithoutRequestResponseInterface) ExpectOnEmptyResponse() error {
	var resp_ _bindings.Message
	err := ((*_bindings.ChannelProxy)(p)).Recv(WithAndWithoutRequestResponseOnEmptyResponseOrdinal, resp_, WithAndWithoutRequestResponseOnEmptyResponseGenOrdinal)
	return err
}

func (p *WithAndWithoutRequestResponseInterface) ExpectOnWithResponse() (string, error) {
	resp_ := &withAndWithoutRequestResponseOnWithResponseResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Recv(WithAndWithoutRequestResponseOnWithResponseOrdinal, resp_, WithAndWithoutRequestResponseOnWithResponseGenOrdinal)
	return resp_.Ret, err
}


type WithAndWithoutRequestResponse interface {
	NoRequestNoResponse() error
	NoRequestEmptyResponse() error
	NoRequestWithResponse() (string, error)
	WithRequestNoResponse(arg string) error
	WithRequestEmptyResponse(arg string) error
	WithRequestWithResponse(arg string) (string, error)
}

type WithAndWithoutRequestResponseTransitionalBase struct {}


type WithAndWithoutRequestResponseInterfaceRequest _bindings.InterfaceRequest

func NewWithAndWithoutRequestResponseInterfaceRequest() (WithAndWithoutRequestResponseInterfaceRequest, *WithAndWithoutRequestResponseInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return WithAndWithoutRequestResponseInterfaceRequest(req), (*WithAndWithoutRequestResponseInterface)(cli), err
}

type WithAndWithoutRequestResponseStub struct {
	Impl WithAndWithoutRequestResponse
}

func (s_ *WithAndWithoutRequestResponseStub) DispatchImpl(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case WithAndWithoutRequestResponseNoRequestNoResponseOrdinal:
		fallthrough
	case WithAndWithoutRequestResponseNoRequestNoResponseGenOrdinal:
		err_ := s_.Impl.NoRequestNoResponse()
		return nil, false, err_
	case WithAndWithoutRequestResponseNoRequestEmptyResponseOrdinal:
		fallthrough
	case WithAndWithoutRequestResponseNoRequestEmptyResponseGenOrdinal:
		err_ := s_.Impl.NoRequestEmptyResponse()
		return nil, true, err_
	case WithAndWithoutRequestResponseNoRequestWithResponseOrdinal:
		fallthrough
	case WithAndWithoutRequestResponseNoRequestWithResponseGenOrdinal:
		ret, err_ := s_.Impl.NoRequestWithResponse()
		out_ := withAndWithoutRequestResponseNoRequestWithResponseResponse{}
		out_.Ret = ret
		return &out_, true, err_
	case WithAndWithoutRequestResponseWithRequestNoResponseOrdinal:
		fallthrough
	case WithAndWithoutRequestResponseWithRequestNoResponseGenOrdinal:
		in_ := withAndWithoutRequestResponseWithRequestNoResponseRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.WithRequestNoResponse(in_.Arg)
		return nil, false, err_
	case WithAndWithoutRequestResponseWithRequestEmptyResponseOrdinal:
		fallthrough
	case WithAndWithoutRequestResponseWithRequestEmptyResponseGenOrdinal:
		in_ := withAndWithoutRequestResponseWithRequestEmptyResponseRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.WithRequestEmptyResponse(in_.Arg)
		return nil, true, err_
	case WithAndWithoutRequestResponseWithRequestWithResponseOrdinal:
		fallthrough
	case WithAndWithoutRequestResponseWithRequestWithResponseGenOrdinal:
		in_ := withAndWithoutRequestResponseWithRequestWithResponseRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		ret, err_ := s_.Impl.WithRequestWithResponse(in_.Arg)
		out_ := withAndWithoutRequestResponseWithRequestWithResponseResponse{}
		out_.Ret = ret
		return &out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type WithAndWithoutRequestResponseService struct {
	_bindings.BindingSet
}

func (s *WithAndWithoutRequestResponseService) Add(impl WithAndWithoutRequestResponse, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&WithAndWithoutRequestResponseStub{Impl: impl}, c, onError)
}

func (s *WithAndWithoutRequestResponseService) EventProxyFor(key _bindings.BindingKey) (*WithAndWithoutRequestResponseEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*WithAndWithoutRequestResponseEventProxy)(pxy), err
}

type WithAndWithoutRequestResponseEventProxy _bindings.ChannelProxy

func (p *WithAndWithoutRequestResponseEventProxy) OnEmptyResponse() error {
	var event_ _bindings.Message
	return ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseOnEmptyResponseOrdinal, event_)
}
func (p *WithAndWithoutRequestResponseEventProxy) OnWithResponse(ret string) error {
	event_ := &withAndWithoutRequestResponseOnWithResponseResponse{
		Ret: ret,
	}
	return ((*_bindings.ChannelProxy)(p)).Send(WithAndWithoutRequestResponseOnWithResponseOrdinal, event_)
}


const (
	WithErrorSyntaxResponseAsStructOrdinal uint64 = 0x4f3c32be00000000
	WithErrorSyntaxResponseAsStructGenOrdinal uint64 = 0x592157d505db2bcf
	WithErrorSyntaxErrorAsPrimitiveOrdinal uint64 = 0x7b58113900000000
	WithErrorSyntaxErrorAsPrimitiveGenOrdinal uint64 = 0x20cf80ad7d9b60be
	WithErrorSyntaxErrorAsEnumOrdinal uint64 = 0x4c95de1f00000000
	WithErrorSyntaxErrorAsEnumGenOrdinal uint64 = 0x3fcd36560f812e7f
)

type withErrorSyntaxResponseAsStructResponse struct {
	_ struct{} `fidl:"s,32,0" fidl2:"s,32,0"`
	Result WithErrorSyntaxResponseAsStructResult`fidl:"0"`
}

var _mwithErrorSyntaxResponseAsStructResponse = _bindings.CreateLazyMarshaler(withErrorSyntaxResponseAsStructResponse{})

func (msg *withErrorSyntaxResponseAsStructResponse) Marshaler() _bindings.Marshaler {
	return _mwithErrorSyntaxResponseAsStructResponse
}

type withErrorSyntaxErrorAsPrimitiveResponse struct {
	_ struct{} `fidl:"s,8,0" fidl2:"s,8,0"`
	Result WithErrorSyntaxErrorAsPrimitiveResult`fidl:"0"`
}

var _mwithErrorSyntaxErrorAsPrimitiveResponse = _bindings.CreateLazyMarshaler(withErrorSyntaxErrorAsPrimitiveResponse{})

func (msg *withErrorSyntaxErrorAsPrimitiveResponse) Marshaler() _bindings.Marshaler {
	return _mwithErrorSyntaxErrorAsPrimitiveResponse
}

type withErrorSyntaxErrorAsEnumResponse struct {
	_ struct{} `fidl:"s,8,0" fidl2:"s,8,0"`
	Result WithErrorSyntaxErrorAsEnumResult`fidl:"0"`
}

var _mwithErrorSyntaxErrorAsEnumResponse = _bindings.CreateLazyMarshaler(withErrorSyntaxErrorAsEnumResponse{})

func (msg *withErrorSyntaxErrorAsEnumResponse) Marshaler() _bindings.Marshaler {
	return _mwithErrorSyntaxErrorAsEnumResponse
}

type WithErrorSyntaxInterface _bindings.ChannelProxy


func (p *WithErrorSyntaxInterface) ResponseAsStruct() (WithErrorSyntaxResponseAsStructResult, error) {
	var req_ _bindings.Message
	resp_ := &withErrorSyntaxResponseAsStructResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithErrorSyntaxResponseAsStructOrdinal, req_, resp_, WithErrorSyntaxResponseAsStructOrdinal, WithErrorSyntaxResponseAsStructGenOrdinal)
	return resp_.Result, err
}

func (p *WithErrorSyntaxInterface) ErrorAsPrimitive() (WithErrorSyntaxErrorAsPrimitiveResult, error) {
	var req_ _bindings.Message
	resp_ := &withErrorSyntaxErrorAsPrimitiveResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithErrorSyntaxErrorAsPrimitiveOrdinal, req_, resp_, WithErrorSyntaxErrorAsPrimitiveOrdinal, WithErrorSyntaxErrorAsPrimitiveGenOrdinal)
	return resp_.Result, err
}

func (p *WithErrorSyntaxInterface) ErrorAsEnum() (WithErrorSyntaxErrorAsEnumResult, error) {
	var req_ _bindings.Message
	resp_ := &withErrorSyntaxErrorAsEnumResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(WithErrorSyntaxErrorAsEnumOrdinal, req_, resp_, WithErrorSyntaxErrorAsEnumOrdinal, WithErrorSyntaxErrorAsEnumGenOrdinal)
	return resp_.Result, err
}


type WithErrorSyntax interface {
	ResponseAsStruct() (WithErrorSyntaxResponseAsStructResult, error)
	ErrorAsPrimitive() (WithErrorSyntaxErrorAsPrimitiveResult, error)
	ErrorAsEnum() (WithErrorSyntaxErrorAsEnumResult, error)
}

type WithErrorSyntaxTransitionalBase struct {}


type WithErrorSyntaxInterfaceRequest _bindings.InterfaceRequest

func NewWithErrorSyntaxInterfaceRequest() (WithErrorSyntaxInterfaceRequest, *WithErrorSyntaxInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return WithErrorSyntaxInterfaceRequest(req), (*WithErrorSyntaxInterface)(cli), err
}

type WithErrorSyntaxStub struct {
	Impl WithErrorSyntax
}

func (s_ *WithErrorSyntaxStub) DispatchImpl(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case WithErrorSyntaxResponseAsStructOrdinal:
		fallthrough
	case WithErrorSyntaxResponseAsStructGenOrdinal:
		result, err_ := s_.Impl.ResponseAsStruct()
		out_ := withErrorSyntaxResponseAsStructResponse{}
		out_.Result = result
		return &out_, true, err_
	case WithErrorSyntaxErrorAsPrimitiveOrdinal:
		fallthrough
	case WithErrorSyntaxErrorAsPrimitiveGenOrdinal:
		result, err_ := s_.Impl.ErrorAsPrimitive()
		out_ := withErrorSyntaxErrorAsPrimitiveResponse{}
		out_.Result = result
		return &out_, true, err_
	case WithErrorSyntaxErrorAsEnumOrdinal:
		fallthrough
	case WithErrorSyntaxErrorAsEnumGenOrdinal:
		result, err_ := s_.Impl.ErrorAsEnum()
		out_ := withErrorSyntaxErrorAsEnumResponse{}
		out_.Result = result
		return &out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type WithErrorSyntaxService struct {
	_bindings.BindingSet
}

func (s *WithErrorSyntaxService) Add(impl WithErrorSyntax, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&WithErrorSyntaxStub{Impl: impl}, c, onError)
}

func (s *WithErrorSyntaxService) EventProxyFor(key _bindings.BindingKey) (*WithErrorSyntaxEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*WithErrorSyntaxEventProxy)(pxy), err
}

type WithErrorSyntaxEventProxy _bindings.ChannelProxy



const (
	ChannelProtocolMethodAOrdinal uint64 = 0x556693d200000000
	ChannelProtocolMethodAGenOrdinal uint64 = 0x1b1e059b3f02bffc
	ChannelProtocolEventAOrdinal uint64 = 0x1c78c20200000000
	ChannelProtocolEventAGenOrdinal uint64 = 0x2558b206a254d8a0
	ChannelProtocolMethodBOrdinal uint64 = 0xac6551b00000000
	ChannelProtocolMethodBGenOrdinal uint64 = 0x5db17a61464744a3
	ChannelProtocolMutateSocketOrdinal uint64 = 0x4b02e28600000000
	ChannelProtocolMutateSocketGenOrdinal uint64 = 0x36caa6fff7569577
)

type channelProtocolMethodARequest struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	A int64`fidl:"0"`
	B int64`fidl:"8"`
}

var _mchannelProtocolMethodARequest = _bindings.CreateLazyMarshaler(channelProtocolMethodARequest{})

func (msg *channelProtocolMethodARequest) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMethodARequest
}

type channelProtocolEventAResponse struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	A int64`fidl:"0"`
	B int64`fidl:"8"`
}

var _mchannelProtocolEventAResponse = _bindings.CreateLazyMarshaler(channelProtocolEventAResponse{})

func (msg *channelProtocolEventAResponse) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolEventAResponse
}

type channelProtocolMethodBRequest struct {
	_ struct{} `fidl:"s,16,0" fidl2:"s,16,0"`
	A int64`fidl:"0"`
	B int64`fidl:"8"`
}

var _mchannelProtocolMethodBRequest = _bindings.CreateLazyMarshaler(channelProtocolMethodBRequest{})

func (msg *channelProtocolMethodBRequest) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMethodBRequest
}

type channelProtocolMethodBResponse struct {
	_ struct{} `fidl:"s,8,0" fidl2:"s,8,0"`
	Result int64`fidl:"0"`
}

var _mchannelProtocolMethodBResponse = _bindings.CreateLazyMarshaler(channelProtocolMethodBResponse{})

func (msg *channelProtocolMethodBResponse) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMethodBResponse
}

type channelProtocolMutateSocketRequest struct {
	_ struct{} `fidl:"s,8,0" fidl2:"s,8,0"`
	A _zx.Socket`fidl:"0,0" fidl2:"0"`
}

var _mchannelProtocolMutateSocketRequest = _bindings.CreateLazyMarshaler(channelProtocolMutateSocketRequest{})

func (msg *channelProtocolMutateSocketRequest) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMutateSocketRequest
}

type channelProtocolMutateSocketResponse struct {
	_ struct{} `fidl:"s,8,0" fidl2:"s,8,0"`
	B _zx.Socket`fidl:"0,0" fidl2:"0"`
}

var _mchannelProtocolMutateSocketResponse = _bindings.CreateLazyMarshaler(channelProtocolMutateSocketResponse{})

func (msg *channelProtocolMutateSocketResponse) Marshaler() _bindings.Marshaler {
	return _mchannelProtocolMutateSocketResponse
}

type ChannelProtocolInterface _bindings.ChannelProxy


func (p *ChannelProtocolInterface) MethodA(a int64,b int64) error {
	req_ := &channelProtocolMethodARequest{
		A: a,
		B: b,
	}
	err := ((*_bindings.ChannelProxy)(p)).Send(ChannelProtocolMethodAOrdinal, req_)
	return err
}

func (p *ChannelProtocolInterface) ExpectEventA() (int64, int64, error) {
	resp_ := &channelProtocolEventAResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Recv(ChannelProtocolEventAOrdinal, resp_, ChannelProtocolEventAGenOrdinal)
	return resp_.A, resp_.B, err
}

func (p *ChannelProtocolInterface) MethodB(a int64,b int64) (int64, error) {
	req_ := &channelProtocolMethodBRequest{
		A: a,
		B: b,
	}
	resp_ := &channelProtocolMethodBResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ChannelProtocolMethodBOrdinal, req_, resp_, ChannelProtocolMethodBOrdinal, ChannelProtocolMethodBGenOrdinal)
	return resp_.Result, err
}

func (p *ChannelProtocolInterface) MutateSocket(a _zx.Socket) (_zx.Socket, error) {
	req_ := &channelProtocolMutateSocketRequest{
		A: a,
	}
	resp_ := &channelProtocolMutateSocketResponse{}
	err := ((*_bindings.ChannelProxy)(p)).Call(ChannelProtocolMutateSocketOrdinal, req_, resp_, ChannelProtocolMutateSocketOrdinal, ChannelProtocolMutateSocketGenOrdinal)
	return resp_.B, err
}


type ChannelProtocol interface {
	MethodA(a int64,b int64) error
	MethodB(a int64,b int64) (int64, error)
	MutateSocket(a _zx.Socket) (_zx.Socket, error)
}

type ChannelProtocolTransitionalBase struct {}


type ChannelProtocolInterfaceRequest _bindings.InterfaceRequest

func NewChannelProtocolInterfaceRequest() (ChannelProtocolInterfaceRequest, *ChannelProtocolInterface, error) {
	req, cli, err := _bindings.NewInterfaceRequest()
	return ChannelProtocolInterfaceRequest(req), (*ChannelProtocolInterface)(cli), err
}

type ChannelProtocolStub struct {
	Impl ChannelProtocol
}

func (s_ *ChannelProtocolStub) DispatchImpl(ordinal_ uint64, data_ []byte, handles_ []_zx.Handle) (_bindings.Message, bool, error) {
	switch ordinal_ {
	case ChannelProtocolMethodAOrdinal:
		fallthrough
	case ChannelProtocolMethodAGenOrdinal:
		in_ := channelProtocolMethodARequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		err_ := s_.Impl.MethodA(in_.A,in_.B)
		return nil, false, err_
	case ChannelProtocolMethodBOrdinal:
		fallthrough
	case ChannelProtocolMethodBGenOrdinal:
		in_ := channelProtocolMethodBRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		result, err_ := s_.Impl.MethodB(in_.A,in_.B)
		out_ := channelProtocolMethodBResponse{}
		out_.Result = result
		return &out_, true, err_
	case ChannelProtocolMutateSocketOrdinal:
		fallthrough
	case ChannelProtocolMutateSocketGenOrdinal:
		in_ := channelProtocolMutateSocketRequest{}
		if _, _, err_ := _bindings.Unmarshal(data_, handles_, &in_); err_ != nil {
			return nil, false, err_
		}
		b, err_ := s_.Impl.MutateSocket(in_.A)
		out_ := channelProtocolMutateSocketResponse{}
		out_.B = b
		return &out_, true, err_
	}
	return nil, false, _bindings.ErrUnknownOrdinal
}
type ChannelProtocolService struct {
	_bindings.BindingSet
}

func (s *ChannelProtocolService) Add(impl ChannelProtocol, c _zx.Channel, onError func(error)) (_bindings.BindingKey, error) {
	return s.BindingSet.Add(&ChannelProtocolStub{Impl: impl}, c, onError)
}

func (s *ChannelProtocolService) EventProxyFor(key _bindings.BindingKey) (*ChannelProtocolEventProxy, bool) {
	pxy, err := s.BindingSet.ProxyFor(key)
	return (*ChannelProtocolEventProxy)(pxy), err
}

type ChannelProtocolEventProxy _bindings.ChannelProxy

func (p *ChannelProtocolEventProxy) EventA(a int64,b int64) error {
	event_ := &channelProtocolEventAResponse{
		A: a,
		B: b,
	}
	return ((*_bindings.ChannelProxy)(p)).Send(ChannelProtocolEventAOrdinal, event_)
}


