// WARNING: This file is machine generated by fidlgen.

#include <doc_comments.fidl.json.llcpp.h>
#include <memory>

namespace test {
namespace name {

namespace {

[[maybe_unused]]
constexpr uint32_t kInterface_Method_Ordinal = 1061382220u;

}  // namespace

zx_status_t Interface::SyncClient::Method() {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<MethodRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<MethodRequest*>(_write_bytes);
  _request._hdr.ordinal = kInterface_Method_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(MethodRequest));
  ::fidl::DecodedMessage<MethodRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  const auto& _oneway = _encode_request_result.message;
  return this->channel_.write(0,
                              _oneway.bytes().data(), _oneway.bytes().actual(),
                              _oneway.handles().data(), _oneway.handles().actual());
}


void ::test::name::Union::SizeAndOffsetAssertionHelper() {
  static_assert(offsetof(::test::name::Union, Field_) == 4);
  static_assert(sizeof(::test::name::Union) == ::test::name::Union::PrimarySize);
}

}  // namespace name
}  // namespace test
