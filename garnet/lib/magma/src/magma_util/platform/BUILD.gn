# Copyright 2016 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//garnet/lib/magma/gnbuild/magma.gni")

config("platform_include_config") {
  include_dirs = [ "." ]
}

config("tracing") {
  if (magma_enable_tracing) {
    defines = [ "MAGMA_ENABLE_TRACING" ]
  }
}

source_set("address_range") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    "$magma_build_root/src/magma_util",
  ]

  sources = [
    "platform_address_range.h",
  ]

  deps = [
    "zircon:address_range",
  ]

  allow_circular_includes_from = [ "zircon:address_range" ]
}

source_set("barriers") {
  public_configs = [ ":platform_include_config" ]

  sources = [
    "platform_barriers.h",
  ]

  if (is_fuchsia) {
    public_deps = [
      "//zircon/public/lib/ddk",
    ]
  }
}

source_set("buffer_header") {
  public_configs = [ ":platform_include_config" ]
  public_deps = [
    ":handle",
    "//garnet/lib/magma/include:magma_abi",
  ]
  sources = [
    "platform_buffer.h",
  ]
}

source_set("buffer") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":buffer_header",
    "$magma_build_root/src/magma_util:common",
  ]

  if (is_fuchsia) {
    deps = [
      "zircon:buffer",
    ]
  } else {
    deps = [
      "linux:buffer",
    ]
  }
}

source_set("bus_mapper_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":buffer_header",
    ":handle",
  ]

  sources = [
    "platform_bus_mapper.h",
  ]
}

source_set("bus_mapper") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":buffer",
    ":bus_mapper_header",
    ":handle",
    "$magma_build_root/src/magma_util:common",
  ]

  if (is_fuchsia) {
    deps = [
      "zircon:bus_mapper",
    ]
  } else {
    deps = [
      "linux:bus_mapper",
    ]
  }
}

source_set("handle_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    "$magma_build_root/src/magma_util:common",
  ]

  sources = [
    "platform_handle.h",
  ]
}

source_set("handle") {
  public_deps = [
    ":handle_header",
  ]

  if (is_fuchsia) {
    deps = [
      "zircon:handle",
    ]
  }
}

source_set("iommu_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":bus_mapper",
    "$magma_build_root/src/magma_util:common",
  ]

  sources = [
    "platform_iommu.h",
  ]
}

source_set("iommu") {
  public_deps = [
    ":iommu_header",
  ]

  if (is_linux) {
    deps = [
      "linux:iommu",
    ]
  }
}

source_set("mmio_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    "$magma_build_root/src/magma_util:common",
  ]

  sources = [
    "platform_mmio.h",
  ]
}

source_set("device_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":buffer_header",
    ":handle_header",
    ":mmio_header",
    "$magma_build_root/src/magma_util",
  ]

  sources = [
    "platform_device.h",
    "platform_pci_device.h",
  ]
}

source_set("device") {
  public_deps = [
    ":buffer",
    ":device_header",
    ":handle",
  ]

  if (is_fuchsia) {
    deps = [
      "zircon:device",
    ]
  } else if (is_linux) {
    deps = [
      "linux:device",
    ]
  }
}

source_set("random_header") {
  public_configs = [ ":platform_include_config" ]

  sources = [
    "platform_random.h",
  ]
}

group("random") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":random_header",
  ]

  deps = [
    "zircon:random",
  ]
}

source_set("futex") {
  public_configs = [ ":platform_include_config" ]

  sources = [
    "platform_futex.h",
  ]

  deps = [
    "zircon:futex",
  ]

  allow_circular_includes_from = [ "zircon:futex" ]
}

source_set("connection_header") {
  public_configs = [ "$magma_build_root:magma_src_include_config" ]

  sources = [
    "platform_connection_client.h",
  ]

  public_deps = [
    ":buffer",
    ":event",
    ":object",
    ":semaphore",
    ":thread",
    "$magma_build_root/src/magma_util:common",
    "//garnet/lib/magma/include:magma_abi",
    "//garnet/lib/magma/include:msd_abi",
  ]
}

source_set("connection_client") {
  public_deps = [
    ":connection_header",
  ]
  deps = [
    "zircon:connection_client",
  ]
}

source_set("connection") {
  public_deps = [
    ":connection_header",
  ]
  deps = [
    "zircon:connection",
  ]
}

source_set("device_client_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":connection_header",
  ]

  sources = [
    "platform_device_client.h",
  ]
}

source_set("device_client") {
  public_deps = [
    ":device_client_header",
  ]
  deps = [
    "zircon:device_client",
  ]
}

source_set("thread_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":handle",
  ]

  sources = [
    "platform_thread.h",
  ]
}

source_set("thread") {
  public_deps = [
    ":thread_header",
  ]

  if (is_fuchsia) {
    deps = [
      "zircon:thread",
    ]
  } else if (is_linux) {
    deps = [
      "linux:thread",
    ]
  }
}

source_set("event") {
  public_configs = [ ":platform_include_config" ]

  sources = [
    "platform_event.h",
  ]

  deps = [
    "zircon:event",
  ]

  allow_circular_includes_from = [ "zircon:event" ]
}

source_set("logger_header") {
  public_configs = [ ":platform_include_config" ]

  public_deps = [
    ":handle_header",
  ]

  sources = [
    "platform_logger.h",
  ]
}

# Logger target doesn't dictate an implementation, because
# a different implementation may be needed for clients vs system drivers.
group("logger") {
  public_deps = [
    ":logger_header",
  ]
}

group("logger_impl") {
  public_deps = [
    ":logger_header",
  ]

  if (is_fuchsia) {
    deps = [
      "zircon:logger",
    ]
  }
  if (is_linux) {
    deps = [
      "linux:logger",
    ]
  }
}

source_set("logger_impl_with_init") {
  testonly = true
  deps = [
    ":logger_impl",
  ]

  if (is_fuchsia) {
    deps += [ "zircon:logger_impl_with_init" ]
  }
}

source_set("logger_for_system_drivers") {
  public_deps = [
    ":logger_header",
  ]
  if (is_fuchsia) {
    deps = [
      "zircon:logger_for_system_drivers",
    ]
  } else {
    deps = [
      ":logger_impl",
    ]
  }
}

source_set("object") {
  public_configs = [ ":platform_include_config" ]

  sources = [
    "platform_object.h",
  ]

  deps = [
    "zircon:object",
  ]

  allow_circular_includes_from = [ "zircon:object" ]
}

source_set("semaphore") {
  public_configs = [ ":platform_include_config" ]

  sources = [
    "platform_semaphore.h",
  ]

  deps = [
    ":object",
    "zircon:semaphore",
  ]

  allow_circular_includes_from = [ "zircon:semaphore" ]
}

source_set("port") {
  public_configs = [ ":platform_include_config" ]

  sources = [
    "platform_port.h",
  ]

  deps = [
    ":object",
    "zircon:port",
  ]

  allow_circular_includes_from = [ "zircon:port" ]
}

source_set("trace_header") {
  public_configs = [
    ":platform_include_config",
    ":tracing",
  ]

  sources = [
    "platform_trace.h",
  ]

  public_deps = [
    "//zircon/public/lib/fit",
    "//zircon/public/lib/trace-vthread-with-static-engine",
    "//zircon/public/lib/trace-with-static-engine",
  ]
}

source_set("trace") {
  public_deps = [
    ":trace_header",
  ]

  deps = [
    "zircon:trace",
  ]
}

source_set("trace_provider_header") {
  public_configs = [
    ":platform_include_config",
    ":tracing",
  ]

  sources = [
    "platform_trace_provider.h",
  ]

  public_deps = [
    ":trace",
    "zircon:trace",
  ]
}

source_set("trace_provider") {
  public_deps = [
    ":trace_provider_header",
  ]

  deps = [
    "zircon:trace_provider",
  ]
}

source_set("trace_provider_with_fdio_header") {
  public_configs = [
    ":platform_include_config",
    ":tracing",
  ]

  sources = [
    "platform_trace_provider_with_fdio.h",
  ]

  public_deps = [
    ":trace",
    ":trace_provider",
    "zircon:trace",
  ]
}

source_set("trace_provider_with_fdio") {
  public_deps = [
    ":trace_provider_with_fdio_header",
  ]

  deps = [
    "zircon:trace_provider_with_fdio",
  ]
}

source_set("sysmem_connection_header") {
  public_configs = [ "$magma_build_root:magma_src_include_config" ]

  sources = [
    "platform_sysmem_connection.h",
  ]

  public_deps = [
    ":buffer",
    "$magma_build_root/src/magma_util:common",
    "//garnet/lib/magma/include:magma_abi",
  ]
}

source_set("sysmem_connection") {
  public_deps = [
    ":sysmem_connection_header",
  ]
  deps = [
    "zircon:sysmem_connection",
  ]
}
