// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef GARNET_LIB_RUST_WLAN_MLME_C_BINDINGS_H_
#define GARNET_LIB_RUST_WLAN_MLME_C_BINDINGS_H_

// Warning:
// This file was autogenerated by cbindgen.
// Do not modify this file manually.

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * IEEE Std 802.11-2016, 9.4.1.7
 */
typedef enum {
  WLAN_REASON_CODE_UNSPECIFIED_REASON = 1,
  WLAN_REASON_CODE_INVALID_AUTHENTICATION = 2,
  WLAN_REASON_CODE_LEAVING_NETWORK_DEAUTH = 3,
  WLAN_REASON_CODE_REASON_INACTIVITY = 4,
  WLAN_REASON_CODE_NO_MORE_STAS = 5,
  WLAN_REASON_CODE_INVALID_CLASS2_FRAME = 6,
  WLAN_REASON_CODE_INVALID_CLASS3_FRAME = 7,
  WLAN_REASON_CODE_LEAVING_NETWORK_DISASSOC = 8,
  WLAN_REASON_CODE_NOT_AUTHENTICATED = 9,
  WLAN_REASON_CODE_UNACCEPTABLE_POWER_CAPABILITY = 10,
  WLAN_REASON_CODE_UNACCEPTABLE_SUPPORTED_CHANNELS = 11,
  WLAN_REASON_CODE_BSS_TRANSITION_DISASSOC = 12,
  WLAN_REASON_CODE_REASON_INVALID_ELEMENT = 13,
  WLAN_REASON_CODE_MIC_FAILURE = 14,
  WLAN_REASON_CODE_FOURWAY_HANDSHAKE_TIMEOUT = 15,
  WLAN_REASON_CODE_GK_HANDSHAKE_TIMEOUT = 16,
  WLAN_REASON_CODE_HANDSHAKE_ELEMENT_MISMATCH = 17,
  WLAN_REASON_CODE_REASON_INVALID_GROUP_CIPHER = 18,
  WLAN_REASON_CODE_REASON_INVALID_PAIRWISE_CIPHER = 19,
  WLAN_REASON_CODE_REASON_INVALID_AKMP = 20,
  WLAN_REASON_CODE_UNSUPPORTED_RSNE_VERSION = 21,
  WLAN_REASON_CODE_INVALID_RSNE_CAPABILITIES = 22,
  WLAN_REASON_CODE_IEEE8021_XAUTH_FAILED = 23,
  WLAN_REASON_CODE_REASON_CIPHER_OUT_OF_POLICY = 24,
  WLAN_REASON_CODE_TDLS_PEER_UNREACHABLE = 25,
  WLAN_REASON_CODE_TDLS_UNSPECIFIED_REASON = 26,
  WLAN_REASON_CODE_SSP_REQUESTED_DISASSOC = 27,
  WLAN_REASON_CODE_NO_SSP_ROAMING_AGREEMENT = 28,
  WLAN_REASON_CODE_BAD_CIPHER_OR_AKM = 29,
  WLAN_REASON_CODE_NOT_AUTHORIZED_THIS_LOCATION = 30,
  WLAN_REASON_CODE_SERVICE_CHANGE_PRECLUDES_TS = 31,
  WLAN_REASON_CODE_UNSPECIFIED_QOS_REASON = 32,
  WLAN_REASON_CODE_NOT_ENOUGH_BANDWIDTH = 33,
  WLAN_REASON_CODE_MISSING_ACKS = 34,
  WLAN_REASON_CODE_EXCEEDED_TXOP = 35,
  WLAN_REASON_CODE_STA_LEAVING = 36,
  WLAN_REASON_CODE_END_TS_BA_DLS = 37,
  WLAN_REASON_CODE_UNKNOWN_TS_BA = 38,
  WLAN_REASON_CODE_TIMEOUT = 39,
  WLAN_REASON_CODE_PEERKEY_MISMATCH = 45,
  WLAN_REASON_CODE_PEER_INITIATED = 46,
  WLAN_REASON_CODE_AP_INITIATED = 47,
  WLAN_REASON_CODE_REASON_INVALID_FT_ACTION_FRAME_COUNT = 48,
  WLAN_REASON_CODE_REASON_INVALID_PMKID = 49,
  WLAN_REASON_CODE_REASON_INVALID_MDE = 50,
  WLAN_REASON_CODE_REASON_INVALID_FTE = 51,
  WLAN_REASON_CODE_MESH_PEERING_CANCELED = 52,
  WLAN_REASON_CODE_MESH_MAX_PEERS = 53,
  WLAN_REASON_CODE_MESH_CONFIGURATION_POLICY_VIOLATION = 54,
  WLAN_REASON_CODE_MESH_CLOSE_RCVD = 55,
  WLAN_REASON_CODE_MESH_MAX_RETRIES = 56,
  WLAN_REASON_CODE_MESH_CONFIRM_TIMEOUT = 57,
  WLAN_REASON_CODE_MESH_INVALID_GTK = 58,
  WLAN_REASON_CODE_MESH_INCONSISTENT_PARAMETERS = 59,
  WLAN_REASON_CODE_MESH_INVALID_SECURITY_CAPABILITY = 60,
  WLAN_REASON_CODE_MESH_PATH_ERROR_NO_PROXY_INFORMATION = 61,
  WLAN_REASON_CODE_MESH_PATH_ERROR_NO_FORWARDING_INFORMATION = 62,
  WLAN_REASON_CODE_MESH_PATH_ERROR_DESTINATION_UNREACHABLE = 63,
  WLAN_REASON_CODE_MAC_ADDRESS_ALREADY_EXISTS_IN_MBSS = 64,
  WLAN_REASON_CODE_MESH_CHANNEL_SWITCH_REGULATORY_REQUIREMENTS = 65,
  WLAN_REASON_CODE_MESH_CHANNEL_SWITCH_UNSPECIFIED = 66,
} wlan_reason_code;

/**
 * An input buffer will always be returned to its original owner when no longer
 * being used. An input buffer is used for every buffer handed from C++ to Rust.
 */
typedef struct {
  /**
   * Returns the buffer's ownership and free it.
   */
  void (*free_buffer)(void *raw);
  /**
   * Pointer to the buffer's underlying data structure.
   */
  void *raw;
  /**
   * Pointer to the start of the buffer's data portion and its length.
   */
  uint8_t *data;
  uintptr_t len;
} rust_mlme_in_buf_t;

typedef struct {
  /**
   * Acquire a `InBuf` with a given minimum length from the provider.
   * The provider must release the underlying buffer's ownership and transfer it
   * to this crate. The buffer will be returned via the `free_buffer` callback
   * when it's no longer used.
   */
  rust_mlme_in_buf_t (*get_buffer)(uintptr_t min_len);
} rust_mlme_buffer_provider_ops_t;

/**
 * An output buffer requires its owner to manage the underlying buffer's memory
 * themselves. An output buffer is used for every buffer handed from Rust to
 * C++.
 */
typedef struct {
  /**
   * Pointer to the buffer's underlying data structure.
   */
  void *raw;
  /**
   * Pointer to the start of the buffer's data portion and the amount of bytes
   * written.
   */
  uint8_t *data;
  uintptr_t written_bytes;
} rust_mlme_out_buf_t;

extern "C" int32_t rust_mlme_is_valid_open_auth_resp(const uint8_t *data,
                                                     uintptr_t len);

extern "C" int32_t rust_mlme_write_keep_alive_resp_frame(
    rust_mlme_buffer_provider_ops_t provider, const uint8_t (*bssid)[6],
    const uint8_t (*client_addr)[6], uint16_t seq_ctrl,
    rust_mlme_out_buf_t *out_buf);

extern "C" int32_t rust_mlme_write_open_auth_frame(
    rust_mlme_buffer_provider_ops_t provider, const uint8_t (*bssid)[6],
    const uint8_t (*client_addr)[6], uint16_t seq_ctrl,
    rust_mlme_out_buf_t *out_buf);

#endif /* GARNET_LIB_RUST_WLAN_MLME_ABI_H_ */
