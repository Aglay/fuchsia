// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Code generated by tools/fidl/gidl-conformance-suite/regen.sh; DO NOT EDIT.

#include <iostream>
#include <string>
#include <utility>
#include <vector>

#include <conformance/llcpp/fidl.h>
#include <gtest/gtest.h>

#include "garnet/public/lib/fidl/llcpp/test_utils.h"

TEST(Conformance, 5ByteObjectAlignmentInStruct_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::FiveByteInStruct v1{};
    llcpp::conformance::FiveByte v2{};
    uint32_t v3 = 16909060ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 5ull;
    v2.elem2 = std::move(v4);
    v1.elem1 = std::move(v2);
    llcpp::conformance::FiveByte v5{};
    uint32_t v6 = 101124105ull;
    v5.elem1 = std::move(v6);
    uint8_t v7 = 10ull;
    v5.elem2 = std::move(v7);
    v1.elem2 = std::move(v5);
    llcpp::conformance::FiveByte v8{};
    uint32_t v9 = 185339150ull;
    v8.elem1 = std::move(v9);
    uint8_t v10 = 15ull;
    v8.elem2 = std::move(v10);
    v1.elem3 = std::move(v8);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::ThreeByteInVector v1{};
    llcpp::conformance::ThreeByte v2{};
    uint8_t v3 = 1ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 2ull;
    v2.elem2 = std::move(v4);
    uint8_t v5 = 3ull;
    v2.elem3 = std::move(v5);
    llcpp::conformance::ThreeByte v6{};
    uint8_t v7 = 4ull;
    v6.elem1 = std::move(v7);
    uint8_t v8 = 5ull;
    v6.elem2 = std::move(v8);
    uint8_t v9 = 6ull;
    v6.elem3 = std::move(v9);
    llcpp::conformance::ThreeByte v10{};
    uint8_t v11 = 7ull;
    v10.elem1 = std::move(v11);
    uint8_t v12 = 8ull;
    v10.elem2 = std::move(v12);
    uint8_t v13 = 9ull;
    v10.elem3 = std::move(v13);
    auto v14 = fidl::Array<llcpp::conformance::ThreeByte, 3>{v2, v6, v10};
    auto v15 = fidl::VectorView<llcpp::conformance::ThreeByte>(v14.data(), 3);
    v1.elems = std::move(v15);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::FiveByteInVector v1{};
    llcpp::conformance::FiveByte v2{};
    uint32_t v3 = 16909060ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 5ull;
    v2.elem2 = std::move(v4);
    llcpp::conformance::FiveByte v5{};
    uint32_t v6 = 101124105ull;
    v5.elem1 = std::move(v6);
    uint8_t v7 = 10ull;
    v5.elem2 = std::move(v7);
    llcpp::conformance::FiveByte v8{};
    uint32_t v9 = 185339150ull;
    v8.elem1 = std::move(v9);
    uint8_t v10 = 15ull;
    v8.elem2 = std::move(v10);
    auto v11 = fidl::Array<llcpp::conformance::FiveByte, 3>{v2, v5, v8};
    auto v12 = fidl::VectorView<llcpp::conformance::FiveByte>(v11.data(), 3);
    v1.elems = std::move(v12);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::FiveByteInArray v1{};
    llcpp::conformance::FiveByte v2{};
    uint32_t v3 = 16909060ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 5ull;
    v2.elem2 = std::move(v4);
    llcpp::conformance::FiveByte v5{};
    uint32_t v6 = 101124105ull;
    v5.elem1 = std::move(v6);
    uint8_t v7 = 10ull;
    v5.elem2 = std::move(v7);
    llcpp::conformance::FiveByte v8{};
    uint32_t v9 = 185339150ull;
    v8.elem1 = std::move(v9);
    uint8_t v10 = 15ull;
    v8.elem2 = std::move(v10);
    auto v11 = fidl::Array<llcpp::conformance::FiveByte, 3>{v2, v5, v8};
    v1.elems = std::move(v11);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, EmptyStructSandwich_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65,
      0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::EmptyStructSandwich v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    llcpp::conformance::EmptyStruct v3{};
    v1.es = std::move(v3);
    fidl::StringView v4("after", 5);
    v1.after = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04,
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };

  {
    llcpp::conformance::Uint8Uint16Uint32Uint64 v1{};
    uint8_t v2 = 1ull;
    v1.f1 = std::move(v2);
    uint16_t v3 = 515ull;
    v1.f2 = std::move(v3);
    uint32_t v4 = 67438087ull;
    v1.f3 = std::move(v4);
    uint64_t v5 = 579005069656919567ull;
    v1.f4 = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };

  {
    llcpp::conformance::Uint64Uint32Uint16Uint8 v1{};
    uint64_t v2 = 579005069656919567ull;
    v1.f1 = std::move(v2);
    uint32_t v3 = 67438087ull;
    v1.f2 = std::move(v3);
    uint16_t v4 = 515ull;
    v1.f3 = std::move(v4);
    uint8_t v5 = 1ull;
    v1.f4 = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableEmpty_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  {
    llcpp::conformance::StructOfSimpleTable v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    auto v3 = v2.view();
    v1.table = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableXAndY_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructOfSimpleTable v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    int64_t v3 = 42ull;
    v2.set_x(&v3);
    int64_t v4 = 67ull;
    v2.set_y(&v4);
    auto v5 = v2.view();
    v1.table = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableJustY_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructOfSimpleTable v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    int64_t v3 = 67ull;
    v2.set_y(&v3);
    auto v4 = v2.view();
    v1.table = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00,
      0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructOfTableWithStringAndVector v1{};
    auto v2 = llcpp::conformance::TableWithStringAndVector::Build();
    fidl::StringView v3("hello", 5);
    v2.set_foo(&v3);
    int32_t v4 = 27ull;
    v2.set_bar(&v4);
    auto v5 = v2.view();
    v1.table = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableThenUint64_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::SimpleTableThenUint64 v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    int64_t v3 = 42ull;
    v2.set_x(&v3);
    int64_t v4 = 67ull;
    v2.set_y(&v4);
    auto v5 = v2.view();
    v1.table = std::move(v5);
    uint64_t v6 = 16045690984833335023ull;
    v1.number = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, InlineXUnionInStruct_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestInlineXUnionInStruct v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    llcpp::conformance::SampleXUnion v3;
    uint32_t v4 = 3735928559ull;
    v3.set_u(&v4);
    v1.xu = std::move(v3);
    fidl::StringView v5("after", 5);
    v1.after = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructAbsent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestOptionalXUnionInStruct v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    fidl::StringView v3("after", 5);
    v1.after = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructPresent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestOptionalXUnionInStruct v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    llcpp::conformance::SampleXUnion v3;
    uint32_t v4 = 3735928559ull;
    v3.set_u(&v4);
    v1.xu = std::move(v3);
    fidl::StringView v5("after", 5);
    v1.after = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionAbsent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestXUnionInTable v1{};
    auto v2 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v3("before", 6);
    v2.set_before(&v3);
    fidl::StringView v4("after", 5);
    v2.set_after(&v4);
    auto v5 = v2.view();
    v1.value = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionPresent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2, 0x56,
      0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestXUnionInTable v1{};
    auto v2 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v3("before", 6);
    v2.set_before(&v3);
    llcpp::conformance::SampleXUnion v4;
    uint32_t v5 = 3735928559ull;
    v4.set_u(&v5);
    v2.set_xu(&v4);
    fidl::StringView v6("after", 5);
    v2.set_after(&v6);
    auto v7 = v2.view();
    v1.value = std::move(v7);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, StrictXUnion_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestStrictXUnionInStruct v1{};
    llcpp::conformance::SampleStrictXUnion v2;
    uint32_t v3 = 3735928559ull;
    v2.set_u(&v3);
    v1.xu = std::move(v2);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, AddEthernetDeviceRequest_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64,
      0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
      0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };

  {
    llcpp::conformance::TestAddEthernetDeviceRequest v1{};
    fidl::StringView v2("@/dev/sys/pci/00:03.0/e1000/ethernet", 36);
    v1.topological_path = std::move(v2);
    llcpp::conformance::InterfaceConfig v3{};
    fidl::StringView v4("ethp0003", 8);
    v3.name = std::move(v4);
    llcpp::conformance::IpAddressConfig v5;
    bool v6 = true;
    v5.set_dhcp(v6);
    v3.ip_address_config = std::move(v5);
    v1.config = std::move(v3);
    uint32_t v7 = 4294967295ull;
    v1.this_should_be_a_handle = std::move(v7);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, FileGetAttrResponse_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };

  {
    llcpp::conformance::FileGetAttrResponse v1{};
    int32_t v2 = 2125315759ull;
    v1.s = std::move(v2);
    llcpp::conformance::NodeAttributes v3{};
    uint32_t v4 = 2518909348ull;
    v3.mode = std::move(v4);
    uint64_t v5 = 1ull;
    v3.id = std::move(v5);
    uint64_t v6 = 231ull;
    v3.content_size = std::move(v6);
    uint64_t v7 = 231ull;
    v3.storage_size = std::move(v7);
    uint64_t v8 = 1ull;
    v3.link_count = std::move(v8);
    uint64_t v9 = 9833440827789222417ull;
    v3.creation_time = std::move(v9);
    uint64_t v10 = 72038755451251353ull;
    v3.modification_time = std::move(v10);
    v1.attributes = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Optionals_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructWithOptionals v1{};
    llcpp::conformance::EmptyStruct v2{};
    v1.s = std::move(v2);
    llcpp::conformance::EmptyStruct v3{};
    v1.s2 = &v3;
    auto v4 = llcpp::conformance::TableWithEmptyStruct::Build();
    llcpp::conformance::EmptyStruct v5{};
    v4.set_s(&v5);
    auto v6 = v4.view();
    v1.t = std::move(v6);
    llcpp::conformance::XUnionWithEmptyStruct v7;
    llcpp::conformance::EmptyStruct v8{};
    v7.set_s(&v8);
    v1.xu = std::move(v7);
    llcpp::conformance::XUnionWithEmptyStruct v9;
    llcpp::conformance::EmptyStruct v10{};
    v9.set_s(&v10);
    v1.xu2 = std::move(v9);
    llcpp::conformance::UnionWithEmptyStruct v11;
    llcpp::conformance::EmptyStruct v12{};
    v11.set_s(v12);
    v1.u = std::move(v11);
    llcpp::conformance::UnionWithEmptyStruct v13;
    llcpp::conformance::EmptyStruct v14{};
    v13.set_s(v14);
    v1.u2 = &v13;

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Arrays_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructWithArrays v1{};
    int32_t v2 = 1ull;
    int32_t v3 = 2ull;
    auto v4 = fidl::Array<int32_t, 2>{v2, v3};
    v1.arr_int = std::move(v4);
    fidl::StringView v5("a", 1);
    fidl::StringView v6("b", 1);
    auto v7 = fidl::Array<fidl::StringView, 2>{v5, v6};
    v1.arr_string = std::move(v7);
    llcpp::conformance::StructWithInt v8{};
    int32_t v9 = 1ull;
    v8.x = std::move(v9);
    llcpp::conformance::StructWithInt v10{};
    int32_t v11 = 2ull;
    v10.x = std::move(v11);
    auto v12 = fidl::Array<llcpp::conformance::StructWithInt, 2>{v8, v10};
    v1.arr_struct = std::move(v12);
    int32_t v13 = 1ull;
    int32_t v14 = 2ull;
    int32_t v15 = 3ull;
    auto v16 = fidl::Array<int32_t, 3>{v13, v14, v15};
    int32_t v17 = 4ull;
    int32_t v18 = 5ull;
    int32_t v19 = 6ull;
    auto v20 = fidl::Array<int32_t, 3>{v17, v18, v19};
    auto v21 = fidl::Array<fidl::Array<int32_t, 3>, 2>{v16, v20};
    v1.arr_arr_int = std::move(v21);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Vectors_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructWithVectors v1{};
    auto v2 = fidl::VectorView<int32_t>();
    v1.vec_empty = std::move(v2);
    int32_t v3 = 1ull;
    int32_t v4 = 2ull;
    auto v5 = fidl::Array<int32_t, 2>{v3, v4};
    auto v6 = fidl::VectorView<int32_t>(v5.data(), 2);
    v1.vec_int = std::move(v6);
    fidl::StringView v7("a", 1);
    fidl::StringView v8("b", 1);
    auto v9 = fidl::Array<fidl::StringView, 2>{v7, v8};
    auto v10 = fidl::VectorView<fidl::StringView>(v9.data(), 2);
    v1.vec_string = std::move(v10);
    llcpp::conformance::StructWithInt v11{};
    int32_t v12 = 1ull;
    v11.x = std::move(v12);
    auto v13 = fidl::Array<llcpp::conformance::StructWithInt, 1>{v11};
    auto v14 = fidl::VectorView<llcpp::conformance::StructWithInt>(v13.data(), 1);
    v1.vec_struct = std::move(v14);
    int32_t v15 = 1ull;
    int32_t v16 = 2ull;
    auto v17 = fidl::Array<int32_t, 2>{v15, v16};
    auto v18 = fidl::VectorView<int32_t>(v17.data(), 2);
    int32_t v19 = 3ull;
    auto v20 = fidl::Array<int32_t, 1>{v19};
    auto v21 = fidl::VectorView<int32_t>(v20.data(), 1);
    auto v22 = fidl::Array<fidl::VectorView<int32_t>, 2>{v18, v21};
    auto v23 = fidl::VectorView<fidl::VectorView<int32_t>>(v22.data(), 2);
    v1.vec_vec_int = std::move(v23);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInStruct_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::FiveByteInStruct v1{};
    llcpp::conformance::FiveByte v2{};
    uint32_t v3 = 16909060ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 5ull;
    v2.elem2 = std::move(v4);
    v1.elem1 = std::move(v2);
    llcpp::conformance::FiveByte v5{};
    uint32_t v6 = 101124105ull;
    v5.elem1 = std::move(v6);
    uint8_t v7 = 10ull;
    v5.elem2 = std::move(v7);
    v1.elem2 = std::move(v5);
    llcpp::conformance::FiveByte v8{};
    uint32_t v9 = 185339150ull;
    v8.elem1 = std::move(v9);
    uint8_t v10 = 15ull;
    v8.elem2 = std::move(v10);
    v1.elem3 = std::move(v8);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::ThreeByteInVector v1{};
    llcpp::conformance::ThreeByte v2{};
    uint8_t v3 = 1ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 2ull;
    v2.elem2 = std::move(v4);
    uint8_t v5 = 3ull;
    v2.elem3 = std::move(v5);
    llcpp::conformance::ThreeByte v6{};
    uint8_t v7 = 4ull;
    v6.elem1 = std::move(v7);
    uint8_t v8 = 5ull;
    v6.elem2 = std::move(v8);
    uint8_t v9 = 6ull;
    v6.elem3 = std::move(v9);
    llcpp::conformance::ThreeByte v10{};
    uint8_t v11 = 7ull;
    v10.elem1 = std::move(v11);
    uint8_t v12 = 8ull;
    v10.elem2 = std::move(v12);
    uint8_t v13 = 9ull;
    v10.elem3 = std::move(v13);
    auto v14 = fidl::Array<llcpp::conformance::ThreeByte, 3>{v2, v6, v10};
    auto v15 = fidl::VectorView<llcpp::conformance::ThreeByte>(v14.data(), 3);
    v1.elems = std::move(v15);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::FiveByteInVector v1{};
    llcpp::conformance::FiveByte v2{};
    uint32_t v3 = 16909060ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 5ull;
    v2.elem2 = std::move(v4);
    llcpp::conformance::FiveByte v5{};
    uint32_t v6 = 101124105ull;
    v5.elem1 = std::move(v6);
    uint8_t v7 = 10ull;
    v5.elem2 = std::move(v7);
    llcpp::conformance::FiveByte v8{};
    uint32_t v9 = 185339150ull;
    v8.elem1 = std::move(v9);
    uint8_t v10 = 15ull;
    v8.elem2 = std::move(v10);
    auto v11 = fidl::Array<llcpp::conformance::FiveByte, 3>{v2, v5, v8};
    auto v12 = fidl::VectorView<llcpp::conformance::FiveByte>(v11.data(), 3);
    v1.elems = std::move(v12);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::FiveByteInArray v1{};
    llcpp::conformance::FiveByte v2{};
    uint32_t v3 = 16909060ull;
    v2.elem1 = std::move(v3);
    uint8_t v4 = 5ull;
    v2.elem2 = std::move(v4);
    llcpp::conformance::FiveByte v5{};
    uint32_t v6 = 101124105ull;
    v5.elem1 = std::move(v6);
    uint8_t v7 = 10ull;
    v5.elem2 = std::move(v7);
    llcpp::conformance::FiveByte v8{};
    uint32_t v9 = 185339150ull;
    v8.elem1 = std::move(v9);
    uint8_t v10 = 15ull;
    v8.elem2 = std::move(v10);
    auto v11 = fidl::Array<llcpp::conformance::FiveByte, 3>{v2, v5, v8};
    v1.elems = std::move(v11);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, EmptyStructSandwich_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65,
      0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::EmptyStructSandwich v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    llcpp::conformance::EmptyStruct v3{};
    v1.es = std::move(v3);
    fidl::StringView v4("after", 5);
    v1.after = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04,
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };

  {
    llcpp::conformance::Uint8Uint16Uint32Uint64 v1{};
    uint8_t v2 = 1ull;
    v1.f1 = std::move(v2);
    uint16_t v3 = 515ull;
    v1.f2 = std::move(v3);
    uint32_t v4 = 67438087ull;
    v1.f3 = std::move(v4);
    uint64_t v5 = 579005069656919567ull;
    v1.f4 = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };

  {
    llcpp::conformance::Uint64Uint32Uint16Uint8 v1{};
    uint64_t v2 = 579005069656919567ull;
    v1.f1 = std::move(v2);
    uint32_t v3 = 67438087ull;
    v1.f2 = std::move(v3);
    uint16_t v4 = 515ull;
    v1.f3 = std::move(v4);
    uint8_t v5 = 1ull;
    v1.f4 = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableEmpty_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  {
    llcpp::conformance::StructOfSimpleTable v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    auto v3 = v2.view();
    v1.table = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableXAndY_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructOfSimpleTable v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    int64_t v3 = 42ull;
    v2.set_x(&v3);
    int64_t v4 = 67ull;
    v2.set_y(&v4);
    auto v5 = v2.view();
    v1.table = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableJustY_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructOfSimpleTable v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    int64_t v3 = 67ull;
    v2.set_y(&v3);
    auto v4 = v2.view();
    v1.table = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00,
      0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructOfTableWithStringAndVector v1{};
    auto v2 = llcpp::conformance::TableWithStringAndVector::Build();
    fidl::StringView v3("hello", 5);
    v2.set_foo(&v3);
    int32_t v4 = 27ull;
    v2.set_bar(&v4);
    auto v5 = v2.view();
    v1.table = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, SimpleTableThenUint64_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::SimpleTableThenUint64 v1{};
    auto v2 = llcpp::conformance::SimpleTable::Build();
    int64_t v3 = 42ull;
    v2.set_x(&v3);
    int64_t v4 = 67ull;
    v2.set_y(&v4);
    auto v5 = v2.view();
    v1.table = std::move(v5);
    uint64_t v6 = 16045690984833335023ull;
    v1.number = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, InlineXUnionInStruct_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestInlineXUnionInStruct v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    llcpp::conformance::SampleXUnion v3;
    uint32_t v4 = 3735928559ull;
    v3.set_u(&v4);
    v1.xu = std::move(v3);
    fidl::StringView v5("after", 5);
    v1.after = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructAbsent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestOptionalXUnionInStruct v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    fidl::StringView v3("after", 5);
    v1.after = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructPresent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestOptionalXUnionInStruct v1{};
    fidl::StringView v2("before", 6);
    v1.before = std::move(v2);
    llcpp::conformance::SampleXUnion v3;
    uint32_t v4 = 3735928559ull;
    v3.set_u(&v4);
    v1.xu = std::move(v3);
    fidl::StringView v5("after", 5);
    v1.after = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionAbsent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestXUnionInTable v1{};
    auto v2 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v3("before", 6);
    v2.set_before(&v3);
    fidl::StringView v4("after", 5);
    v2.set_after(&v4);
    auto v5 = v2.view();
    v1.value = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionPresent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2, 0x56,
      0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestXUnionInTable v1{};
    auto v2 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v3("before", 6);
    v2.set_before(&v3);
    llcpp::conformance::SampleXUnion v4;
    uint32_t v5 = 3735928559ull;
    v4.set_u(&v5);
    v2.set_xu(&v4);
    fidl::StringView v6("after", 5);
    v2.set_after(&v6);
    auto v7 = v2.view();
    v1.value = std::move(v7);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, StrictXUnion_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::TestStrictXUnionInStruct v1{};
    llcpp::conformance::SampleStrictXUnion v2;
    uint32_t v3 = 3735928559ull;
    v2.set_u(&v3);
    v1.xu = std::move(v2);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, AddEthernetDeviceRequest_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64,
      0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
      0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };

  {
    llcpp::conformance::TestAddEthernetDeviceRequest v1{};
    fidl::StringView v2("@/dev/sys/pci/00:03.0/e1000/ethernet", 36);
    v1.topological_path = std::move(v2);
    llcpp::conformance::InterfaceConfig v3{};
    fidl::StringView v4("ethp0003", 8);
    v3.name = std::move(v4);
    llcpp::conformance::IpAddressConfig v5;
    bool v6 = true;
    v5.set_dhcp(v6);
    v3.ip_address_config = std::move(v5);
    v1.config = std::move(v3);
    uint32_t v7 = 4294967295ull;
    v1.this_should_be_a_handle = std::move(v7);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, FileGetAttrResponse_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };

  {
    llcpp::conformance::FileGetAttrResponse v1{};
    int32_t v2 = 2125315759ull;
    v1.s = std::move(v2);
    llcpp::conformance::NodeAttributes v3{};
    uint32_t v4 = 2518909348ull;
    v3.mode = std::move(v4);
    uint64_t v5 = 1ull;
    v3.id = std::move(v5);
    uint64_t v6 = 231ull;
    v3.content_size = std::move(v6);
    uint64_t v7 = 231ull;
    v3.storage_size = std::move(v7);
    uint64_t v8 = 1ull;
    v3.link_count = std::move(v8);
    uint64_t v9 = 9833440827789222417ull;
    v3.creation_time = std::move(v9);
    uint64_t v10 = 72038755451251353ull;
    v3.modification_time = std::move(v10);
    v1.attributes = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Optionals_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructWithOptionals v1{};
    llcpp::conformance::EmptyStruct v2{};
    v1.s = std::move(v2);
    llcpp::conformance::EmptyStruct v3{};
    v1.s2 = &v3;
    auto v4 = llcpp::conformance::TableWithEmptyStruct::Build();
    llcpp::conformance::EmptyStruct v5{};
    v4.set_s(&v5);
    auto v6 = v4.view();
    v1.t = std::move(v6);
    llcpp::conformance::XUnionWithEmptyStruct v7;
    llcpp::conformance::EmptyStruct v8{};
    v7.set_s(&v8);
    v1.xu = std::move(v7);
    llcpp::conformance::XUnionWithEmptyStruct v9;
    llcpp::conformance::EmptyStruct v10{};
    v9.set_s(&v10);
    v1.xu2 = std::move(v9);
    llcpp::conformance::UnionWithEmptyStruct v11;
    llcpp::conformance::EmptyStruct v12{};
    v11.set_s(v12);
    v1.u = std::move(v11);
    llcpp::conformance::UnionWithEmptyStruct v13;
    llcpp::conformance::EmptyStruct v14{};
    v13.set_s(v14);
    v1.u2 = &v13;

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Arrays_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructWithArrays v1{};
    int32_t v2 = 1ull;
    int32_t v3 = 2ull;
    auto v4 = fidl::Array<int32_t, 2>{v2, v3};
    v1.arr_int = std::move(v4);
    fidl::StringView v5("a", 1);
    fidl::StringView v6("b", 1);
    auto v7 = fidl::Array<fidl::StringView, 2>{v5, v6};
    v1.arr_string = std::move(v7);
    llcpp::conformance::StructWithInt v8{};
    int32_t v9 = 1ull;
    v8.x = std::move(v9);
    llcpp::conformance::StructWithInt v10{};
    int32_t v11 = 2ull;
    v10.x = std::move(v11);
    auto v12 = fidl::Array<llcpp::conformance::StructWithInt, 2>{v8, v10};
    v1.arr_struct = std::move(v12);
    int32_t v13 = 1ull;
    int32_t v14 = 2ull;
    int32_t v15 = 3ull;
    auto v16 = fidl::Array<int32_t, 3>{v13, v14, v15};
    int32_t v17 = 4ull;
    int32_t v18 = 5ull;
    int32_t v19 = 6ull;
    auto v20 = fidl::Array<int32_t, 3>{v17, v18, v19};
    auto v21 = fidl::Array<fidl::Array<int32_t, 3>, 2>{v16, v20};
    v1.arr_arr_int = std::move(v21);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}

TEST(Conformance, Vectors_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    llcpp::conformance::StructWithVectors v1{};
    auto v2 = fidl::VectorView<int32_t>();
    v1.vec_empty = std::move(v2);
    int32_t v3 = 1ull;
    int32_t v4 = 2ull;
    auto v5 = fidl::Array<int32_t, 2>{v3, v4};
    auto v6 = fidl::VectorView<int32_t>(v5.data(), 2);
    v1.vec_int = std::move(v6);
    fidl::StringView v7("a", 1);
    fidl::StringView v8("b", 1);
    auto v9 = fidl::Array<fidl::StringView, 2>{v7, v8};
    auto v10 = fidl::VectorView<fidl::StringView>(v9.data(), 2);
    v1.vec_string = std::move(v10);
    llcpp::conformance::StructWithInt v11{};
    int32_t v12 = 1ull;
    v11.x = std::move(v12);
    auto v13 = fidl::Array<llcpp::conformance::StructWithInt, 1>{v11};
    auto v14 = fidl::VectorView<llcpp::conformance::StructWithInt>(v13.data(), 1);
    v1.vec_struct = std::move(v14);
    int32_t v15 = 1ull;
    int32_t v16 = 2ull;
    auto v17 = fidl::Array<int32_t, 2>{v15, v16};
    auto v18 = fidl::VectorView<int32_t>(v17.data(), 2);
    int32_t v19 = 3ull;
    auto v20 = fidl::Array<int32_t, 1>{v19};
    auto v21 = fidl::VectorView<int32_t>(v20.data(), 1);
    auto v22 = fidl::Array<fidl::VectorView<int32_t>, 2>{v18, v21};
    auto v23 = fidl::VectorView<fidl::VectorView<int32_t>>(v22.data(), 2);
    v1.vec_vec_int = std::move(v23);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, expected));
  }
}
