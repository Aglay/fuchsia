// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Code generated by tools/fidl/gidl-conformance-suite/regen.sh; DO NOT EDIT.

#include <iostream>
#include <string>
#include <utility>
#include <vector>

#include <conformance/llcpp/fidl.h>
#include <gtest/gtest.h>

#include "garnet/public/lib/fidl/llcpp/test_utils.h"

TEST(Conformance, 3ByteObjectAlignmentInStruct_Old_Encode) {
  llcpp::conformance::ThreeByteInStruct v1{};
  llcpp::conformance::ThreeByte v2{};
  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  v1.elem1 = std::move(v2);
  llcpp::conformance::ThreeByte v6{};
  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);
  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);
  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  v1.elem2 = std::move(v6);
  llcpp::conformance::ThreeByte v10{};
  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);
  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);
  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  v1.elem3 = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, 5ByteObjectAlignmentInStruct_Old_Encode) {
  llcpp::conformance::FiveByteInStruct v1{};
  llcpp::conformance::FiveByte v2{};
  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  v1.elem1 = std::move(v2);
  llcpp::conformance::FiveByte v5{};
  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);
  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  v1.elem2 = std::move(v5);
  llcpp::conformance::FiveByte v8{};
  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);
  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  v1.elem3 = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Old_Encode) {
  llcpp::conformance::ThreeByteInVector v1{};
  llcpp::conformance::ThreeByte v2{};
  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  llcpp::conformance::ThreeByte v6{};
  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);
  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);
  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  llcpp::conformance::ThreeByte v10{};
  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);
  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);
  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  auto v14 =
      fidl::Array<llcpp::conformance::ThreeByte, 3>{std::move(v2), std::move(v6), std::move(v10)};
  auto v15 = fidl::VectorView<llcpp::conformance::ThreeByte>(v14.data(), 3);
  v1.elems = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Old_Encode) {
  llcpp::conformance::FiveByteInVector v1{};
  llcpp::conformance::FiveByte v2{};
  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  llcpp::conformance::FiveByte v5{};
  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);
  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  llcpp::conformance::FiveByte v8{};
  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);
  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  auto v11 =
      fidl::Array<llcpp::conformance::FiveByte, 3>{std::move(v2), std::move(v5), std::move(v8)};
  auto v12 = fidl::VectorView<llcpp::conformance::FiveByte>(v11.data(), 3);
  v1.elems = std::move(v12);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, 3ByteObjectAlignmentInArray_Old_Encode) {
  llcpp::conformance::ThreeByteInArray v1{};
  llcpp::conformance::ThreeByte v2{};
  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  llcpp::conformance::ThreeByte v6{};
  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);
  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);
  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  llcpp::conformance::ThreeByte v10{};
  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);
  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);
  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  auto v14 =
      fidl::Array<llcpp::conformance::ThreeByte, 3>{std::move(v2), std::move(v6), std::move(v10)};
  v1.elems = std::move(v14);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Old_Encode) {
  llcpp::conformance::FiveByteInArray v1{};
  llcpp::conformance::FiveByte v2{};
  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  llcpp::conformance::FiveByte v5{};
  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);
  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  llcpp::conformance::FiveByte v8{};
  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);
  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  auto v11 =
      fidl::Array<llcpp::conformance::FiveByte, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.elems = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, EmptyStruct_Old_Encode) {
  llcpp::conformance::EmptyStruct v1{};

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, EmptyStructSandwich_Old_Encode) {
  llcpp::conformance::EmptyStructSandwich v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  llcpp::conformance::EmptyStruct v3{};
  v1.es = std::move(v3);
  fidl::StringView v4("after", 5);
  v1.after = std::move(v4);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65,
      0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Old_Encode) {
  llcpp::conformance::Uint8Uint16Uint32Uint64 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint16_t v3 = 515ull;
  v1.f2 = std::move(v3);
  uint32_t v4 = 67438087ull;
  v1.f3 = std::move(v4);
  uint64_t v5 = 579005069656919567ull;
  v1.f4 = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04,
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Old_Encode) {
  llcpp::conformance::Uint64Uint32Uint16Uint8 v1{};
  uint64_t v2 = 579005069656919567ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 67438087ull;
  v1.f2 = std::move(v3);
  uint16_t v4 = 515ull;
  v1.f3 = std::move(v4);
  uint8_t v5 = 1ull;
  v1.f4 = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, SimpleTableEmpty_Old_Encode) {
  llcpp::conformance::StructOfSimpleTable v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  auto v3 = v2.view();
  v1.table = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, SimpleTableXAndY_Old_Encode) {
  llcpp::conformance::StructOfSimpleTable v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  int64_t v3 = 42ull;
  v2.set_x(&v3);
  int64_t v4 = 67ull;
  v2.set_y(&v4);
  auto v5 = v2.view();
  v1.table = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, SimpleTableJustY_Old_Encode) {
  llcpp::conformance::StructOfSimpleTable v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  int64_t v3 = 67ull;
  v2.set_y(&v3);
  auto v4 = v2.view();
  v1.table = std::move(v4);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Old_Encode) {
  llcpp::conformance::StructOfTableWithStringAndVector v1{};
  auto v2 = llcpp::conformance::TableWithStringAndVector::Build();
  fidl::StringView v3("hello", 5);
  v2.set_foo(&v3);
  int32_t v4 = 27ull;
  v2.set_bar(&v4);
  auto v5 = v2.view();
  v1.table = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00,
      0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, SimpleTableThenUint64_Old_Encode) {
  llcpp::conformance::SimpleTableThenUint64 v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  int64_t v3 = 42ull;
  v2.set_x(&v3);
  int64_t v4 = 67ull;
  v2.set_y(&v4);
  auto v5 = v2.view();
  v1.table = std::move(v5);
  uint64_t v6 = 16045690984833335023ull;
  v1.number = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, ReverseOrdinalTable_Old_Encode) {
  llcpp::conformance::StructOfReverseOrdinalTable v1{};
  auto v2 = llcpp::conformance::ReverseOrdinalTable::Build();
  int64_t v3 = 170ull;
  v2.set_x(&v3);
  int64_t v4 = 187ull;
  v2.set_y(&v4);
  int64_t v5 = 204ull;
  v2.set_z(&v5);
  auto v6 = v2.view();
  v1.table = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, InlineXUnionInStruct_Old_Encode) {
  llcpp::conformance::TestInlineXUnionInStruct v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  llcpp::conformance::SampleXUnion v3;
  uint32_t v4 = 3735928559ull;
  v3.set_u(&v4);
  v1.xu = std::move(v3);
  fidl::StringView v5("after", 5);
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, OptionalXUnionInStructAbsent_Old_Encode) {
  llcpp::conformance::TestOptionalXUnionInStruct v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  fidl::StringView v3("after", 5);
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, OptionalXUnionInStructPresent_Old_Encode) {
  llcpp::conformance::TestOptionalXUnionInStruct v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  llcpp::conformance::SampleXUnion v3;
  uint32_t v4 = 3735928559ull;
  v3.set_u(&v4);
  v1.xu = std::move(v3);
  fidl::StringView v5("after", 5);
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, XUnionInTableXUnionAbsent_Old_Encode) {
  llcpp::conformance::TestXUnionInTable v1{};
  auto v2 = llcpp::conformance::XUnionInTable::Build();
  fidl::StringView v3("before", 6);
  v2.set_before(&v3);
  fidl::StringView v4("after", 5);
  v2.set_after(&v4);
  auto v5 = v2.view();
  v1.value = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, XUnionInTableXUnionPresent_Old_Encode) {
  llcpp::conformance::TestXUnionInTable v1{};
  auto v2 = llcpp::conformance::XUnionInTable::Build();
  fidl::StringView v3("before", 6);
  v2.set_before(&v3);
  llcpp::conformance::SampleXUnion v4;
  uint32_t v5 = 3735928559ull;
  v4.set_u(&v5);
  v2.set_xu(&v4);
  fidl::StringView v6("after", 5);
  v2.set_after(&v6);
  auto v7 = v2.view();
  v1.value = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2, 0x56,
      0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, StrictXUnion_Old_Encode) {
  llcpp::conformance::TestStrictXUnionInStruct v1{};
  llcpp::conformance::SampleStrictXUnion v2;
  uint32_t v3 = 3735928559ull;
  v2.set_u(&v3);
  v1.xu = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, AddEthernetDeviceRequest_Old_Encode) {
  llcpp::conformance::TestAddEthernetDeviceRequest v1{};
  fidl::StringView v2("@/dev/sys/pci/00:03.0/e1000/ethernet", 36);
  v1.topological_path = std::move(v2);
  llcpp::conformance::InterfaceConfig v3{};
  fidl::StringView v4("ethp0003", 8);
  v3.name = std::move(v4);
  llcpp::conformance::IpAddressConfig v5;
  bool v6 = true;
  v5.set_dhcp(&v6);
  v3.ip_address_config = std::move(v5);
  v1.config = std::move(v3);
  uint32_t v7 = 4294967295ull;
  v1.this_should_be_a_handle = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64,
      0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
      0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, FileGetAttrResponse_Old_Encode) {
  llcpp::conformance::FileGetAttrResponse v1{};
  int32_t v2 = 2125315759ull;
  v1.s = std::move(v2);
  llcpp::conformance::NodeAttributes v3{};
  uint32_t v4 = 2518909348ull;
  v3.mode = std::move(v4);
  uint64_t v5 = 1ull;
  v3.id = std::move(v5);
  uint64_t v6 = 231ull;
  v3.content_size = std::move(v6);
  uint64_t v7 = 231ull;
  v3.storage_size = std::move(v7);
  uint64_t v8 = 1ull;
  v3.link_count = std::move(v8);
  uint64_t v9 = 9833440827789222417ull;
  v3.creation_time = std::move(v9);
  uint64_t v10 = 72038755451251353ull;
  v3.modification_time = std::move(v10);
  v1.attributes = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Optionals_Old_Encode) {
  llcpp::conformance::StructWithOptionals v1{};
  llcpp::conformance::EmptyStruct v2{};
  v1.s = std::move(v2);
  llcpp::conformance::EmptyStruct v3{};
  v1.s2 = std::move(&v3);
  auto v4 = llcpp::conformance::TableWithEmptyStruct::Build();
  llcpp::conformance::EmptyStruct v5{};
  v4.set_s(&v5);
  auto v6 = v4.view();
  v1.t = std::move(v6);
  llcpp::conformance::XUnionWithEmptyStruct v7;
  llcpp::conformance::EmptyStruct v8{};
  v7.set_s(&v8);
  v1.xu = std::move(v7);
  llcpp::conformance::XUnionWithEmptyStruct v9;
  llcpp::conformance::EmptyStruct v10{};
  v9.set_s(&v10);
  v1.xu2 = std::move(v9);
  llcpp::conformance::UnionWithEmptyStruct v11;
  llcpp::conformance::EmptyStruct v12{};
  v11.set_s(&v12);
  v1.u = std::move(v11);
  llcpp::conformance::UnionWithEmptyStruct v13;
  llcpp::conformance::EmptyStruct v14{};
  v13.set_s(&v14);
  v1.u2 = std::move(&v13);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Arrays_Old_Encode) {
  llcpp::conformance::StructWithArrays v1{};
  int32_t v2 = 1ull;
  int32_t v3 = 2ull;
  auto v4 = fidl::Array<int32_t, 2>{std::move(v2), std::move(v3)};
  v1.arr_int = std::move(v4);
  fidl::StringView v5("a", 1);
  fidl::StringView v6("b", 1);
  auto v7 = fidl::Array<fidl::StringView, 2>{std::move(v5), std::move(v6)};
  v1.arr_string = std::move(v7);
  fidl::StringView v8("c", 1);
  fidl::StringView v9{};
  auto v10 = fidl::Array<fidl::StringView, 2>{std::move(v8), std::move(v9)};
  v1.arr_nullable_string = std::move(v10);
  llcpp::conformance::StructWithInt v11{};
  int32_t v12 = 1ull;
  v11.x = std::move(v12);
  llcpp::conformance::StructWithInt v13{};
  int32_t v14 = 2ull;
  v13.x = std::move(v14);
  auto v15 = fidl::Array<llcpp::conformance::StructWithInt, 2>{std::move(v11), std::move(v13)};
  v1.arr_struct = std::move(v15);
  llcpp::conformance::StructWithInt* v16{};
  llcpp::conformance::StructWithInt v17{};
  int32_t v18 = 16909060ull;
  v17.x = std::move(v18);
  auto v19 = fidl::Array<llcpp::conformance::StructWithInt*, 2>{std::move(v16), std::move(&v17)};
  v1.arr_nullable_struct = std::move(v19);
  int32_t v20 = 1ull;
  int32_t v21 = 2ull;
  int32_t v22 = 3ull;
  auto v23 = fidl::Array<int32_t, 3>{std::move(v20), std::move(v21), std::move(v22)};
  int32_t v24 = 4ull;
  int32_t v25 = 5ull;
  int32_t v26 = 6ull;
  auto v27 = fidl::Array<int32_t, 3>{std::move(v24), std::move(v25), std::move(v26)};
  auto v28 = fidl::Array<fidl::Array<int32_t, 3>, 2>{std::move(v23), std::move(v27)};
  v1.arr_arr_int = std::move(v28);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Vectors_Old_Encode) {
  llcpp::conformance::StructWithVectors v1{};
  auto v2 = fidl::VectorView<int32_t>();
  v1.vec_empty = std::move(v2);
  int32_t v3 = 1ull;
  int32_t v4 = 2ull;
  auto v5 = fidl::Array<int32_t, 2>{std::move(v3), std::move(v4)};
  auto v6 = fidl::VectorView<int32_t>(v5.data(), 2);
  v1.vec_int = std::move(v6);
  fidl::StringView v7("a", 1);
  fidl::StringView v8("b", 1);
  auto v9 = fidl::Array<fidl::StringView, 2>{std::move(v7), std::move(v8)};
  auto v10 = fidl::VectorView<fidl::StringView>(v9.data(), 2);
  v1.vec_string = std::move(v10);
  fidl::StringView v11{};
  fidl::StringView v12("c", 1);
  fidl::StringView v13{};
  auto v14 = fidl::Array<fidl::StringView, 3>{std::move(v11), std::move(v12), std::move(v13)};
  auto v15 = fidl::VectorView<fidl::StringView>(v14.data(), 3);
  v1.vec_nullable_string = std::move(v15);
  llcpp::conformance::StructWithInt v16{};
  int32_t v17 = 1ull;
  v16.x = std::move(v17);
  auto v18 = fidl::Array<llcpp::conformance::StructWithInt, 1>{std::move(v16)};
  auto v19 = fidl::VectorView<llcpp::conformance::StructWithInt>(v18.data(), 1);
  v1.vec_struct = std::move(v19);
  llcpp::conformance::StructWithInt* v20{};
  llcpp::conformance::StructWithInt* v21{};
  llcpp::conformance::StructWithInt v22{};
  int32_t v23 = 2ull;
  v22.x = std::move(v23);
  auto v24 = fidl::Array<llcpp::conformance::StructWithInt*, 3>{std::move(v20), std::move(v21),
                                                                std::move(&v22)};
  auto v25 = fidl::VectorView<llcpp::conformance::StructWithInt*>(v24.data(), 3);
  v1.vec_nullable_struct = std::move(v25);
  int32_t v26 = 1ull;
  int32_t v27 = 2ull;
  auto v28 = fidl::Array<int32_t, 2>{std::move(v26), std::move(v27)};
  auto v29 = fidl::VectorView<int32_t>(v28.data(), 2);
  int32_t v30 = 3ull;
  auto v31 = fidl::Array<int32_t, 1>{std::move(v30)};
  auto v32 = fidl::VectorView<int32_t>(v31.data(), 1);
  auto v33 = fidl::Array<fidl::VectorView<int32_t>, 2>{std::move(v29), std::move(v32)};
  auto v34 = fidl::VectorView<fidl::VectorView<int32_t>>(v33.data(), 2);
  v1.vec_vec_int = std::move(v34);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, BoolTrue_Old_Encode) {
  llcpp::conformance::MyBool v1{};
  bool v2 = true;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, BoolFalse_Old_Encode) {
  llcpp::conformance::MyBool v1{};
  bool v2 = false;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, ByteZero_Old_Encode) {
  llcpp::conformance::MyByte v1{};
  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Byte255_Old_Encode) {
  llcpp::conformance::MyByte v1{};
  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int8Min_Old_Encode) {
  llcpp::conformance::MyInt8 v1{};
  int8_t v2 = -128ll;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int8Zero_Old_Encode) {
  llcpp::conformance::MyInt8 v1{};
  int8_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int8Max_Old_Encode) {
  llcpp::conformance::MyInt8 v1{};
  int8_t v2 = 127ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int16Min_Old_Encode) {
  llcpp::conformance::MyInt16 v1{};
  int16_t v2 = -32768ll;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int16Zero_Old_Encode) {
  llcpp::conformance::MyInt16 v1{};
  int16_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int16Max_Old_Encode) {
  llcpp::conformance::MyInt16 v1{};
  int16_t v2 = 32767ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int32Min_Old_Encode) {
  llcpp::conformance::MyInt32 v1{};
  int32_t v2 = -2147483648ll;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int32Zero_Old_Encode) {
  llcpp::conformance::MyInt32 v1{};
  int32_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int32Max_Old_Encode) {
  llcpp::conformance::MyInt32 v1{};
  int32_t v2 = 2147483647ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int64Min_Old_Encode) {
  llcpp::conformance::MyInt64 v1{};
  int64_t v2 = -9223372036854775807ll - 1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int64Zero_Old_Encode) {
  llcpp::conformance::MyInt64 v1{};
  int64_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Int64Max_Old_Encode) {
  llcpp::conformance::MyInt64 v1{};
  int64_t v2 = 9223372036854775807ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint8Zero_Old_Encode) {
  llcpp::conformance::MyUint8 v1{};
  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint8Max_Old_Encode) {
  llcpp::conformance::MyUint8 v1{};
  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint16Zero_Old_Encode) {
  llcpp::conformance::MyUint16 v1{};
  uint16_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint16Max_Old_Encode) {
  llcpp::conformance::MyUint16 v1{};
  uint16_t v2 = 65535ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint32Zero_Old_Encode) {
  llcpp::conformance::MyUint32 v1{};
  uint32_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint32Max_Old_Encode) {
  llcpp::conformance::MyUint32 v1{};
  uint32_t v2 = 4294967295ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint64Zero_Old_Encode) {
  llcpp::conformance::MyUint64 v1{};
  uint64_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Uint64Max_Old_Encode) {
  llcpp::conformance::MyUint64 v1{};
  uint64_t v2 = 18446744073709551615ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float32Zero_Old_Encode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = 0;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float32One_Old_Encode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = 1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float32MinusOne_Old_Encode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = -1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float32Max_Old_Encode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = 3.4028234663852886e+38;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float64Zero_Old_Encode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = 0;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float64One_Old_Encode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = 1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float64MinusOne_Old_Encode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = -1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Float64Max_Old_Encode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = 1.7976931348623157e+308;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich1Case1_Old_Encode) {
  llcpp::conformance::Sandwich1 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize8Align4 v3;
  uint32_t v4 = 202050057ull;
  v3.set_variant(&v4);
  v1.the_union = std::move(v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00,
      0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich1Case1WithHdr_Old_Encode) {
  llcpp::conformance::Sandwich1Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich1 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionSize8Align4 v12;
  uint32_t v13 = 202050057ull;
  v12.set_variant(&v13);
  v10.the_union = std::move(v12);
  uint32_t v14 = 134678021ull;
  v10.after = std::move(v14);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,
      0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00,
      0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich1WithOptUnionPresent_Old_Encode) {
  llcpp::conformance::Sandwich1WithOptUnion v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize8Align4 v3;
  uint32_t v4 = 202050057ull;
  v3.set_variant(&v4);
  v1.opt_union = std::move(&v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich1WithOptUnionAbsent_Old_Encode) {
  llcpp::conformance::Sandwich1WithOptUnion v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  uint32_t v3 = 134678021ull;
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich2Case1_Old_Encode) {
  llcpp::conformance::Sandwich2 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize12Align4 v3;
  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = fidl::Array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                     std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(&v10);
  v1.the_union = std::move(v3);
  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich3Case1_Old_Encode) {
  llcpp::conformance::Sandwich3 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize24Align8 v3;
  llcpp::conformance::StructSize16Align8 v4{};
  uint64_t v5 = 12080525177006498208ull;
  v4.f1 = std::move(v5);
  uint64_t v6 = 12659246559711111592ull;
  v4.f2 = std::move(v6);
  v3.set_variant(&v4);
  v1.the_union = std::move(v3);
  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich4Case1_Old_Encode) {
  llcpp::conformance::Sandwich4 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize36Align4 v3;
  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  uint8_t v10 = 166ull;
  uint8_t v11 = 167ull;
  uint8_t v12 = 168ull;
  uint8_t v13 = 169ull;
  uint8_t v14 = 170ull;
  uint8_t v15 = 171ull;
  uint8_t v16 = 172ull;
  uint8_t v17 = 173ull;
  uint8_t v18 = 174ull;
  uint8_t v19 = 175ull;
  uint8_t v20 = 176ull;
  uint8_t v21 = 177ull;
  uint8_t v22 = 178ull;
  uint8_t v23 = 179ull;
  uint8_t v24 = 180ull;
  uint8_t v25 = 181ull;
  uint8_t v26 = 182ull;
  uint8_t v27 = 183ull;
  uint8_t v28 = 184ull;
  uint8_t v29 = 185ull;
  uint8_t v30 = 186ull;
  uint8_t v31 = 187ull;
  uint8_t v32 = 188ull;
  uint8_t v33 = 189ull;
  uint8_t v34 = 190ull;
  uint8_t v35 = 191ull;
  auto v36 = fidl::Array<uint8_t, 32>{
      std::move(v4),  std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),
      std::move(v9),  std::move(v10), std::move(v11), std::move(v12), std::move(v13),
      std::move(v14), std::move(v15), std::move(v16), std::move(v17), std::move(v18),
      std::move(v19), std::move(v20), std::move(v21), std::move(v22), std::move(v23),
      std::move(v24), std::move(v25), std::move(v26), std::move(v27), std::move(v28),
      std::move(v29), std::move(v30), std::move(v31), std::move(v32), std::move(v33),
      std::move(v34), std::move(v35)};
  v3.set_variant(&v36);
  v1.the_union = std::move(v3);
  uint32_t v37 = 134678021ull;
  v1.after = std::move(v37);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
      0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb,
      0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich4Case1WithHdr_Old_Encode) {
  llcpp::conformance::Sandwich4Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 0ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 0ull;
  uint8_t v5 = 0ull;
  uint8_t v6 = 0ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 0ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 0ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich4 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionSize36Align4 v12;
  uint8_t v13 = 160ull;
  uint8_t v14 = 161ull;
  uint8_t v15 = 162ull;
  uint8_t v16 = 163ull;
  uint8_t v17 = 164ull;
  uint8_t v18 = 165ull;
  uint8_t v19 = 166ull;
  uint8_t v20 = 167ull;
  uint8_t v21 = 168ull;
  uint8_t v22 = 169ull;
  uint8_t v23 = 170ull;
  uint8_t v24 = 171ull;
  uint8_t v25 = 172ull;
  uint8_t v26 = 173ull;
  uint8_t v27 = 174ull;
  uint8_t v28 = 175ull;
  uint8_t v29 = 176ull;
  uint8_t v30 = 177ull;
  uint8_t v31 = 178ull;
  uint8_t v32 = 179ull;
  uint8_t v33 = 180ull;
  uint8_t v34 = 181ull;
  uint8_t v35 = 182ull;
  uint8_t v36 = 183ull;
  uint8_t v37 = 184ull;
  uint8_t v38 = 185ull;
  uint8_t v39 = 186ull;
  uint8_t v40 = 187ull;
  uint8_t v41 = 188ull;
  uint8_t v42 = 189ull;
  uint8_t v43 = 190ull;
  uint8_t v44 = 191ull;
  auto v45 = fidl::Array<uint8_t, 32>{
      std::move(v13), std::move(v14), std::move(v15), std::move(v16), std::move(v17),
      std::move(v18), std::move(v19), std::move(v20), std::move(v21), std::move(v22),
      std::move(v23), std::move(v24), std::move(v25), std::move(v26), std::move(v27),
      std::move(v28), std::move(v29), std::move(v30), std::move(v31), std::move(v32),
      std::move(v33), std::move(v34), std::move(v35), std::move(v36), std::move(v37),
      std::move(v38), std::move(v39), std::move(v40), std::move(v41), std::move(v42),
      std::move(v43), std::move(v44)};
  v12.set_variant(&v45);
  v10.the_union = std::move(v12);
  uint32_t v46 = 134678021ull;
  v10.after = std::move(v46);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1,
      0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae,
      0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb,
      0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich5Case1_Old_Encode) {
  llcpp::conformance::Sandwich5 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionOfUnion v3;
  llcpp::conformance::UnionSize8Align4 v4;
  uint32_t v5 = 202050057ull;
  v4.set_variant(&v5);
  v3.set_size8align4(&v4);
  v1.union_of_union = std::move(v3);
  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich5Case1WithHdr_Old_Encode) {
  llcpp::conformance::Sandwich5Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich5 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionOfUnion v12;
  llcpp::conformance::UnionSize8Align4 v13;
  uint32_t v14 = 202050057ull;
  v13.set_variant(&v14);
  v12.set_size8align4(&v13);
  v10.union_of_union = std::move(v12);
  uint32_t v15 = 134678021ull;
  v10.after = std::move(v15);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,
      0xfd, 0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich5Case2_Old_Encode) {
  llcpp::conformance::Sandwich5 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionOfUnion v3;
  llcpp::conformance::UnionSize24Align8 v4;
  llcpp::conformance::StructSize16Align8 v5{};
  uint64_t v6 = 12080525177006498208ull;
  v5.f1 = std::move(v6);
  uint64_t v7 = 12659246559711111592ull;
  v5.f2 = std::move(v7);
  v4.set_variant(&v5);
  v3.set_size24align8(&v4);
  v1.union_of_union = std::move(v3);
  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich5Case2WithHdr_Old_Encode) {
  llcpp::conformance::Sandwich5Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich5 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionOfUnion v12;
  llcpp::conformance::UnionSize24Align8 v13;
  llcpp::conformance::StructSize16Align8 v14{};
  uint64_t v15 = 12080525177006498208ull;
  v14.f1 = std::move(v15);
  uint64_t v16 = 12659246559711111592ull;
  v14.f2 = std::move(v16);
  v13.set_variant(&v14);
  v12.set_size24align8(&v13);
  v10.union_of_union = std::move(v12);
  uint32_t v17 = 134678021ull;
  v10.after = std::move(v17);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,
      0xfd, 0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case1_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = fidl::Array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                     std::move(v7), std::move(v8), std::move(v9)};
  auto v11 = fidl::VectorView<uint8_t>(v10.data(), 6);
  v3.set_vector_of_uint8(&v11);
  v1.the_union = std::move(v3);
  uint32_t v12 = 134678021ull;
  v1.after = std::move(v12);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case1AbsentVector_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  auto v4 = fidl::VectorView<uint8_t>();
  v3.set_vector_of_uint8(&v4);
  v1.the_union = std::move(v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case2_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  fidl::StringView v4("soft migrations rock!", 21);
  v3.set_s(&v4);
  v1.the_union = std::move(v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case3_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 115ull;
  uint8_t v6 = 111ull;
  uint8_t v7 = 102ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 32ull;
  uint8_t v11 = 109ull;
  uint8_t v12 = 105ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  llcpp::conformance::StructSize3Align1 v14{};
  uint8_t v15 = 114ull;
  uint8_t v16 = 97ull;
  uint8_t v17 = 116ull;
  auto v18 = fidl::Array<uint8_t, 3>{std::move(v15), std::move(v16), std::move(v17)};
  v14.three_bytes = std::move(v18);
  auto v19 = fidl::Array<llcpp::conformance::StructSize3Align1, 3>{std::move(v4), std::move(v9),
                                                                   std::move(v14)};
  auto v20 = fidl::VectorView<llcpp::conformance::StructSize3Align1>(v19.data(), 3);
  v3.set_vector_s3_a1(&v20);
  v1.the_union = std::move(v3);
  uint32_t v21 = 134678021ull;
  v1.after = std::move(v21);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f,
      0x66, 0x20, 0x6d, 0x69, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case4_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align2 v4{};
  uint16_t v5 = 28531ull;
  v4.f1 = std::move(v5);
  uint8_t v6 = 102ull;
  v4.f2 = std::move(v6);
  llcpp::conformance::StructSize3Align2 v7{};
  uint16_t v8 = 27936ull;
  v7.f1 = std::move(v8);
  uint8_t v9 = 105ull;
  v7.f2 = std::move(v9);
  llcpp::conformance::StructSize3Align2 v10{};
  uint16_t v11 = 24946ull;
  v10.f1 = std::move(v11);
  uint8_t v12 = 116ull;
  v10.f2 = std::move(v12);
  auto v13 = fidl::Array<llcpp::conformance::StructSize3Align2, 3>{std::move(v4), std::move(v7),
                                                                   std::move(v10)};
  auto v14 = fidl::VectorView<llcpp::conformance::StructSize3Align2>(v13.data(), 3);
  v3.set_vector_s3_a2(&v14);
  v1.the_union = std::move(v3);
  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f,
      0x66, 0x00, 0x20, 0x6d, 0x69, 0x00, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case5_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  uint32_t v4 = 4294967295ull;
  uint32_t v5 = 4294967295ull;
  uint32_t v6 = 4294967295ull;
  auto v7 = fidl::Array<uint32_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  auto v8 = fidl::VectorView<uint32_t>(v7.data(), 3);
  v3.set_handles(&v8);
  v1.the_union = std::move(v3);
  uint32_t v9 = 134678021ull;
  v1.after = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case6_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 164ull;
  uint8_t v11 = 165ull;
  uint8_t v12 = 166ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = fidl::Array<llcpp::conformance::StructSize3Align1, 2>{std::move(v4), std::move(v9)};
  v3.set_array_s3_a1(&v14);
  v1.the_union = std::move(v3);
  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case7_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align2 v4{};
  uint16_t v5 = 41633ull;
  v4.f1 = std::move(v5);
  uint8_t v6 = 163ull;
  v4.f2 = std::move(v6);
  llcpp::conformance::StructSize3Align2 v7{};
  uint16_t v8 = 42404ull;
  v7.f1 = std::move(v8);
  uint8_t v9 = 166ull;
  v7.f2 = std::move(v9);
  auto v10 = fidl::Array<llcpp::conformance::StructSize3Align2, 2>{std::move(v4), std::move(v7)};
  v3.set_array_s3_a2(&v10);
  v1.the_union = std::move(v3);
  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich6Case8_Old_Encode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::UnionSize8Align4 v4;
  uint32_t v5 = 202050057ull;
  v4.set_variant(&v5);
  auto v6 = fidl::Array<llcpp::conformance::UnionSize8Align4, 1>{std::move(v4)};
  auto v7 = fidl::VectorView<llcpp::conformance::UnionSize8Align4>(v6.data(), 1);
  v3.set_vector_union(&v7);
  v1.the_union = std::move(v3);
  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich7Case1_Old_Encode) {
  llcpp::conformance::Sandwich7 v1{};
  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1 v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  llcpp::conformance::UnionSize8Align4 v5;
  uint32_t v6 = 202050057ull;
  v5.set_variant(&v6);
  v3.the_union = std::move(v5);
  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  v1.opt_sandwich1 = std::move(&v3);
  uint32_t v8 = 606282273ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
      0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich7Case1WithHdr_Old_Encode) {
  llcpp::conformance::Sandwich7Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich7 v10{};
  uint32_t v11 = 336794129ull;
  v10.before = std::move(v11);
  llcpp::conformance::Sandwich1 v12{};
  uint32_t v13 = 67305985ull;
  v12.before = std::move(v13);
  llcpp::conformance::UnionSize8Align4 v14;
  uint32_t v15 = 202050057ull;
  v14.set_variant(&v15);
  v12.the_union = std::move(v14);
  uint32_t v16 = 134678021ull;
  v12.after = std::move(v16);
  v10.opt_sandwich1 = std::move(&v12);
  uint32_t v17 = 606282273ull;
  v10.after = std::move(v17);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
      0xfe, 0xff, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
      0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich7Case2_Old_Encode) {
  llcpp::conformance::Sandwich7 v1{};
  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);
  uint32_t v3 = 606282273ull;
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich7Case2WithHdr_Old_Encode) {
  llcpp::conformance::Sandwich7Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich7 v10{};
  uint32_t v11 = 336794129ull;
  v10.before = std::move(v11);
  uint32_t v12 = 606282273ull;
  v10.after = std::move(v12);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
      0xfe, 0xff, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression1_Old_Encode) {
  llcpp::conformance::Regression1 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);
  uint8_t v4 = 3ull;
  v1.f3 = std::move(v4);
  uint16_t v5 = 4ull;
  v1.f4 = std::move(v5);
  uint64_t v6 = 5ull;
  v1.f5 = std::move(v6);
  uint8_t v7 = 6ull;
  v1.f6 = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression2_Old_Encode) {
  llcpp::conformance::Regression2 v1{};
  llcpp::conformance::Regression1 v2{};
  uint8_t v3 = 1ull;
  v2.f1 = std::move(v3);
  uint32_t v4 = 2ull;
  v2.f2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.f3 = std::move(v5);
  uint16_t v6 = 4ull;
  v2.f4 = std::move(v6);
  uint64_t v7 = 5ull;
  v2.f5 = std::move(v7);
  uint8_t v8 = 6ull;
  v2.f6 = std::move(v8);
  v1.head = std::move(v2);
  uint8_t v9 = 7ull;
  v1.f7 = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression3Absent_Old_Encode) {
  llcpp::conformance::Regression3 v1{};

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression3Present_Old_Encode) {
  llcpp::conformance::Regression3 v1{};
  llcpp::conformance::Regression2 v2{};
  llcpp::conformance::Regression1 v3{};
  uint8_t v4 = 1ull;
  v3.f1 = std::move(v4);
  uint32_t v5 = 2ull;
  v3.f2 = std::move(v5);
  uint8_t v6 = 3ull;
  v3.f3 = std::move(v6);
  uint16_t v7 = 4ull;
  v3.f4 = std::move(v7);
  uint64_t v8 = 5ull;
  v3.f5 = std::move(v8);
  uint8_t v9 = 6ull;
  v3.f6 = std::move(v9);
  v2.head = std::move(v3);
  uint8_t v10 = 7ull;
  v2.f7 = std::move(v10);
  v1.opt_value = std::move(&v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Size5Alignment1Array_Old_Encode) {
  llcpp::conformance::Size5Alignment1Array v1{};
  llcpp::conformance::Size5Alignment1 v2{};
  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = fidl::Array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7)};
  v2.data = std::move(v8);
  llcpp::conformance::Size5Alignment1 v9{};
  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = fidl::Array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                     std::move(v14)};
  v9.data = std::move(v15);
  llcpp::conformance::Size5Alignment1 v16{};
  uint8_t v17 = 11ull;
  uint8_t v18 = 12ull;
  uint8_t v19 = 13ull;
  uint8_t v20 = 14ull;
  uint8_t v21 = 15ull;
  auto v22 = fidl::Array<uint8_t, 5>{std::move(v17), std::move(v18), std::move(v19), std::move(v20),
                                     std::move(v21)};
  v16.data = std::move(v22);
  auto v23 = fidl::Array<llcpp::conformance::Size5Alignment1, 3>{std::move(v2), std::move(v9),
                                                                 std::move(v16)};
  v1.a = std::move(v23);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Size5Alignment4Array_Old_Encode) {
  llcpp::conformance::Size5Alignment4Array v1{};
  llcpp::conformance::Size5Alignment4 v2{};
  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);
  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  llcpp::conformance::Size5Alignment4 v5{};
  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);
  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  llcpp::conformance::Size5Alignment4 v8{};
  uint32_t v9 = 235736075ull;
  v8.four = std::move(v9);
  uint8_t v10 = 15ull;
  v8.one = std::move(v10);
  auto v11 = fidl::Array<llcpp::conformance::Size5Alignment4, 3>{std::move(v2), std::move(v5),
                                                                 std::move(v8)};
  v1.a = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09,
      0x0a, 0x00, 0x00, 0x00, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Size5Alignment1Vector_Old_Encode) {
  llcpp::conformance::Size5Alignment1Vector v1{};
  llcpp::conformance::Size5Alignment1 v2{};
  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = fidl::Array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7)};
  v2.data = std::move(v8);
  llcpp::conformance::Size5Alignment1 v9{};
  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = fidl::Array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                     std::move(v14)};
  v9.data = std::move(v15);
  auto v16 = fidl::Array<llcpp::conformance::Size5Alignment1, 2>{std::move(v2), std::move(v9)};
  auto v17 = fidl::VectorView<llcpp::conformance::Size5Alignment1>(v16.data(), 2);
  v1.v = std::move(v17);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Size5Alignment4Vector_Old_Encode) {
  llcpp::conformance::Size5Alignment4Vector v1{};
  llcpp::conformance::Size5Alignment4 v2{};
  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);
  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  llcpp::conformance::Size5Alignment4 v5{};
  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);
  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  auto v8 = fidl::Array<llcpp::conformance::Size5Alignment4, 2>{std::move(v2), std::move(v5)};
  auto v9 = fidl::VectorView<llcpp::conformance::Size5Alignment4>(v8.data(), 2);
  v1.v = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00,
      0x00, 0x00, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Table_StructWithReservedSandwich_Old_Encode) {
  llcpp::conformance::Table_StructWithReservedSandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_StructWithReservedSandwich::Build();
  llcpp::conformance::StructSize3Align1 v3{};
  uint8_t v4 = 9ull;
  uint8_t v5 = 10ull;
  uint8_t v6 = 11ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(&v3);
  llcpp::conformance::StructSize3Align1 v8{};
  uint8_t v9 = 25ull;
  uint8_t v10 = 26ull;
  uint8_t v11 = 27ull;
  auto v12 = fidl::Array<uint8_t, 3>{std::move(v9), std::move(v10), std::move(v11)};
  v8.three_bytes = std::move(v12);
  v2.set_s2(&v8);
  auto v13 = v2.view();
  v1.table = std::move(v13);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Table_StructWithUint32Sandwich_Old_Encode) {
  llcpp::conformance::Table_StructWithUint32SandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_StructWithUint32Sandwich::Build();
  uint32_t v3 = 67305985ull;
  v2.set_i(&v3);
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v2.set_s1(&v4);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 25ull;
  uint8_t v11 = 26ull;
  uint8_t v12 = 27ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  v2.set_s2(&v9);
  uint32_t v14 = 218893066ull;
  v2.set_i2(&v14);
  auto v15 = v2.view();
  v1.table = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1a,
      0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Table_UnionWithVector_ReservedSandwich_Old_Encode) {
  llcpp::conformance::Table_UnionWithVector_ReservedSandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_UnionWithVector_ReservedSandwich::Build();
  llcpp::conformance::UnionWithVector v3;
  fidl::StringView v4("hello", 5);
  v3.set_s(&v4);
  v2.set_uv(&v3);
  auto v5 = v2.view();
  v1.table = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Table_UnionWithVector_StructSandwich_Old_Encode) {
  llcpp::conformance::Table_UnionWithVector_StructSandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_UnionWithVector_StructSandwich::Build();
  llcpp::conformance::StructSize3Align1 v3{};
  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(&v3);
  llcpp::conformance::UnionWithVector v8;
  fidl::StringView v9("hello", 5);
  v8.set_s(&v9);
  v2.set_uv(&v8);
  llcpp::conformance::StructSize3Align1 v10{};
  uint8_t v11 = 4ull;
  uint8_t v12 = 5ull;
  uint8_t v13 = 6ull;
  auto v14 = fidl::Array<uint8_t, 3>{std::move(v11), std::move(v12), std::move(v13)};
  v10.three_bytes = std::move(v14);
  v2.set_s2(&v10);
  auto v15 = v2.view();
  v1.table = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65,
      0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, XUnionWithStruct_Old_Encode) {
  llcpp::conformance::XUnionWithStructStruct v1{};
  llcpp::conformance::XUnionWithStruct v2;
  llcpp::conformance::StructSize3Align1 v3{};
  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s(&v3);
  v1.xu = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, ArrayStruct_Old_Encode) {
  llcpp::conformance::ArrayStruct v1{};
  llcpp::conformance::StringUnion v2;
  fidl::StringView v3("one", 3);
  v2.set_s(&v3);
  llcpp::conformance::StringUnion v4;
  fidl::StringView v5("two", 3);
  v4.set_s(&v5);
  llcpp::conformance::StringUnion v6;
  fidl::StringView v7("three", 5);
  v6.set_s(&v7);
  auto v8 =
      fidl::Array<llcpp::conformance::StringUnion, 3>{std::move(v2), std::move(v4), std::move(v6)};
  v1.unions = std::move(v8);
  llcpp::conformance::StringUnion v9;
  fidl::StringView v10("four", 4);
  v9.set_s(&v10);
  llcpp::conformance::StringUnion v11;
  fidl::StringView v12("five", 4);
  v11.set_s(&v12);
  llcpp::conformance::StringUnion v13;
  fidl::StringView v14("six", 3);
  v13.set_s(&v14);
  auto v15 = fidl::Array<llcpp::conformance::StringUnion*, 3>{std::move(&v9), std::move(&v11),
                                                              std::move(&v13)};
  v1.optional_unions = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74,
      0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x68, 0x72, 0x65, 0x65, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x6f, 0x75, 0x72, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x69, 0x76, 0x65,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x69,
      0x78, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, TransformerEmptyStruct_Old_Encode) {
  llcpp::conformance::TransformerEmptyStruct v1{};

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, EmptyStructUnion_Old_Encode) {
  llcpp::conformance::EmptyStructUnionStruct v1{};
  llcpp::conformance::EmptyStructUnion v2;
  llcpp::conformance::TransformerEmptyStruct v3{};
  v2.set_es(&v3);
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, NoCodingTablesStressor_Old_Encode) {
  llcpp::conformance::NoCodingTablesStressor v1{};
  uint64_t v2 = 1229782938247303441ull;
  v1.f1 = std::move(v2);
  uint64_t v3 = 2459565876494606882ull;
  v1.f2 = std::move(v3);
  llcpp::conformance::UnionSize36Align4 v4;
  uint8_t v5 = 51ull;
  uint8_t v6 = 51ull;
  uint8_t v7 = 51ull;
  uint8_t v8 = 51ull;
  uint8_t v9 = 51ull;
  uint8_t v10 = 51ull;
  uint8_t v11 = 51ull;
  uint8_t v12 = 51ull;
  uint8_t v13 = 51ull;
  uint8_t v14 = 51ull;
  uint8_t v15 = 51ull;
  uint8_t v16 = 51ull;
  uint8_t v17 = 51ull;
  uint8_t v18 = 51ull;
  uint8_t v19 = 51ull;
  uint8_t v20 = 51ull;
  uint8_t v21 = 51ull;
  uint8_t v22 = 51ull;
  uint8_t v23 = 51ull;
  uint8_t v24 = 51ull;
  uint8_t v25 = 51ull;
  uint8_t v26 = 51ull;
  uint8_t v27 = 51ull;
  uint8_t v28 = 51ull;
  uint8_t v29 = 51ull;
  uint8_t v30 = 51ull;
  uint8_t v31 = 51ull;
  uint8_t v32 = 51ull;
  uint8_t v33 = 51ull;
  uint8_t v34 = 51ull;
  uint8_t v35 = 51ull;
  uint8_t v36 = 51ull;
  auto v37 = fidl::Array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(&v37);
  v1.u1 = std::move(v4);
  uint64_t v38 = 4919131752989213764ull;
  v1.f3 = std::move(v38);
  uint64_t v39 = 6148914691236517205ull;
  v1.f4 = std::move(v39);
  llcpp::conformance::UnionSize36Align4 v40;
  uint8_t v41 = 102ull;
  uint8_t v42 = 102ull;
  uint8_t v43 = 102ull;
  uint8_t v44 = 102ull;
  uint8_t v45 = 102ull;
  uint8_t v46 = 102ull;
  uint8_t v47 = 102ull;
  uint8_t v48 = 102ull;
  uint8_t v49 = 102ull;
  uint8_t v50 = 102ull;
  uint8_t v51 = 102ull;
  uint8_t v52 = 102ull;
  uint8_t v53 = 102ull;
  uint8_t v54 = 102ull;
  uint8_t v55 = 102ull;
  uint8_t v56 = 102ull;
  uint8_t v57 = 102ull;
  uint8_t v58 = 102ull;
  uint8_t v59 = 102ull;
  uint8_t v60 = 102ull;
  uint8_t v61 = 102ull;
  uint8_t v62 = 102ull;
  uint8_t v63 = 102ull;
  uint8_t v64 = 102ull;
  uint8_t v65 = 102ull;
  uint8_t v66 = 102ull;
  uint8_t v67 = 102ull;
  uint8_t v68 = 102ull;
  uint8_t v69 = 102ull;
  uint8_t v70 = 102ull;
  uint8_t v71 = 102ull;
  uint8_t v72 = 102ull;
  auto v73 = fidl::Array<uint8_t, 32>{
      std::move(v41), std::move(v42), std::move(v43), std::move(v44), std::move(v45),
      std::move(v46), std::move(v47), std::move(v48), std::move(v49), std::move(v50),
      std::move(v51), std::move(v52), std::move(v53), std::move(v54), std::move(v55),
      std::move(v56), std::move(v57), std::move(v58), std::move(v59), std::move(v60),
      std::move(v61), std::move(v62), std::move(v63), std::move(v64), std::move(v65),
      std::move(v66), std::move(v67), std::move(v68), std::move(v69), std::move(v70),
      std::move(v71), std::move(v72)};
  v40.set_variant(&v73);
  v1.u2 = std::move(v40);
  uint64_t v74 = 8608480567731124087ull;
  v1.f5 = std::move(v74);
  uint64_t v75 = 9838263505978427528ull;
  v1.f6 = std::move(v75);
  llcpp::conformance::UnionSize36Align4 v76;
  uint8_t v77 = 153ull;
  uint8_t v78 = 153ull;
  uint8_t v79 = 153ull;
  uint8_t v80 = 153ull;
  uint8_t v81 = 153ull;
  uint8_t v82 = 153ull;
  uint8_t v83 = 153ull;
  uint8_t v84 = 153ull;
  uint8_t v85 = 153ull;
  uint8_t v86 = 153ull;
  uint8_t v87 = 153ull;
  uint8_t v88 = 153ull;
  uint8_t v89 = 153ull;
  uint8_t v90 = 153ull;
  uint8_t v91 = 153ull;
  uint8_t v92 = 153ull;
  uint8_t v93 = 153ull;
  uint8_t v94 = 153ull;
  uint8_t v95 = 153ull;
  uint8_t v96 = 153ull;
  uint8_t v97 = 153ull;
  uint8_t v98 = 153ull;
  uint8_t v99 = 153ull;
  uint8_t v100 = 153ull;
  uint8_t v101 = 153ull;
  uint8_t v102 = 153ull;
  uint8_t v103 = 153ull;
  uint8_t v104 = 153ull;
  uint8_t v105 = 153ull;
  uint8_t v106 = 153ull;
  uint8_t v107 = 153ull;
  uint8_t v108 = 153ull;
  auto v109 = fidl::Array<uint8_t, 32>{
      std::move(v77),  std::move(v78),  std::move(v79),  std::move(v80),  std::move(v81),
      std::move(v82),  std::move(v83),  std::move(v84),  std::move(v85),  std::move(v86),
      std::move(v87),  std::move(v88),  std::move(v89),  std::move(v90),  std::move(v91),
      std::move(v92),  std::move(v93),  std::move(v94),  std::move(v95),  std::move(v96),
      std::move(v97),  std::move(v98),  std::move(v99),  std::move(v100), std::move(v101),
      std::move(v102), std::move(v103), std::move(v104), std::move(v105), std::move(v106),
      std::move(v107), std::move(v108)};
  v76.set_variant(&v109);
  v1.u3 = std::move(v76);
  uint64_t v110 = 12297829382473034410ull;
  v1.f7 = std::move(v110);
  llcpp::conformance::Size8Align8 v111{};
  uint64_t v112 = 17216961135462248174ull;
  v111.data = std::move(v112);
  v1.p1 = std::move(&v111);
  uint64_t v113 = 13527612320720337851ull;
  v1.f8 = std::move(v113);
  llcpp::conformance::Size8Align8 v114{};
  uint64_t v115 = 17216961135462248174ull;
  v114.data = std::move(v115);
  v1.p2 = std::move(&v114);
  uint64_t v116 = 15987178197214944733ull;
  v1.f9 = std::move(v116);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
      0x22, 0x03, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
      0x44, 0x44, 0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x03, 0x00, 0x00,
      0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
      0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x03, 0x00, 0x00, 0x00, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x00,
      0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xee, 0xee,
      0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, OutOfLineSandwich1Case1_Old_Encode) {
  llcpp::conformance::OutOfLineSandwich1 v1{};
  fidl::StringView v2("soft migrations rock!", 21);
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1 v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  llcpp::conformance::UnionSize8Align4 v5;
  uint32_t v6 = 202050057ull;
  v5.set_variant(&v6);
  v3.the_union = std::move(v5);
  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  auto v8 = fidl::Array<llcpp::conformance::Sandwich1, 1>{std::move(v3)};
  auto v9 = fidl::VectorView<llcpp::conformance::Sandwich1>(v8.data(), 1);
  v1.v = std::move(v9);
  fidl::StringView v10("hard transitions suck!", 22);
  v1.after = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67,
      0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x05, 0x06, 0x07, 0x08, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
      0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionPresent_Old_Encode) {
  llcpp::conformance::OutOfLineSandwich1WithOptUnion v1{};
  fidl::StringView v2("soft migrations rock!", 21);
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1WithOptUnion v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  llcpp::conformance::UnionSize8Align4 v5;
  uint32_t v6 = 202050057ull;
  v5.set_variant(&v6);
  v3.opt_union = std::move(&v5);
  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  auto v8 = fidl::Array<llcpp::conformance::Sandwich1WithOptUnion, 1>{std::move(v3)};
  auto v9 = fidl::VectorView<llcpp::conformance::Sandwich1WithOptUnion>(v8.data(), 1);
  v1.v = std::move(v9);
  fidl::StringView v10("hard transitions suck!", 22);
  v1.after = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x68,
      0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
      0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionAbsent_Old_Encode) {
  llcpp::conformance::OutOfLineSandwich1WithOptUnion v1{};
  fidl::StringView v2("soft migrations rock!", 21);
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1WithOptUnion v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  uint32_t v5 = 134678021ull;
  v3.after = std::move(v5);
  auto v6 = fidl::Array<llcpp::conformance::Sandwich1WithOptUnion, 1>{std::move(v3)};
  auto v7 = fidl::VectorView<llcpp::conformance::Sandwich1WithOptUnion>(v6.data(), 1);
  v1.v = std::move(v7);
  fidl::StringView v8("hard transitions suck!", 22);
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e,
      0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression4_Old_Encode) {
  llcpp::conformance::Regression4 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v1.s1 = std::move(v4);
  uint8_t v9 = 3ull;
  v1.f3 = std::move(v9);
  uint16_t v10 = 4ull;
  v1.f4 = std::move(v10);
  uint64_t v11 = 5ull;
  v1.f5 = std::move(v11);
  uint8_t v12 = 6ull;
  v1.f6 = std::move(v12);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x03, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression5Enums_Old_Encode) {
  llcpp::conformance::Regression5 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 842084399ull;
  v1.f2 = std::move(v3);
  uint8_t v4 = 8ull;
  v1.f3 = std::move(v4);
  uint16_t v5 = 5653ull;
  v1.f4 = std::move(v5);
  uint64_t v6 = 7233733596855361117ull;
  v1.f5 = std::move(v6);
  uint8_t v7 = 8ull;
  v1.f6 = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x2f, 0x30, 0x31, 0x32, 0x08, 0x00, 0x15,
      0x16, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62,
      0x63, 0x64, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression6Bits_Old_Encode) {
  llcpp::conformance::Regression6 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 842084399ull;
  v1.f2 = std::move(v3);
  uint8_t v4 = 8ull;
  v1.f3 = std::move(v4);
  uint16_t v5 = 5653ull;
  v1.f4 = std::move(v5);
  uint64_t v6 = 7233733596855361117ull;
  v1.f5 = std::move(v6);
  uint8_t v7 = 8ull;
  v1.f6 = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x2f, 0x30, 0x31, 0x32, 0x08, 0x00, 0x15,
      0x16, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62,
      0x63, 0x64, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression7TableUnionXUnion_Old_Encode) {
  llcpp::conformance::Regression7TableUnionXUnion v1{};
  auto v2 = llcpp::conformance::TableOfUnionThenXUnionThenTableThenXUnionThenUnion::Build();
  llcpp::conformance::UnionOfXUnionThenTableThenXUnionThenUnion v3;
  llcpp::conformance::XUnionOfTableThenXUnionThenUnion v4;
  auto v5 = llcpp::conformance::TableOfXUnionThenUnion::Build();
  llcpp::conformance::XUnionOfUnion v6;
  llcpp::conformance::UnionAtTheBottom v7;
  uint8_t v8 = 8ull;
  v7.set_tiny(&v8);
  v6.set_variant(&v7);
  v5.set_member(&v6);
  auto v9 = v5.view();
  v4.set_variant(&v9);
  v3.set_variant(&v4);
  v2.set_member(&v3);
  auto v10 = v2.view();
  v1.value = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x61, 0xb8,
      0x22, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x94, 0x05, 0x22, 0x38, 0x00, 0x00,
      0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression8OptUnionSize12Aligned4_Old_Encode) {
  llcpp::conformance::Regression8OptUnionSize12Align4 v1{};
  llcpp::conformance::UnionSize12Align4 v2;
  uint8_t v3 = 161ull;
  uint8_t v4 = 162ull;
  uint8_t v5 = 163ull;
  uint8_t v6 = 164ull;
  uint8_t v7 = 165ull;
  uint8_t v8 = 166ull;
  auto v9 = fidl::Array<uint8_t, 6>{std::move(v3), std::move(v4), std::move(v5),
                                    std::move(v6), std::move(v7), std::move(v8)};
  v2.set_variant(&v9);
  v1.opt_union1 = std::move(&v2);
  llcpp::conformance::UnionSize12Align4 v10;
  uint8_t v11 = 177ull;
  uint8_t v12 = 178ull;
  uint8_t v13 = 179ull;
  uint8_t v14 = 180ull;
  uint8_t v15 = 181ull;
  uint8_t v16 = 182ull;
  auto v17 = fidl::Array<uint8_t, 6>{std::move(v11), std::move(v12), std::move(v13),
                                     std::move(v14), std::move(v15), std::move(v16)};
  v10.set_variant(&v17);
  v1.opt_union3 = std::move(&v10);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00,
      0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x00, 0x00, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression8VectorOfOptUnionSize12Aligned4_Old_Encode) {
  llcpp::conformance::Regression8VectorOfOptUnionSize12Align4 v1{};
  llcpp::conformance::UnionSize12Align4* v2{};
  llcpp::conformance::UnionSize12Align4 v3;
  uint8_t v4 = 161ull;
  uint8_t v5 = 162ull;
  uint8_t v6 = 163ull;
  uint8_t v7 = 164ull;
  uint8_t v8 = 165ull;
  uint8_t v9 = 166ull;
  auto v10 = fidl::Array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                     std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(&v10);
  llcpp::conformance::UnionSize12Align4* v11{};
  llcpp::conformance::UnionSize12Align4 v12;
  uint8_t v13 = 177ull;
  uint8_t v14 = 178ull;
  uint8_t v15 = 179ull;
  uint8_t v16 = 180ull;
  uint8_t v17 = 181ull;
  uint8_t v18 = 182ull;
  auto v19 = fidl::Array<uint8_t, 6>{std::move(v13), std::move(v14), std::move(v15),
                                     std::move(v16), std::move(v17), std::move(v18)};
  v12.set_variant(&v19);
  llcpp::conformance::UnionSize12Align4* v20{};
  auto v21 = fidl::Array<llcpp::conformance::UnionSize12Align4*, 5>{
      std::move(v2), std::move(&v3), std::move(v11), std::move(&v12), std::move(v20)};
  auto v22 = fidl::VectorView<llcpp::conformance::UnionSize12Align4*>(v21.data(), 5);
  v1.value = std::move(v22);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
      0x00, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression8TableWithUnionSize12Aligned4_Old_Encode) {
  llcpp::conformance::Regression8TableWithUnionSize12Align4 v1{};
  auto v2 = llcpp::conformance::TableWithUnionSize12Align4::Build();
  uint8_t v3 = 170ull;
  v2.set_before(&v3);
  llcpp::conformance::UnionSize12Align4 v4;
  uint8_t v5 = 177ull;
  uint8_t v6 = 178ull;
  uint8_t v7 = 179ull;
  uint8_t v8 = 180ull;
  uint8_t v9 = 181ull;
  uint8_t v10 = 182ull;
  auto v11 = fidl::Array<uint8_t, 6>{std::move(v5), std::move(v6), std::move(v7),
                                     std::move(v8), std::move(v9), std::move(v10)};
  v4.set_variant(&v11);
  v2.set_member(&v4);
  uint8_t v12 = 187ull;
  v2.set_after(&v12);
  auto v13 = v2.view();
  v1.value = std::move(v13);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
      0x00, 0x00, 0x00, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Regression9Response_Old_Encode) {
  llcpp::conformance::Regression9Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 1ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 1ull;
  uint8_t v5 = 0ull;
  uint8_t v6 = 0ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 1ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 6254313960342814720ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Regression9Result v10;
  llcpp::conformance::Regression9Value v11{};
  llcpp::conformance::StringBoolUnion v12;
  fidl::StringView v13("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 32);
  v12.set_s(&v13);
  v11.u = std::move(v12);
  llcpp::conformance::StringBoolUnion v14;
  bool v15 = false;
  v14.set_b(&v15);
  v11.nullable_u = std::move(&v14);
  v10.set_ok(&v11);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x69, 0xc9,
      0xcb, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich4Align8_Old_Encode) {
  llcpp::conformance::Sandwich4Align8 v1{};
  llcpp::conformance::Sandwich4 v2{};
  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);
  llcpp::conformance::UnionSize36Align4 v4;
  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = fidl::Array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(&v37);
  v2.the_union = std::move(v4);
  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);
  uint64_t v39 = 1157159078456920585ull;
  v1.alignment8_enforcement = std::move(v39);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
      0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich4Align8WithPointer_Old_Encode) {
  llcpp::conformance::Sandwich4Align8WithPointer v1{};
  llcpp::conformance::Sandwich4 v2{};
  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);
  llcpp::conformance::UnionSize36Align4 v4;
  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = fidl::Array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(&v37);
  v2.the_union = std::move(v4);
  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);
  llcpp::conformance::Size8Align8 v39{};
  uint64_t v40 = 1157159078456920585ull;
  v39.data = std::move(v40);
  v1.alignment8_enforcement = std::move(&v39);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4,
      0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1,
      0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe,
      0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich8Case1_Old_Encode) {
  llcpp::conformance::Sandwich8 v1{};
  uint64_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionOfUnion v3;
  llcpp::conformance::UnionSize8Align4 v4;
  uint32_t v5 = 202050057ull;
  v4.set_variant(&v5);
  v3.set_size8align4(&v4);
  v1.union_of_union = std::move(v3);
  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, Sandwich9Case1_Old_Encode) {
  llcpp::conformance::Sandwich9 v1{};
  uint16_t v2 = 513ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVectorOfVectors v3;
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 16ull;
  uint8_t v6 = 17ull;
  uint8_t v7 = 18ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 19ull;
  uint8_t v11 = 20ull;
  uint8_t v12 = 21ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = fidl::Array<llcpp::conformance::StructSize3Align1*, 2>{std::move(&v4), std::move(&v9)};
  auto v15 = fidl::VectorView<llcpp::conformance::StructSize3Align1*>(v14.data(), 2);
  auto v16 =
      fidl::Array<fidl::VectorView<llcpp::conformance::StructSize3Align1*>, 1>{std::move(v15)};
  auto v17 =
      fidl::VectorView<fidl::VectorView<llcpp::conformance::StructSize3Align1*>>(v16.data(), 1);
  v3.set_v(&v17);
  v1.the_union = std::move(v3);
  uint16_t v18 = 4625ull;
  v1.after = std::move(v18);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0x11, 0x12,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, SimpleTableArrayStruct_Old_Encode) {
  llcpp::conformance::SimpleTableArrayStruct v1{};
  auto v2 = llcpp::conformance::TransformerSimpleTable::Build();
  uint32_t v3 = 2745344416ull;
  v2.set_value(&v3);
  auto v4 = v2.view();
  auto v5 = llcpp::conformance::TransformerSimpleTable::Build();
  uint32_t v6 = 3014832560ull;
  v5.set_value(&v6);
  auto v7 = v5.view();
  auto v8 =
      fidl::Array<llcpp::conformance::TransformerSimpleTable, 2>{std::move(v4), std::move(v7)};
  v1.the_array = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb0, 0xb1, 0xb2, 0xb3, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, StringUnionVector_Old_Encode) {
  llcpp::conformance::StringUnionVector v1{};
  llcpp::conformance::StringUnion v2;
  fidl::StringView v3("hello", 5);
  v2.set_s(&v3);
  llcpp::conformance::StringUnion v4;
  uint8_t v5 = 170ull;
  v4.set_u8(&v5);
  llcpp::conformance::StringUnion v6;
  uint8_t v7 = 187ull;
  v6.set_u8(&v7);
  auto v8 = fidl::Array<llcpp::conformance::StringUnion*, 3>{std::move(&v2), std::move(&v4),
                                                             std::move(&v6)};
  auto v9 = fidl::VectorView<llcpp::conformance::StringUnion*>(v8.data(), 3);
  v1.the_vector = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, StringUnionStructWrapperResponse_Old_Encode) {
  llcpp::conformance::StringUnionStructWrapperResponse v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 0ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 1ull;
  uint8_t v5 = 0ull;
  uint8_t v6 = 0ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 1ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 3647970832665280512ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::StringUnionStructWrapper v10{};
  llcpp::conformance::StringUnionStruct v11{};
  llcpp::conformance::StringBoolUnion v12;
  fidl::StringView v13("hello", 5);
  v12.set_s(&v13);
  v11.u = std::move(v12);
  llcpp::conformance::StringBoolUnion v14;
  bool v15 = true;
  v14.set_b(&v15);
  v11.nullable_u = std::move(&v14);
  v10.sus = std::move(v11);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x25, 0x32,
      0xa0, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, RegressionNoUnionLauncherCreateComponentRequest_Old_Encode) {
  llcpp::conformance::CreateComponentRequest v1{};
  llcpp::conformance::LaunchInfo v2{};
  fidl::StringView v3(
      "fuchsia-pkg://fuchsia.com/fidl_compatibility_test_server_rust_write_xunion#meta/"
      "fidl_compatibility_test_server_rust_write_xunion.cmx",
      132);
  v2.url = std::move(v3);
  uint32_t v4 = 4294967295ull;
  v2.directory_request = std::move(v4);
  v1.launch_info = std::move(v2);
  uint32_t v5 = 4294967295ull;
  v1.controller = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2d, 0x70, 0x6b,
      0x67, 0x3a, 0x2f, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
      0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
      0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
      0x72, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75,
      0x6e, 0x69, 0x6f, 0x6e, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f,
      0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
      0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x73, 0x74,
      0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
      0x6d, 0x78, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, CompatTable_Old_Encode) {
  llcpp::conformance::CompatTable v1{};
  auto v2 = llcpp::conformance::CompatTableValue::Build();
  llcpp::conformance::CompatUnion v3;
  bool v4 = true;
  v3.set_b(&v4);
  v2.set_union_member(&v3);
  uint32_t v5 = 1361667997ull;
  uint32_t v6 = 2492576910ull;
  uint32_t v7 = 2480020305ull;
  auto v8 = fidl::Array<uint32_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v2.set_array_member(&v8);
  auto v9 = llcpp::conformance::CompatTableString::Build();
  fidl::StringView v10("AB", 2);
  v9.set_s(&v10);
  auto v11 = v9.view();
  v2.set_table_member(&v11);
  llcpp::conformance::CompatXUnion v12;
  fidl::StringView v13("CD", 2);
  v12.set_s(&v13);
  v2.set_xunion_member(&v12);
  auto v14 = v2.view();
  v1.value = std::move(v14);
  fidl::StringView v15("", 0);
  v1.empty = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x9d, 0x67, 0x29, 0x51, 0x8e, 0xb4, 0x91, 0x94, 0x51, 0x1b, 0xd2, 0x93, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x41, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xef, 0xf8,
      0x5a, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, MixedFields_Old_Encode) {
  llcpp::conformance::MixedFieldsMessage v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::MixedFieldsBody v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionSize8Align4 v12;
  uint32_t v13 = 202050057ull;
  v12.set_variant(&v13);
  v10.first_union = std::move(v12);
  uint16_t v14 = 2826ull;
  v10.middle_start = std::move(v14);
  uint64_t v15 = 72623859790382856ull;
  v10.middle_end = std::move(v15);
  llcpp::conformance::UnionSize8Align4 v16;
  uint32_t v17 = 3232800912ull;
  v16.set_variant(&v17);
  v10.second_union = std::move(v16);
  uint32_t v18 = 134678021ull;
  v10.after = std::move(v18);
  v1.body = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
      0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x0a, 0x0b, 0x00, 0x00, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x02, 0x00,
      0x00, 0x00, 0x90, 0xa0, 0xb0, 0xc0, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, TableWithXUnion_Old_Encode) {
  llcpp::conformance::StructOfTableWithXUnion v1{};
  auto v2 = llcpp::conformance::TableWithXUnion::Build();
  llcpp::conformance::CompatXUnion v3;
  fidl::StringView v4("AB", 2);
  v3.set_s(&v4);
  v2.set_member(&v3);
  auto v5 = v2.view();
  v1.value = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xa8, 0xef, 0xf8, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x41, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, UnionWithBoundString_Old_Encode) {
  llcpp::conformance::UnionWithBoundStringStruct v1{};
  llcpp::conformance::UnionWithBoundString v2;
  fidl::StringView v3("abcd", 4);
  v2.set_boundFiveStr(&v3);
  v1.v = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x61, 0x62, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, UnionMigration_SingleVariant_Old_Encode) {
  llcpp::conformance::SingleVariantUnionStruct v1{};
  llcpp::conformance::SingleVariantUnion v2;
  uint32_t v3 = 42ull;
  v2.set_x(&v3);
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, ReverseOrdinalUnion_Old_Encode) {
  llcpp::conformance::ReverseOrdinalUnionStruct v1{};
  llcpp::conformance::ReverseOrdinalUnion v2;
  int64_t v3 = 42ull;
  v2.set_x(&v3);
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(&v1, expected));
}

TEST(Conformance, 3ByteObjectAlignmentInStruct_Old_Decode) {
  llcpp::conformance::ThreeByteInStruct v1{};
  llcpp::conformance::ThreeByte v2{};
  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  v1.elem1 = std::move(v2);
  llcpp::conformance::ThreeByte v6{};
  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);
  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);
  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  v1.elem2 = std::move(v6);
  llcpp::conformance::ThreeByte v10{};
  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);
  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);
  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  v1.elem3 = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, 5ByteObjectAlignmentInStruct_Old_Decode) {
  llcpp::conformance::FiveByteInStruct v1{};
  llcpp::conformance::FiveByte v2{};
  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  v1.elem1 = std::move(v2);
  llcpp::conformance::FiveByte v5{};
  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);
  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  v1.elem2 = std::move(v5);
  llcpp::conformance::FiveByte v8{};
  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);
  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  v1.elem3 = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Old_Decode) {
  llcpp::conformance::ThreeByteInVector v1{};
  llcpp::conformance::ThreeByte v2{};
  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  llcpp::conformance::ThreeByte v6{};
  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);
  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);
  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  llcpp::conformance::ThreeByte v10{};
  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);
  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);
  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  auto v14 =
      fidl::Array<llcpp::conformance::ThreeByte, 3>{std::move(v2), std::move(v6), std::move(v10)};
  auto v15 = fidl::VectorView<llcpp::conformance::ThreeByte>(v14.data(), 3);
  v1.elems = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Old_Decode) {
  llcpp::conformance::FiveByteInVector v1{};
  llcpp::conformance::FiveByte v2{};
  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  llcpp::conformance::FiveByte v5{};
  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);
  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  llcpp::conformance::FiveByte v8{};
  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);
  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  auto v11 =
      fidl::Array<llcpp::conformance::FiveByte, 3>{std::move(v2), std::move(v5), std::move(v8)};
  auto v12 = fidl::VectorView<llcpp::conformance::FiveByte>(v11.data(), 3);
  v1.elems = std::move(v12);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, 3ByteObjectAlignmentInArray_Old_Decode) {
  llcpp::conformance::ThreeByteInArray v1{};
  llcpp::conformance::ThreeByte v2{};
  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  llcpp::conformance::ThreeByte v6{};
  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);
  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);
  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  llcpp::conformance::ThreeByte v10{};
  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);
  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);
  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  auto v14 =
      fidl::Array<llcpp::conformance::ThreeByte, 3>{std::move(v2), std::move(v6), std::move(v10)};
  v1.elems = std::move(v14);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Old_Decode) {
  llcpp::conformance::FiveByteInArray v1{};
  llcpp::conformance::FiveByte v2{};
  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);
  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  llcpp::conformance::FiveByte v5{};
  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);
  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  llcpp::conformance::FiveByte v8{};
  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);
  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  auto v11 =
      fidl::Array<llcpp::conformance::FiveByte, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.elems = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, EmptyStruct_Old_Decode) {
  llcpp::conformance::EmptyStruct v1{};

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, EmptyStructSandwich_Old_Decode) {
  llcpp::conformance::EmptyStructSandwich v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  llcpp::conformance::EmptyStruct v3{};
  v1.es = std::move(v3);
  fidl::StringView v4("after", 5);
  v1.after = std::move(v4);

  auto bytes = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65,
      0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Old_Decode) {
  llcpp::conformance::Uint8Uint16Uint32Uint64 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint16_t v3 = 515ull;
  v1.f2 = std::move(v3);
  uint32_t v4 = 67438087ull;
  v1.f3 = std::move(v4);
  uint64_t v5 = 579005069656919567ull;
  v1.f4 = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04,
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Old_Decode) {
  llcpp::conformance::Uint64Uint32Uint16Uint8 v1{};
  uint64_t v2 = 579005069656919567ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 67438087ull;
  v1.f2 = std::move(v3);
  uint16_t v4 = 515ull;
  v1.f3 = std::move(v4);
  uint8_t v5 = 1ull;
  v1.f4 = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, SimpleTableEmpty_Old_Decode) {
  llcpp::conformance::StructOfSimpleTable v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  auto v3 = v2.view();
  v1.table = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, SimpleTableXAndY_Old_Decode) {
  llcpp::conformance::StructOfSimpleTable v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  int64_t v3 = 42ull;
  v2.set_x(&v3);
  int64_t v4 = 67ull;
  v2.set_y(&v4);
  auto v5 = v2.view();
  v1.table = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, SimpleTableJustY_Old_Decode) {
  llcpp::conformance::StructOfSimpleTable v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  int64_t v3 = 67ull;
  v2.set_y(&v3);
  auto v4 = v2.view();
  v1.table = std::move(v4);

  auto bytes = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Old_Decode) {
  llcpp::conformance::StructOfTableWithStringAndVector v1{};
  auto v2 = llcpp::conformance::TableWithStringAndVector::Build();
  fidl::StringView v3("hello", 5);
  v2.set_foo(&v3);
  int32_t v4 = 27ull;
  v2.set_bar(&v4);
  auto v5 = v2.view();
  v1.table = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00,
      0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, SimpleTableThenUint64_Old_Decode) {
  llcpp::conformance::SimpleTableThenUint64 v1{};
  auto v2 = llcpp::conformance::SimpleTable::Build();
  int64_t v3 = 42ull;
  v2.set_x(&v3);
  int64_t v4 = 67ull;
  v2.set_y(&v4);
  auto v5 = v2.view();
  v1.table = std::move(v5);
  uint64_t v6 = 16045690984833335023ull;
  v1.number = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, ReverseOrdinalTable_Old_Decode) {
  llcpp::conformance::StructOfReverseOrdinalTable v1{};
  auto v2 = llcpp::conformance::ReverseOrdinalTable::Build();
  int64_t v3 = 170ull;
  v2.set_x(&v3);
  int64_t v4 = 187ull;
  v2.set_y(&v4);
  int64_t v5 = 204ull;
  v2.set_z(&v5);
  auto v6 = v2.view();
  v1.table = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, InlineXUnionInStruct_Old_Decode) {
  llcpp::conformance::TestInlineXUnionInStruct v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  llcpp::conformance::SampleXUnion v3;
  uint32_t v4 = 3735928559ull;
  v3.set_u(&v4);
  v1.xu = std::move(v3);
  fidl::StringView v5("after", 5);
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, OptionalXUnionInStructAbsent_Old_Decode) {
  llcpp::conformance::TestOptionalXUnionInStruct v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  fidl::StringView v3("after", 5);
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, OptionalXUnionInStructPresent_Old_Decode) {
  llcpp::conformance::TestOptionalXUnionInStruct v1{};
  fidl::StringView v2("before", 6);
  v1.before = std::move(v2);
  llcpp::conformance::SampleXUnion v3;
  uint32_t v4 = 3735928559ull;
  v3.set_u(&v4);
  v1.xu = std::move(v3);
  fidl::StringView v5("after", 5);
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, XUnionInTableXUnionAbsent_Old_Decode) {
  llcpp::conformance::TestXUnionInTable v1{};
  auto v2 = llcpp::conformance::XUnionInTable::Build();
  fidl::StringView v3("before", 6);
  v2.set_before(&v3);
  fidl::StringView v4("after", 5);
  v2.set_after(&v4);
  auto v5 = v2.view();
  v1.value = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, XUnionInTableXUnionPresent_Old_Decode) {
  llcpp::conformance::TestXUnionInTable v1{};
  auto v2 = llcpp::conformance::XUnionInTable::Build();
  fidl::StringView v3("before", 6);
  v2.set_before(&v3);
  llcpp::conformance::SampleXUnion v4;
  uint32_t v5 = 3735928559ull;
  v4.set_u(&v5);
  v2.set_xu(&v4);
  fidl::StringView v6("after", 5);
  v2.set_after(&v6);
  auto v7 = v2.view();
  v1.value = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2, 0x56,
      0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, StrictXUnion_Old_Decode) {
  llcpp::conformance::TestStrictXUnionInStruct v1{};
  llcpp::conformance::SampleStrictXUnion v2;
  uint32_t v3 = 3735928559ull;
  v2.set_u(&v3);
  v1.xu = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, AddEthernetDeviceRequest_Old_Decode) {
  llcpp::conformance::TestAddEthernetDeviceRequest v1{};
  fidl::StringView v2("@/dev/sys/pci/00:03.0/e1000/ethernet", 36);
  v1.topological_path = std::move(v2);
  llcpp::conformance::InterfaceConfig v3{};
  fidl::StringView v4("ethp0003", 8);
  v3.name = std::move(v4);
  llcpp::conformance::IpAddressConfig v5;
  bool v6 = true;
  v5.set_dhcp(&v6);
  v3.ip_address_config = std::move(v5);
  v1.config = std::move(v3);
  uint32_t v7 = 4294967295ull;
  v1.this_should_be_a_handle = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64,
      0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
      0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, FileGetAttrResponse_Old_Decode) {
  llcpp::conformance::FileGetAttrResponse v1{};
  int32_t v2 = 2125315759ull;
  v1.s = std::move(v2);
  llcpp::conformance::NodeAttributes v3{};
  uint32_t v4 = 2518909348ull;
  v3.mode = std::move(v4);
  uint64_t v5 = 1ull;
  v3.id = std::move(v5);
  uint64_t v6 = 231ull;
  v3.content_size = std::move(v6);
  uint64_t v7 = 231ull;
  v3.storage_size = std::move(v7);
  uint64_t v8 = 1ull;
  v3.link_count = std::move(v8);
  uint64_t v9 = 9833440827789222417ull;
  v3.creation_time = std::move(v9);
  uint64_t v10 = 72038755451251353ull;
  v3.modification_time = std::move(v10);
  v1.attributes = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Optionals_Old_Decode) {
  llcpp::conformance::StructWithOptionals v1{};
  llcpp::conformance::EmptyStruct v2{};
  v1.s = std::move(v2);
  llcpp::conformance::EmptyStruct v3{};
  v1.s2 = std::move(&v3);
  auto v4 = llcpp::conformance::TableWithEmptyStruct::Build();
  llcpp::conformance::EmptyStruct v5{};
  v4.set_s(&v5);
  auto v6 = v4.view();
  v1.t = std::move(v6);
  llcpp::conformance::XUnionWithEmptyStruct v7;
  llcpp::conformance::EmptyStruct v8{};
  v7.set_s(&v8);
  v1.xu = std::move(v7);
  llcpp::conformance::XUnionWithEmptyStruct v9;
  llcpp::conformance::EmptyStruct v10{};
  v9.set_s(&v10);
  v1.xu2 = std::move(v9);
  llcpp::conformance::UnionWithEmptyStruct v11;
  llcpp::conformance::EmptyStruct v12{};
  v11.set_s(&v12);
  v1.u = std::move(v11);
  llcpp::conformance::UnionWithEmptyStruct v13;
  llcpp::conformance::EmptyStruct v14{};
  v13.set_s(&v14);
  v1.u2 = std::move(&v13);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Arrays_Old_Decode) {
  llcpp::conformance::StructWithArrays v1{};
  int32_t v2 = 1ull;
  int32_t v3 = 2ull;
  auto v4 = fidl::Array<int32_t, 2>{std::move(v2), std::move(v3)};
  v1.arr_int = std::move(v4);
  fidl::StringView v5("a", 1);
  fidl::StringView v6("b", 1);
  auto v7 = fidl::Array<fidl::StringView, 2>{std::move(v5), std::move(v6)};
  v1.arr_string = std::move(v7);
  fidl::StringView v8("c", 1);
  fidl::StringView v9{};
  auto v10 = fidl::Array<fidl::StringView, 2>{std::move(v8), std::move(v9)};
  v1.arr_nullable_string = std::move(v10);
  llcpp::conformance::StructWithInt v11{};
  int32_t v12 = 1ull;
  v11.x = std::move(v12);
  llcpp::conformance::StructWithInt v13{};
  int32_t v14 = 2ull;
  v13.x = std::move(v14);
  auto v15 = fidl::Array<llcpp::conformance::StructWithInt, 2>{std::move(v11), std::move(v13)};
  v1.arr_struct = std::move(v15);
  llcpp::conformance::StructWithInt* v16{};
  llcpp::conformance::StructWithInt v17{};
  int32_t v18 = 16909060ull;
  v17.x = std::move(v18);
  auto v19 = fidl::Array<llcpp::conformance::StructWithInt*, 2>{std::move(v16), std::move(&v17)};
  v1.arr_nullable_struct = std::move(v19);
  int32_t v20 = 1ull;
  int32_t v21 = 2ull;
  int32_t v22 = 3ull;
  auto v23 = fidl::Array<int32_t, 3>{std::move(v20), std::move(v21), std::move(v22)};
  int32_t v24 = 4ull;
  int32_t v25 = 5ull;
  int32_t v26 = 6ull;
  auto v27 = fidl::Array<int32_t, 3>{std::move(v24), std::move(v25), std::move(v26)};
  auto v28 = fidl::Array<fidl::Array<int32_t, 3>, 2>{std::move(v23), std::move(v27)};
  v1.arr_arr_int = std::move(v28);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Vectors_Old_Decode) {
  llcpp::conformance::StructWithVectors v1{};
  auto v2 = fidl::VectorView<int32_t>();
  v1.vec_empty = std::move(v2);
  int32_t v3 = 1ull;
  int32_t v4 = 2ull;
  auto v5 = fidl::Array<int32_t, 2>{std::move(v3), std::move(v4)};
  auto v6 = fidl::VectorView<int32_t>(v5.data(), 2);
  v1.vec_int = std::move(v6);
  fidl::StringView v7("a", 1);
  fidl::StringView v8("b", 1);
  auto v9 = fidl::Array<fidl::StringView, 2>{std::move(v7), std::move(v8)};
  auto v10 = fidl::VectorView<fidl::StringView>(v9.data(), 2);
  v1.vec_string = std::move(v10);
  fidl::StringView v11{};
  fidl::StringView v12("c", 1);
  fidl::StringView v13{};
  auto v14 = fidl::Array<fidl::StringView, 3>{std::move(v11), std::move(v12), std::move(v13)};
  auto v15 = fidl::VectorView<fidl::StringView>(v14.data(), 3);
  v1.vec_nullable_string = std::move(v15);
  llcpp::conformance::StructWithInt v16{};
  int32_t v17 = 1ull;
  v16.x = std::move(v17);
  auto v18 = fidl::Array<llcpp::conformance::StructWithInt, 1>{std::move(v16)};
  auto v19 = fidl::VectorView<llcpp::conformance::StructWithInt>(v18.data(), 1);
  v1.vec_struct = std::move(v19);
  llcpp::conformance::StructWithInt* v20{};
  llcpp::conformance::StructWithInt* v21{};
  llcpp::conformance::StructWithInt v22{};
  int32_t v23 = 2ull;
  v22.x = std::move(v23);
  auto v24 = fidl::Array<llcpp::conformance::StructWithInt*, 3>{std::move(v20), std::move(v21),
                                                                std::move(&v22)};
  auto v25 = fidl::VectorView<llcpp::conformance::StructWithInt*>(v24.data(), 3);
  v1.vec_nullable_struct = std::move(v25);
  int32_t v26 = 1ull;
  int32_t v27 = 2ull;
  auto v28 = fidl::Array<int32_t, 2>{std::move(v26), std::move(v27)};
  auto v29 = fidl::VectorView<int32_t>(v28.data(), 2);
  int32_t v30 = 3ull;
  auto v31 = fidl::Array<int32_t, 1>{std::move(v30)};
  auto v32 = fidl::VectorView<int32_t>(v31.data(), 1);
  auto v33 = fidl::Array<fidl::VectorView<int32_t>, 2>{std::move(v29), std::move(v32)};
  auto v34 = fidl::VectorView<fidl::VectorView<int32_t>>(v33.data(), 2);
  v1.vec_vec_int = std::move(v34);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, BoolTrue_Old_Decode) {
  llcpp::conformance::MyBool v1{};
  bool v2 = true;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, BoolFalse_Old_Decode) {
  llcpp::conformance::MyBool v1{};
  bool v2 = false;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, ByteZero_Old_Decode) {
  llcpp::conformance::MyByte v1{};
  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Byte255_Old_Decode) {
  llcpp::conformance::MyByte v1{};
  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int8Min_Old_Decode) {
  llcpp::conformance::MyInt8 v1{};
  int8_t v2 = -128ll;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int8Zero_Old_Decode) {
  llcpp::conformance::MyInt8 v1{};
  int8_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int8Max_Old_Decode) {
  llcpp::conformance::MyInt8 v1{};
  int8_t v2 = 127ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int16Min_Old_Decode) {
  llcpp::conformance::MyInt16 v1{};
  int16_t v2 = -32768ll;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int16Zero_Old_Decode) {
  llcpp::conformance::MyInt16 v1{};
  int16_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int16Max_Old_Decode) {
  llcpp::conformance::MyInt16 v1{};
  int16_t v2 = 32767ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int32Min_Old_Decode) {
  llcpp::conformance::MyInt32 v1{};
  int32_t v2 = -2147483648ll;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int32Zero_Old_Decode) {
  llcpp::conformance::MyInt32 v1{};
  int32_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int32Max_Old_Decode) {
  llcpp::conformance::MyInt32 v1{};
  int32_t v2 = 2147483647ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int64Min_Old_Decode) {
  llcpp::conformance::MyInt64 v1{};
  int64_t v2 = -9223372036854775807ll - 1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int64Zero_Old_Decode) {
  llcpp::conformance::MyInt64 v1{};
  int64_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Int64Max_Old_Decode) {
  llcpp::conformance::MyInt64 v1{};
  int64_t v2 = 9223372036854775807ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint8Zero_Old_Decode) {
  llcpp::conformance::MyUint8 v1{};
  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint8Max_Old_Decode) {
  llcpp::conformance::MyUint8 v1{};
  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint16Zero_Old_Decode) {
  llcpp::conformance::MyUint16 v1{};
  uint16_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint16Max_Old_Decode) {
  llcpp::conformance::MyUint16 v1{};
  uint16_t v2 = 65535ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint32Zero_Old_Decode) {
  llcpp::conformance::MyUint32 v1{};
  uint32_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint32Max_Old_Decode) {
  llcpp::conformance::MyUint32 v1{};
  uint32_t v2 = 4294967295ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint64Zero_Old_Decode) {
  llcpp::conformance::MyUint64 v1{};
  uint64_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Uint64Max_Old_Decode) {
  llcpp::conformance::MyUint64 v1{};
  uint64_t v2 = 18446744073709551615ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float32Zero_Old_Decode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = 0;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float32One_Old_Decode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = 1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float32MinusOne_Old_Decode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = -1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float32Max_Old_Decode) {
  llcpp::conformance::MyFloat32 v1{};
  float v2 = 3.4028234663852886e+38;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float64Zero_Old_Decode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = 0;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float64One_Old_Decode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = 1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float64MinusOne_Old_Decode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = -1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Float64Max_Old_Decode) {
  llcpp::conformance::MyFloat64 v1{};
  double v2 = 1.7976931348623157e+308;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich1Case1_Old_Decode) {
  llcpp::conformance::Sandwich1 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize8Align4 v3;
  uint32_t v4 = 202050057ull;
  v3.set_variant(&v4);
  v1.the_union = std::move(v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00,
      0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich1Case1WithHdr_Old_Decode) {
  llcpp::conformance::Sandwich1Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich1 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionSize8Align4 v12;
  uint32_t v13 = 202050057ull;
  v12.set_variant(&v13);
  v10.the_union = std::move(v12);
  uint32_t v14 = 134678021ull;
  v10.after = std::move(v14);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa,
      0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00,
      0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich1WithOptUnionPresent_Old_Decode) {
  llcpp::conformance::Sandwich1WithOptUnion v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize8Align4 v3;
  uint32_t v4 = 202050057ull;
  v3.set_variant(&v4);
  v1.opt_union = std::move(&v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich1WithOptUnionAbsent_Old_Decode) {
  llcpp::conformance::Sandwich1WithOptUnion v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  uint32_t v3 = 134678021ull;
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich2Case1_Old_Decode) {
  llcpp::conformance::Sandwich2 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize12Align4 v3;
  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = fidl::Array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                     std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(&v10);
  v1.the_union = std::move(v3);
  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich3Case1_Old_Decode) {
  llcpp::conformance::Sandwich3 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize24Align8 v3;
  llcpp::conformance::StructSize16Align8 v4{};
  uint64_t v5 = 12080525177006498208ull;
  v4.f1 = std::move(v5);
  uint64_t v6 = 12659246559711111592ull;
  v4.f2 = std::move(v6);
  v3.set_variant(&v4);
  v1.the_union = std::move(v3);
  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich4Case1_Old_Decode) {
  llcpp::conformance::Sandwich4 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionSize36Align4 v3;
  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  uint8_t v10 = 166ull;
  uint8_t v11 = 167ull;
  uint8_t v12 = 168ull;
  uint8_t v13 = 169ull;
  uint8_t v14 = 170ull;
  uint8_t v15 = 171ull;
  uint8_t v16 = 172ull;
  uint8_t v17 = 173ull;
  uint8_t v18 = 174ull;
  uint8_t v19 = 175ull;
  uint8_t v20 = 176ull;
  uint8_t v21 = 177ull;
  uint8_t v22 = 178ull;
  uint8_t v23 = 179ull;
  uint8_t v24 = 180ull;
  uint8_t v25 = 181ull;
  uint8_t v26 = 182ull;
  uint8_t v27 = 183ull;
  uint8_t v28 = 184ull;
  uint8_t v29 = 185ull;
  uint8_t v30 = 186ull;
  uint8_t v31 = 187ull;
  uint8_t v32 = 188ull;
  uint8_t v33 = 189ull;
  uint8_t v34 = 190ull;
  uint8_t v35 = 191ull;
  auto v36 = fidl::Array<uint8_t, 32>{
      std::move(v4),  std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),
      std::move(v9),  std::move(v10), std::move(v11), std::move(v12), std::move(v13),
      std::move(v14), std::move(v15), std::move(v16), std::move(v17), std::move(v18),
      std::move(v19), std::move(v20), std::move(v21), std::move(v22), std::move(v23),
      std::move(v24), std::move(v25), std::move(v26), std::move(v27), std::move(v28),
      std::move(v29), std::move(v30), std::move(v31), std::move(v32), std::move(v33),
      std::move(v34), std::move(v35)};
  v3.set_variant(&v36);
  v1.the_union = std::move(v3);
  uint32_t v37 = 134678021ull;
  v1.after = std::move(v37);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
      0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb,
      0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich4Case1WithHdr_Old_Decode) {
  llcpp::conformance::Sandwich4Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 0ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 0ull;
  uint8_t v5 = 0ull;
  uint8_t v6 = 0ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 0ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 0ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich4 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionSize36Align4 v12;
  uint8_t v13 = 160ull;
  uint8_t v14 = 161ull;
  uint8_t v15 = 162ull;
  uint8_t v16 = 163ull;
  uint8_t v17 = 164ull;
  uint8_t v18 = 165ull;
  uint8_t v19 = 166ull;
  uint8_t v20 = 167ull;
  uint8_t v21 = 168ull;
  uint8_t v22 = 169ull;
  uint8_t v23 = 170ull;
  uint8_t v24 = 171ull;
  uint8_t v25 = 172ull;
  uint8_t v26 = 173ull;
  uint8_t v27 = 174ull;
  uint8_t v28 = 175ull;
  uint8_t v29 = 176ull;
  uint8_t v30 = 177ull;
  uint8_t v31 = 178ull;
  uint8_t v32 = 179ull;
  uint8_t v33 = 180ull;
  uint8_t v34 = 181ull;
  uint8_t v35 = 182ull;
  uint8_t v36 = 183ull;
  uint8_t v37 = 184ull;
  uint8_t v38 = 185ull;
  uint8_t v39 = 186ull;
  uint8_t v40 = 187ull;
  uint8_t v41 = 188ull;
  uint8_t v42 = 189ull;
  uint8_t v43 = 190ull;
  uint8_t v44 = 191ull;
  auto v45 = fidl::Array<uint8_t, 32>{
      std::move(v13), std::move(v14), std::move(v15), std::move(v16), std::move(v17),
      std::move(v18), std::move(v19), std::move(v20), std::move(v21), std::move(v22),
      std::move(v23), std::move(v24), std::move(v25), std::move(v26), std::move(v27),
      std::move(v28), std::move(v29), std::move(v30), std::move(v31), std::move(v32),
      std::move(v33), std::move(v34), std::move(v35), std::move(v36), std::move(v37),
      std::move(v38), std::move(v39), std::move(v40), std::move(v41), std::move(v42),
      std::move(v43), std::move(v44)};
  v12.set_variant(&v45);
  v10.the_union = std::move(v12);
  uint32_t v46 = 134678021ull;
  v10.after = std::move(v46);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1,
      0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae,
      0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb,
      0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich5Case1_Old_Decode) {
  llcpp::conformance::Sandwich5 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionOfUnion v3;
  llcpp::conformance::UnionSize8Align4 v4;
  uint32_t v5 = 202050057ull;
  v4.set_variant(&v5);
  v3.set_size8align4(&v4);
  v1.union_of_union = std::move(v3);
  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich5Case1WithHdr_Old_Decode) {
  llcpp::conformance::Sandwich5Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich5 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionOfUnion v12;
  llcpp::conformance::UnionSize8Align4 v13;
  uint32_t v14 = 202050057ull;
  v13.set_variant(&v14);
  v12.set_size8align4(&v13);
  v10.union_of_union = std::move(v12);
  uint32_t v15 = 134678021ull;
  v10.after = std::move(v15);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,
      0xfd, 0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich5Case2_Old_Decode) {
  llcpp::conformance::Sandwich5 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionOfUnion v3;
  llcpp::conformance::UnionSize24Align8 v4;
  llcpp::conformance::StructSize16Align8 v5{};
  uint64_t v6 = 12080525177006498208ull;
  v5.f1 = std::move(v6);
  uint64_t v7 = 12659246559711111592ull;
  v5.f2 = std::move(v7);
  v4.set_variant(&v5);
  v3.set_size24align8(&v4);
  v1.union_of_union = std::move(v3);
  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich5Case2WithHdr_Old_Decode) {
  llcpp::conformance::Sandwich5Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich5 v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionOfUnion v12;
  llcpp::conformance::UnionSize24Align8 v13;
  llcpp::conformance::StructSize16Align8 v14{};
  uint64_t v15 = 12080525177006498208ull;
  v14.f1 = std::move(v15);
  uint64_t v16 = 12659246559711111592ull;
  v14.f2 = std::move(v16);
  v13.set_variant(&v14);
  v12.set_size24align8(&v13);
  v10.union_of_union = std::move(v12);
  uint32_t v17 = 134678021ull;
  v10.after = std::move(v17);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc,
      0xfd, 0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case1_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = fidl::Array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                     std::move(v7), std::move(v8), std::move(v9)};
  auto v11 = fidl::VectorView<uint8_t>(v10.data(), 6);
  v3.set_vector_of_uint8(&v11);
  v1.the_union = std::move(v3);
  uint32_t v12 = 134678021ull;
  v1.after = std::move(v12);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case1AbsentVector_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  auto v4 = fidl::VectorView<uint8_t>();
  v3.set_vector_of_uint8(&v4);
  v1.the_union = std::move(v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case2_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  fidl::StringView v4("soft migrations rock!", 21);
  v3.set_s(&v4);
  v1.the_union = std::move(v3);
  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case3_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 115ull;
  uint8_t v6 = 111ull;
  uint8_t v7 = 102ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 32ull;
  uint8_t v11 = 109ull;
  uint8_t v12 = 105ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  llcpp::conformance::StructSize3Align1 v14{};
  uint8_t v15 = 114ull;
  uint8_t v16 = 97ull;
  uint8_t v17 = 116ull;
  auto v18 = fidl::Array<uint8_t, 3>{std::move(v15), std::move(v16), std::move(v17)};
  v14.three_bytes = std::move(v18);
  auto v19 = fidl::Array<llcpp::conformance::StructSize3Align1, 3>{std::move(v4), std::move(v9),
                                                                   std::move(v14)};
  auto v20 = fidl::VectorView<llcpp::conformance::StructSize3Align1>(v19.data(), 3);
  v3.set_vector_s3_a1(&v20);
  v1.the_union = std::move(v3);
  uint32_t v21 = 134678021ull;
  v1.after = std::move(v21);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f,
      0x66, 0x20, 0x6d, 0x69, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case4_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align2 v4{};
  uint16_t v5 = 28531ull;
  v4.f1 = std::move(v5);
  uint8_t v6 = 102ull;
  v4.f2 = std::move(v6);
  llcpp::conformance::StructSize3Align2 v7{};
  uint16_t v8 = 27936ull;
  v7.f1 = std::move(v8);
  uint8_t v9 = 105ull;
  v7.f2 = std::move(v9);
  llcpp::conformance::StructSize3Align2 v10{};
  uint16_t v11 = 24946ull;
  v10.f1 = std::move(v11);
  uint8_t v12 = 116ull;
  v10.f2 = std::move(v12);
  auto v13 = fidl::Array<llcpp::conformance::StructSize3Align2, 3>{std::move(v4), std::move(v7),
                                                                   std::move(v10)};
  auto v14 = fidl::VectorView<llcpp::conformance::StructSize3Align2>(v13.data(), 3);
  v3.set_vector_s3_a2(&v14);
  v1.the_union = std::move(v3);
  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f,
      0x66, 0x00, 0x20, 0x6d, 0x69, 0x00, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case5_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  uint32_t v4 = 4294967295ull;
  uint32_t v5 = 4294967295ull;
  uint32_t v6 = 4294967295ull;
  auto v7 = fidl::Array<uint32_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  auto v8 = fidl::VectorView<uint32_t>(v7.data(), 3);
  v3.set_handles(&v8);
  v1.the_union = std::move(v3);
  uint32_t v9 = 134678021ull;
  v1.after = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case6_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 164ull;
  uint8_t v11 = 165ull;
  uint8_t v12 = 166ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = fidl::Array<llcpp::conformance::StructSize3Align1, 2>{std::move(v4), std::move(v9)};
  v3.set_array_s3_a1(&v14);
  v1.the_union = std::move(v3);
  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case7_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::StructSize3Align2 v4{};
  uint16_t v5 = 41633ull;
  v4.f1 = std::move(v5);
  uint8_t v6 = 163ull;
  v4.f2 = std::move(v6);
  llcpp::conformance::StructSize3Align2 v7{};
  uint16_t v8 = 42404ull;
  v7.f1 = std::move(v8);
  uint8_t v9 = 166ull;
  v7.f2 = std::move(v9);
  auto v10 = fidl::Array<llcpp::conformance::StructSize3Align2, 2>{std::move(v4), std::move(v7)};
  v3.set_array_s3_a2(&v10);
  v1.the_union = std::move(v3);
  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich6Case8_Old_Decode) {
  llcpp::conformance::Sandwich6 v1{};
  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVector v3;
  llcpp::conformance::UnionSize8Align4 v4;
  uint32_t v5 = 202050057ull;
  v4.set_variant(&v5);
  auto v6 = fidl::Array<llcpp::conformance::UnionSize8Align4, 1>{std::move(v4)};
  auto v7 = fidl::VectorView<llcpp::conformance::UnionSize8Align4>(v6.data(), 1);
  v3.set_vector_union(&v7);
  v1.the_union = std::move(v3);
  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich7Case1_Old_Decode) {
  llcpp::conformance::Sandwich7 v1{};
  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1 v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  llcpp::conformance::UnionSize8Align4 v5;
  uint32_t v6 = 202050057ull;
  v5.set_variant(&v6);
  v3.the_union = std::move(v5);
  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  v1.opt_sandwich1 = std::move(&v3);
  uint32_t v8 = 606282273ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
      0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich7Case1WithHdr_Old_Decode) {
  llcpp::conformance::Sandwich7Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich7 v10{};
  uint32_t v11 = 336794129ull;
  v10.before = std::move(v11);
  llcpp::conformance::Sandwich1 v12{};
  uint32_t v13 = 67305985ull;
  v12.before = std::move(v13);
  llcpp::conformance::UnionSize8Align4 v14;
  uint32_t v15 = 202050057ull;
  v14.set_variant(&v15);
  v12.the_union = std::move(v14);
  uint32_t v16 = 134678021ull;
  v12.after = std::move(v16);
  v10.opt_sandwich1 = std::move(&v12);
  uint32_t v17 = 606282273ull;
  v10.after = std::move(v17);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
      0xfe, 0xff, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
      0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich7Case2_Old_Decode) {
  llcpp::conformance::Sandwich7 v1{};
  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);
  uint32_t v3 = 606282273ull;
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich7Case2WithHdr_Old_Decode) {
  llcpp::conformance::Sandwich7Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Sandwich7 v10{};
  uint32_t v11 = 336794129ull;
  v10.before = std::move(v11);
  uint32_t v12 = 606282273ull;
  v10.after = std::move(v12);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
      0xfe, 0xff, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression1_Old_Decode) {
  llcpp::conformance::Regression1 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);
  uint8_t v4 = 3ull;
  v1.f3 = std::move(v4);
  uint16_t v5 = 4ull;
  v1.f4 = std::move(v5);
  uint64_t v6 = 5ull;
  v1.f5 = std::move(v6);
  uint8_t v7 = 6ull;
  v1.f6 = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression2_Old_Decode) {
  llcpp::conformance::Regression2 v1{};
  llcpp::conformance::Regression1 v2{};
  uint8_t v3 = 1ull;
  v2.f1 = std::move(v3);
  uint32_t v4 = 2ull;
  v2.f2 = std::move(v4);
  uint8_t v5 = 3ull;
  v2.f3 = std::move(v5);
  uint16_t v6 = 4ull;
  v2.f4 = std::move(v6);
  uint64_t v7 = 5ull;
  v2.f5 = std::move(v7);
  uint8_t v8 = 6ull;
  v2.f6 = std::move(v8);
  v1.head = std::move(v2);
  uint8_t v9 = 7ull;
  v1.f7 = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression3Absent_Old_Decode) {
  llcpp::conformance::Regression3 v1{};

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression3Present_Old_Decode) {
  llcpp::conformance::Regression3 v1{};
  llcpp::conformance::Regression2 v2{};
  llcpp::conformance::Regression1 v3{};
  uint8_t v4 = 1ull;
  v3.f1 = std::move(v4);
  uint32_t v5 = 2ull;
  v3.f2 = std::move(v5);
  uint8_t v6 = 3ull;
  v3.f3 = std::move(v6);
  uint16_t v7 = 4ull;
  v3.f4 = std::move(v7);
  uint64_t v8 = 5ull;
  v3.f5 = std::move(v8);
  uint8_t v9 = 6ull;
  v3.f6 = std::move(v9);
  v2.head = std::move(v3);
  uint8_t v10 = 7ull;
  v2.f7 = std::move(v10);
  v1.opt_value = std::move(&v2);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Size5Alignment1Array_Old_Decode) {
  llcpp::conformance::Size5Alignment1Array v1{};
  llcpp::conformance::Size5Alignment1 v2{};
  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = fidl::Array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7)};
  v2.data = std::move(v8);
  llcpp::conformance::Size5Alignment1 v9{};
  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = fidl::Array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                     std::move(v14)};
  v9.data = std::move(v15);
  llcpp::conformance::Size5Alignment1 v16{};
  uint8_t v17 = 11ull;
  uint8_t v18 = 12ull;
  uint8_t v19 = 13ull;
  uint8_t v20 = 14ull;
  uint8_t v21 = 15ull;
  auto v22 = fidl::Array<uint8_t, 5>{std::move(v17), std::move(v18), std::move(v19), std::move(v20),
                                     std::move(v21)};
  v16.data = std::move(v22);
  auto v23 = fidl::Array<llcpp::conformance::Size5Alignment1, 3>{std::move(v2), std::move(v9),
                                                                 std::move(v16)};
  v1.a = std::move(v23);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Size5Alignment4Array_Old_Decode) {
  llcpp::conformance::Size5Alignment4Array v1{};
  llcpp::conformance::Size5Alignment4 v2{};
  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);
  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  llcpp::conformance::Size5Alignment4 v5{};
  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);
  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  llcpp::conformance::Size5Alignment4 v8{};
  uint32_t v9 = 235736075ull;
  v8.four = std::move(v9);
  uint8_t v10 = 15ull;
  v8.one = std::move(v10);
  auto v11 = fidl::Array<llcpp::conformance::Size5Alignment4, 3>{std::move(v2), std::move(v5),
                                                                 std::move(v8)};
  v1.a = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09,
      0x0a, 0x00, 0x00, 0x00, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Size5Alignment1Vector_Old_Decode) {
  llcpp::conformance::Size5Alignment1Vector v1{};
  llcpp::conformance::Size5Alignment1 v2{};
  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = fidl::Array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7)};
  v2.data = std::move(v8);
  llcpp::conformance::Size5Alignment1 v9{};
  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = fidl::Array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                     std::move(v14)};
  v9.data = std::move(v15);
  auto v16 = fidl::Array<llcpp::conformance::Size5Alignment1, 2>{std::move(v2), std::move(v9)};
  auto v17 = fidl::VectorView<llcpp::conformance::Size5Alignment1>(v16.data(), 2);
  v1.v = std::move(v17);

  auto bytes = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Size5Alignment4Vector_Old_Decode) {
  llcpp::conformance::Size5Alignment4Vector v1{};
  llcpp::conformance::Size5Alignment4 v2{};
  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);
  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  llcpp::conformance::Size5Alignment4 v5{};
  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);
  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  auto v8 = fidl::Array<llcpp::conformance::Size5Alignment4, 2>{std::move(v2), std::move(v5)};
  auto v9 = fidl::VectorView<llcpp::conformance::Size5Alignment4>(v8.data(), 2);
  v1.v = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00,
      0x00, 0x00, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Table_StructWithReservedSandwich_Old_Decode) {
  llcpp::conformance::Table_StructWithReservedSandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_StructWithReservedSandwich::Build();
  llcpp::conformance::StructSize3Align1 v3{};
  uint8_t v4 = 9ull;
  uint8_t v5 = 10ull;
  uint8_t v6 = 11ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(&v3);
  llcpp::conformance::StructSize3Align1 v8{};
  uint8_t v9 = 25ull;
  uint8_t v10 = 26ull;
  uint8_t v11 = 27ull;
  auto v12 = fidl::Array<uint8_t, 3>{std::move(v9), std::move(v10), std::move(v11)};
  v8.three_bytes = std::move(v12);
  v2.set_s2(&v8);
  auto v13 = v2.view();
  v1.table = std::move(v13);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Table_StructWithUint32Sandwich_Old_Decode) {
  llcpp::conformance::Table_StructWithUint32SandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_StructWithUint32Sandwich::Build();
  uint32_t v3 = 67305985ull;
  v2.set_i(&v3);
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v2.set_s1(&v4);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 25ull;
  uint8_t v11 = 26ull;
  uint8_t v12 = 27ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  v2.set_s2(&v9);
  uint32_t v14 = 218893066ull;
  v2.set_i2(&v14);
  auto v15 = v2.view();
  v1.table = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1a,
      0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Table_UnionWithVector_ReservedSandwich_Old_Decode) {
  llcpp::conformance::Table_UnionWithVector_ReservedSandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_UnionWithVector_ReservedSandwich::Build();
  llcpp::conformance::UnionWithVector v3;
  fidl::StringView v4("hello", 5);
  v3.set_s(&v4);
  v2.set_uv(&v3);
  auto v5 = v2.view();
  v1.table = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Table_UnionWithVector_StructSandwich_Old_Decode) {
  llcpp::conformance::Table_UnionWithVector_StructSandwichStruct v1{};
  auto v2 = llcpp::conformance::Table_UnionWithVector_StructSandwich::Build();
  llcpp::conformance::StructSize3Align1 v3{};
  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(&v3);
  llcpp::conformance::UnionWithVector v8;
  fidl::StringView v9("hello", 5);
  v8.set_s(&v9);
  v2.set_uv(&v8);
  llcpp::conformance::StructSize3Align1 v10{};
  uint8_t v11 = 4ull;
  uint8_t v12 = 5ull;
  uint8_t v13 = 6ull;
  auto v14 = fidl::Array<uint8_t, 3>{std::move(v11), std::move(v12), std::move(v13)};
  v10.three_bytes = std::move(v14);
  v2.set_s2(&v10);
  auto v15 = v2.view();
  v1.table = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65,
      0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, XUnionWithStruct_Old_Decode) {
  llcpp::conformance::XUnionWithStructStruct v1{};
  llcpp::conformance::XUnionWithStruct v2;
  llcpp::conformance::StructSize3Align1 v3{};
  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s(&v3);
  v1.xu = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, ArrayStruct_Old_Decode) {
  llcpp::conformance::ArrayStruct v1{};
  llcpp::conformance::StringUnion v2;
  fidl::StringView v3("one", 3);
  v2.set_s(&v3);
  llcpp::conformance::StringUnion v4;
  fidl::StringView v5("two", 3);
  v4.set_s(&v5);
  llcpp::conformance::StringUnion v6;
  fidl::StringView v7("three", 5);
  v6.set_s(&v7);
  auto v8 =
      fidl::Array<llcpp::conformance::StringUnion, 3>{std::move(v2), std::move(v4), std::move(v6)};
  v1.unions = std::move(v8);
  llcpp::conformance::StringUnion v9;
  fidl::StringView v10("four", 4);
  v9.set_s(&v10);
  llcpp::conformance::StringUnion v11;
  fidl::StringView v12("five", 4);
  v11.set_s(&v12);
  llcpp::conformance::StringUnion v13;
  fidl::StringView v14("six", 3);
  v13.set_s(&v14);
  auto v15 = fidl::Array<llcpp::conformance::StringUnion*, 3>{std::move(&v9), std::move(&v11),
                                                              std::move(&v13)};
  v1.optional_unions = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74,
      0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x68, 0x72, 0x65, 0x65, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x6f, 0x75, 0x72, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x69, 0x76, 0x65,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x69,
      0x78, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, TransformerEmptyStruct_Old_Decode) {
  llcpp::conformance::TransformerEmptyStruct v1{};

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, EmptyStructUnion_Old_Decode) {
  llcpp::conformance::EmptyStructUnionStruct v1{};
  llcpp::conformance::EmptyStructUnion v2;
  llcpp::conformance::TransformerEmptyStruct v3{};
  v2.set_es(&v3);
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, NoCodingTablesStressor_Old_Decode) {
  llcpp::conformance::NoCodingTablesStressor v1{};
  uint64_t v2 = 1229782938247303441ull;
  v1.f1 = std::move(v2);
  uint64_t v3 = 2459565876494606882ull;
  v1.f2 = std::move(v3);
  llcpp::conformance::UnionSize36Align4 v4;
  uint8_t v5 = 51ull;
  uint8_t v6 = 51ull;
  uint8_t v7 = 51ull;
  uint8_t v8 = 51ull;
  uint8_t v9 = 51ull;
  uint8_t v10 = 51ull;
  uint8_t v11 = 51ull;
  uint8_t v12 = 51ull;
  uint8_t v13 = 51ull;
  uint8_t v14 = 51ull;
  uint8_t v15 = 51ull;
  uint8_t v16 = 51ull;
  uint8_t v17 = 51ull;
  uint8_t v18 = 51ull;
  uint8_t v19 = 51ull;
  uint8_t v20 = 51ull;
  uint8_t v21 = 51ull;
  uint8_t v22 = 51ull;
  uint8_t v23 = 51ull;
  uint8_t v24 = 51ull;
  uint8_t v25 = 51ull;
  uint8_t v26 = 51ull;
  uint8_t v27 = 51ull;
  uint8_t v28 = 51ull;
  uint8_t v29 = 51ull;
  uint8_t v30 = 51ull;
  uint8_t v31 = 51ull;
  uint8_t v32 = 51ull;
  uint8_t v33 = 51ull;
  uint8_t v34 = 51ull;
  uint8_t v35 = 51ull;
  uint8_t v36 = 51ull;
  auto v37 = fidl::Array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(&v37);
  v1.u1 = std::move(v4);
  uint64_t v38 = 4919131752989213764ull;
  v1.f3 = std::move(v38);
  uint64_t v39 = 6148914691236517205ull;
  v1.f4 = std::move(v39);
  llcpp::conformance::UnionSize36Align4 v40;
  uint8_t v41 = 102ull;
  uint8_t v42 = 102ull;
  uint8_t v43 = 102ull;
  uint8_t v44 = 102ull;
  uint8_t v45 = 102ull;
  uint8_t v46 = 102ull;
  uint8_t v47 = 102ull;
  uint8_t v48 = 102ull;
  uint8_t v49 = 102ull;
  uint8_t v50 = 102ull;
  uint8_t v51 = 102ull;
  uint8_t v52 = 102ull;
  uint8_t v53 = 102ull;
  uint8_t v54 = 102ull;
  uint8_t v55 = 102ull;
  uint8_t v56 = 102ull;
  uint8_t v57 = 102ull;
  uint8_t v58 = 102ull;
  uint8_t v59 = 102ull;
  uint8_t v60 = 102ull;
  uint8_t v61 = 102ull;
  uint8_t v62 = 102ull;
  uint8_t v63 = 102ull;
  uint8_t v64 = 102ull;
  uint8_t v65 = 102ull;
  uint8_t v66 = 102ull;
  uint8_t v67 = 102ull;
  uint8_t v68 = 102ull;
  uint8_t v69 = 102ull;
  uint8_t v70 = 102ull;
  uint8_t v71 = 102ull;
  uint8_t v72 = 102ull;
  auto v73 = fidl::Array<uint8_t, 32>{
      std::move(v41), std::move(v42), std::move(v43), std::move(v44), std::move(v45),
      std::move(v46), std::move(v47), std::move(v48), std::move(v49), std::move(v50),
      std::move(v51), std::move(v52), std::move(v53), std::move(v54), std::move(v55),
      std::move(v56), std::move(v57), std::move(v58), std::move(v59), std::move(v60),
      std::move(v61), std::move(v62), std::move(v63), std::move(v64), std::move(v65),
      std::move(v66), std::move(v67), std::move(v68), std::move(v69), std::move(v70),
      std::move(v71), std::move(v72)};
  v40.set_variant(&v73);
  v1.u2 = std::move(v40);
  uint64_t v74 = 8608480567731124087ull;
  v1.f5 = std::move(v74);
  uint64_t v75 = 9838263505978427528ull;
  v1.f6 = std::move(v75);
  llcpp::conformance::UnionSize36Align4 v76;
  uint8_t v77 = 153ull;
  uint8_t v78 = 153ull;
  uint8_t v79 = 153ull;
  uint8_t v80 = 153ull;
  uint8_t v81 = 153ull;
  uint8_t v82 = 153ull;
  uint8_t v83 = 153ull;
  uint8_t v84 = 153ull;
  uint8_t v85 = 153ull;
  uint8_t v86 = 153ull;
  uint8_t v87 = 153ull;
  uint8_t v88 = 153ull;
  uint8_t v89 = 153ull;
  uint8_t v90 = 153ull;
  uint8_t v91 = 153ull;
  uint8_t v92 = 153ull;
  uint8_t v93 = 153ull;
  uint8_t v94 = 153ull;
  uint8_t v95 = 153ull;
  uint8_t v96 = 153ull;
  uint8_t v97 = 153ull;
  uint8_t v98 = 153ull;
  uint8_t v99 = 153ull;
  uint8_t v100 = 153ull;
  uint8_t v101 = 153ull;
  uint8_t v102 = 153ull;
  uint8_t v103 = 153ull;
  uint8_t v104 = 153ull;
  uint8_t v105 = 153ull;
  uint8_t v106 = 153ull;
  uint8_t v107 = 153ull;
  uint8_t v108 = 153ull;
  auto v109 = fidl::Array<uint8_t, 32>{
      std::move(v77),  std::move(v78),  std::move(v79),  std::move(v80),  std::move(v81),
      std::move(v82),  std::move(v83),  std::move(v84),  std::move(v85),  std::move(v86),
      std::move(v87),  std::move(v88),  std::move(v89),  std::move(v90),  std::move(v91),
      std::move(v92),  std::move(v93),  std::move(v94),  std::move(v95),  std::move(v96),
      std::move(v97),  std::move(v98),  std::move(v99),  std::move(v100), std::move(v101),
      std::move(v102), std::move(v103), std::move(v104), std::move(v105), std::move(v106),
      std::move(v107), std::move(v108)};
  v76.set_variant(&v109);
  v1.u3 = std::move(v76);
  uint64_t v110 = 12297829382473034410ull;
  v1.f7 = std::move(v110);
  llcpp::conformance::Size8Align8 v111{};
  uint64_t v112 = 17216961135462248174ull;
  v111.data = std::move(v112);
  v1.p1 = std::move(&v111);
  uint64_t v113 = 13527612320720337851ull;
  v1.f8 = std::move(v113);
  llcpp::conformance::Size8Align8 v114{};
  uint64_t v115 = 17216961135462248174ull;
  v114.data = std::move(v115);
  v1.p2 = std::move(&v114);
  uint64_t v116 = 15987178197214944733ull;
  v1.f9 = std::move(v116);

  auto bytes = std::vector<uint8_t>{
      0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
      0x22, 0x03, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
      0x44, 0x44, 0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x03, 0x00, 0x00,
      0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
      0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x03, 0x00, 0x00, 0x00, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x00,
      0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xee, 0xee,
      0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, OutOfLineSandwich1Case1_Old_Decode) {
  llcpp::conformance::OutOfLineSandwich1 v1{};
  fidl::StringView v2("soft migrations rock!", 21);
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1 v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  llcpp::conformance::UnionSize8Align4 v5;
  uint32_t v6 = 202050057ull;
  v5.set_variant(&v6);
  v3.the_union = std::move(v5);
  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  auto v8 = fidl::Array<llcpp::conformance::Sandwich1, 1>{std::move(v3)};
  auto v9 = fidl::VectorView<llcpp::conformance::Sandwich1>(v8.data(), 1);
  v1.v = std::move(v9);
  fidl::StringView v10("hard transitions suck!", 22);
  v1.after = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67,
      0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x05, 0x06, 0x07, 0x08, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
      0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionPresent_Old_Decode) {
  llcpp::conformance::OutOfLineSandwich1WithOptUnion v1{};
  fidl::StringView v2("soft migrations rock!", 21);
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1WithOptUnion v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  llcpp::conformance::UnionSize8Align4 v5;
  uint32_t v6 = 202050057ull;
  v5.set_variant(&v6);
  v3.opt_union = std::move(&v5);
  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  auto v8 = fidl::Array<llcpp::conformance::Sandwich1WithOptUnion, 1>{std::move(v3)};
  auto v9 = fidl::VectorView<llcpp::conformance::Sandwich1WithOptUnion>(v8.data(), 1);
  v1.v = std::move(v9);
  fidl::StringView v10("hard transitions suck!", 22);
  v1.after = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x68,
      0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
      0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionAbsent_Old_Decode) {
  llcpp::conformance::OutOfLineSandwich1WithOptUnion v1{};
  fidl::StringView v2("soft migrations rock!", 21);
  v1.before = std::move(v2);
  llcpp::conformance::Sandwich1WithOptUnion v3{};
  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);
  uint32_t v5 = 134678021ull;
  v3.after = std::move(v5);
  auto v6 = fidl::Array<llcpp::conformance::Sandwich1WithOptUnion, 1>{std::move(v3)};
  auto v7 = fidl::VectorView<llcpp::conformance::Sandwich1WithOptUnion>(v6.data(), 1);
  v1.v = std::move(v7);
  fidl::StringView v8("hard transitions suck!", 22);
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e,
      0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression4_Old_Decode) {
  llcpp::conformance::Regression4 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v1.s1 = std::move(v4);
  uint8_t v9 = 3ull;
  v1.f3 = std::move(v9);
  uint16_t v10 = 4ull;
  v1.f4 = std::move(v10);
  uint64_t v11 = 5ull;
  v1.f5 = std::move(v11);
  uint8_t v12 = 6ull;
  v1.f6 = std::move(v12);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x03, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression5Enums_Old_Decode) {
  llcpp::conformance::Regression5 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 842084399ull;
  v1.f2 = std::move(v3);
  uint8_t v4 = 8ull;
  v1.f3 = std::move(v4);
  uint16_t v5 = 5653ull;
  v1.f4 = std::move(v5);
  uint64_t v6 = 7233733596855361117ull;
  v1.f5 = std::move(v6);
  uint8_t v7 = 8ull;
  v1.f6 = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x2f, 0x30, 0x31, 0x32, 0x08, 0x00, 0x15,
      0x16, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62,
      0x63, 0x64, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression6Bits_Old_Decode) {
  llcpp::conformance::Regression6 v1{};
  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);
  uint32_t v3 = 842084399ull;
  v1.f2 = std::move(v3);
  uint8_t v4 = 8ull;
  v1.f3 = std::move(v4);
  uint16_t v5 = 5653ull;
  v1.f4 = std::move(v5);
  uint64_t v6 = 7233733596855361117ull;
  v1.f5 = std::move(v6);
  uint8_t v7 = 8ull;
  v1.f6 = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x2f, 0x30, 0x31, 0x32, 0x08, 0x00, 0x15,
      0x16, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62,
      0x63, 0x64, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression7TableUnionXUnion_Old_Decode) {
  llcpp::conformance::Regression7TableUnionXUnion v1{};
  auto v2 = llcpp::conformance::TableOfUnionThenXUnionThenTableThenXUnionThenUnion::Build();
  llcpp::conformance::UnionOfXUnionThenTableThenXUnionThenUnion v3;
  llcpp::conformance::XUnionOfTableThenXUnionThenUnion v4;
  auto v5 = llcpp::conformance::TableOfXUnionThenUnion::Build();
  llcpp::conformance::XUnionOfUnion v6;
  llcpp::conformance::UnionAtTheBottom v7;
  uint8_t v8 = 8ull;
  v7.set_tiny(&v8);
  v6.set_variant(&v7);
  v5.set_member(&v6);
  auto v9 = v5.view();
  v4.set_variant(&v9);
  v3.set_variant(&v4);
  v2.set_member(&v3);
  auto v10 = v2.view();
  v1.value = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x61, 0xb8,
      0x22, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x94, 0x05, 0x22, 0x38, 0x00, 0x00,
      0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression8OptUnionSize12Aligned4_Old_Decode) {
  llcpp::conformance::Regression8OptUnionSize12Align4 v1{};
  llcpp::conformance::UnionSize12Align4 v2;
  uint8_t v3 = 161ull;
  uint8_t v4 = 162ull;
  uint8_t v5 = 163ull;
  uint8_t v6 = 164ull;
  uint8_t v7 = 165ull;
  uint8_t v8 = 166ull;
  auto v9 = fidl::Array<uint8_t, 6>{std::move(v3), std::move(v4), std::move(v5),
                                    std::move(v6), std::move(v7), std::move(v8)};
  v2.set_variant(&v9);
  v1.opt_union1 = std::move(&v2);
  llcpp::conformance::UnionSize12Align4 v10;
  uint8_t v11 = 177ull;
  uint8_t v12 = 178ull;
  uint8_t v13 = 179ull;
  uint8_t v14 = 180ull;
  uint8_t v15 = 181ull;
  uint8_t v16 = 182ull;
  auto v17 = fidl::Array<uint8_t, 6>{std::move(v11), std::move(v12), std::move(v13),
                                     std::move(v14), std::move(v15), std::move(v16)};
  v10.set_variant(&v17);
  v1.opt_union3 = std::move(&v10);

  auto bytes = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00,
      0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x00, 0x00, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression8VectorOfOptUnionSize12Aligned4_Old_Decode) {
  llcpp::conformance::Regression8VectorOfOptUnionSize12Align4 v1{};
  llcpp::conformance::UnionSize12Align4* v2{};
  llcpp::conformance::UnionSize12Align4 v3;
  uint8_t v4 = 161ull;
  uint8_t v5 = 162ull;
  uint8_t v6 = 163ull;
  uint8_t v7 = 164ull;
  uint8_t v8 = 165ull;
  uint8_t v9 = 166ull;
  auto v10 = fidl::Array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                     std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(&v10);
  llcpp::conformance::UnionSize12Align4* v11{};
  llcpp::conformance::UnionSize12Align4 v12;
  uint8_t v13 = 177ull;
  uint8_t v14 = 178ull;
  uint8_t v15 = 179ull;
  uint8_t v16 = 180ull;
  uint8_t v17 = 181ull;
  uint8_t v18 = 182ull;
  auto v19 = fidl::Array<uint8_t, 6>{std::move(v13), std::move(v14), std::move(v15),
                                     std::move(v16), std::move(v17), std::move(v18)};
  v12.set_variant(&v19);
  llcpp::conformance::UnionSize12Align4* v20{};
  auto v21 = fidl::Array<llcpp::conformance::UnionSize12Align4*, 5>{
      std::move(v2), std::move(&v3), std::move(v11), std::move(&v12), std::move(v20)};
  auto v22 = fidl::VectorView<llcpp::conformance::UnionSize12Align4*>(v21.data(), 5);
  v1.value = std::move(v22);

  auto bytes = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
      0x00, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression8TableWithUnionSize12Aligned4_Old_Decode) {
  llcpp::conformance::Regression8TableWithUnionSize12Align4 v1{};
  auto v2 = llcpp::conformance::TableWithUnionSize12Align4::Build();
  uint8_t v3 = 170ull;
  v2.set_before(&v3);
  llcpp::conformance::UnionSize12Align4 v4;
  uint8_t v5 = 177ull;
  uint8_t v6 = 178ull;
  uint8_t v7 = 179ull;
  uint8_t v8 = 180ull;
  uint8_t v9 = 181ull;
  uint8_t v10 = 182ull;
  auto v11 = fidl::Array<uint8_t, 6>{std::move(v5), std::move(v6), std::move(v7),
                                     std::move(v8), std::move(v9), std::move(v10)};
  v4.set_variant(&v11);
  v2.set_member(&v4);
  uint8_t v12 = 187ull;
  v2.set_after(&v12);
  auto v13 = v2.view();
  v1.value = std::move(v13);

  auto bytes = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
      0x00, 0x00, 0x00, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Regression9Response_Old_Decode) {
  llcpp::conformance::Regression9Message v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 1ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 1ull;
  uint8_t v5 = 0ull;
  uint8_t v6 = 0ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 1ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 6254313960342814720ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::Regression9Result v10;
  llcpp::conformance::Regression9Value v11{};
  llcpp::conformance::StringBoolUnion v12;
  fidl::StringView v13("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 32);
  v12.set_s(&v13);
  v11.u = std::move(v12);
  llcpp::conformance::StringBoolUnion v14;
  bool v15 = false;
  v14.set_b(&v15);
  v11.nullable_u = std::move(&v14);
  v10.set_ok(&v11);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x69, 0xc9,
      0xcb, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
      0x41, 0x41, 0x41, 0x41, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich4Align8_Old_Decode) {
  llcpp::conformance::Sandwich4Align8 v1{};
  llcpp::conformance::Sandwich4 v2{};
  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);
  llcpp::conformance::UnionSize36Align4 v4;
  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = fidl::Array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(&v37);
  v2.the_union = std::move(v4);
  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);
  uint64_t v39 = 1157159078456920585ull;
  v1.alignment8_enforcement = std::move(v39);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
      0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich4Align8WithPointer_Old_Decode) {
  llcpp::conformance::Sandwich4Align8WithPointer v1{};
  llcpp::conformance::Sandwich4 v2{};
  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);
  llcpp::conformance::UnionSize36Align4 v4;
  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = fidl::Array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(&v37);
  v2.the_union = std::move(v4);
  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);
  llcpp::conformance::Size8Align8 v39{};
  uint64_t v40 = 1157159078456920585ull;
  v39.data = std::move(v40);
  v1.alignment8_enforcement = std::move(&v39);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4,
      0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1,
      0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe,
      0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich8Case1_Old_Decode) {
  llcpp::conformance::Sandwich8 v1{};
  uint64_t v2 = 67305985ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionOfUnion v3;
  llcpp::conformance::UnionSize8Align4 v4;
  uint32_t v5 = 202050057ull;
  v4.set_variant(&v5);
  v3.set_size8align4(&v4);
  v1.union_of_union = std::move(v3);
  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, Sandwich9Case1_Old_Decode) {
  llcpp::conformance::Sandwich9 v1{};
  uint16_t v2 = 513ull;
  v1.before = std::move(v2);
  llcpp::conformance::UnionWithVectorOfVectors v3;
  llcpp::conformance::StructSize3Align1 v4{};
  uint8_t v5 = 16ull;
  uint8_t v6 = 17ull;
  uint8_t v7 = 18ull;
  auto v8 = fidl::Array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  llcpp::conformance::StructSize3Align1 v9{};
  uint8_t v10 = 19ull;
  uint8_t v11 = 20ull;
  uint8_t v12 = 21ull;
  auto v13 = fidl::Array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = fidl::Array<llcpp::conformance::StructSize3Align1*, 2>{std::move(&v4), std::move(&v9)};
  auto v15 = fidl::VectorView<llcpp::conformance::StructSize3Align1*>(v14.data(), 2);
  auto v16 =
      fidl::Array<fidl::VectorView<llcpp::conformance::StructSize3Align1*>, 1>{std::move(v15)};
  auto v17 =
      fidl::VectorView<fidl::VectorView<llcpp::conformance::StructSize3Align1*>>(v16.data(), 1);
  v3.set_v(&v17);
  v1.the_union = std::move(v3);
  uint16_t v18 = 4625ull;
  v1.after = std::move(v18);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0x11, 0x12,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, SimpleTableArrayStruct_Old_Decode) {
  llcpp::conformance::SimpleTableArrayStruct v1{};
  auto v2 = llcpp::conformance::TransformerSimpleTable::Build();
  uint32_t v3 = 2745344416ull;
  v2.set_value(&v3);
  auto v4 = v2.view();
  auto v5 = llcpp::conformance::TransformerSimpleTable::Build();
  uint32_t v6 = 3014832560ull;
  v5.set_value(&v6);
  auto v7 = v5.view();
  auto v8 =
      fidl::Array<llcpp::conformance::TransformerSimpleTable, 2>{std::move(v4), std::move(v7)};
  v1.the_array = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb0, 0xb1, 0xb2, 0xb3, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, StringUnionVector_Old_Decode) {
  llcpp::conformance::StringUnionVector v1{};
  llcpp::conformance::StringUnion v2;
  fidl::StringView v3("hello", 5);
  v2.set_s(&v3);
  llcpp::conformance::StringUnion v4;
  uint8_t v5 = 170ull;
  v4.set_u8(&v5);
  llcpp::conformance::StringUnion v6;
  uint8_t v7 = 187ull;
  v6.set_u8(&v7);
  auto v8 = fidl::Array<llcpp::conformance::StringUnion*, 3>{std::move(&v2), std::move(&v4),
                                                             std::move(&v6)};
  auto v9 = fidl::VectorView<llcpp::conformance::StringUnion*>(v8.data(), 3);
  v1.the_vector = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, StringUnionStructWrapperResponse_Old_Decode) {
  llcpp::conformance::StringUnionStructWrapperResponse v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 0ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 1ull;
  uint8_t v5 = 0ull;
  uint8_t v6 = 0ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 1ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 3647970832665280512ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::StringUnionStructWrapper v10{};
  llcpp::conformance::StringUnionStruct v11{};
  llcpp::conformance::StringBoolUnion v12;
  fidl::StringView v13("hello", 5);
  v12.set_s(&v13);
  v11.u = std::move(v12);
  llcpp::conformance::StringBoolUnion v14;
  bool v15 = true;
  v14.set_b(&v15);
  v11.nullable_u = std::move(&v14);
  v10.sus = std::move(v11);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x25, 0x32,
      0xa0, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, RegressionNoUnionLauncherCreateComponentRequest_Old_Decode) {
  llcpp::conformance::CreateComponentRequest v1{};
  llcpp::conformance::LaunchInfo v2{};
  fidl::StringView v3(
      "fuchsia-pkg://fuchsia.com/fidl_compatibility_test_server_rust_write_xunion#meta/"
      "fidl_compatibility_test_server_rust_write_xunion.cmx",
      132);
  v2.url = std::move(v3);
  uint32_t v4 = 4294967295ull;
  v2.directory_request = std::move(v4);
  v1.launch_info = std::move(v2);
  uint32_t v5 = 4294967295ull;
  v1.controller = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2d, 0x70, 0x6b,
      0x67, 0x3a, 0x2f, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
      0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
      0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
      0x72, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75,
      0x6e, 0x69, 0x6f, 0x6e, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f,
      0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
      0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x73, 0x74,
      0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
      0x6d, 0x78, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, CompatTable_Old_Decode) {
  llcpp::conformance::CompatTable v1{};
  auto v2 = llcpp::conformance::CompatTableValue::Build();
  llcpp::conformance::CompatUnion v3;
  bool v4 = true;
  v3.set_b(&v4);
  v2.set_union_member(&v3);
  uint32_t v5 = 1361667997ull;
  uint32_t v6 = 2492576910ull;
  uint32_t v7 = 2480020305ull;
  auto v8 = fidl::Array<uint32_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v2.set_array_member(&v8);
  auto v9 = llcpp::conformance::CompatTableString::Build();
  fidl::StringView v10("AB", 2);
  v9.set_s(&v10);
  auto v11 = v9.view();
  v2.set_table_member(&v11);
  llcpp::conformance::CompatXUnion v12;
  fidl::StringView v13("CD", 2);
  v12.set_s(&v13);
  v2.set_xunion_member(&v12);
  auto v14 = v2.view();
  v1.value = std::move(v14);
  fidl::StringView v15("", 0);
  v1.empty = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x9d, 0x67, 0x29, 0x51, 0x8e, 0xb4, 0x91, 0x94, 0x51, 0x1b, 0xd2, 0x93, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x41, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0xef, 0xf8,
      0x5a, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, MixedFields_Old_Decode) {
  llcpp::conformance::MixedFieldsMessage v1{};
  llcpp::conformance::TransactionHeader v2{};
  uint32_t v3 = 4092785136ull;
  v2.tx_id = std::move(v3);
  uint8_t v4 = 244ull;
  uint8_t v5 = 245ull;
  uint8_t v6 = 246ull;
  auto v7 = fidl::Array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v2.flags = std::move(v7);
  uint8_t v8 = 247ull;
  v2.magic_number = std::move(v8);
  uint64_t v9 = 18446460386757245432ull;
  v2.ordinal = std::move(v9);
  v1.header = std::move(v2);
  llcpp::conformance::MixedFieldsBody v10{};
  uint32_t v11 = 67305985ull;
  v10.before = std::move(v11);
  llcpp::conformance::UnionSize8Align4 v12;
  uint32_t v13 = 202050057ull;
  v12.set_variant(&v13);
  v10.first_union = std::move(v12);
  uint16_t v14 = 2826ull;
  v10.middle_start = std::move(v14);
  uint64_t v15 = 72623859790382856ull;
  v10.middle_end = std::move(v15);
  llcpp::conformance::UnionSize8Align4 v16;
  uint32_t v17 = 3232800912ull;
  v16.set_variant(&v17);
  v10.second_union = std::move(v16);
  uint32_t v18 = 134678021ull;
  v10.after = std::move(v18);
  v1.body = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd,
      0xfe, 0xff, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x0a, 0x0b, 0x00, 0x00, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x02, 0x00,
      0x00, 0x00, 0x90, 0xa0, 0xb0, 0xc0, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, TableWithXUnion_Old_Decode) {
  llcpp::conformance::StructOfTableWithXUnion v1{};
  auto v2 = llcpp::conformance::TableWithXUnion::Build();
  llcpp::conformance::CompatXUnion v3;
  fidl::StringView v4("AB", 2);
  v3.set_s(&v4);
  v2.set_member(&v3);
  auto v5 = v2.view();
  v1.value = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xa8, 0xef, 0xf8, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x41, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, UnionWithBoundString_Old_Decode) {
  llcpp::conformance::UnionWithBoundStringStruct v1{};
  llcpp::conformance::UnionWithBoundString v2;
  fidl::StringView v3("abcd", 4);
  v2.set_boundFiveStr(&v3);
  v1.v = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x61, 0x62, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, UnionMigration_SingleVariant_Old_Decode) {
  llcpp::conformance::SingleVariantUnionStruct v1{};
  llcpp::conformance::SingleVariantUnion v2;
  uint32_t v3 = 42ull;
  v2.set_x(&v3);
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}

TEST(Conformance, ReverseOrdinalUnion_Old_Decode) {
  llcpp::conformance::ReverseOrdinalUnionStruct v1{};
  llcpp::conformance::ReverseOrdinalUnion v2;
  int64_t v3 = 42ull;
  v2.set_x(&v3);
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(&v1, std::move(bytes)));
}
