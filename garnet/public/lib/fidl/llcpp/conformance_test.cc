// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Code generated by tools/fidl/gidl-conformance-suite/regen.sh; DO NOT EDIT.

#include <iostream>
#include <string>
#include <utility>
#include <vector>

#include <conformance/llcpp/fidl.h>
#include <gtest/gtest.h>

#include "garnet/public/lib/fidl/llcpp/test_utils.h"

TEST(Conformance, 3ByteObjectAlignmentInStruct_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByteInStruct))];
    llcpp::conformance::ThreeByteInStruct* v1 =
        new (buf_v2) llcpp::conformance::ThreeByteInStruct();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v3 = new (buf_v4) llcpp::conformance::ThreeByte();
    uint8_t v5 = 1ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 2ull;
    v3->elem2 = std::move(v6);
    uint8_t v7 = 3ull;
    v3->elem3 = std::move(v7);
    v1->elem1 = std::move(*v3);
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v8 = new (buf_v9) llcpp::conformance::ThreeByte();
    uint8_t v10 = 4ull;
    v8->elem1 = std::move(v10);
    uint8_t v11 = 5ull;
    v8->elem2 = std::move(v11);
    uint8_t v12 = 6ull;
    v8->elem3 = std::move(v12);
    v1->elem2 = std::move(*v8);
    char buf_v14[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v13 = new (buf_v14) llcpp::conformance::ThreeByte();
    uint8_t v15 = 7ull;
    v13->elem1 = std::move(v15);
    uint8_t v16 = 8ull;
    v13->elem2 = std::move(v16);
    uint8_t v17 = 9ull;
    v13->elem3 = std::move(v17);
    v1->elem3 = std::move(*v13);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInStruct_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByteInStruct))];
    llcpp::conformance::FiveByteInStruct* v1 = new (buf_v2) llcpp::conformance::FiveByteInStruct();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v3 = new (buf_v4) llcpp::conformance::FiveByte();
    uint32_t v5 = 16909060ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 5ull;
    v3->elem2 = std::move(v6);
    v1->elem1 = std::move(*v3);
    char buf_v8[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v7 = new (buf_v8) llcpp::conformance::FiveByte();
    uint32_t v9 = 101124105ull;
    v7->elem1 = std::move(v9);
    uint8_t v10 = 10ull;
    v7->elem2 = std::move(v10);
    v1->elem2 = std::move(*v7);
    char buf_v12[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v11 = new (buf_v12) llcpp::conformance::FiveByte();
    uint32_t v13 = 185339150ull;
    v11->elem1 = std::move(v13);
    uint8_t v14 = 15ull;
    v11->elem2 = std::move(v14);
    v1->elem3 = std::move(*v11);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByteInVector))];
    llcpp::conformance::ThreeByteInVector* v1 =
        new (buf_v2) llcpp::conformance::ThreeByteInVector();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v3 = new (buf_v4) llcpp::conformance::ThreeByte();
    uint8_t v5 = 1ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 2ull;
    v3->elem2 = std::move(v6);
    uint8_t v7 = 3ull;
    v3->elem3 = std::move(v7);
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v8 = new (buf_v9) llcpp::conformance::ThreeByte();
    uint8_t v10 = 4ull;
    v8->elem1 = std::move(v10);
    uint8_t v11 = 5ull;
    v8->elem2 = std::move(v11);
    uint8_t v12 = 6ull;
    v8->elem3 = std::move(v12);
    char buf_v14[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v13 = new (buf_v14) llcpp::conformance::ThreeByte();
    uint8_t v15 = 7ull;
    v13->elem1 = std::move(v15);
    uint8_t v16 = 8ull;
    v13->elem2 = std::move(v16);
    uint8_t v17 = 9ull;
    v13->elem3 = std::move(v17);
    auto v18 = fidl::Array<llcpp::conformance::ThreeByte, 3>{*v3, *v8, *v13};
    auto v19 = fidl::VectorView<llcpp::conformance::ThreeByte>(v18.data(), 3);
    v1->elems = std::move(v19);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByteInVector))];
    llcpp::conformance::FiveByteInVector* v1 = new (buf_v2) llcpp::conformance::FiveByteInVector();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v3 = new (buf_v4) llcpp::conformance::FiveByte();
    uint32_t v5 = 16909060ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 5ull;
    v3->elem2 = std::move(v6);
    char buf_v8[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v7 = new (buf_v8) llcpp::conformance::FiveByte();
    uint32_t v9 = 101124105ull;
    v7->elem1 = std::move(v9);
    uint8_t v10 = 10ull;
    v7->elem2 = std::move(v10);
    char buf_v12[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v11 = new (buf_v12) llcpp::conformance::FiveByte();
    uint32_t v13 = 185339150ull;
    v11->elem1 = std::move(v13);
    uint8_t v14 = 15ull;
    v11->elem2 = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::FiveByte, 3>{*v3, *v7, *v11};
    auto v16 = fidl::VectorView<llcpp::conformance::FiveByte>(v15.data(), 3);
    v1->elems = std::move(v16);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, 3ByteObjectAlignmentInArray_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByteInArray))];
    llcpp::conformance::ThreeByteInArray* v1 = new (buf_v2) llcpp::conformance::ThreeByteInArray();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v3 = new (buf_v4) llcpp::conformance::ThreeByte();
    uint8_t v5 = 1ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 2ull;
    v3->elem2 = std::move(v6);
    uint8_t v7 = 3ull;
    v3->elem3 = std::move(v7);
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v8 = new (buf_v9) llcpp::conformance::ThreeByte();
    uint8_t v10 = 4ull;
    v8->elem1 = std::move(v10);
    uint8_t v11 = 5ull;
    v8->elem2 = std::move(v11);
    uint8_t v12 = 6ull;
    v8->elem3 = std::move(v12);
    char buf_v14[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v13 = new (buf_v14) llcpp::conformance::ThreeByte();
    uint8_t v15 = 7ull;
    v13->elem1 = std::move(v15);
    uint8_t v16 = 8ull;
    v13->elem2 = std::move(v16);
    uint8_t v17 = 9ull;
    v13->elem3 = std::move(v17);
    auto v18 = fidl::Array<llcpp::conformance::ThreeByte, 3>{*v3, *v8, *v13};
    v1->elems = std::move(v18);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByteInArray))];
    llcpp::conformance::FiveByteInArray* v1 = new (buf_v2) llcpp::conformance::FiveByteInArray();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v3 = new (buf_v4) llcpp::conformance::FiveByte();
    uint32_t v5 = 16909060ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 5ull;
    v3->elem2 = std::move(v6);
    char buf_v8[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v7 = new (buf_v8) llcpp::conformance::FiveByte();
    uint32_t v9 = 101124105ull;
    v7->elem1 = std::move(v9);
    uint8_t v10 = 10ull;
    v7->elem2 = std::move(v10);
    char buf_v12[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v11 = new (buf_v12) llcpp::conformance::FiveByte();
    uint32_t v13 = 185339150ull;
    v11->elem1 = std::move(v13);
    uint8_t v14 = 15ull;
    v11->elem2 = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::FiveByte, 3>{*v3, *v7, *v11};
    v1->elems = std::move(v15);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, EmptyStruct_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v1 = new (buf_v2) llcpp::conformance::EmptyStruct();

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, EmptyStructSandwich_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65,
      0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStructSandwich))];
    llcpp::conformance::EmptyStructSandwich* v1 =
        new (buf_v2) llcpp::conformance::EmptyStructSandwich();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    char buf_v5[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v4 = new (buf_v5) llcpp::conformance::EmptyStruct();
    v1->es = std::move(*v4);
    fidl::StringView v6("after", 5);
    v1->after = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04,
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::Uint8Uint16Uint32Uint64))];
    llcpp::conformance::Uint8Uint16Uint32Uint64* v1 =
        new (buf_v2) llcpp::conformance::Uint8Uint16Uint32Uint64();
    uint8_t v3 = 1ull;
    v1->f1 = std::move(v3);
    uint16_t v4 = 515ull;
    v1->f2 = std::move(v4);
    uint32_t v5 = 67438087ull;
    v1->f3 = std::move(v5);
    uint64_t v6 = 579005069656919567ull;
    v1->f4 = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::Uint64Uint32Uint16Uint8))];
    llcpp::conformance::Uint64Uint32Uint16Uint8* v1 =
        new (buf_v2) llcpp::conformance::Uint64Uint32Uint16Uint8();
    uint64_t v3 = 579005069656919567ull;
    v1->f1 = std::move(v3);
    uint32_t v4 = 67438087ull;
    v1->f2 = std::move(v4);
    uint16_t v5 = 515ull;
    v1->f3 = std::move(v5);
    uint8_t v6 = 1ull;
    v1->f4 = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableEmpty_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructOfSimpleTable))];
    llcpp::conformance::StructOfSimpleTable* v1 =
        new (buf_v2) llcpp::conformance::StructOfSimpleTable();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    auto v4 = v3.view();
    v1->table = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableXAndY_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructOfSimpleTable))];
    llcpp::conformance::StructOfSimpleTable* v1 =
        new (buf_v2) llcpp::conformance::StructOfSimpleTable();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    int64_t v4 = 42ull;
    v3.set_x(&v4);
    int64_t v5 = 67ull;
    v3.set_y(&v5);
    auto v6 = v3.view();
    v1->table = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableJustY_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructOfSimpleTable))];
    llcpp::conformance::StructOfSimpleTable* v1 =
        new (buf_v2) llcpp::conformance::StructOfSimpleTable();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    int64_t v4 = 67ull;
    v3.set_y(&v4);
    auto v5 = v3.view();
    v1->table = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00,
      0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::StructOfTableWithStringAndVector))];
    llcpp::conformance::StructOfTableWithStringAndVector* v1 =
        new (buf_v2) llcpp::conformance::StructOfTableWithStringAndVector();
    auto v3 = llcpp::conformance::TableWithStringAndVector::Build();
    fidl::StringView v4("hello", 5);
    v3.set_foo(&v4);
    int32_t v5 = 27ull;
    v3.set_bar(&v5);
    auto v6 = v3.view();
    v1->table = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableThenUint64_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::SimpleTableThenUint64))];
    llcpp::conformance::SimpleTableThenUint64* v1 =
        new (buf_v2) llcpp::conformance::SimpleTableThenUint64();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    int64_t v4 = 42ull;
    v3.set_x(&v4);
    int64_t v5 = 67ull;
    v3.set_y(&v5);
    auto v6 = v3.view();
    v1->table = std::move(v6);
    uint64_t v7 = 16045690984833335023ull;
    v1->number = std::move(v7);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, InlineXUnionInStruct_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestInlineXUnionInStruct))];
    llcpp::conformance::TestInlineXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestInlineXUnionInStruct();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    llcpp::conformance::SampleXUnion v4;
    uint32_t v5 = 3735928559ull;
    v4.set_u(&v5);
    v1->xu = std::move(v4);
    fidl::StringView v6("after", 5);
    v1->after = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructAbsent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestOptionalXUnionInStruct))];
    llcpp::conformance::TestOptionalXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestOptionalXUnionInStruct();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    fidl::StringView v4("after", 5);
    v1->after = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructPresent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestOptionalXUnionInStruct))];
    llcpp::conformance::TestOptionalXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestOptionalXUnionInStruct();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    llcpp::conformance::SampleXUnion v4;
    uint32_t v5 = 3735928559ull;
    v4.set_u(&v5);
    v1->xu = std::move(v4);
    fidl::StringView v6("after", 5);
    v1->after = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionAbsent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::TestXUnionInTable))];
    llcpp::conformance::TestXUnionInTable* v1 =
        new (buf_v2) llcpp::conformance::TestXUnionInTable();
    auto v3 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v4("before", 6);
    v3.set_before(&v4);
    fidl::StringView v5("after", 5);
    v3.set_after(&v5);
    auto v6 = v3.view();
    v1->value = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionPresent_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2, 0x56,
      0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::TestXUnionInTable))];
    llcpp::conformance::TestXUnionInTable* v1 =
        new (buf_v2) llcpp::conformance::TestXUnionInTable();
    auto v3 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v4("before", 6);
    v3.set_before(&v4);
    llcpp::conformance::SampleXUnion v5;
    uint32_t v6 = 3735928559ull;
    v5.set_u(&v6);
    v3.set_xu(&v5);
    fidl::StringView v7("after", 5);
    v3.set_after(&v7);
    auto v8 = v3.view();
    v1->value = std::move(v8);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, StrictXUnion_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestStrictXUnionInStruct))];
    llcpp::conformance::TestStrictXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestStrictXUnionInStruct();
    llcpp::conformance::SampleStrictXUnion v3;
    uint32_t v4 = 3735928559ull;
    v3.set_u(&v4);
    v1->xu = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, AddEthernetDeviceRequest_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64,
      0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
      0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestAddEthernetDeviceRequest))];
    llcpp::conformance::TestAddEthernetDeviceRequest* v1 =
        new (buf_v2) llcpp::conformance::TestAddEthernetDeviceRequest();
    fidl::StringView v3("@/dev/sys/pci/00:03.0/e1000/ethernet", 36);
    v1->topological_path = std::move(v3);
    char buf_v5[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::InterfaceConfig))];
    llcpp::conformance::InterfaceConfig* v4 = new (buf_v5) llcpp::conformance::InterfaceConfig();
    fidl::StringView v6("ethp0003", 8);
    v4->name = std::move(v6);
    llcpp::conformance::IpAddressConfig v7;
    bool v8 = true;
    v7.set_dhcp(&v8);
    v4->ip_address_config = std::move(v7);
    v1->config = std::move(*v4);
    uint32_t v9 = 4294967295ull;
    v1->this_should_be_a_handle = std::move(v9);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, FileGetAttrResponse_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FileGetAttrResponse))];
    llcpp::conformance::FileGetAttrResponse* v1 =
        new (buf_v2) llcpp::conformance::FileGetAttrResponse();
    int32_t v3 = 2125315759ull;
    v1->s = std::move(v3);
    char buf_v5[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::NodeAttributes))];
    llcpp::conformance::NodeAttributes* v4 = new (buf_v5) llcpp::conformance::NodeAttributes();
    uint32_t v6 = 2518909348ull;
    v4->mode = std::move(v6);
    uint64_t v7 = 1ull;
    v4->id = std::move(v7);
    uint64_t v8 = 231ull;
    v4->content_size = std::move(v8);
    uint64_t v9 = 231ull;
    v4->storage_size = std::move(v9);
    uint64_t v10 = 1ull;
    v4->link_count = std::move(v10);
    uint64_t v11 = 9833440827789222417ull;
    v4->creation_time = std::move(v11);
    uint64_t v12 = 72038755451251353ull;
    v4->modification_time = std::move(v12);
    v1->attributes = std::move(*v4);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Optionals_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithOptionals))];
    llcpp::conformance::StructWithOptionals* v1 =
        new (buf_v2) llcpp::conformance::StructWithOptionals();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v3 = new (buf_v4) llcpp::conformance::EmptyStruct();
    v1->s = std::move(*v3);
    char buf_v6[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v5 = new (buf_v6) llcpp::conformance::EmptyStruct();
    v1->s2 = v5;
    auto v7 = llcpp::conformance::TableWithEmptyStruct::Build();
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v8 = new (buf_v9) llcpp::conformance::EmptyStruct();
    v7.set_s(v8);
    auto v10 = v7.view();
    v1->t = std::move(v10);
    llcpp::conformance::XUnionWithEmptyStruct v11;
    char buf_v13[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v12 = new (buf_v13) llcpp::conformance::EmptyStruct();
    v11.set_s(v12);
    v1->xu = std::move(v11);
    llcpp::conformance::XUnionWithEmptyStruct v14;
    char buf_v16[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v15 = new (buf_v16) llcpp::conformance::EmptyStruct();
    v14.set_s(v15);
    v1->xu2 = std::move(v14);
    llcpp::conformance::UnionWithEmptyStruct v17;
    char buf_v19[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v18 = new (buf_v19) llcpp::conformance::EmptyStruct();
    v17.set_s(*v18);
    v1->u = std::move(v17);
    llcpp::conformance::UnionWithEmptyStruct v20;
    char buf_v22[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v21 = new (buf_v22) llcpp::conformance::EmptyStruct();
    v20.set_s(*v21);
    v1->u2 = &v20;

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Arrays_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithArrays))];
    llcpp::conformance::StructWithArrays* v1 = new (buf_v2) llcpp::conformance::StructWithArrays();
    int32_t v3 = 1ull;
    int32_t v4 = 2ull;
    auto v5 = fidl::Array<int32_t, 2>{v3, v4};
    v1->arr_int = std::move(v5);
    fidl::StringView v6("a", 1);
    fidl::StringView v7("b", 1);
    auto v8 = fidl::Array<fidl::StringView, 2>{v6, v7};
    v1->arr_string = std::move(v8);
    char buf_v10[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithInt))];
    llcpp::conformance::StructWithInt* v9 = new (buf_v10) llcpp::conformance::StructWithInt();
    int32_t v11 = 1ull;
    v9->x = std::move(v11);
    char buf_v13[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithInt))];
    llcpp::conformance::StructWithInt* v12 = new (buf_v13) llcpp::conformance::StructWithInt();
    int32_t v14 = 2ull;
    v12->x = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::StructWithInt, 2>{*v9, *v12};
    v1->arr_struct = std::move(v15);
    int32_t v16 = 1ull;
    int32_t v17 = 2ull;
    int32_t v18 = 3ull;
    auto v19 = fidl::Array<int32_t, 3>{v16, v17, v18};
    int32_t v20 = 4ull;
    int32_t v21 = 5ull;
    int32_t v22 = 6ull;
    auto v23 = fidl::Array<int32_t, 3>{v20, v21, v22};
    auto v24 = fidl::Array<fidl::Array<int32_t, 3>, 2>{v19, v23};
    v1->arr_arr_int = std::move(v24);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Vectors_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithVectors))];
    llcpp::conformance::StructWithVectors* v1 =
        new (buf_v2) llcpp::conformance::StructWithVectors();
    auto v3 = fidl::VectorView<int32_t>();
    v1->vec_empty = std::move(v3);
    int32_t v4 = 1ull;
    int32_t v5 = 2ull;
    auto v6 = fidl::Array<int32_t, 2>{v4, v5};
    auto v7 = fidl::VectorView<int32_t>(v6.data(), 2);
    v1->vec_int = std::move(v7);
    fidl::StringView v8("a", 1);
    fidl::StringView v9("b", 1);
    auto v10 = fidl::Array<fidl::StringView, 2>{v8, v9};
    auto v11 = fidl::VectorView<fidl::StringView>(v10.data(), 2);
    v1->vec_string = std::move(v11);
    char buf_v13[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithInt))];
    llcpp::conformance::StructWithInt* v12 = new (buf_v13) llcpp::conformance::StructWithInt();
    int32_t v14 = 1ull;
    v12->x = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::StructWithInt, 1>{*v12};
    auto v16 = fidl::VectorView<llcpp::conformance::StructWithInt>(v15.data(), 1);
    v1->vec_struct = std::move(v16);
    int32_t v17 = 1ull;
    int32_t v18 = 2ull;
    auto v19 = fidl::Array<int32_t, 2>{v17, v18};
    auto v20 = fidl::VectorView<int32_t>(v19.data(), 2);
    int32_t v21 = 3ull;
    auto v22 = fidl::Array<int32_t, 1>{v21};
    auto v23 = fidl::VectorView<int32_t>(v22.data(), 1);
    auto v24 = fidl::Array<fidl::VectorView<int32_t>, 2>{v20, v23};
    auto v25 = fidl::VectorView<fidl::VectorView<int32_t>>(v24.data(), 2);
    v1->vec_vec_int = std::move(v25);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, BoolTrue_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyBool))];
    llcpp::conformance::MyBool* v1 = new (buf_v2) llcpp::conformance::MyBool();
    bool v3 = true;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, BoolFalse_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyBool))];
    llcpp::conformance::MyBool* v1 = new (buf_v2) llcpp::conformance::MyBool();
    bool v3 = false;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, ByteZero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyByte))];
    llcpp::conformance::MyByte* v1 = new (buf_v2) llcpp::conformance::MyByte();
    uint8_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Byte255_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyByte))];
    llcpp::conformance::MyByte* v1 = new (buf_v2) llcpp::conformance::MyByte();
    uint8_t v3 = 255ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int8Min_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt8))];
    llcpp::conformance::MyInt8* v1 = new (buf_v2) llcpp::conformance::MyInt8();
    int8_t v3 = -128ll;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int8Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt8))];
    llcpp::conformance::MyInt8* v1 = new (buf_v2) llcpp::conformance::MyInt8();
    int8_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int8Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt8))];
    llcpp::conformance::MyInt8* v1 = new (buf_v2) llcpp::conformance::MyInt8();
    int8_t v3 = 127ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int16Min_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt16))];
    llcpp::conformance::MyInt16* v1 = new (buf_v2) llcpp::conformance::MyInt16();
    int16_t v3 = -32768ll;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int16Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt16))];
    llcpp::conformance::MyInt16* v1 = new (buf_v2) llcpp::conformance::MyInt16();
    int16_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int16Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt16))];
    llcpp::conformance::MyInt16* v1 = new (buf_v2) llcpp::conformance::MyInt16();
    int16_t v3 = 32767ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int32Min_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt32))];
    llcpp::conformance::MyInt32* v1 = new (buf_v2) llcpp::conformance::MyInt32();
    int32_t v3 = -2147483648ll;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int32Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt32))];
    llcpp::conformance::MyInt32* v1 = new (buf_v2) llcpp::conformance::MyInt32();
    int32_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int32Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt32))];
    llcpp::conformance::MyInt32* v1 = new (buf_v2) llcpp::conformance::MyInt32();
    int32_t v3 = 2147483647ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int64Min_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt64))];
    llcpp::conformance::MyInt64* v1 = new (buf_v2) llcpp::conformance::MyInt64();
    int64_t v3 = -9223372036854775807ll - 1;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int64Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt64))];
    llcpp::conformance::MyInt64* v1 = new (buf_v2) llcpp::conformance::MyInt64();
    int64_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int64Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt64))];
    llcpp::conformance::MyInt64* v1 = new (buf_v2) llcpp::conformance::MyInt64();
    int64_t v3 = 9223372036854775807ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint8Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint8))];
    llcpp::conformance::MyUint8* v1 = new (buf_v2) llcpp::conformance::MyUint8();
    uint8_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint8Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint8))];
    llcpp::conformance::MyUint8* v1 = new (buf_v2) llcpp::conformance::MyUint8();
    uint8_t v3 = 255ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint16Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint16))];
    llcpp::conformance::MyUint16* v1 = new (buf_v2) llcpp::conformance::MyUint16();
    uint16_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint16Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint16))];
    llcpp::conformance::MyUint16* v1 = new (buf_v2) llcpp::conformance::MyUint16();
    uint16_t v3 = 65535ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint32Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint32))];
    llcpp::conformance::MyUint32* v1 = new (buf_v2) llcpp::conformance::MyUint32();
    uint32_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint32Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint32))];
    llcpp::conformance::MyUint32* v1 = new (buf_v2) llcpp::conformance::MyUint32();
    uint32_t v3 = 4294967295ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint64Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint64))];
    llcpp::conformance::MyUint64* v1 = new (buf_v2) llcpp::conformance::MyUint64();
    uint64_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint64Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint64))];
    llcpp::conformance::MyUint64* v1 = new (buf_v2) llcpp::conformance::MyUint64();
    uint64_t v3 = 18446744073709551615ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = 0.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32One_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = 1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32MinusOne_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = -1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = 340282346638528859811704183484516925440.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64Zero_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 = 0.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64One_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 = 1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64MinusOne_Encode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 = -1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64Max_Encode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 =
        179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::EncodeSuccess(v1, expected));
  }
}

TEST(Conformance, 3ByteObjectAlignmentInStruct_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByteInStruct))];
    llcpp::conformance::ThreeByteInStruct* v1 =
        new (buf_v2) llcpp::conformance::ThreeByteInStruct();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v3 = new (buf_v4) llcpp::conformance::ThreeByte();
    uint8_t v5 = 1ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 2ull;
    v3->elem2 = std::move(v6);
    uint8_t v7 = 3ull;
    v3->elem3 = std::move(v7);
    v1->elem1 = std::move(*v3);
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v8 = new (buf_v9) llcpp::conformance::ThreeByte();
    uint8_t v10 = 4ull;
    v8->elem1 = std::move(v10);
    uint8_t v11 = 5ull;
    v8->elem2 = std::move(v11);
    uint8_t v12 = 6ull;
    v8->elem3 = std::move(v12);
    v1->elem2 = std::move(*v8);
    char buf_v14[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v13 = new (buf_v14) llcpp::conformance::ThreeByte();
    uint8_t v15 = 7ull;
    v13->elem1 = std::move(v15);
    uint8_t v16 = 8ull;
    v13->elem2 = std::move(v16);
    uint8_t v17 = 9ull;
    v13->elem3 = std::move(v17);
    v1->elem3 = std::move(*v13);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInStruct_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByteInStruct))];
    llcpp::conformance::FiveByteInStruct* v1 = new (buf_v2) llcpp::conformance::FiveByteInStruct();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v3 = new (buf_v4) llcpp::conformance::FiveByte();
    uint32_t v5 = 16909060ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 5ull;
    v3->elem2 = std::move(v6);
    v1->elem1 = std::move(*v3);
    char buf_v8[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v7 = new (buf_v8) llcpp::conformance::FiveByte();
    uint32_t v9 = 101124105ull;
    v7->elem1 = std::move(v9);
    uint8_t v10 = 10ull;
    v7->elem2 = std::move(v10);
    v1->elem2 = std::move(*v7);
    char buf_v12[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v11 = new (buf_v12) llcpp::conformance::FiveByte();
    uint32_t v13 = 185339150ull;
    v11->elem1 = std::move(v13);
    uint8_t v14 = 15ull;
    v11->elem2 = std::move(v14);
    v1->elem3 = std::move(*v11);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByteInVector))];
    llcpp::conformance::ThreeByteInVector* v1 =
        new (buf_v2) llcpp::conformance::ThreeByteInVector();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v3 = new (buf_v4) llcpp::conformance::ThreeByte();
    uint8_t v5 = 1ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 2ull;
    v3->elem2 = std::move(v6);
    uint8_t v7 = 3ull;
    v3->elem3 = std::move(v7);
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v8 = new (buf_v9) llcpp::conformance::ThreeByte();
    uint8_t v10 = 4ull;
    v8->elem1 = std::move(v10);
    uint8_t v11 = 5ull;
    v8->elem2 = std::move(v11);
    uint8_t v12 = 6ull;
    v8->elem3 = std::move(v12);
    char buf_v14[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v13 = new (buf_v14) llcpp::conformance::ThreeByte();
    uint8_t v15 = 7ull;
    v13->elem1 = std::move(v15);
    uint8_t v16 = 8ull;
    v13->elem2 = std::move(v16);
    uint8_t v17 = 9ull;
    v13->elem3 = std::move(v17);
    auto v18 = fidl::Array<llcpp::conformance::ThreeByte, 3>{*v3, *v8, *v13};
    auto v19 = fidl::VectorView<llcpp::conformance::ThreeByte>(v18.data(), 3);
    v1->elems = std::move(v19);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByteInVector))];
    llcpp::conformance::FiveByteInVector* v1 = new (buf_v2) llcpp::conformance::FiveByteInVector();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v3 = new (buf_v4) llcpp::conformance::FiveByte();
    uint32_t v5 = 16909060ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 5ull;
    v3->elem2 = std::move(v6);
    char buf_v8[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v7 = new (buf_v8) llcpp::conformance::FiveByte();
    uint32_t v9 = 101124105ull;
    v7->elem1 = std::move(v9);
    uint8_t v10 = 10ull;
    v7->elem2 = std::move(v10);
    char buf_v12[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v11 = new (buf_v12) llcpp::conformance::FiveByte();
    uint32_t v13 = 185339150ull;
    v11->elem1 = std::move(v13);
    uint8_t v14 = 15ull;
    v11->elem2 = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::FiveByte, 3>{*v3, *v7, *v11};
    auto v16 = fidl::VectorView<llcpp::conformance::FiveByte>(v15.data(), 3);
    v1->elems = std::move(v16);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, 3ByteObjectAlignmentInArray_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByteInArray))];
    llcpp::conformance::ThreeByteInArray* v1 = new (buf_v2) llcpp::conformance::ThreeByteInArray();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v3 = new (buf_v4) llcpp::conformance::ThreeByte();
    uint8_t v5 = 1ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 2ull;
    v3->elem2 = std::move(v6);
    uint8_t v7 = 3ull;
    v3->elem3 = std::move(v7);
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v8 = new (buf_v9) llcpp::conformance::ThreeByte();
    uint8_t v10 = 4ull;
    v8->elem1 = std::move(v10);
    uint8_t v11 = 5ull;
    v8->elem2 = std::move(v11);
    uint8_t v12 = 6ull;
    v8->elem3 = std::move(v12);
    char buf_v14[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::ThreeByte))];
    llcpp::conformance::ThreeByte* v13 = new (buf_v14) llcpp::conformance::ThreeByte();
    uint8_t v15 = 7ull;
    v13->elem1 = std::move(v15);
    uint8_t v16 = 8ull;
    v13->elem2 = std::move(v16);
    uint8_t v17 = 9ull;
    v13->elem3 = std::move(v17);
    auto v18 = fidl::Array<llcpp::conformance::ThreeByte, 3>{*v3, *v8, *v13};
    v1->elems = std::move(v18);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByteInArray))];
    llcpp::conformance::FiveByteInArray* v1 = new (buf_v2) llcpp::conformance::FiveByteInArray();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v3 = new (buf_v4) llcpp::conformance::FiveByte();
    uint32_t v5 = 16909060ull;
    v3->elem1 = std::move(v5);
    uint8_t v6 = 5ull;
    v3->elem2 = std::move(v6);
    char buf_v8[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v7 = new (buf_v8) llcpp::conformance::FiveByte();
    uint32_t v9 = 101124105ull;
    v7->elem1 = std::move(v9);
    uint8_t v10 = 10ull;
    v7->elem2 = std::move(v10);
    char buf_v12[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FiveByte))];
    llcpp::conformance::FiveByte* v11 = new (buf_v12) llcpp::conformance::FiveByte();
    uint32_t v13 = 185339150ull;
    v11->elem1 = std::move(v13);
    uint8_t v14 = 15ull;
    v11->elem2 = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::FiveByte, 3>{*v3, *v7, *v11};
    v1->elems = std::move(v15);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, EmptyStruct_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v1 = new (buf_v2) llcpp::conformance::EmptyStruct();

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, EmptyStructSandwich_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65,
      0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStructSandwich))];
    llcpp::conformance::EmptyStructSandwich* v1 =
        new (buf_v2) llcpp::conformance::EmptyStructSandwich();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    char buf_v5[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v4 = new (buf_v5) llcpp::conformance::EmptyStruct();
    v1->es = std::move(*v4);
    fidl::StringView v6("after", 5);
    v1->after = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04,
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::Uint8Uint16Uint32Uint64))];
    llcpp::conformance::Uint8Uint16Uint32Uint64* v1 =
        new (buf_v2) llcpp::conformance::Uint8Uint16Uint32Uint64();
    uint8_t v3 = 1ull;
    v1->f1 = std::move(v3);
    uint16_t v4 = 515ull;
    v1->f2 = std::move(v4);
    uint32_t v5 = 67438087ull;
    v1->f3 = std::move(v5);
    uint64_t v6 = 579005069656919567ull;
    v1->f4 = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::Uint64Uint32Uint16Uint8))];
    llcpp::conformance::Uint64Uint32Uint16Uint8* v1 =
        new (buf_v2) llcpp::conformance::Uint64Uint32Uint16Uint8();
    uint64_t v3 = 579005069656919567ull;
    v1->f1 = std::move(v3);
    uint32_t v4 = 67438087ull;
    v1->f2 = std::move(v4);
    uint16_t v5 = 515ull;
    v1->f3 = std::move(v5);
    uint8_t v6 = 1ull;
    v1->f4 = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableEmpty_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructOfSimpleTable))];
    llcpp::conformance::StructOfSimpleTable* v1 =
        new (buf_v2) llcpp::conformance::StructOfSimpleTable();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    auto v4 = v3.view();
    v1->table = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableXAndY_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructOfSimpleTable))];
    llcpp::conformance::StructOfSimpleTable* v1 =
        new (buf_v2) llcpp::conformance::StructOfSimpleTable();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    int64_t v4 = 42ull;
    v3.set_x(&v4);
    int64_t v5 = 67ull;
    v3.set_y(&v5);
    auto v6 = v3.view();
    v1->table = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableJustY_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructOfSimpleTable))];
    llcpp::conformance::StructOfSimpleTable* v1 =
        new (buf_v2) llcpp::conformance::StructOfSimpleTable();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    int64_t v4 = 67ull;
    v3.set_y(&v4);
    auto v5 = v3.view();
    v1->table = std::move(v5);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00,
      0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::StructOfTableWithStringAndVector))];
    llcpp::conformance::StructOfTableWithStringAndVector* v1 =
        new (buf_v2) llcpp::conformance::StructOfTableWithStringAndVector();
    auto v3 = llcpp::conformance::TableWithStringAndVector::Build();
    fidl::StringView v4("hello", 5);
    v3.set_foo(&v4);
    int32_t v5 = 27ull;
    v3.set_bar(&v5);
    auto v6 = v3.view();
    v1->table = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, SimpleTableThenUint64_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::SimpleTableThenUint64))];
    llcpp::conformance::SimpleTableThenUint64* v1 =
        new (buf_v2) llcpp::conformance::SimpleTableThenUint64();
    auto v3 = llcpp::conformance::SimpleTable::Build();
    int64_t v4 = 42ull;
    v3.set_x(&v4);
    int64_t v5 = 67ull;
    v3.set_y(&v5);
    auto v6 = v3.view();
    v1->table = std::move(v6);
    uint64_t v7 = 16045690984833335023ull;
    v1->number = std::move(v7);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, InlineXUnionInStruct_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestInlineXUnionInStruct))];
    llcpp::conformance::TestInlineXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestInlineXUnionInStruct();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    llcpp::conformance::SampleXUnion v4;
    uint32_t v5 = 3735928559ull;
    v4.set_u(&v5);
    v1->xu = std::move(v4);
    fidl::StringView v6("after", 5);
    v1->after = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructAbsent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestOptionalXUnionInStruct))];
    llcpp::conformance::TestOptionalXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestOptionalXUnionInStruct();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    fidl::StringView v4("after", 5);
    v1->after = std::move(v4);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, OptionalXUnionInStructPresent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestOptionalXUnionInStruct))];
    llcpp::conformance::TestOptionalXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestOptionalXUnionInStruct();
    fidl::StringView v3("before", 6);
    v1->before = std::move(v3);
    llcpp::conformance::SampleXUnion v4;
    uint32_t v5 = 3735928559ull;
    v4.set_u(&v5);
    v1->xu = std::move(v4);
    fidl::StringView v6("after", 5);
    v1->after = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionAbsent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::TestXUnionInTable))];
    llcpp::conformance::TestXUnionInTable* v1 =
        new (buf_v2) llcpp::conformance::TestXUnionInTable();
    auto v3 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v4("before", 6);
    v3.set_before(&v4);
    fidl::StringView v5("after", 5);
    v3.set_after(&v5);
    auto v6 = v3.view();
    v1->value = std::move(v6);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, XUnionInTableXUnionPresent_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2, 0x56,
      0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::TestXUnionInTable))];
    llcpp::conformance::TestXUnionInTable* v1 =
        new (buf_v2) llcpp::conformance::TestXUnionInTable();
    auto v3 = llcpp::conformance::XUnionInTable::Build();
    fidl::StringView v4("before", 6);
    v3.set_before(&v4);
    llcpp::conformance::SampleXUnion v5;
    uint32_t v6 = 3735928559ull;
    v5.set_u(&v6);
    v3.set_xu(&v5);
    fidl::StringView v7("after", 5);
    v3.set_after(&v7);
    auto v8 = v3.view();
    v1->value = std::move(v8);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, StrictXUnion_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestStrictXUnionInStruct))];
    llcpp::conformance::TestStrictXUnionInStruct* v1 =
        new (buf_v2) llcpp::conformance::TestStrictXUnionInStruct();
    llcpp::conformance::SampleStrictXUnion v3;
    uint32_t v4 = 3735928559ull;
    v3.set_u(&v4);
    v1->xu = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, AddEthernetDeviceRequest_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64,
      0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
      0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(
        sizeof(llcpp::conformance::TestAddEthernetDeviceRequest))];
    llcpp::conformance::TestAddEthernetDeviceRequest* v1 =
        new (buf_v2) llcpp::conformance::TestAddEthernetDeviceRequest();
    fidl::StringView v3("@/dev/sys/pci/00:03.0/e1000/ethernet", 36);
    v1->topological_path = std::move(v3);
    char buf_v5[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::InterfaceConfig))];
    llcpp::conformance::InterfaceConfig* v4 = new (buf_v5) llcpp::conformance::InterfaceConfig();
    fidl::StringView v6("ethp0003", 8);
    v4->name = std::move(v6);
    llcpp::conformance::IpAddressConfig v7;
    bool v8 = true;
    v7.set_dhcp(&v8);
    v4->ip_address_config = std::move(v7);
    v1->config = std::move(*v4);
    uint32_t v9 = 4294967295ull;
    v1->this_should_be_a_handle = std::move(v9);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, FileGetAttrResponse_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::FileGetAttrResponse))];
    llcpp::conformance::FileGetAttrResponse* v1 =
        new (buf_v2) llcpp::conformance::FileGetAttrResponse();
    int32_t v3 = 2125315759ull;
    v1->s = std::move(v3);
    char buf_v5[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::NodeAttributes))];
    llcpp::conformance::NodeAttributes* v4 = new (buf_v5) llcpp::conformance::NodeAttributes();
    uint32_t v6 = 2518909348ull;
    v4->mode = std::move(v6);
    uint64_t v7 = 1ull;
    v4->id = std::move(v7);
    uint64_t v8 = 231ull;
    v4->content_size = std::move(v8);
    uint64_t v9 = 231ull;
    v4->storage_size = std::move(v9);
    uint64_t v10 = 1ull;
    v4->link_count = std::move(v10);
    uint64_t v11 = 9833440827789222417ull;
    v4->creation_time = std::move(v11);
    uint64_t v12 = 72038755451251353ull;
    v4->modification_time = std::move(v12);
    v1->attributes = std::move(*v4);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Optionals_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char
        buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithOptionals))];
    llcpp::conformance::StructWithOptionals* v1 =
        new (buf_v2) llcpp::conformance::StructWithOptionals();
    char buf_v4[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v3 = new (buf_v4) llcpp::conformance::EmptyStruct();
    v1->s = std::move(*v3);
    char buf_v6[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v5 = new (buf_v6) llcpp::conformance::EmptyStruct();
    v1->s2 = v5;
    auto v7 = llcpp::conformance::TableWithEmptyStruct::Build();
    char buf_v9[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v8 = new (buf_v9) llcpp::conformance::EmptyStruct();
    v7.set_s(v8);
    auto v10 = v7.view();
    v1->t = std::move(v10);
    llcpp::conformance::XUnionWithEmptyStruct v11;
    char buf_v13[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v12 = new (buf_v13) llcpp::conformance::EmptyStruct();
    v11.set_s(v12);
    v1->xu = std::move(v11);
    llcpp::conformance::XUnionWithEmptyStruct v14;
    char buf_v16[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v15 = new (buf_v16) llcpp::conformance::EmptyStruct();
    v14.set_s(v15);
    v1->xu2 = std::move(v14);
    llcpp::conformance::UnionWithEmptyStruct v17;
    char buf_v19[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v18 = new (buf_v19) llcpp::conformance::EmptyStruct();
    v17.set_s(*v18);
    v1->u = std::move(v17);
    llcpp::conformance::UnionWithEmptyStruct v20;
    char buf_v22[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::EmptyStruct))];
    llcpp::conformance::EmptyStruct* v21 = new (buf_v22) llcpp::conformance::EmptyStruct();
    v20.set_s(*v21);
    v1->u2 = &v20;

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Arrays_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithArrays))];
    llcpp::conformance::StructWithArrays* v1 = new (buf_v2) llcpp::conformance::StructWithArrays();
    int32_t v3 = 1ull;
    int32_t v4 = 2ull;
    auto v5 = fidl::Array<int32_t, 2>{v3, v4};
    v1->arr_int = std::move(v5);
    fidl::StringView v6("a", 1);
    fidl::StringView v7("b", 1);
    auto v8 = fidl::Array<fidl::StringView, 2>{v6, v7};
    v1->arr_string = std::move(v8);
    char buf_v10[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithInt))];
    llcpp::conformance::StructWithInt* v9 = new (buf_v10) llcpp::conformance::StructWithInt();
    int32_t v11 = 1ull;
    v9->x = std::move(v11);
    char buf_v13[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithInt))];
    llcpp::conformance::StructWithInt* v12 = new (buf_v13) llcpp::conformance::StructWithInt();
    int32_t v14 = 2ull;
    v12->x = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::StructWithInt, 2>{*v9, *v12};
    v1->arr_struct = std::move(v15);
    int32_t v16 = 1ull;
    int32_t v17 = 2ull;
    int32_t v18 = 3ull;
    auto v19 = fidl::Array<int32_t, 3>{v16, v17, v18};
    int32_t v20 = 4ull;
    int32_t v21 = 5ull;
    int32_t v22 = 6ull;
    auto v23 = fidl::Array<int32_t, 3>{v20, v21, v22};
    auto v24 = fidl::Array<fidl::Array<int32_t, 3>, 2>{v19, v23};
    v1->arr_arr_int = std::move(v24);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Vectors_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithVectors))];
    llcpp::conformance::StructWithVectors* v1 =
        new (buf_v2) llcpp::conformance::StructWithVectors();
    auto v3 = fidl::VectorView<int32_t>();
    v1->vec_empty = std::move(v3);
    int32_t v4 = 1ull;
    int32_t v5 = 2ull;
    auto v6 = fidl::Array<int32_t, 2>{v4, v5};
    auto v7 = fidl::VectorView<int32_t>(v6.data(), 2);
    v1->vec_int = std::move(v7);
    fidl::StringView v8("a", 1);
    fidl::StringView v9("b", 1);
    auto v10 = fidl::Array<fidl::StringView, 2>{v8, v9};
    auto v11 = fidl::VectorView<fidl::StringView>(v10.data(), 2);
    v1->vec_string = std::move(v11);
    char buf_v13[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::StructWithInt))];
    llcpp::conformance::StructWithInt* v12 = new (buf_v13) llcpp::conformance::StructWithInt();
    int32_t v14 = 1ull;
    v12->x = std::move(v14);
    auto v15 = fidl::Array<llcpp::conformance::StructWithInt, 1>{*v12};
    auto v16 = fidl::VectorView<llcpp::conformance::StructWithInt>(v15.data(), 1);
    v1->vec_struct = std::move(v16);
    int32_t v17 = 1ull;
    int32_t v18 = 2ull;
    auto v19 = fidl::Array<int32_t, 2>{v17, v18};
    auto v20 = fidl::VectorView<int32_t>(v19.data(), 2);
    int32_t v21 = 3ull;
    auto v22 = fidl::Array<int32_t, 1>{v21};
    auto v23 = fidl::VectorView<int32_t>(v22.data(), 1);
    auto v24 = fidl::Array<fidl::VectorView<int32_t>, 2>{v20, v23};
    auto v25 = fidl::VectorView<fidl::VectorView<int32_t>>(v24.data(), 2);
    v1->vec_vec_int = std::move(v25);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, BoolTrue_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyBool))];
    llcpp::conformance::MyBool* v1 = new (buf_v2) llcpp::conformance::MyBool();
    bool v3 = true;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, BoolFalse_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyBool))];
    llcpp::conformance::MyBool* v1 = new (buf_v2) llcpp::conformance::MyBool();
    bool v3 = false;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, ByteZero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyByte))];
    llcpp::conformance::MyByte* v1 = new (buf_v2) llcpp::conformance::MyByte();
    uint8_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Byte255_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyByte))];
    llcpp::conformance::MyByte* v1 = new (buf_v2) llcpp::conformance::MyByte();
    uint8_t v3 = 255ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int8Min_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt8))];
    llcpp::conformance::MyInt8* v1 = new (buf_v2) llcpp::conformance::MyInt8();
    int8_t v3 = -128ll;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int8Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt8))];
    llcpp::conformance::MyInt8* v1 = new (buf_v2) llcpp::conformance::MyInt8();
    int8_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int8Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt8))];
    llcpp::conformance::MyInt8* v1 = new (buf_v2) llcpp::conformance::MyInt8();
    int8_t v3 = 127ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int16Min_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt16))];
    llcpp::conformance::MyInt16* v1 = new (buf_v2) llcpp::conformance::MyInt16();
    int16_t v3 = -32768ll;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int16Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt16))];
    llcpp::conformance::MyInt16* v1 = new (buf_v2) llcpp::conformance::MyInt16();
    int16_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int16Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt16))];
    llcpp::conformance::MyInt16* v1 = new (buf_v2) llcpp::conformance::MyInt16();
    int16_t v3 = 32767ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int32Min_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt32))];
    llcpp::conformance::MyInt32* v1 = new (buf_v2) llcpp::conformance::MyInt32();
    int32_t v3 = -2147483648ll;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int32Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt32))];
    llcpp::conformance::MyInt32* v1 = new (buf_v2) llcpp::conformance::MyInt32();
    int32_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int32Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt32))];
    llcpp::conformance::MyInt32* v1 = new (buf_v2) llcpp::conformance::MyInt32();
    int32_t v3 = 2147483647ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int64Min_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt64))];
    llcpp::conformance::MyInt64* v1 = new (buf_v2) llcpp::conformance::MyInt64();
    int64_t v3 = -9223372036854775807ll - 1;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int64Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt64))];
    llcpp::conformance::MyInt64* v1 = new (buf_v2) llcpp::conformance::MyInt64();
    int64_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Int64Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyInt64))];
    llcpp::conformance::MyInt64* v1 = new (buf_v2) llcpp::conformance::MyInt64();
    int64_t v3 = 9223372036854775807ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint8Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint8))];
    llcpp::conformance::MyUint8* v1 = new (buf_v2) llcpp::conformance::MyUint8();
    uint8_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint8Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint8))];
    llcpp::conformance::MyUint8* v1 = new (buf_v2) llcpp::conformance::MyUint8();
    uint8_t v3 = 255ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint16Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint16))];
    llcpp::conformance::MyUint16* v1 = new (buf_v2) llcpp::conformance::MyUint16();
    uint16_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint16Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint16))];
    llcpp::conformance::MyUint16* v1 = new (buf_v2) llcpp::conformance::MyUint16();
    uint16_t v3 = 65535ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint32Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint32))];
    llcpp::conformance::MyUint32* v1 = new (buf_v2) llcpp::conformance::MyUint32();
    uint32_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint32Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint32))];
    llcpp::conformance::MyUint32* v1 = new (buf_v2) llcpp::conformance::MyUint32();
    uint32_t v3 = 4294967295ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint64Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint64))];
    llcpp::conformance::MyUint64* v1 = new (buf_v2) llcpp::conformance::MyUint64();
    uint64_t v3 = 0ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Uint64Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyUint64))];
    llcpp::conformance::MyUint64* v1 = new (buf_v2) llcpp::conformance::MyUint64();
    uint64_t v3 = 18446744073709551615ull;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = 0.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32One_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = 1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32MinusOne_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = -1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float32Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat32))];
    llcpp::conformance::MyFloat32* v1 = new (buf_v2) llcpp::conformance::MyFloat32();
    float v3 = 340282346638528859811704183484516925440.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64Zero_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 = 0.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64One_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 = 1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64MinusOne_Decode) {
  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 = -1.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}

TEST(Conformance, Float64Max_Decode) {
  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f,

  };

  {
    char buf_v2[llcpp_conformance_utils::FidlAlign(sizeof(llcpp::conformance::MyFloat64))];
    llcpp::conformance::MyFloat64* v1 = new (buf_v2) llcpp::conformance::MyFloat64();
    double v3 =
        179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.000000;
    v1->value = std::move(v3);

    EXPECT_TRUE(llcpp_conformance_utils::DecodeSuccess(v1, expected));
  }
}
