// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

[DartPackage="fuchsia_filesystem"]
module fuchsia.filesystem;

import "interfaces/errors.mojom";
import "interfaces/filesystem/common.mojom";

// File describes the interface for a logical array of bytes on a file system,
// providing operations for reading and writing the contents of the file.
// Operations on a single File handle are guaranteed to be performed in the
// order they were received.
interface File {
  // ReadAt reads and returns the |len| bytes at offset |off| in "this" file.
  // |off| is interpreted relative to the beginning of the file.  |err| will be
  // a value other than OK if the length of the returned array is less than |len|.
  ReadAt(int64 off, int64 len) => (array<uint8>? bytes, errors.Error err);

  // WriteAt writes the data in |bytes| to "this" file starting at offset |off|,
  // relative to the beginning of the file.  |n| will hold the number of bytes
  // written, and |err| will be a value other than OK if |n| is less than the length
  // of |bytes|.
  WriteAt(array<uint8> bytes, int64 off) => (int64 n, errors.Error err);

  // ReadTo reads |len| bytes from "this" file starting at offset |off| from the
  // beginning of "this" file into |src|.  ReadTo may return before all |len| bytes
  // have been written into |src|.  If the contents of the file are changed while the
  // operation is running, it is undefined whether the modified contents will appear
  // in the stream.  Clients may wish to use this function for efficiently reading
  // large chunks of data from the file.
  ReadTo(handle<data_pipe_producer> src, int64 off, int64 len) => (errors.Error err);

  // WriteFrom writes the data from |sink| to "this" file starting at offset |off|,
  // relative to the beginning of the file.  WriteFrom may return before all data from
  // |sink| has been written to the file.  If the contents of the file are changed while
  // the operation is running, it is undefined whether the modified contents will be
  // overwritten by the data in the stream.  Clients may wish to use this function for
  // efficiently writing large chunks of data to the file.
  WriteFrom(handle<data_pipe_consumer> sink, int64 off) => (errors.Error err);

  // Size returns the size of "this" file in bytes.  The return value is undefined
  // after the file is closed.
  Size() => (int64 size, errors.Error err);

  // Clone creates a new handle pointing to "this" file with the same permissions as
  // the client's handle.
  Clone(File& file) => (errors.Error err);

  // Reopen creates a new handle pointing to "this" file with the provided flags.
  // This operation can only be used to reduce the permissions provided by the
  // handle.  For example, a client cannot use Reopen to create a handle with
  // read/write permissions for "this" file on a handle with read-only access.
  Reopen(File& file, OpenFlags flags) => (errors.Error err);
};
