// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="fuchsia_block"]
module fuchsia.block;

import "interfaces/errors.mojom";

// Capabilities that specify what operations are possible on a Device.
enum Capabilities {
  // Clients may not read or write data but may find out information about a
  // Device.
  NONE = 0,

  // Clients may only read from a Device.
  READ_ONLY = 1,

  // Clients may read or write data.
  READ_WRITE = 2,
};

// Device describes the interface that all block devices must implement so
// that they may be used by file system services.
[ServiceName="fuchsia::block::Device"]
interface Device {
  // GetCapabilities returns the permissions associated with the client's
  // handle to "this" device.  Does not require any permissions.
  GetCapabilities() => (Capabilities caps, errors.Error err);

  // SetCapabilities updates the permissions associated with the client's
  // handle to "this" device.  Capabilities can only be dropped and can never
  // be regained once they are dropped.  So clients can go from READ_WRITE to
  // READ_ONLY or NONE but the reverse operation is not permitted.  If |caps|
  // contains more than one of the Capabilities values, the service will select
  // and apply the most restrictive permission.
  SetCapabilities(Capabilities caps) => (errors.Error err);

  // BlockSize returns the number of bytes in a block.  Operations on a Device
  // are performed in block units.  Does not require any permissions.
  BlockSize() => (int64 size, errors.Error err);

  // Size returns the size of the device in bytes.  The return value is undefined
  // after the device is closed.  Does not require any permissions.
  Size() => (int64 size, errors.Error err);

  // ReadBlocks reads the |count| blocks starting at block number |block| and
  // returns the data in |data|.  |err| will be some value other than OK if the
  // length of |data| is less than |count| * BlockSize().  Requires READ_ONLY
  // or READ_WRITE permissions.
  ReadBlocks(int64 block, int64 count) => (array<uint8> data, errors.Error err);

  // WriteBlocks writes the data in |data| to the |count| blocks starting at
  // |block|.  Returns the number of bytes written in |n|.  If |n| is less than
  // the length of |data|, |err| will be a value other than OK.  Requires READ_WRITE
  // permissions.
  WriteBlocks(int64 block, int64 count, array<uint8> data) => (int64 n, errors.Error err);

  // DiscardBlocks frees the |count| blocks starting at block number |block|.
  // Clients should call this function when they are no longer using blocks so
  // the device may reclaim them.  Requires READ_WRITE permissions.
  DiscardBlocks(int64 block, int64 count) => (errors.Error err);

  // Barrier inserts a barrier between I/O operations.  All operations that were
  // started before the call to Barrier will complete and persist to stable
  // storage before any operations that were started after the call to Barrier
  // can persist to stable storage.  Requires READ_WRITE permissions.
  Barrier() => (errors.Error err);

  // Flush flushes all pending I/O operations and will not return until all operations
  // that were started before the call to Flush have persisted to stable storage.
  // Requires READ_WRITE permissions.
  Flush() => (errors.Error err);
};
