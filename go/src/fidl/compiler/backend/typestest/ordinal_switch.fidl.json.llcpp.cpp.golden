// WARNING: This file is machine generated by fidlgen.

#include <ordinal_switch.fidl.json.llcpp.h>
#include <memory>

namespace test {
namespace name {

namespace {

[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_OrdinalFive_Ordinal = 2005164903u;
[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal = 667506719u;
[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_EventOrdinalFifteen_Ordinal = 1467258273u;
[[maybe_unused]]
constexpr uint32_t kSwitchingOrdinals_EventOnlyGeneratedOrdinal_Ordinal = 2146190926u;

}  // namespace

zx_status_t SwitchingOrdinals::SyncClient::OrdinalFive() {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OrdinalFiveRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<OrdinalFiveRequest*>(_write_bytes);
  _request._hdr.ordinal = kSwitchingOrdinals_OrdinalFive_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OrdinalFiveRequest));
  ::fidl::DecodedMessage<OrdinalFiveRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  const auto& _oneway = _encode_request_result.message;
  return this->channel_.write(0,
                              _oneway.bytes().data(), _oneway.bytes().actual(),
                              _oneway.handles().data(), _oneway.handles().actual());
}


zx_status_t SwitchingOrdinals::SyncClient::OnlyGeneratedOrdinal() {
  constexpr uint32_t _kWriteAllocSize = ::fidl::internal::ClampedMessageSize<OnlyGeneratedOrdinalRequest>();
  FIDL_ALIGNDECL uint8_t _write_bytes[_kWriteAllocSize] = {};
  auto& _request = *reinterpret_cast<OnlyGeneratedOrdinalRequest*>(_write_bytes);
  _request._hdr.ordinal = kSwitchingOrdinals_OnlyGeneratedOrdinal_Ordinal;
  ::fidl::BytePart _request_bytes(_write_bytes, _kWriteAllocSize, sizeof(OnlyGeneratedOrdinalRequest));
  ::fidl::DecodedMessage<OnlyGeneratedOrdinalRequest> _decoded_request(std::move(_request_bytes));
  auto _encode_request_result = ::fidl::Encode(std::move(_decoded_request));
  if (_encode_request_result.status != ZX_OK) {
    return _encode_request_result.status;
  }
  const auto& _oneway = _encode_request_result.message;
  return this->channel_.write(0,
                              _oneway.bytes().data(), _oneway.bytes().actual(),
                              _oneway.handles().data(), _oneway.handles().actual());
}


}  // namespace name
}  // namespace test
