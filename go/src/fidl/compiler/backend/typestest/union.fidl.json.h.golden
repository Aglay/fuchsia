// WARNING: This file is machine generated by fidlgen.

#pragma once

#include "lib/fidl/cpp/internal/header.h"


namespace test {
namespace name {

class Union;

class Union {
 public:
  Union();
  ~Union();

  Union(Union&&);
  Union& operator=(Union&&);

  enum class Tag : fidl_union_tag_t {
    kPrimitive = 0,
    kStringNeedsConstructor = 1,
    kVectorStringAlsoNeedsConstructor = 2,
    Invalid = ::std::numeric_limits<::fidl_union_tag_t>::max(),
  };

  static inline ::std::unique_ptr<Union> New() { return ::std::make_unique<Union>(); }

  void Encode(::fidl::Encoder* encoder, size_t offset);
  static void Decode(::fidl::Decoder* decoder, Union* value, size_t offset);
  zx_status_t Clone(Union* result) const;

  bool has_invalid_tag() const { return tag_ == ::std::numeric_limits<::fidl_union_tag_t>::max(); }

  bool is_Primitive() const { return tag_ == 0; }
  
  int32_t& Primitive() {
    EnsureStorageInitialized(0);
    return Primitive_;
  }
  
  const int32_t& Primitive() const { return Primitive_; }
  void set_Primitive(int32_t value);

  bool is_StringNeedsConstructor() const { return tag_ == 1; }
  
  ::fidl::StringPtr& StringNeedsConstructor() {
    EnsureStorageInitialized(1);
    return StringNeedsConstructor_;
  }
  
  const ::fidl::StringPtr& StringNeedsConstructor() const { return StringNeedsConstructor_; }
  void set_StringNeedsConstructor(::fidl::StringPtr value);

  bool is_VectorStringAlsoNeedsConstructor() const { return tag_ == 2; }
  
  ::fidl::VectorPtr<::fidl::StringPtr>& VectorStringAlsoNeedsConstructor() {
    EnsureStorageInitialized(2);
    return VectorStringAlsoNeedsConstructor_;
  }
  
  const ::fidl::VectorPtr<::fidl::StringPtr>& VectorStringAlsoNeedsConstructor() const { return VectorStringAlsoNeedsConstructor_; }
  void set_VectorStringAlsoNeedsConstructor(::fidl::VectorPtr<::fidl::StringPtr> value);

  Tag Which() const { return Tag(tag_); }

 private:
  friend bool operator==(const Union& lhs, const Union& rhs);
  void Destroy();
  void EnsureStorageInitialized(::fidl_union_tag_t tag);

  ::fidl_union_tag_t tag_;
  union {
    int32_t Primitive_;
    ::fidl::StringPtr StringNeedsConstructor_;
    ::fidl::VectorPtr<::fidl::StringPtr> VectorStringAlsoNeedsConstructor_;
  };
};

bool operator==(const Union& lhs, const Union& rhs);
inline bool operator!=(const Union& lhs, const Union& rhs) {
  return !(lhs == rhs);
}

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return value.Clone(result);
}

using UnionPtr = ::std::unique_ptr<Union>;
}  // namespace name
}  // namespace test
namespace fidl {

template <>
struct CodingTraits<::test::name::Union>
    : public EncodableCodingTraits<::test::name::Union, 24> {};

inline zx_status_t Clone(const ::test::name::Union& value,
                         ::test::name::Union* result) {
  return ::test::name::Clone(value, result);
}}  // namespace fidl
