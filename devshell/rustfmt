#!/usr/bin/env python
# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### Runs rustfmt on a Rust target

import argparse
import os
import platform
import subprocess
import sys

import lib.rust
from lib.rust import ROOT_PATH, CONFIG_PATH

def main():
    parser = argparse.ArgumentParser("Format a rust target")
    parser.add_argument("gn_target",
                        type=lib.rust.GnTarget,
                        help="GN target to format. \
                              Use '.[:target]' to discover the cargo target \
                              for the current directory or use the \
                              absolute path to the target \
                              (relative to $FUCHSIA_DIR). \
                              For example: //garnet/bin/foo/bar:baz.")

    args = parser.parse_args()

    out_dir = lib.rust.find_out_dir()

    main_file = os.path.join(args.gn_target.path, "src", "main.rs")
    if not os.path.exists(main_file):
        main_file = os.path.join(args.gn_target.path, "src", "lib.rs")
    if not os.path.exists(main_file):
        print("No lib.rs or main.rs found for this gn target")
        return 1

    host_platform = "%s-%s" % (
        platform.system().lower().replace("darwin", "mac"),
        {
            "x86_64": "x64",
            "aarch64": "arm64",
        }[platform.machine()],
    )
    buildtools_dir = os.path.join(ROOT_PATH, "buildtools", host_platform)
    rustfmt = os.path.join(buildtools_dir, "rust", "bin", "rustfmt")

    call_args = [
        rustfmt,
        main_file,
    ]

    return subprocess.call(call_args)

if __name__ == '__main__':
    sys.exit(main())
