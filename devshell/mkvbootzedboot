#!/bin/bash
# Copyright 2017 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### make a zedboot configuration in a target directory

## usage: fx mkvbootzedboot </dev/your/usb/disk>
## Builds Fuchsia bootloader and zedboot and copies it to a drive of
## your choice. Makes zedboot the default boot option.

set -e

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/lib/image_build_vars.sh

# TODO(raggi): this defensiveness can probably get in the way, and should
# probably be removed at the first sign of trouble.
is_usb() {
  fx-command-run list-usb-disks | grep "$1"
}

USB_DEVICE="$1"
if [[ -z "${USB_DEVICE}" ]]; then
  echo >&2 "device argument required"
  echo "USB disks:"
  fx-command-run list-usb-disks
  exit 1
fi
if ! is_usb "${USB_DEVICE}"; then
  echo >&2 "USB disk device argument required"
  echo "USB disks:"
  fx-command-run list-usb-disks
  exit 1
fi

if [[ "$(uname)" == "Darwin" ]]; then
  diskutil unmountDisk "${USB_DEVICE}"
fi

sudo chown "${USER}" "${USB_DEVICE}"

# Destroy any existing GPT/MBR on the device and re-create
echo -n "Create new GPT partition table... "
"${FUCHSIA_BUILD_DIR}/tools/cgpt" repair "${USB_DEVICE}"
"${FUCHSIA_BUILD_DIR}/tools/cgpt" create -z "${USB_DEVICE}"
"${FUCHSIA_BUILD_DIR}/tools/cgpt" create "${USB_DEVICE}"
echo "done"

echo -n "Create new partitions... "
"${FUCHSIA_BUILD_DIR}/tools/cgpt" add -s 32768 -t kernel -b 64 -l kernel "${USB_DEVICE}"
"${FUCHSIA_BUILD_DIR}/tools/cgpt" add -i 1 -T 1 -S 1 -P 2 "${USB_DEVICE}"
echo "done"

echo "Building signed zedboot image"
fx-command-run build "images/zedboot-${ZIRCON_PROJECT}.vboot"
echo "done"

echo -n "Writing zedboot"
dd if="${FUCHSIA_BUILD_DIR}/images/zedboot-${ZIRCON_PROJECT}.vboot" of="${USB_DEVICE}" seek=64
echo "done"
