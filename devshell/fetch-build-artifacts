#!/bin/bash
# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### fetch artifacts for a CI build

## usage: fx fetch-buid-artifacts [-r] [-o <outdir>] <buildbucket_id>
##
## Downloads artifacts created by the specified build.
##
## <buildbucket_id> is a large number like '8938070794014050064', which you can
## find on the build results page. This tool accepts an optional leading 'b',
## letting you copy-and-paste the ID component from a URL like
## https://ci.chromium.org/p/fuchsia/builders/luci.fuchsia.ci/garnet-arm64-release-qemu_kvm/b8938011100592458048
##
## Prerequisites:
## - Install the 'gsutil' tool:
##   https://cloud.google.com/storage/docs/gsutil_install
## - Run 'gcloud init'. The default project does not matter, but if you need to
##   provide one you can use 'fuchsia-infra'.
##   - If you don't have gcloud installed, you can run 'gsutil config' instead.
## - The user must have permission to access the target artifacts in Google
##   Cloud Storage (GCS).
##
## Optional arguments:
##   -r    Indicates that the build ID points to a release build, whose
##         artifacts are stored in a special GCS bucket.
##   -o    The directory to write the artifacts to. Defaults to
##         <fuchsia-root>/out/build-artifacts/<buildbucket_id>.

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"/lib/vars.sh
fx-config-read

function usage {
  fx-command-help fetch-build-artifacts
}

function main {
  fx-standard-switches "$@"
  set -- "${FX_ARGV[@]}"

  set -o errexit
  set -o nounset
  set -o pipefail

  if [[ -z "$(which gsutil)" ]]; then
    echo "ERROR: Please install gsutil and run 'gcloud init'."
    echo "See https://cloud.google.com/storage/docs/gsutil_install"
    return 1
  fi

  local outdir=''
  local is_release=0
  while getopts "ro:" arg; do
    case ${arg} in
      o)
        outdir="${OPTARG}"
        ;;
      r)
        is_release=1
        ;;
      *)
        usage
        return 1
        ;;
    esac
  done
  shift $((${OPTIND} - 1))

  # Expect exactly one build ID.
  if [[ $# -ne 1 ]]; then
    echo "ERROR: Build ID missing."
    usage
    return 1
  fi
  local build_id="$1"

  # Make sure it's a number, but allow a leading 'b' since some LUCI URLs
  # tack it onto the build ID component.
  if [[ ! "${build_id}" =~ ^b?[0-9]+$ ]]; then
    echo "ERROR: Build ID '${build_id}' is not a number."
    usage
    return 1
  fi
  build_id="${build_id#b}"  # Remove leading 'b' if present.

  if [[ -z "${outdir}" ]]; then
    outdir="${FUCHSIA_OUT_DIR}/build-artifacts/${build_id}"
  fi

  if (( is_release )); then
    local archive_bucket='fuchsia-release-archive'
  else
    local archive_bucket='fuchsia-archive'
  fi

  echo "Fetching build ${build_id} to ${outdir} ..."
  mkdir -p "${outdir}"

  local failed=0
  (
    set -x  # Prints the gsutil command
    # -c: Continue downloading later files even if an earlier one fails
    # -L: Log file to use for resuming. Also avoids re-downloading files.
    gsutil cp \
      -c \
      -L "${outdir}/.gsutil-cp.log" \
      -r \
      "gs://${archive_bucket}/builds/${build_id}/*" "${outdir}"
  ) || failed=1

  if (( failed )); then
    if (( ! is_release )); then
      echo "NOTE: If you are trying to download a release build, remember"
      echo "      to specify the '-r' flag."
    fi
    return 1
  fi

  echo "Downloaded artifacts to ${outdir}"
  echo "DONE"
}

main "$@"
