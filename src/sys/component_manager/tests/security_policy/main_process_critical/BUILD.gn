# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/fidl/fidl.gni")
import("//build/rust/rustc_binary.gni")
import("//build/rust/rustc_test.gni")
import("//build/test/test_package.gni")

group("tests") {
  testonly = true
  deps = [ ":security-policy-critical-integration-test" ]
}

rustc_test("security_policy_critical_integration_test_bin") {
  name = "security_policy_critical_integration_test"
  edition = "2018"
  source_root = "security_policy_critical_integration_test.rs"
  deps = [
    ":test.policy-rustc",
    "../util:security_policy_test_util",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/sys/component_manager/tests:test_utils_lib",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:futures",
  ]

  enforce_source_listing = true

  sources = [ "security_policy_critical_integration_test.rs" ]
}

fidl("test.policy") {
  name = "test.policy"
  sources = [ "policy.test.fidl" ]
  public_deps = [ "//zircon/vdso/zx" ]
}

rustc_binary("exit_on_command") {
  edition = "2018"
  source_root = "exit_on_command.rs"
  deps = [
    ":test.policy-rustc",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:futures",
  ]

  enforce_source_listing = true

  sources = [ "exit_on_command.rs" ]
}

test_package("security-policy-critical-integration-test") {
  deps = [
    ":exit_on_command",
    ":security_policy_critical_integration_test_bin",
    "//src/sys/component_manager:bin",
    "//src/sys/component_manager:component_manager_test_config",
  ]

  tests = [
    {
      name = "security_policy_critical_integration_test"
    },
  ]

  meta = [
    {
      path =
          rebase_path("//src/sys/component_manager/meta/component_manager.cmx")
      dest = "component_manager.cmx"
    },

    # v2 manifests used in the integration test
    {
      path = "meta/test_root.cml"
      dest = "test_root.cm"
    },
    {
      path = "meta/exit_on_command.cml"
      dest = "exit_on_command.cm"
    },
    {
      path = "meta/exit_on_command_no_request.cml"
      dest = "exit_on_command_no_request.cm"
    },
  ]

  binaries = [
    {
      name = "component_manager"
    },
    {
      name = "exit_on_command"
    },
  ]

  resources = [
    {
      path = "cm_config.json"
      dest = "cm_config.json"
    },
    {
      path = "${root_gen_dir}/src/sys/component_manager/component_manager_test_config"
      dest = "component_manager_config"
    },
  ]
}
