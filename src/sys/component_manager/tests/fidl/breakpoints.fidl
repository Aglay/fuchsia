// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.test.breakpoints;

/// The maximum number of event types that a receiver can listen to.
/// This capacity should match the actual number of event types.
const uint64 MAX_NUM_EVENT_TYPES_RECEIVED = 9;

/// The maximum string length of a component moniker.
const uint64 MAX_MONIKER_LENGTH = 100;

/// The maximum string length of a capability ID.
/// This value is currently set arbitrarily.
const uint64 MAX_CAPABILITY_ID_LENGTH = 50;

/// These EventTypes are used for the Breakpoints protocol.
/// They are FIDL versions of the EventType enum in hooks.rs and have
/// the same meaning.
enum EventType {
    /// A dynamic child was added to the parent instance.
    /// Depending on its eagerness, this child may/may not be started yet.
    ADD_DYNAMIC_CHILD = 1;

    /// An instance was destroyed successfully. The instance is stopped and no longer
    /// exists in the parent's realm.
    POST_DESTROY_INSTANCE = 2;

    /// Destruction of an instance has begun. The instance may/may not be stopped by this point.
    /// The instance still exists in the parent's realm but will soon be removed.
    /// TODO(fxb/39417): Ensure the instance is stopped before this event.
    PRE_DESTROY_INSTANCE = 3;

    /// The root component instance's declaration was resolved successfully for the first time.
    ROOT_COMPONENT_RESOLVED = 4;

    /// A builtin capability is being requested by a component and requires routing.
    /// The event propagation system is used to supply the capability being requested.
    ROUTE_CAPABILITY = 5;

    /// An instance was bound to. If the instance is executable, it is also started.
    START_INSTANCE = 6;

    /// An instance was stopped successfully.
    /// This event must occur before PostDestroyInstance.
    STOP_INSTANCE = 7;
};

/// Describes the source of a routed capability.
xunion CapabilitySource {
    /// The capability is provided by the framework and may be
    /// scoped down to a component.
    1: FrameworkCapability framework;

    /// The capability is provided by another component.
    2: ComponentCapability component;
};

/// Describes a capability provided by the framework
table FrameworkCapability {
    /// The moniker of the instance that this capability is scoped to.
    1: string:MAX_MONIKER_LENGTH scope_moniker;
};

/// Describes a capability provided by a component
table ComponentCapability {
    /// The moniker of the instance that is providing this capability.
    1: string:MAX_MONIKER_LENGTH source_moniker;
};

/// Encapsulates additional data/protocols for some event types.
table EventPayload {
    /// Payload for RouteCapability events
    1: RoutingPayload routing_payload;
};

/// Payload for RouteCapability events
table RoutingPayload {
    /// Allows setting a capability provider for
    /// RouteCapability events
    1: RoutingProtocol routing_protocol;

    /// Identifier of capability being requested.
    /// For a path-based capability, this is the path.
    /// For a runner capability, this is the name.
    2: string:MAX_CAPABILITY_ID_LENGTH capability_id;

    /// Source of the capability that needs to be routed.
    3: CapabilitySource source;
};

/// Contains all information about a single invocation of a breakpoint
table Invocation {
    /// Event type corresponding to the invocation
    1: EventType event_type;

    /// Moniker of instance corresponding to the invocation
    2: string:MAX_MONIKER_LENGTH target_moniker;

    /// Handler for resuming from invocation
    3: Handler handler;

    /// Optional payload for some event types
    4: EventPayload event_payload;
};

/// Registers breakpoints in component manager.
[Discoverable]
protocol BreakpointSystem {
    /// Sets breakpoints on the given EventTypes.
    /// Returns a BreakpointInvocationReceiver which can be used
    /// to expect the registered types.
    SetBreakpoints(vector<EventType>:MAX_NUM_EVENT_TYPES_RECEIVED event_types, request<InvocationReceiver> server_end) -> ();

    /// Begins component manager's execution.
    /// This method is a no-op when invoked more than once or by
    /// a component inside component manager.
    StartComponentManager() -> ();
};

/// Receives invocations for registered events in component manager.
protocol InvocationReceiver {
    /// Blocks until the next invocation of a breakpoint occurs.
    ///
    /// Note: The component manager is blocked after this call and will not be
    /// allowed to proceed until resumed explicitly via the Handler.
    Next() -> (Invocation invocation);
};

/// Every Invocation supports this basic handler to allow resumption.
protocol Handler {
    /// Resumes/unblocks from an invocation.
    Resume() -> ();
};

/// Allows injecting capabilities over FIDL.
/// Used by RouteFrameworkCapability and RouteBuiltinCapability
protocol RoutingProtocol {
    /// Inject a CapabilityProvider in response to a routing event.
    SetProvider(CapabilityProvider client_end) -> ();
};

/// A FIDL-based version of a CapabilityProvider
protocol CapabilityProvider {
    /// Called to bind a server end of a channel to the provided framework capability.
    /// TODO(xbhatnag): provide all arguments (flags, mode, path) to this method.
    Open(handle<channel> server_end) -> ();
};
