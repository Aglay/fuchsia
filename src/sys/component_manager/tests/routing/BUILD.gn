# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rustc_binary.gni")
import("//build/rust/rustc_test.gni")
import("//build/test/test_package.gni")

group("tests") {
  testonly = true

  deps = [ ":routing_integration_test" ]
}

rustc_test("routing_integration_test_bin") {
  name = "routing_integration_test"
  edition = "2018"
  source_root = "routing_integration_test.rs"
  deps = [
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-runtime",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/sys/component_manager/tests:test_utils",
    "//third_party/rust_crates:anyhow",
    "//zircon/system/fidl/fuchsia-io:fuchsia-io-rustc",
  ]
}

executable("expose_dirs") {
  sources = [ "expose_dirs.cc" ]

  deps = [
    "//zircon/public/lib/async-loop-cpp",
    "//zircon/public/lib/async-loop-default",
    "//zircon/public/lib/fs",
    "//zircon/public/lib/memfs",
    "//zircon/public/lib/svc",
    "//zircon/public/lib/zx",
    "//zircon/system/fidl/fuchsia-io",
  ]
}

rustc_binary("check_dir_rights") {
  edition = "2018"
  source_root = "check_dir_rights.rs"
  deps = [
    "//garnet/lib/rust/io_util",
    "//garnet/public/lib/fidl/rust/fidl",
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fuchsia-async",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//third_party/rust_crates:anyhow",
    "//zircon/system/fidl/fuchsia-io:fuchsia-io-rustc",
  ]
}

test_package("routing_integration_test") {
  deps = [
    ":check_dir_rights",
    ":expose_dirs",
    ":routing_integration_test_bin",
    "//examples/components/routing/echo_client",
    "//examples/components/routing/echo_server",
  ]

  meta = [
    {
      path = rebase_path("//examples/components/routing/meta/echo_server.cml")
      dest = "echo_server.cm"
    },
    {
      path = rebase_path("//examples/components/routing/meta/echo_client.cml")
      dest = "echo_client.cm"
    },
    {
      path = rebase_path("meta/echo_realm.cml")
      dest = "echo_realm.cm"
    },
    {
      path = rebase_path("meta/check_dir_rights.cml")
      dest = "check_dir_rights.cm"
    },
    {
      path = rebase_path("meta/expose_dirs.cml")
      dest = "expose_dirs.cm"
    },
    {
      path = rebase_path("meta/route_dirs_from_sibling.cml")
      dest = "route_dirs_from_sibling.cm"
    },
  ]

  binaries = [
    {
      name = "echo_server"
    },
    {
      name = "echo_client"
    },
    {
      name = "check_dir_rights"
    },
    {
      name = "expose_dirs"
    },
  ]

  tests = [
    {
      name = "routing_integration_test"
    },
  ]
}
