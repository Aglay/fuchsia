# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rustc_binary.gni")
import("//build/rust/rustc_library.gni")
import("//build/rust/rustc_test.gni")
import("//build/test/test_package.gni")

rustc_library("work_scheduler_dispatch_reporter") {
  name = "work_scheduler_dispatch_reporter"
  edition = "2018"
  source_root = "work_scheduler_dispatch_reporter.rs"
  deps = [
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//src/sys/component_manager:lib",
    "//src/sys/component_manager/testing:test_utils_lib",
    "//src/sys/component_manager/tests/fidl:fuchsia.test.workscheduler-rustc",
    "//src/sys/lib/cm_rust",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:async-trait",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:lazy_static",
  ]

  sources = [ "work_scheduler_dispatch_reporter.rs" ]
}

rustc_test("work_scheduler_integration_test_bin") {
  name = "work_scheduler_integration_test"
  edition = "2018"
  source_root = "//src/sys/component_manager/tests/work_scheduler/work_scheduler_integration_test.rs"
  deps = [
    ":work_scheduler_dispatch_reporter",
    "//sdk/fidl/fuchsia.sys2:fuchsia.sys2-rustc",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/sys/component_manager:lib",
    "//src/sys/component_manager/testing:test_utils_lib",
    "//src/sys/component_manager/tests/fidl:fuchsia.test.workscheduler-rustc",
  ]

  sources = [ "work_scheduler_integration_test.rs" ]
}

test_package("work_scheduler_integration_test") {
  deps = [
    ":work_scheduler_integration_test_bin",
    "components:bound_worker_bin",
    "components:unbound_child_worker_child_bin",
    "components:unbound_child_worker_sibling_bin",
  ]

  meta = [
    {
      path = rebase_path("components/unbound_child/meta/worker_child.cml")
      dest = "unbound_child_worker_child.cm"
    },
    {
      path = rebase_path("components/unbound_child/meta/worker_sibling.cml")
      dest = "unbound_child_worker_sibling.cm"
    },
    {
      path = rebase_path("components/unbound_child/meta/worker_parent.cml")
      dest = "unbound_child_worker_parent.cm"
    },
    {
      path = rebase_path("components/bound/meta/worker.cml")
      dest = "bound_worker.cm"
    },
  ]

  binaries = [
    {
      name = "unbound_child_worker_child"
    },
    {
      name = "unbound_child_worker_sibling"
    },
    {
      name = "bound_worker"
    },
  ]

  tests = [
    {
      name = "work_scheduler_integration_test"
    },
  ]
}
