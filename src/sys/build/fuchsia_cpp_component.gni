# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/sys/build/fuchsia_component.gni")

# Defines a Fuchsia component that contains a C++ program.
# See: https://fuchsia.dev/fuchsia-src/glossary#component
#
# This template is a combination of `fuchsia_component()` and `executable()`.
# It takes the same parameters as `fuchsia_component()` does, and forwards the
# rest to `executable()`.
# In addition, the output of the `executable()` will automatically be included
# in the component's resources under the path "bin/executable_name", where
# executable_name is either the `output_name` parameter if provided or the
# target name.
#
# See also:
# * //src/sys/build/fuchsia_component.gni
# * https://gn.googlesource.com/gn/+/master/docs/reference.md#func_executable
#
# Example:
# ```
# fuchsia_cpp_component("my-component") {
#   sources = [ "main.cc" ]
#   manifest = "manifest.cml"
# }
#
# fuchsia_package("my-package") {
#   deps = [ ":my-component" ]
#   ...
# }
# ```
# The component above will have the following launch URL:
# `fuchsia-pkg://fuchsia.com/my-package#meta/my-component.cm`
#
# Parameters
#
#   manifest (required)
#     The component manifest.
#     Type: path
#
#   component_name (optional)
#     The name of the component.
#     Type: string
#     Default: target_name
#
#   resources (optional)
#     Resources to include. See documentation for `fuchsia_component()`.
#     Type: list(scopes)
#
#   data_deps
#   deps
#   public_deps
#   testonly
#   visibility
#
#   Additional parameters will be forwarded to `executable()`.
template("fuchsia_cpp_component") {
  assert(
      defined(invoker.manifest),
      "A `manifest` argument was missing when calling fuchsia_cpp_component($target_name)")

  output_name = target_name
  if (defined(invoker.output_name)) {
    output_name = invoker.output_name
  }

  executable_target = "${target_name}_executable"
  executable(executable_target) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "component_name",
                             "manifest",
                             "output_name",
                             "resources",
                             "target_name",
                             "visibility",
                           ])
    output_name = output_name
    visibility = [ ":*" ]
  }

  fuchsia_component(target_name) {
    forward_variables_from(invoker,
                           [
                             "component_name",
                             "data_deps",
                             "deps",
                             "manifest",
                             "public_deps",
                             "resources",
                             "testonly",
                             "visibility",
                           ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ ":$executable_target" ]
    if (!defined(resources)) {
      resources = []
    }
    resources += [
      {
        source = "$root_out_dir/$output_name"
        destination = "bin/$output_name"
      },
    ]
  }
}
