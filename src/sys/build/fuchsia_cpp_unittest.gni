# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("fuchsia_unittest_internal.gni")

# Defines a C++ gtest to be used as a unit test on Fuchsia.
#
# This template is a useful shortcut for defining C++ unit tests for target
# devices. Pure unit tests don't require any special capabilities, so their
# component manifest can be generated by the template.
# Optionally callers can pass their own component manifest as an override.
#
# Example:
# ```
# fuchsia_cpp_unittest("rot13-test") {
#   sources = [ "rot13_encoder_decoder_test.cc" ]
#   deps = [ ... ]
# }
# ```
#
# The above will create a test with the launch URL:
# fuchsia-pkg://fuchsia.com/rot13-test#meta/rot13-test.cm
#
# Parameters
#
#   manifest (optional)
#     Specify a component manifest for the test.
#     If a manifest is not specified, a trivial manifest will be generated.
#     The generated manifest requests no special capabilities, which is good
#     enough for "pure" unit tests.
#     To view the generated manifest, see:
#     `fx gn outputs out/default path/to/your:<target_name>_generated_manifest`
#     Type: path
#
#   resources (optional)
#     Additional resources needed by your test.
#     For instance, read-only data assets such as golden files.
#     See `fuchsia_component.gni` for details.
#     Type: list(scopes)
#
#   test_specs (optional)
#     Additional test specifications to apply to the test defined above.
#     See `test_spec.gni`.
#     Type: scope
#
#   data_deps
#   deps
#   public_deps
#   visibility
#
#   Additional `executable()` parameters will be forwarded.
template("fuchsia_cpp_unittest") {
  output_name = target_name
  if (defined(invoker.output_name)) {
    output_name = invoker.output_name
  }

  executable_target = "${target_name}_executable"
  executable(executable_target) {
    forward_variables_from(invoker,
                           "*",
                           [
                             "manifest",
                             "resources",
                             "target_name",
                             "test_spec",
                           ])
    output_name = output_name
    testonly = true
    visibility = [ ":*" ]
  }

  if (!defined(invoker.manifest)) {
    binary = "test/$output_name"
    manifest_contents = {
      program = {
        binary = binary
      }
      use = [
        {
          runner = "gtest_runner"
        },
        {
          protocol = [ "/svc/fuchsia.logger.LogSink" ]
          from = "realm"
        },
      ]
      expose = [
        {
          protocol = [ "/svc/fuchsia.test.Suite" ]
          from = "self"
        },
      ]
    }
  }

  fuchsia_unittest_internal(target_name) {
    forward_variables_from(invoker, [ "manifest_contents" ])
    forward_variables_from(invoker, "*")
    executable_target = ":$executable_target"
    additional_resources = [
      {
        source = "$root_out_dir/$output_name"
        destination = "test/$output_name"
      },
    ]
  }
}
