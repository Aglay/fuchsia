# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Generates a component manifest.
#
# Good enough for simple unit tests and not a whole lot more.
# For use only by other templates in this directory.
#
# Parameters
#
#   executable_path (required)
#     Value for program.binary.
#     Example: "bin/my_executable"
#     This executable must be generated by one of the `deps`.
#     Type: string
#
#   executable_args (optional)
#     Value for program.args.
#     Example: ["--foo", "bar"]
#     Type: list of string
#
#   v2_test_runner (optional)
#     If specified and no manifest is specified, a trivial Components v2
#     manifest will be generated using the specified test runner. The
#     generated manifest will include temporary storage at /tmp but no other
#     special capabilities. Typical values: "rust_test_runner",
#     "gtest_runner" or "go_test_runner".
#     Type: string
#
#   data_deps
#   deps
#   public_deps
#   testonly
#   visibility
template("generated_component_manifest") {
  generated_file(target_name) {
    forward_variables_from(invoker,
                           [
                             "data_deps",
                             "deps",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])
    program_stanza = {
      binary = invoker.executable_path
      if (defined(invoker.executable_args)) {
        args = invoker.executable_args
      }
    }
    if (defined(invoker.v2_test_runner)) {
      contents = {
        include = [ "sdk/lib/diagnostics/syslog/client.shard.cml" ]
        program = program_stanza
        capabilities = [
          {
            protocol = "fuchsia.test.Suite"
          },
        ]
        use = [
          {
            runner = invoker.v2_test_runner
          },
          {
            storage = "temp"
            path = "/tmp"
          },
        ]
        expose = [
          {
            protocol = "fuchsia.test.Suite"
            from = "self"
          },
        ]
      }
      outputs = [ "$target_out_dir/${target_name}.cml" ]
    } else {
      contents = {
        include = [ "sdk/lib/diagnostics/syslog/client.shard.cmx" ]
        program = program_stanza
      }
      outputs = [ "$target_out_dir/${target_name}.cmx" ]
    }
    output_conversion = "json"
  }
}
