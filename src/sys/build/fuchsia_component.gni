# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/sys/cmc/build/cml.gni")
import("//src/sys/cmc/build/cmx.gni")

# Defines a Fuchsia component.
# See: https://fuchsia.dev/fuchsia-src/glossary#component
#
# A component is defined by a component manifest.
# Component manifests typically reference files in the package that they are
# distributed in. Therefore a component can also have dependencies on
# `fuchsia_resources()`, such that any package that depends on the component
# will also include these resources.
#
# A component is launched by a URL.
# See: https://fuchsia.dev/fuchsia-src/glossary#component_url
#
# A component's URL is a function of the name of a package that includes it,
# and the path within that package to the component's manifest. For instance if
# you defined the following:
# ```
# executable("my-program") {
#   ...
# }
#
# fuchsia_component("my-component") {
#   manifest = "manifest.cml"
#   resources = [
#     {
#       source = "$root_out_dir/my-program"
#       destination = "bin/my-program"
#     }
#     ...
#   ]
#   deps = [
#     ":my-program",
#     ...
#   ]
#   ...
# }
#
# fuchsia_package("my-package") {
#   deps = [ ":my-component" ]
#   ...
# }
# ```
# The component above will have the following launch URL:
# `fuchsia-pkg://fuchsia.com/my-package#meta/my-component.cm`
#
# Components may depend on any number of `resources()` to ensure that any
# `fuchsia_package()` that includes them will include the same resources.
# It's also possible to specify resources within the component definition as a
# shorter form, as demonstrated above.
#
# The following target:
# ```
# fuchsia_component("my-component") {
#   ...
#   resources = [
#     {
#       source = "my_file.txt"
#       destination = "data/my_file.txt"
#     }
#   ]
# }
# ```
# Is equivalent to:
# ```
# resources("my_file") {
#   sources = [ "my_file.txt" ]
#   destination = "data/{{source_file_part}}"
# }
#
# fuchsia_component("my-component") {
#   deps = [ ":my_file" ]
#   ...
# }
# ```
#
# Parameters
#
#   manifest (required)
#     The component manifest.
#     Type: path
#
#   component_name (optional)
#     The name of the component.
#     Type: string
#     Default: target_name
#
#   resources (optional)
#     Resources to include.
#     This is a short form for adding `deps` on `resources` targets.
#     Type: list(scopes)
#     Scopes contain a required `source` and an optional `destination`.
#     If a `destination` is not specified, the file name of `source` is used.
#
#   data_deps
#   deps
#   public_deps
#   testonly
#   visibility
template("fuchsia_component") {
  assert(
      defined(invoker.manifest),
      "A `manifest` argument was missing when calling fuchsia_component($target_name)")

  component_name = target_name
  if (defined(invoker.component_name)) {
    component_name = invoker.component_name
  }

  # Handle different manifest versions
  if (get_path_info(invoker.manifest, "extension") == "cml") {
    manifest_processor = "cm"
    manifest_name = "$component_name.cm"
  } else if (get_path_info(invoker.manifest, "extension") == "cmx") {
    manifest_processor = "cmx"
    manifest_name = "$component_name.cmx"
  } else {
    assert(
        false,
        "Unknown manifest format for \"$manifest\" passed to fuchsia_component($target_name)")
  }

  # Process the manifest
  target(manifest_processor, target_name) {
    output_name = manifest_name
    forward_variables_from(invoker,
                           [
                             "data_deps",
                             "deps",
                             "public_deps",
                             "manifest",
                             "testonly",
                             "visibility",
                           ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [ ":${target_name}_metadata" ]
  }

  # Package the manifest
  group("${target_name}_metadata") {
    manifest_source = get_target_outputs(":${invoker.target_name}")
    manifest_source = rebase_path(manifest_source[0], root_out_dir)
    metadata = {
      package_manifest_args = [ "--entry=meta/$manifest_name=$manifest_source" ]
    }
    visibility = [ ":*" ]

    if (defined(invoker.resources)) {
      foreach(resource, invoker.resources) {
        source = rebase_path(resource.source, root_out_dir)
        destination = get_path_info(resource.source, "file")
        if (defined(resource.destination)) {
          destination = resource.destination
        }
        metadata.package_manifest_args += [ "--entry=$destination=$source" ]
      }
    }
  }
}
