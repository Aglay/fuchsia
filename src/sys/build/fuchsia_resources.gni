# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Defines resources to be included in Fuchsia packages.
#
# Packages are a collection of files with paths relative to the package root.
# In order to include files in a package, we must specify what files to include
# and where to put them inside any package that includes them.
#
# Example:
# ```
# fuchsia_resources("data_files") {
#   sources = [
#     "my_file.dat",
#     "my_other_file.dat",
#   ]
#   destination = "data/{{source_file_part}}"
# }
# ```
# The above example will package the two files listed under the "data/"
# subdirectory. Any package that has a dependency path to this target
# (whether directly or indirectly, for instance via a dependant component) will
# include these files with the given paths.
#
# Parameters
#
#   sources (required)
#     Required: Files to include.
#     Type: list(file)
#
#   destination
#     Optional: Pattern indicating where to put `sources` in a package.
#     Respects source expansion rules. See:
#     https://gn.googlesource.com/gn/+/master/docs/reference.md#source_expansion
#     Type: string
#     Default: "{{source_file_part}}"`
#
#   data_deps
#   deps
#   public_deps
#   testonly
#   visibility
template("fuchsia_resources") {
  forward_variables_from(invoker,
                         [
                           "sources",
                           "destination",
                         ])
  assert(
      defined(sources),
      "A `sources` argument was missing when calling resources($target_name)")
  if (!defined(destination)) {
    destination = "{{source_file_part}}"
  }

  # Prepare package manifest entries
  _args = []
  foreach(source, sources) {
    foreach(destination, process_file_template([ source ], [ destination ])) {
      source = rebase_path(source, root_out_dir)
      _args += [ "--entry=$destination=$source" ]
    }
  }

  # Expose package manifest entries
  group(target_name) {
    forward_variables_from(invoker,
                           [
                             "data_deps",
                             "deps",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])
    metadata = {
      package_manifest_args = _args
    }
  }
}
