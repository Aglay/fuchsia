# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/modular/build/fuchsia_module_facet.gni")
import("//src/sys/cmc/build/cmc.gni")

# Validates a cmx file
#
# The cmx_validate template will ensure that a given cmx file is conformant to
# the cmx schema, as defined by //src/sys/cmc/schema.json. A stamp file is
# generated to mark that a given cmx file has passed.
#
# Parameters
#
#   data (required)
#     [file] The path to the cmx file that is to be validated
#
#   block_deprecated_misc_storage (optional)
#     Rejects a deprecated cmx feature. Defaults to true.
#
#   block_deprecated_shell (optional)
#     Rejects a deprecated cmx feature. Defaults to true.
#
#   block_rootjob_svc (optional)
#     Rejects a deprecated cmx feature. Defaults to true.
#
#   block_rootresource_svc (optional)
#     Rejects a deprecated cmx feature. Defaults to true.
#
#   deps (optional)
#   public_deps (optional)
#   testonly (optional)
#   visibility (optional)
#
# Example of usage:
#
#   cmx_validate(format) {
#     data = meta.path
#   }
template("cmx_validate") {
  cmc(target_name) {
    forward_variables_from(invoker,
                           [
                             "block_deprecated_misc_storage",
                             "block_deprecated_shell",
                             "block_rootjob_svc",
                             "block_rootresource_svc",
                             "deps",
                             "sources",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])

    stamp_file = "$target_gen_dir/$target_name.verified"

    inputs = [ invoker.data ]

    outputs = [ stamp_file ]

    args = [
      "--stamp",
      rebase_path(stamp_file, root_build_dir),
      "validate",
      rebase_path(invoker.data, root_build_dir),
    ]

    extra_schemas = []
    if (!defined(block_deprecated_misc_storage) ||
        block_deprecated_misc_storage) {
      extra_schemas += [
        {
          schema = "//src/sys/cmc/build/block_deprecated_misc_storage.json"
          error_msg = "The 'deprecated-misc-storage' feature is deprecated and guarded by an allowlist."
        },
      ]
    }
    if (!defined(block_deprecated_shell) || block_deprecated_shell) {
      extra_schemas += [
        {
          schema = "//src/sys/cmc/build/block_deprecated_shell.json"
          error_msg = "The 'deprecated-shell' feature is deprecated and guarded by an allowlist."
        },
      ]
    }

    if (!defined(block_rootjob_svc) || block_rootjob_svc) {
      extra_schemas += [
        {
          schema = "//src/sys/cmc/build/block_rootjob_svc.json"
          error_msg =
              "The 'fuchsia.boot.RootJob' service is guarded by an allowlist."
        },
      ]
    }
    if (!defined(block_rootresource_svc) || block_rootresource_svc) {
      extra_schemas += [
        {
          schema = "//src/sys/cmc/build/block_rootresource_svc.json"
          error_msg = "The 'fuchsia.boot.RootResource' service is guarded by an allowlist."
        },
      ]
    }

    foreach(extra_schema, extra_schemas) {
      inputs += [ extra_schema.schema ]
      schema_path = rebase_path(extra_schema.schema, root_build_dir)
      args += [ "--extra_schema" ]
      if (defined(extra_schema.error_msg)) {
        args += [ "${schema_path}:${extra_schema.error_msg}" ]
      } else {
        args += [ "${schema_path}" ]
      }
    }
  }

  validate_module_cmx_facet("module_" + target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                             "visibility",
                           ])
    cmx = invoker.data
  }
}

# Merges together cmx files
#
# The cmx_merge template will combine the given cmx files into a single cmx
# file.
#
# Parameters
#
#   sources (required)
#     [list of files] A list of cmx files that are to be merged.
#
#   deps (optional)
#   public_deps (optional)
#   testonly (optional)
#   visibility (optional)
#     Standard GN meaning.
#
#   dest (optional)
#     The name the output file in the target out directory. Defaults to the
#     target name.
#
# Example of usage:
#
#   cmx_merge(format) {
#     sources = [
#       rebase_path(meta.path),
#       rebase_path(
#           "//topaz/runtime/dart_runner/meta/aot${product_suffix}_runtime"),
#     ]
#   }
template("cmx_merge") {
  cmc(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "sources",
                             "public_deps",
                             "testonly",
                             "visibility",
                             "dest",
                           ])

    if (!defined(dest)) {
      dest = target_name
    }

    merged_output = "${target_out_dir}/${dest}"
    inputs = invoker.sources
    outputs = [ merged_output ]

    args = [
      "merge",
      "--output",
      rebase_path(merged_output, root_build_dir),
    ]

    foreach(source, sources) {
      args += [ rebase_path(source, root_build_dir) ]
    }
  }
}

# Formats a cmx file
#
# The cmx_format template will minify the given cmx file if is_debug is set to
# false, and will pretty-print the given cmx file if is_debug is set to true.
#
# Parameters
#
#   data (required)
#     [file] The path to the cmx file that is to be formatted
#
#   deps (optional)
#   public_deps (optional)
#   testonly (optional)
#   visibility (optional)
#     Standard GN meaning.
#
# Example of usage:
#
#   cmx_format(format) {
#     data = rebase_path(meta.path)
#   }
template("cmx_format") {
  cmc(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "public_deps",
                             "testonly",
                             "visibility",
                           ])

    formatted_output = "$target_out_dir/$target_name"
    inputs = [ invoker.data ]
    outputs = [ formatted_output ]

    args = [
      "format",
      "--output",
      rebase_path(formatted_output, root_build_dir),
      invoker.data,
    ]

    if (is_debug) {
      args += [ "--pretty" ]
    }
  }
}
