# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can
# found in the LICENSE file.

import("//build/package.gni")
import("//build/rust/rustc_library.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

rustc_library("isolated-ota") {
  version = "0.1.0"
  edition = "2018"
  with_unit_tests = true

  deps = [
    "//sdk/fidl/fuchsia.boot:fuchsia.boot-rustc",
    "//sdk/fidl/fuchsia.logger:fuchsia.logger-rustc",
    "//sdk/fidl/fuchsia.paver:fuchsia.paver-rustc",
    "//sdk/fidl/fuchsia.pkg:fuchsia.pkg-rustc",
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/fuchsia-runtime",
    "//src/lib/scoped_task",
    "//src/lib/syslog/rust:syslog",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:tempfile",
    "//third_party/rust_crates:thiserror",
    "//zircon/system/fidl/fuchsia-io:fuchsia-io-rustc",
    "//zircon/system/fidl/fuchsia-net:fuchsia-net-rustc",
    "//zircon/system/fidl/fuchsia-posix-socket:fuchsia-posix-socket-rustc",
    "//zircon/system/fidl/fuchsia-tracing-provider:fuchsia-tracing-provider-rustc",
  ]

  # Pull in the package containing the isolated SWD stack.
  # TODO(51134): include pkgfs in here and use it, rather than
  # assuming it's in the package we're launched from.
  non_rust_deps = [ ":isolated-swd" ]

  test_deps = [
    "//sdk/fidl/fuchsia.sys:fuchsia.sys-rustc",
    "//src/sys/lib/fidl-fuchsia-pkg-ext",
    "//src/sys/pkg/lib/fuchsia-pkg-testing",
    "//src/sys/pkg/lib/pkgfs",
    "//src/sys/pkg/testing/blobfs-ramdisk",
    "//src/sys/pkg/testing/mock-paver",
    "//third_party/rust_crates:itertools",
    "//third_party/rust_crates:matches",
    "//third_party/rust_crates:openat",
    "//third_party/rust_crates:serde_json",
  ]
}

# Include blobfs in the build, which comes from Zircon
generate_manifest("blobfs.manifest") {
  visibility = [ ":*" ]
  args = []
  foreach(pattern, [ "bin/blobfs" ]) {
    args += [ "--binary=" + pattern ]
  }
}
blobfs_manifest_outputs = get_target_outputs(":blobfs.manifest")
blobfs_manifest = blobfs_manifest_outputs[0]

generate_manifest("empty-repo.manifest") {
  visibility = [ ":*" ]
  testonly = true
  sources = []
  args = []

  foreach(path,
          [
            "keys/root.json",
            "keys/snapshot.json",
            "keys/targets.json",
            "keys/timestamp.json",
            "repository/1.root.json",
            "repository/1.snapshot.json",
            "repository/1.targets.json",
            "repository/root.json",
            "repository/snapshot.json",
            "repository/targets.json",
            "repository/timestamp.json",
          ]) {
    source = "//src/sys/pkg/tests/pkg-resolver/template/${path}"
    sources += [ source ]
    args += [ "--entry=empty-repo/${path}=" + rebase_path(source) ]
  }
}

empty_repo_manifest_outputs = get_target_outputs(":empty-repo.manifest")
empty_repo_manifest = empty_repo_manifest_outputs[0]

test_package("isolated-ota-tests") {
  extra = [
    blobfs_manifest,
    empty_repo_manifest,
  ]
  deps = [
    ":blobfs.manifest",
    ":empty-repo.manifest",
    ":isolated-ota_test",
    "//garnet/go/src/grand_unified_binary",
    "//src/sys/pkg/bin/pkg-cache:bin",
    "//src/sys/pkg/bin/pkg-resolver:bin",
  ]

  binaries = [
    {
      name = "pkg-cache"
      source = "pkg_cache"
    },
    {
      name = "pkg-resolver"
      source = "pkg_resolver"
    },
    {
      name = "pkgsvr"
      source = "grand_unified_binary"
    },
    {
      name = "system_updater"
      source = "grand_unified_binary"
    },
  ]

  resources = [
    {
      path = rebase_path("//src/sys/pkg/lib/fuchsia-pkg-testing/certs/ca.cert")
      dest = "ssl/cert.pem"
    },
    {
      path = rebase_path("//src/sys/pkg/bin/system-updater/images")
      dest = "images"
    },
  ]

  meta = [
    {
      path = rebase_path(
              "//src/sys/pkg/bin/pkg-cache/meta/pkg-cache-integration-test.cmx")
      dest = "pkg-cache.cmx"
    },
    {
      path = rebase_path(
              "//src/sys/pkg/bin/pkg-resolver/meta/pkg-resolver-for-integration-test.cmx")
      dest = "pkg-resolver.cmx"
    },
    {
      path = rebase_path(
              "//src/sys/pkg/bin/amber/system_updater/meta/system_updater_isolated.cmx")
      dest = "system_updater.cmx"
    },
  ]

  tests = [
    {
      name = "isolated_ota_lib_test"
      dest = "isolated-ota-tests"
    },
  ]
}

package("isolated-swd") {
  deps = [
    "//garnet/go/src/grand_unified_binary",
    "//src/sys/pkg/bin/pkg-cache:bin",
    "//src/sys/pkg/bin/pkg-resolver:bin",
  ]

  binaries = [
    {
      name = "pkg-cache"
      source = "pkg_cache"
    },
    {
      name = "pkg-resolver"
      source = "pkg_resolver"
    },
    {
      name = "system_updater"
      source = "grand_unified_binary"
    },
  ]

  resources = [
    {
      path = rebase_path("//src/sys/pkg/bin/system-updater/images")
      dest = "images"
    },
  ]

  meta = [
    {
      path = rebase_path(
              "//src/sys/pkg/bin/pkg-cache/meta/pkg-cache-integration-test.cmx")
      dest = "pkg-cache-isolated.cmx"
    },
    {
      path = rebase_path(
              "//src/sys/pkg/bin/pkg-resolver/meta/pkg-resolver-for-integration-test.cmx")
      dest = "pkg-resolver-isolated.cmx"
    },
    {
      path = rebase_path(
              "//src/sys/pkg/bin/amber/system_updater/meta/system_updater_isolated.cmx")
      dest = "system_updater-isolated.cmx"
    },
  ]
}

group("tests") {
  testonly = true
  public_deps = [ ":isolated-ota-tests" ]
}
