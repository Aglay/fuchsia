# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")
import("//build/rust/rustc_test.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

rustc_test("driver") {
  name = "pkg-resolver-integration-test"
  edition = "2018"

  deps = [
    "//garnet/public/lib/fidl/rust/fidl",
    "//garnet/public/rust/fdio",
    "//garnet/public/rust/fuchsia-async",
    "//garnet/public/rust/fuchsia-component",
    "//garnet/public/rust/fuchsia-hyper",
    "//garnet/public/rust/fuchsia-vfs/pseudo-fs",
    "//garnet/public/rust/fuchsia-zircon",
    "//sdk/fidl/fuchsia.amber:fuchsia.amber-rustc",
    "//sdk/fidl/fuchsia.pkg:fuchsia.pkg-rustc",
    "//sdk/fidl/fuchsia.pkg.rewrite:fuchsia.pkg.rewrite-rustc",
    "//sdk/fidl/fuchsia.sys:fuchsia.sys-rustc",
    "//src/lib/inspect/rust/fuchsia-inspect",
    "//src/sys/lib/fuchsia_url",
    "//src/sys/lib/fuchsia_url_rewrite",
    "//src/sys/pkg/lib/fidl-fuchsia-amber-ext:fidl_fuchsia_amber_ext",
    "//src/sys/pkg/lib/fidl-fuchsia-pkg-ext:fidl_fuchsia_pkg_ext",
    "//src/sys/pkg/lib/fuchsia-merkle",
    "//src/sys/pkg/lib/fuchsia-pkg-testing:fuchsia_pkg_testing",
    "//src/sys/pkg/testing/pkgfs-ramdisk",
    "//third_party/rust_crates:failure",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:glob",
    "//third_party/rust_crates:hex",
    "//third_party/rust_crates:hyper",
    "//third_party/rust_crates:matches",
    "//third_party/rust_crates:openat",
    "//third_party/rust_crates:parking_lot",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_derive",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:tempfile",
    "//third_party/rust_crates:void",
    "//zircon/system/fidl/fuchsia-inspect:fuchsia-inspect-rustc",
    "//zircon/system/fidl/fuchsia-io:fuchsia-io-rustc",
    "//zircon/system/fidl/fuchsia-net:fuchsia-net-rustc",
    "//zircon/system/fidl/fuchsia-posix-socket:fuchsia-posix-socket-rustc",
    "//zircon/system/fidl/fuchsia-tracing-provider:fuchsia-tracing-provider-rustc",
  ]
}

generate_manifest("empty-repo.manifest") {
  visibility = [ ":*" ]
  testonly = true
  sources = []
  args = []

  foreach(path,
          [
            "keys/root.json",
            "keys/snapshot.json",
            "keys/targets.json",
            "keys/timestamp.json",
            "repository/1.root.json",
            "repository/1.snapshot.json",
            "repository/1.targets.json",
            "repository/root.json",
            "repository/snapshot.json",
            "repository/targets.json",
            "repository/timestamp.json",
          ]) {
    source = "template/${path}"
    sources += [ source ]
    args += [ "--entry=empty-repo/${path}=" + rebase_path(source) ]
  }
}
empty_repo_manifest_outputs = get_target_outputs(":empty-repo.manifest")
empty_repo_manifest_file = empty_repo_manifest_outputs[0]

# Include blobfs in the build, which comes from Zircon
generate_manifest("blobfs.manifest") {
  visibility = [ ":*" ]
  args = []
  foreach(pattern, [ "bin/blobfs" ]) {
    args += [ "--binary=" + pattern ]
  }
}
blobfs_manifest_outputs = get_target_outputs(":blobfs.manifest")
blobfs_manifest_file = blobfs_manifest_outputs[0]

test_package("pkg-resolver-integration-tests") {
  deps = [
    ":blobfs.manifest",
    ":driver",
    ":empty-repo.manifest",
    "//garnet/go/src/grand_unified_binary",
    "//src/sys/pkg/bin/pkg-cache:bin",
    "//src/sys/pkg/bin/pkg-resolver:bin",
  ]

  extra = [
    blobfs_manifest_file,
    empty_repo_manifest_file,
  ]

  binaries = [
    {
      name = "amber"
      source = "grand_unified_binary"
    },
    {
      name = "pkg_cache"
      source = "pkg_cache"
    },
    {
      name = "pkg_resolver"
      source = "pkg_resolver"
    },
    {
      name = "pkgsvr"
      source = "grand_unified_binary"
    },
  ]

  meta = [
    {
      path = rebase_path(
              "//src/sys/pkg/bin/amber/meta/amber_with_isolated_storage.cmx")
      dest = "amber.cmx"
    },
    {
      path = rebase_path(
              "//src/sys/pkg/bin/pkg-cache/meta/pkg_cache_integration_test.cmx")
      dest = "pkg_cache.cmx"
    },
    {
      path = rebase_path(
              "//src/sys/pkg/bin/pkg-resolver/meta/pkg_resolver_for_integration_test.cmx")
      dest = "pkg_resolver.cmx"
    },
  ]

  tests = [
    {
      name = "pkg_resolver_integration_test"
      dest = "pkg-resolver-integration-test"
      environments = basic_envs
    },
  ]
}

group("tests") {
  testonly = true
  public_deps = [
    ":pkg-resolver-integration-tests",
    "//src/sys/pkg/bin/pm:pm",
  ]
}
