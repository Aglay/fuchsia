# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia/zircon.gni")
import("//build/go/go_library.gni")
import("//build/go/go_test.gni")
import("//build/host.gni")
import("//build/testing/environments.gni")
import("//build/testing/host_test_data.gni")
import("//src/sys/pkg/tests/system-tests/system-tests.gni")

if (is_host) {
  host_test_data("test_data") {
    sources = [
      "$host_tools_dir/device-finder",
      "//prebuilt/tools/artifacts/artifacts",
      "//prebuilt/tools/lkgb/lkgb",
    ]
    outputs = [ "$root_out_dir/test_data/system-tests/{{source_file_part}}" ]
    public_deps = [ "//tools/net/dev_finder:host($host_toolchain)" ]
  }

  go_library("system_tests_lib") {
    testonly = true
    name = "fuchsia.googlesource.com/system_tests"
    deps = [
      "//src/sys/pkg/testing/host-target-testing",
      "//tools/lib/color",
      "//tools/lib/logger",
    ]
    non_go_deps = [ ":test_data" ]
  }

  go_test("system_tests_reboot") {
    gopackages = [ "fuchsia.googlesource.com/system_tests/reboot_test" ]
    disabled = true
    deps = [ ":system_tests_lib" ]
    non_go_deps = [ "//garnet/bin/sl4f" ]
  }

  go_test("system_tests_tracking") {
    gopackages = [ "fuchsia.googlesource.com/system_tests/tracking_test" ]
    disabled = true
    deps = [ ":system_tests_lib" ]
    non_go_deps = [ "//garnet/bin/sl4f" ]
  }

  go_test("system_tests_upgrade") {
    gopackages = [ "fuchsia.googlesource.com/system_tests/upgrade_test" ]
    disabled = true
    deps = [ ":system_tests_lib" ]
    non_go_deps = [ "//garnet/bin/sl4f" ]
  }
}

group("system_tests") {
  testonly = true
  deps = [
    ":system_tests_reboot($host_toolchain)",
    ":system_tests_tracking($host_toolchain)",
    ":system_tests_upgrade($host_toolchain)",
  ]
}

if (is_linux || is_mac) {
  # The service account that allows the test to download build artifacts.
  _service_account = "artifact-readers@fuchsia-infra.iam.gserviceaccount.com"

  system_test_reboot_suite("nuc-release-reboot") {
    environments = [
      {
        dimensions = {
          device_type = "Intel NUC Kit NUC7i5DNHE"
        }
        tags = [ "e2e-isolated" ]
      },
    ]
    timeout = "10m"
    cycle_count = "5"
    cycle_timeout = "2m"
  }

  system_test_reboot_suite("nuc-release-reboot-longevity") {
    environments = [
      {
        dimensions = {
          device_type = "Intel NUC Kit NUC7i5DNHE"
        }
        tags = [ "reboot-longevity" ]
      },
    ]
    timeout = "4h"
    cycle_count = "100"
    cycle_timeout = "2m"
  }

  system_test_upgrade_suite("nuc-release-upgrade") {
    release_builder = "fuchsia/global.ci/fuchsia-x64-release-build_only"
    service_account = _service_account

    # FIXME(fxb/46175) This can be removed once NUCs support `dm reboot-recovery`.
    ota_to_recovery = true
    environments = [
      {
        dimensions = {
          device_type = "Intel NUC Kit NUC7i5DNHE"
        }
        tags = [ "e2e-isolated" ]
      },
    ]
    pave_timeout = "5m"
    cycle_count = "1"
    cycle_timeout = "10m"
  }

  system_test_upgrade_suite("nuc-release-upgrade-longevity") {
    release_builder = "fuchsia/global.ci/fuchsia-x64-release-build_only"
    service_account = _service_account

    # FIXME(fxb/46175) This can be removed once NUCs support `dm reboot-recovery`.
    ota_to_recovery = true
    environments = [
      {
        dimensions = {
          device_type = "Intel NUC Kit NUC7i5DNHE"
        }
        tags = [ "e2e-isolated" ]
      },
    ]
    timeout = "4h"
    pave_timeout = "5m"
    cycle_count = "40"
    cycle_timeout = "10m"
  }
}

group("tests") {
  testonly = true
  public_deps = [
    ":nuc-release-reboot($host_toolchain)",
    ":nuc-release-reboot-longevity($host_toolchain)",
    ":nuc-release-upgrade($host_toolchain)",
    ":nuc-release-upgrade-longevity($host_toolchain)",
    ":system_tests",
  ]
}
