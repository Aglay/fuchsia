// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "src/developer/feedback/reboot_info/reboot_log_handler.h"

#include <lib/async/cpp/task.h>
#include <lib/fit/result.h>
#include <lib/zx/time.h>
#include <zircon/types.h>

#include <string>
#include <vector>

#include "src/developer/feedback/utils/fit/promise.h"
#include "src/lib/files/file.h"
#include "src/lib/fsl/vmo/file.h"
#include "src/lib/fsl/vmo/strings.h"
#include "src/lib/fxl/logging.h"
#include "src/lib/syslog/cpp/logger.h"

namespace feedback {
namespace {

constexpr char kHasHandledRebootLogPath[] = "/tmp/has_handled_reboot_log.txt";

}  // namespace
::fit::promise<void> HandleRebootLog(const RebootLog& reboot_log, async_dispatcher_t* dispatcher,
                                     std::shared_ptr<sys::ServiceDirectory> services) {
  if (files::IsFile(kHasHandledRebootLogPath)) {
    FX_LOGS(INFO) << "Reboot log has already been handled in another instance of this component "
                     "for this boot cycle";
    return ::fit::make_result_promise(::fit::ok());
  }

  auto handler = std::make_unique<internal::RebootLogHandler>(dispatcher, services);

  // We must store the promise in a variable due to the fact that the order of evaluation of
  // function parameters is undefined.
  auto promise = handler->Handle(reboot_log);
  return fit::ExtendArgsLifetimeBeyondPromise(/*promise=*/std::move(promise),
                                              /*args=*/std::move(handler));
}

namespace internal {

RebootLogHandler::RebootLogHandler(async_dispatcher_t* dispatcher,
                                   std::shared_ptr<sys::ServiceDirectory> services)
    : dispatcher_(dispatcher), services_(services), cobalt_(dispatcher_, services_) {}

::fit::promise<void> RebootLogHandler::Handle(const RebootLog& reboot_log) {
  FX_CHECK(!has_called_handle_) << "Handle() is not intended to be called twice";
  has_called_handle_ = true;

  if (!files::WriteFile(kHasHandledRebootLogPath, /*data=*/"", /*size=*/0)) {
    FX_LOGS(ERROR) << "Failed to record reboot log as handled";
  }

  // TODO(49689): Start logging Cobalt events and filing crash reports for non-parseable reboot
  // logs.
  if (reboot_log.RebootReason() == RebootReason::kNotParseable && !reboot_log.HasRebootLogStr()) {
    FX_LOGS(ERROR) << "Error parsing reboot log";
    return ::fit::make_result_promise<void>(::fit::error());
  }

  cobalt_.LogOccurrence(ToCobaltRebootReason(reboot_log.RebootReason()));

  // We don't want to file a crash report on clean or cold reboots.
  if (reboot_log.RebootReason() == RebootReason::kClean ||
      reboot_log.RebootReason() == RebootReason::kCold) {
    return ::fit::make_ok_promise();
  }

  return FileCrashReport(reboot_log);
}

namespace {

fuchsia::feedback::CrashReport CreateCrashReport(const RebootLog& reboot_log) {
  // Build the crash report.
  fuchsia::feedback::GenericCrashReport generic_report;
  generic_report.set_crash_signature(ToCrashSignature(reboot_log.RebootReason()));
  fuchsia::feedback::SpecificCrashReport specific_report;
  specific_report.set_generic(std::move(generic_report));
  fuchsia::feedback::CrashReport report;
  report.set_program_name(ToCrashProgramName(reboot_log.RebootReason()));
  if (reboot_log.HasUptime()) {
    report.set_program_uptime(reboot_log.Uptime().get());
  }
  report.set_specific_report(std::move(specific_report));

  // Build the crash report attachments.
  if (reboot_log.HasRebootLogStr()) {
    fsl::SizedVmo vmo;
    if (fsl::VmoFromString(reboot_log.RebootLogStr(), &vmo)) {
      std::vector<fuchsia::feedback::Attachment> attachments(1);
      attachments.back().key = "reboot_crash_log";
      attachments.back().value = std::move(vmo).ToTransport();
      report.set_attachments(std::move(attachments));
    }
  }

  return report;
}

}  // namespace

::fit::promise<void> RebootLogHandler::FileCrashReport(const RebootLog& reboot_log) {
  crash_reporter_ = services_->Connect<fuchsia::feedback::CrashReporter>();
  crash_reporter_.set_error_handler([this](zx_status_t status) {
    if (!crash_reporting_done_.completer) {
      return;
    }

    FX_PLOGS(ERROR, status) << "Lost connection to fuchsia.feedback.CrashReporter";
    crash_reporting_done_.completer.complete_error();
  });

  auto report = CreateCrashReport(reboot_log);

  // We file the crash report with a 90s delay to increase the likelihood that Inspect data (at all
  // and specifically the data from memory_monitor) is included in the bugreport.zip generated by
  // the Feedback service. The memory_monitor Inspect data is critical to debug OOM crash reports.
  // TODO(fxb/46216, fxb/48485): remove delay.
  delayed_crash_reporting_.Reset([this, report = std::move(report)]() mutable {
    crash_reporter_->File(std::move(report), [this](::fit::result<void, zx_status_t> result) {
      if (!crash_reporting_done_.completer) {
        return;
      }

      if (result.is_error()) {
        FX_PLOGS(ERROR, result.error())
            << "Failed to file a crash report for crash extracted from reboot log";
        crash_reporting_done_.completer.complete_error();
      } else {
        crash_reporting_done_.completer.complete_ok();
      }
    });
  });
  if (const zx_status_t status = async::PostDelayedTask(
          dispatcher_, [cb = delayed_crash_reporting_.callback()] { cb(); }, zx::sec(90));
      status != ZX_OK) {
    FX_PLOGS(ERROR, status) << "Failed to post delayed task, no crash reporting";
    crash_reporting_done_.completer.complete_error();
  }

  return crash_reporting_done_.consumer.promise_or(::fit::error())
      .then([this](::fit::result<>& result) {
        delayed_crash_reporting_.Cancel();
        return std::move(result);
      });
}

}  // namespace internal
}  // namespace feedback
