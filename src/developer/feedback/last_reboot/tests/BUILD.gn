# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/test/test_package.gni")

###############################################################################
# GROUPS
###############################################################################
group("tests") {
  testonly = true

  public_deps = [ ":last-reboot-tests" ]
}

###############################################################################
# PACKAGES
###############################################################################
# TODO(53656): switch to fuchsia_test_package once we figure out how to have a
# different name for the binary on the host and on the target.
test_package("last-reboot-tests") {
  tests = [
    {
      name = "last_reboot_info_provider_unittest"
    },
    {
      # Binary name on the host. We prefix it with "last_reboot" to reduce collisions.
      name = "last_reboot_main_service_unittest"

      # Component and binary name on the target. Confined to the package so no risk of collisions.
      dest = "main_service_unittest"
    },
    {
      name = "reboot_log_unittest"
    },
    {
      name = "reboot_reason_unittest"
    },
    {
      name = "reboot_watcher_unittest"
    },
    {
      name = "reporter_unittest"
    },
  ]

  deps = [
    ":last_reboot_info_provider_unittest",
    ":main_service_unittest",
    ":reboot_log_unittest",
    ":reboot_reason_unittest",
    ":reboot_watcher_unittest",
    ":reporter_unittest",
  ]
}

###############################################################################
# EXECUTABLES
###############################################################################
executable("last_reboot_info_provider_unittest") {
  testonly = true

  sources = [ "last_reboot_info_provider_unittest.cc" ]

  deps = [
    "//sdk/fidl/fuchsia.feedback",
    "//src/developer/feedback/last_reboot:last_reboot_info_provider",
    "//src/developer/feedback/last_reboot:reboot_reason",
    "//src/developer/feedback/testing:gpretty_printers",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("main_service_unittest") {
  testonly = true

  output_name = "last_reboot_main_service_unittest"

  sources = [ "main_service_unittest.cc" ]

  deps = [
    "//sdk/lib/inspect/testing/cpp",
    "//sdk/lib/syslog/cpp",
    "//src/developer/feedback/last_reboot:main_service",
    "//src/developer/feedback/testing:cobalt_test_fixture",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:cobalt",
    "//src/developer/feedback/testing/stubs:reboot_methods_watcher_register",
    "//src/lib/files",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/system/ulib/inspect",
  ]
}

executable("reboot_log_unittest") {
  testonly = true

  sources = [ "reboot_log_unittest.cc" ]

  deps = [
    "//sdk/lib/syslog/cpp",
    "//src/developer/feedback/last_reboot:reboot_log",
    "//src/developer/feedback/testing:gpretty_printers",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/lib/files",
    "//src/lib/fxl",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/zx",
  ]
}

executable("reboot_reason_unittest") {
  testonly = true

  sources = [ "reboot_reason_unittest.cc" ]

  deps = [
    "//sdk/fidl/fuchsia.feedback",
    "//src/developer/feedback/last_reboot:reboot_reason",
    "//src/developer/feedback/utils/cobalt",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("reboot_watcher_unittest") {
  testonly = true

  sources = [ "reboot_watcher_unittest.cc" ]

  deps = [
    "//sdk/fidl/fuchsia.hardware.power.statecontrol",
    "//src/developer/feedback/last_reboot:reboot_watcher",
    "//src/developer/feedback/testing:cobalt_test_fixture",
    "//src/developer/feedback/testing:gpretty_printers",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:cobalt",
    "//src/lib/files",
    "//src/lib/fxl",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("reporter_unittest") {
  testonly = true

  sources = [ "reporter_unittest.cc" ]

  deps = [
    "//src/developer/feedback/last_reboot:reporter",
    "//src/developer/feedback/testing:cobalt_test_fixture",
    "//src/developer/feedback/testing:gpretty_printers",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:cobalt",
    "//src/developer/feedback/testing/stubs:crash_reporter",
    "//src/developer/feedback/utils/cobalt",
    "//src/lib/files",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/async-cpp",
    "//zircon/public/lib/zx",
  ]
}
