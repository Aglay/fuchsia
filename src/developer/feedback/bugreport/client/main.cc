// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <filesystem>
#include <fstream>
#include <iostream>
#include <string>

#include "src/lib/fxl/command_line.h"

namespace {

std::ifstream* OpenFile(const std::filesystem::path& path) {
  std::error_code ec;
  if (!std::filesystem::exists(path, ec)) {
    FXL_LOG(ERROR) << "Could not open " << path;
    return nullptr;
  }

  static std::ifstream iss;
  iss.open(path, std::ifstream::in);
  if (!iss.good()) {
    FXL_LOG(ERROR) << "Could not read " << path;
    return nullptr;
  }

  return &iss;
}

constexpr char kUsage[] = R"(bugreport

    Copy an incoming bugreport generated by a target device in the given output directory.

Usage:

  bugreport [--input-file=<FILEPATH>] <OUTPUT_DIR>

Arguments:

    --input_file    Optional input file to be read. If not specified, will read
                    from stdin.
    OUTPUT_DIR      Where bugreport will store the incoming report. Required.
)";

}  // namespace

int main(int argc, char* argv[]) {
  auto command_line = fxl::CommandLineFromArgcArgv(argc, argv);

  // Check if an input file was given, use stdin otherwise.
  std::istream* input;
  if (command_line.HasOption("input-file")) {
    std::string input_value;
    command_line.GetOptionValue("input-file", &input_value);

    input = OpenFile(input_value);
    if (!input)
      exit(1);
  } else {
    input = &std::cin;
  }
  FXL_DCHECK(input);

  // Bugreport requires the caller to provide a valid directory to where output the report.
  auto& pos_args = command_line.positional_args();
  if (pos_args.size() != 1u) {
    FXL_LOG(ERROR) << "A single output path should be given.";
    std::cerr << kUsage;
    exit(1);
  }

  // Output directory should be valid.
  const std::filesystem::path output_dir(pos_args[0]);
  std::error_code ec;
  if (!std::filesystem::is_directory(output_dir, ec)) {
    FXL_LOG(ERROR) << "Invalid output directory given: " << output_dir;
    exit(1);
  }

  // Read the input.
  std::string contents;
  while (!input->eof()) {
    char buf[4096];
    input->read(buf, sizeof(buf) - 1);
    // This string constructor permits embedded zeroes.
    std::string read(buf, input->gcount());
    contents.append(std::move(read));
  }
  if (!input->eof() && !input->good()) {
    FXL_LOG(ERROR) << "Error reading the input stream.";
    exit(1);
  }

  // Write the input to the output.
  const auto output_archive = output_dir / "bugreport.zip";
  std::ofstream ofs(output_archive, std::ofstream::trunc);
  if (!ofs.good()) {
    FXL_LOG(ERROR) << "Could not open path for " << output_archive;
    exit(1);
  }
  ofs << contents;
  ofs.close();

  // Report the success.
  std::cout << "Exported " << output_archive << std::endl;
}
