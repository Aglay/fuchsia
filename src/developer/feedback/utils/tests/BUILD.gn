# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/test/test_package.gni")

###############################################################################
# GROUPS
###############################################################################
group("tests") {
  testonly = true

  public_deps = [ ":feedback_utils_tests" ]
}

###############################################################################
# PACKAGES
###############################################################################
test_package("feedback_utils_tests") {
  tests = [
    {
      name = "archive_unittest"
    },
    {
      name = "bridge_unittest"
    },
    {
      name = "channel_provider_ptr_unittest"
    },
    {
      name = "cobalt_unittest"
    },
    {
      name = "data_provider_ptr_unittest"
    },
    {
      name = "device_id_provider_ptr_unittest"
    },
    {
      name = "inspect_node_manager_unittest"
    },
    {
      name = "inspect_protocol_stats_unittest"
    },
    {
      name = "log_format_unittest"
    },
    {
      name = "oneshot_ptr_unittest"
    },
    {
      name = "promise_unittest"
    },
    {
      name = "rotating_file_set_unittest"
    },
    {
      name = "time_unittest"
    },
    {
      name = "utc_time_provider_unittest"
    },
    {
      name = "write_only_file_unittest"
    },
  ]

  resources = [
    # needed for archive_unittest
    {
      path = "resources/test_data.zip"
      dest = "test_data.zip"
    },
  ]

  deps = [
    ":archive_unittest",
    ":bridge_unittest",
    ":channel_provider_ptr_unittest",
    ":cobalt_unittest",
    ":data_provider_ptr_unittest",
    ":device_id_provider_ptr_unittest",
    ":inspect_node_manager_unittest",
    ":inspect_protocol_stats_unittest",
    ":log_format_unittest",
    ":oneshot_ptr_unittest",
    ":promise_unittest",
    ":rotating_file_set_unittest",
    ":time_unittest",
    ":utc_time_provider_unittest",
    ":write_only_file_unittest",
  ]
}

###############################################################################
# EXECUTABLES
###############################################################################
executable("archive_unittest") {
  testonly = true

  sources = [ "archive_unittest.cc" ]

  deps = [
    "//sdk/fidl/fuchsia.feedback",
    "//sdk/lib/syslog/cpp",
    "//src/developer/feedback/testing:gmatchers",
    "//src/developer/feedback/testing:gpretty_printers",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/utils:archive",
    "//src/lib/fsl",
    "//src/lib/fxl",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/system/fidl/fuchsia-mem",
  ]
}

executable("bridge_unittest") {
  testonly = true

  sources = [ "bridge_unittest.cc" ]

  deps = [
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/utils:errors",
    "//src/developer/feedback/utils/fit",
    "//src/lib/testing/loop_fixture",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("channel_provider_ptr_unittest") {
  testonly = true

  sources = [ "channel_provider_ptr_unittest.cc" ]

  deps = [
    "//sdk/lib/syslog/cpp",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:channel_provider",
    "//src/developer/feedback/utils/fidl:channel_provider_ptr",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/async-cpp",
    "//zircon/public/lib/zx",
  ]
}

executable("cobalt_unittest") {
  testonly = true

  sources = [ "cobalt_unittest.cc" ]

  deps = [
    "//src/developer/feedback/testing:cobalt_test_fixture",
    "//src/developer/feedback/testing:gpretty_printers",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:cobalt",
    "//src/developer/feedback/utils/cobalt",
    "//src/lib/timekeeper:testing",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/zx",
  ]
}

executable("data_provider_ptr_unittest") {
  testonly = true

  sources = [ "data_provider_ptr_unittest.cc" ]

  deps = [
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:data_provider",
    "//src/developer/feedback/utils/fidl:data_provider_ptr",
    "//src/lib/fsl",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("device_id_provider_ptr_unittest") {
  testonly = true

  sources = [ "device_id_provider_ptr_unittest.cc" ]

  deps = [
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:device_id_provider",
    "//src/developer/feedback/utils/fidl:device_id_provider_ptr",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("inspect_node_manager_unittest") {
  testonly = true

  sources = [ "inspect_node_manager_unittest.cc" ]

  deps = [
    "//sdk/lib/inspect/testing/cpp",
    "//sdk/lib/syslog/cpp",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/utils:inspect_node_manager",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("inspect_protocol_stats_unittest") {
  testonly = true

  sources = [ "inspect_protocol_stats_unittest.cc" ]

  deps = [
    "//sdk/lib/inspect/testing/cpp",
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/utils:inspect_node_manager",
    "//src/developer/feedback/utils:inspect_protocol_stats",
  ]
}

executable("log_format_unittest") {
  testonly = true

  sources = [ "log_format_unittest.cc" ]

  deps = [
    "//sdk/lib/syslog/cpp",
    "//src/developer/feedback/utils:logs",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gtest",
  ]
}

executable("oneshot_ptr_unittest") {
  testonly = true

  sources = [ "oneshot_ptr_unittest.cc" ]

  deps = [
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:channel_provider",
    "//src/developer/feedback/utils:errors",
    "//src/developer/feedback/utils/fidl:oneshot_ptr",
    "//src/lib/fxl",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/async-cpp",
    "//zircon/public/lib/zx",
  ]
}

executable("promise_unittest") {
  testonly = true

  sources = [ "promise_unittest.cc" ]

  deps = [
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/utils/fit",
    "//src/lib/fxl",
    "//src/lib/testing/loop_fixture",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/async-cpp",
  ]
}

executable("rotating_file_set_unittest") {
  testonly = true

  sources = [ "rotating_file_set_unittest.cc" ]

  deps = [
    "//src/developer/feedback/utils:files",
    "//src/lib/files",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("time_unittest") {
  testonly = true

  sources = [ "time_unittest.cc" ]

  deps = [
    "//src/developer/feedback/utils:time",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/timekeeper:testing",
    "//third_party/googletest:gtest",
  ]
}

executable("utc_time_provider_unittest") {
  testonly = true

  sources = [ "utc_time_provider_unittest.cc" ]

  deps = [
    "//src/developer/feedback/testing:gtest_with_syslog_main",
    "//src/developer/feedback/testing:unit_test_fixture",
    "//src/developer/feedback/testing/stubs:utc_provider",
    "//src/developer/feedback/utils:utc_time_provider",
    "//src/lib/timekeeper:testing",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}

executable("write_only_file_unittest") {
  testonly = true

  sources = [ "write_only_file_unittest.cc" ]

  deps = [
    "//src/developer/feedback/utils:files",
    "//src/lib/files",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
  ]
}
