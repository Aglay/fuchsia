# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/rust/rustc_binary.gni")
import("ffx_plugin_suite.gni")

# Defines FFX
#
template("ffx") {
  ffx_deps = []
  if (defined(invoker.deps)) {
    ffx_deps += invoker.deps
  }
  if (defined(invoker.plugin_deps)) {
    ffx_deps += invoker.plugin_deps
  }

  ffx_name = target_name

  if (defined(invoker.name)) {
    ffx_name = invoker.name
  }

  suite_name = ffx_name + "_lib"

  ffx_plugin_suite(suite_name) {
    template = "command.md"
    not_complete = "True"
    forward_variables_from(invoker, "*", [])
    args_deps = [ "core:lib" ]
  }

  rustc_binary(ffx_name + "_bin") {
    output_name = ffx_name
    deps = ffx_deps + [
             ":" + suite_name + "_args",
             ":" + suite_name + "_sub_command",
             ":" + suite_name,
           ]
    non_rust_deps = [ "//third_party/boringssl" ]
    forward_variables_from(invoker,
                           "*",
                           [
                             "name",
                             "deps",
                             "non_rust_deps",
                           ])

    configs += [ "//build/config:rust_panic_abort" ]
  }

  tests_deps = []
  if (defined(invoker.plugin_deps)) {
    foreach(d, invoker.plugin_deps) {
      test = get_label_info(d, "dir")
      test_name = get_label_info(d, "name")
      tests_deps += [ test + ":" + test_name + "_tests" ]
    }
  }

  group(ffx_name + "_tests") {
    testonly = true

    deps = tests_deps + [
             ":" + ffx_name + "_bin_test($host_toolchain)",
             ":" + suite_name + "_tests($host_toolchain)",
             "config:tests($host_toolchain)",
             "core:tests($host_toolchain)",
           ]
  }
}
