# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config.gni")
import("//src/sys/build/components.gni")

###############################################################################
# PACKAGES
###############################################################################
fuchsia_package("exceptions") {
  deps = [ ":component" ]
}

###############################################################################
# COMPONENTS
###############################################################################
fuchsia_component("component") {
  component_name = "exceptions"

  manifest = "meta/exceptions.cmx"

  deps = [
    ":exe",
    "handler:exe",
  ]
}

###############################################################################
# EXECUTABLES
###############################################################################
executable("exe") {
  output_name = "exceptions"

  sources = [ "main.cc" ]

  deps = [
    ":lib",
    "//src/developer/forensics/exceptions:constants",
    "//src/developer/forensics/utils/component",
  ]
}

###############################################################################
# SOURCES
###############################################################################
source_set("constants") {
  sources = [ "constants.h" ]
}

source_set("lib") {
  sources = [
    "exception_broker.cc",
    "exception_broker.h",
    "handler_manager.cc",
    "handler_manager.h",
    "json_utils.cc",
    "json_utils.h",
    "process_limbo_manager.cc",
    "process_limbo_manager.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.exception",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/syslog/cpp",
    "//sdk/lib/syslog/cpp:backend_legacy",
    "//src/lib/fsl",
    "//src/lib/fxl",
    "//third_party/rapidjson",
    "//zircon/public/lib/async",
    "//zircon/public/lib/async-cpp",
    "//zircon/public/lib/zx",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
}

###############################################################################
# CONFIGS
###############################################################################
config_data("enable_jitd_on_startup") {
  for_pkg = "exceptions"

  sources = [ "configs/jitd_on_startup.json" ]

  outputs = [ "enable_jitd_on_startup.json" ]
}
