# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

static_library("console") {
  sources = [
    "actions.cc",
    "actions.h",
    "analyze_memory.cc",
    "analyze_memory.h",
    "async_output_buffer.cc",
    "async_output_buffer.h",
    "command.cc",
    "command.h",
    "command_group.h",
    "command_line_options.cc",
    "command_line_options.h",
    "command_parser.cc",
    "command_parser.h",
    "command_utils.cc",
    "command_utils.h",
    "commands/verb_aspace.cc",
    "commands/verb_aspace.h",
    "commands/verb_attach.cc",
    "commands/verb_attach.h",
    "commands/verb_attach_job.cc",
    "commands/verb_attach_job.h",
    "commands/verb_cls.cc",
    "commands/verb_cls.h",
    "commands/verb_connect.cc",
    "commands/verb_connect.h",
    "commands/verb_detach.cc",
    "commands/verb_detach.h",
    "commands/verb_disassemble.cc",
    "commands/verb_disassemble.h",
    "commands/verb_disconnect.cc",
    "commands/verb_disconnect.h",
    "commands/verb_help.cc",
    "commands/verb_help.h",
    "commands/verb_kill.cc",
    "commands/verb_kill.h",
    "commands/verb_libs.cc",
    "commands/verb_libs.h",
    "commands/verb_mem_analyze.cc",
    "commands/verb_mem_analyze.h",
    "commands/verb_mem_read.cc",
    "commands/verb_mem_read.h",
    "commands/verb_opendump.cc",
    "commands/verb_opendump.h",
    "commands/verb_ps.cc",
    "commands/verb_ps.h",
    "commands/verb_quit.cc",
    "commands/verb_quit.h",
    "commands/verb_quit_agent.cc",
    "commands/verb_quit_agent.h",
    "commands/verb_run.cc",
    "commands/verb_run.h",
    "commands/verb_stack.cc",
    "commands/verb_stack.h",
    "commands/verb_status.cc",
    "commands/verb_status.h",
    "commands/verb_stderr.cc",
    "commands/verb_stderr.h",
    "commands/verb_stdout.cc",
    "commands/verb_stdout.h",
    "commands/verb_steps.cc",
    "commands/verb_steps.h",
    "commands/verb_sys_info.cc",
    "commands/verb_sys_info.h",
    "console.cc",
    "console.h",
    "console_context.cc",
    "console_context.h",
    "console_impl.cc",
    "console_impl.h",
    "console_main.cc",
    "console_main.h",
    "format_context.cc",
    "format_context.h",
    "format_frame.cc",
    "format_frame.h",
    "format_job.cc",
    "format_job.h",
    "format_location.cc",
    "format_location.h",
    "format_memory.cc",
    "format_memory.h",
    "format_name.cc",
    "format_name.h",
    "format_node_console.cc",
    "format_node_console.h",
    "format_register.cc",
    "format_register.h",
    "format_register_arm64.cc",
    "format_register_arm64.h",
    "format_register_x64.cc",
    "format_register_x64.h",
    "format_settings.cc",
    "format_settings.h",
    "format_table.cc",
    "format_table.h",
    "format_target.cc",
    "format_target.h",
    "input_location_parser.cc",
    "input_location_parser.h",
    "nouns.cc",
    "nouns.h",
    "output_buffer.cc",
    "output_buffer.h",
    "string_formatters.cc",
    "string_formatters.h",
    "string_util.cc",
    "string_util.h",
    "switch_record.h",
    "verbs.cc",
    "verbs.h",
    "verbs_breakpoint.cc",
    "verbs_settings.cc",
    "verbs_shared.cc",
    "verbs_symbol.cc",
    "verbs_thread.cc",
  ]

  deps = []
  public_deps = [
    "//src/developer/debug/zxdb/client",
    "//src/developer/debug/zxdb/expr",
    "//src/lib/fxl",
    "//src/lib/line_input",
    "//zircon/public/lib/cmdline",
    "//zircon/public/lib/fit",
  ]

  if (current_toolchain != host_toolchain) {
    deps += [
      "//src/lib/fxl",
      "//zircon/public/lib/fdio",
      "//zircon/public/lib/zx",
    ]
  }
}

source_set("tests") {
  testonly = true
  sources = [
    "actions_unittest.cc",
    "analyze_memory_unittest.cc",
    "async_output_buffer_test_util.cc",
    "async_output_buffer_test_util.h",
    "async_output_buffer_unittest.cc",
    "command_parser_unittest.cc",
    "command_utils_unittest.cc",
    "commands/verb_attach_job_unittest.cc",
    "commands/verb_detach_unittest.cc",
    "commands/verb_quit_unittest.cc",
    "commands/verb_status_unittest.cc",
    "commands/verb_steps_unittest.cc",
    "console_test.cc",
    "console_test.h",
    "format_context_unittest.cc",
    "format_frame_unittest.cc",
    "format_job_unittest.cc",
    "format_location_unittest.cc",
    "format_memory_unittest.cc",
    "format_name_unittest.cc",
    "format_node_console_unittest.cc",
    "format_register_unittest.cc",
    "format_settings_unittest.cc",
    "format_table_unittest.cc",
    "input_location_parser_unittest.cc",
    "mock_console.cc",
    "nouns_unittest.cc",
    "output_buffer_unittest.cc",
    "string_formatters_unittest.cc",
    "string_util_unittest.cc",
    "verbs_memory_unittest.cc",
    "verbs_settings_unittest.cc",
    "verbs_shared_unittest.cc",
    "verbs_symbol_unittest.cc",
    "verbs_thread_unittest.cc",
  ]

  deps = [
    ":console",
    "//src/developer/debug/zxdb/client:test_support",
    "//src/developer/debug/zxdb/common:test_support",
    "//src/developer/debug/zxdb/expr:test_support",
    "//src/developer/debug/zxdb/symbols:test_support",
    "//third_party/googletest:gtest",
  ]
}

source_set("e2e_tests") {
  testonly = true
  sources = [
    "e2e_test.cc",
    "mock_console.cc",
  ]

  deps = [
    ":console",
    "//src/developer/debug/zxdb:e2e_test_headers",
    "//src/developer/debug/zxdb/common:test_support",
    "//third_party/googletest:gtest",
  ]
}
