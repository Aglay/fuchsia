# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/test.gni")

source_set("use_media_decoder_source_set") {
  testonly = true

  sources = [
    "cleartvp.cc",
    "in_stream.cc",
    "in_stream_buffer.cc",
    "in_stream_file.cc",
    "in_stream_http.cc",
    "in_stream_peeker.cc",
    "test/use_video_decoder_test.cc",
    "use_aac_decoder.cc",
    "use_aac_decoder.h",
    "use_video_decoder.cc",
    "use_video_decoder.h",
    "util.cc",
    "util.h",
  ]

  public_deps = [
    "//sdk/fidl/fuchsia.mediacodec",
    "//sdk/fidl/fuchsia.net.http",
    "//sdk/lib/sys/cpp",
    "//src/lib/fxl",
    "//src/media/lib/codec_impl:fourcc",
    "//third_party/boringssl:crypto",
    "//zircon/public/lib/async-loop-cpp",
    "//zircon/public/lib/async-loop-default",
    "//zircon/public/lib/fbl",
  ]

  deps = [
    "//sdk/fidl/fuchsia.hardware.securemem",
    "//sdk/lib/sys/cpp",
    "//sdk/lib/ui/scenic/cpp",
    "//src/lib/ui/base_view",
    "//src/media/audio/lib/wav_writer:wav_writer",
    "//src/media/lib/codec_impl:fourcc",
    "//src/media/lib/raw_video_writer:raw_video_writer",
    "//src/media/lib/test:codec_client",
    "//src/media/lib/test:frame_sink",
    "//src/media/lib/test:one_shot_event",
    "//zircon/public/lib/async",
    "//zircon/public/lib/async-cpp",
    "//zircon/public/lib/fbl",
    "//zircon/system/ulib/tee-client-api",
  ]
}

executable("use_media_decoder") {
  testonly = true

  output_name = "use_media_decoder"

  sources = [ "main.cc" ]

  deps = [
    ":use_media_decoder_source_set",
    "//src/media/lib/test:frame_sink",
    "//src/media/lib/test:one_shot_event",
  ]
}

# This test target uses the AAC decoder the same way as the example program and
# then also verifies the output data (without writing an output file).
executable("use_aac_decoder_test") {
  testonly = true
  output_name = "use_aac_decoder_test"

  sources = [ "test/use_aac_decoder_test.cc" ]

  deps = [
    ":use_media_decoder_source_set",
    "//src/lib/fxl/test:gtest_main",
  ]
}

# This test target uses the h264 decoder the same way as the example program and
# then also verifies the output data (without writing an output file).
test("use_h264_decoder_test") {
  testonly = true

  output_name = "use_h264_decoder_test"

  sources = [ "test/use_h264_decoder_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_h264_decoder_stream_switching_test") {
  testonly = true

  output_name = "use_h264_decoder_stream_switching_test"

  sources = [ "test/use_h264_decoder_stream_switching_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_h264_decoder_secure_output_test") {
  testonly = true

  output_name = "use_h264_decoder_secure_output_test"

  sources = [ "test/use_h264_decoder_secure_output_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_h264_decoder_secure_input_output_test") {
  testonly = true

  output_name = "use_h264_decoder_secure_input_output_test"

  sources = [ "test/use_h264_decoder_secure_input_output_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_vp9_decoder_test") {
  testonly = true

  output_name = "use_vp9_decoder_test"

  sources = [ "test/use_vp9_decoder_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_vp9_decoder_skip_first_frame_test") {
  testonly = true

  output_name = "use_vp9_decoder_skip_first_frame_test"

  sources = [ "test/use_vp9_decoder_skip_first_frame_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_vp9_decoder_24_output_frames_test") {
  testonly = true

  output_name = "use_vp9_decoder_24_output_frames_test"

  sources = [ "test/use_vp9_decoder_24_output_frames_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_vp9_decoder_secure_output_test") {
  testonly = true

  output_name = "use_vp9_decoder_secure_output_test"

  sources = [ "test/use_vp9_decoder_secure_output_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("use_vp9_decoder_secure_input_output_test") {
  testonly = true

  output_name = "use_vp9_decoder_secure_input_output_test"

  sources = [ "test/use_vp9_decoder_secure_input_output_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

test("vp9_decoder_conformance_test") {
  testonly = true

  output_name = "vp9_decoder_conformance_test"

  sources = [ "test/vp9_decoder_conformance_test.cc" ]

  deps = [ ":use_media_decoder_source_set" ]
}

source_set("decoder_fuzzer") {
  testonly = true
  sources = [ "test/video_decoder_fuzzer_test.cc" ]

  public_deps = [
    ":use_media_decoder_source_set",
    "//src/lib/syslog/cpp",
  ]
}

test("h264_decoder_fuzzer_test") {
  testonly = true

  output_name = "h264_decoder_fuzzer_test"

  sources = [ "test/h264_decoder_fuzzer_test.cc" ]

  deps = [ ":decoder_fuzzer" ]
}

test("vp9_decoder_fuzzer_test") {
  testonly = true

  output_name = "vp9_decoder_fuzzer_test"

  sources = [ "test/vp9_decoder_fuzzer_test.cc" ]

  deps = [ ":decoder_fuzzer" ]
}
