# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//src/sys/build/fuchsia_component.gni")

# Defines an API integration test.
#
# This template creates a fuchsia_component with the given name, where the
# component contains a test executable built from sources and deps, along with
# an auto-generated manifest for the test executable. By default, the deps
# include libraries that will be needed by all tests in this directory.
#
# Example:
# ```
# audio_core_api_test_comonent(name) {
#   sources = ["foo_test.cc"]
#   deps = ["//lib"]
# }
# ```
#
# Parameters
#
#   sources (required)
#     List of source files to include in this test component.
#     Type: list(path)
#
#   deps (optional)
#     List of dependencies files to include in this test component.
#     Type: list(target)
#
template("audio_core_api_test_component") {
  assert(defined(invoker.sources) && invoker.sources != [],
         "sources must be non-empty")

  binary = "${target_name}-bin"
  cmx_target = "${target_name}_cmx"
  cmx_output = "${target_gen_dir}/${target_name}.cmx"

  generated_file(cmx_target) {
    contents = read_file("meta/audio-core-api-tests.cmx", "string")
    contents = string_replace(contents, "{binary}", binary)
    outputs = [ cmx_output ]
    output_conversion = "string"
    testonly = true
  }

  fuchsia_component(target_name) {
    testonly = true
    manifest = get_target_outputs(":${cmx_target}")
    manifest = manifest[0]
    deps = [
      ":${cmx_target}",
      ":${target_name}-bin",
    ]
  }

  executable("${target_name}-bin") {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "sources",
                           ])
    if (!defined(deps)) {
      deps = []
    }
    deps += [
      "//sdk/fidl/fuchsia.media",
      "//src/lib/fxl/test:gtest_main",
      "//src/media/audio/lib/test:hermetic_audio_test",
      "//third_party/googletest:gmock",
    ]
    testonly = true
  }
}
