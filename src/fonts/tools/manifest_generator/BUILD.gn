# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/host.gni")
import("//build/rust/rustc_binary.gni")
import("//build/rust/rustc_test.gni")
import("//build/testing/environments.gni")

rustc_binary("manifest_generator_bin") {
  name = "font_manifest_generator"
  with_unit_tests = true
  edition = "2018"

  deps = [
    "//garnet/lib/rust/fidl_fuchsia_fonts_ext",
    "//sdk/fidl/fuchsia.fonts:fuchsia.fonts-rustc",
    "//src/fonts/char_set",
    "//src/fonts/font_info",
    "//src/fonts/manifest",
    "//src/fonts/offset_string",
    "//src/sys/lib/fuchsia_url",
    "//third_party/rust_crates:failure",
    "//third_party/rust_crates:itertools",
    "//third_party/rust_crates:rayon",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_derive",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:structopt",
    "//third_party/rust_crates:unicase",
  ]

  test_deps = [
    "//src/lib/intl/unicode_utils/char_collection",
    "//third_party/rust_crates:pretty_assertions",
    "//third_party/rust_crates:tempfile",
  ]
}

rustc_test("font_manifest_generator_integration_tests") {
  edition = "2018"
  deps = [
    "//third_party/rust_crates:failure",
    "//third_party/rust_crates:itertools",
    "//third_party/rust_crates:pretty_assertions",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:tempfile",
  ]
  source_root = "tests/tests.rs"

  # Must depend directly on these in order to have access to them in CQ
  non_rust_deps = [ ":test_files" ]
}

copy("copy_test_data") {
  sources = [
    "tests/data/a.font_catalog.json",
    "tests/data/a.font_pkgs.json",
    "tests/data/b.font_catalog.json",
    "tests/data/b.font_pkgs.json",
    "tests/data/product_ab.font_sets.json",
    "tests/goldens/product_ab.font_manifest.json",
  ]
  outputs = [
    "$root_out_dir/test_data/font_manifest_generator/{{source_file_part}}",
  ]
}

group("test_files") {
  data_deps = [
    ":copy_test_data",
    ":manifest_generator_bin",
  ]
  metadata = {
    test_runtime_deps = get_target_outputs(":copy_test_data") +
                        [ "$root_out_dir/font_manifest_generator" ]
  }
}

group("manifest_generator") {
  public_deps = [
    ":manifest_generator_bin($host_toolchain)",
  ]
}

group("tests") {
  testonly = true

  public_deps = [
    ":font_manifest_generator_integration_tests($host_toolchain)",
    ":manifest_generator_bin_test($host_toolchain)",
  ]
}
