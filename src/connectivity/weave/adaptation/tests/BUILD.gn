# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

group("tests") {
  testonly = true
  public_deps = [ ":weavestack-adaptation-unittests" ]
}

test_package("weavestack-adaptation-unittests") {
  tests = [
    {
      name = "weave_ble_manager_unittests"
    },
    {
      log_settings = {
        max_severity = "ERROR"
      }
      name = "configuration_manager_unittests"
    },
    {
      name = "group_key_store_unittests"
    },
    {
      log_settings = {
        max_severity = "ERROR"
      }
      name = "platform_case_auth_delegate_unittests"
    },
    {
      log_settings = {
        max_severity = "ERROR"
      }
      name = "weave_config_manager_unittests"
    },
    {
      log_settings = {
        max_severity = "ERROR"
      }
      name = "weave_connectivity_manager_unittests"
    },
    {
      name = "weave_thread_stack_manager_unittests"
    },
    {
      name = "weave_platform_manager_unittests"
    },
    {
      log_settings = {
        max_severity = "ERROR"
      }
      name = "weave_warm_platform_support_unittests"
    },
  ]
  deps = [
    ":config",
    ":configuration_manager_unittests",
    ":group_key_store_unittests",
    ":platform_case_auth_delegate_unittests",
    ":weave_ble_manager_unittests",
    ":weave_config_manager_unittests",
    ":weave_connectivity_manager_unittests",
    ":weave_platform_manager_unittests",
    ":weave_thread_stack_manager_unittests",
    ":weave_warm_platform_support_unittests",
  ]
  resources = [
    {
      path = rebase_path("testdata/config.json")
      dest = "config.json"
    },
    {
      path =
          rebase_path("../../weavestack/data/default_environment_schema.json")
      dest = "default_environment_schema.json"
    },
    {
      path = rebase_path("testdata/default_store.json")
      dest = "default_store.json"
    },
    {
      path = rebase_path("testdata/default_store_schema.json")
      dest = "default_store_schema.json"
    },
    {
      path = rebase_path("testdata/invalid_default_store.json")
      dest = "invalid_default_store.json"
    },
    {
      path = rebase_path("testdata/test_mfr_private_key")
      dest = "test_mfr_private_key"
    },
    {
      path = rebase_path("testdata/test_mfr_cert")
      dest = "test_mfr_cert"
    },
  ]
}

executable("weave_ble_manager_unittests") {
  testonly = true
  output_name = "weave_ble_manager_unittests"
  sources = [ "ble_manager_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

executable("configuration_manager_unittests") {
  testonly = true
  output_name = "configuration_manager_unittests"
  sources = [ "configuration_manager_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

executable("group_key_store_unittests") {
  testonly = true
  output_name = "group_key_store_unittests"
  sources = [ "group_key_store_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

executable("platform_case_auth_delegate_unittests") {
  testonly = true
  output_name = "platform_case_auth_delegate_unittests"
  sources = [ "platform_case_auth_delegate_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

executable("weave_platform_manager_unittests") {
  testonly = true
  output_name = "weave_platform_manager_unittests"
  sources = [ "platform_manager_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

executable("weave_config_manager_unittests") {
  testonly = true
  output_name = "weave_config_manager_unittests"
  sources = [ "weave_config_manager_unittests.cpp" ]
  deps = [
    ":common_test_deps",
    "//src/lib/files:files",
  ]
}

executable("weave_thread_stack_manager_unittests") {
  testonly = true
  output_name = "weave_thread_stack_manager_unittests"
  sources = [ "thread_stack_manager_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

executable("weave_connectivity_manager_unittests") {
  testonly = true
  output_name = "weave_connectivity_manager_unittests"
  sources = [ "connectivity_manager_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

executable("weave_warm_platform_support_unittests") {
  testonly = true
  output_name = "weave_warm_platform_support_unittests"
  sources = [ "warm_unittests.cpp" ]
  deps = [ ":common_test_deps" ]
}

group("common_test_deps") {
  testonly = true
  public_deps = [
    "//sdk/lib/sys/cpp/testing:unit",
    "//sdk/lib/syslog/cpp:backend_legacy",
    "//src/connectivity/weave/adaptation",
    "//src/lib/fxl/test:gtest_main",
    "//src/lib/testing/loop_fixture",
    "//third_party/googletest:gtest",
  ]
}

config_data("config") {
  for_pkg = "weavestack-adaptation-unittests"
  sources = [
    "testdata/default_environment.json",
    "testdata/device_info.json",
  ]
}
