# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config.gni")
import("//build/package.gni")
import("//build/rust/rustc_binary.gni")
import("//build/test/test_package.gni")

rustc_binary("bin") {
  name = "bt_rfcomm"
  edition = "2018"
  with_unit_tests = true

  deps = [
    "//sdk/fidl/fuchsia.bluetooth:fuchsia.bluetooth-rustc",
    "//sdk/fidl/fuchsia.bluetooth.bredr:fuchsia.bluetooth.bredr-rustc",
    "//src/connectivity/bluetooth/lib/fuchsia-bluetooth",
    "//src/lib/async-utils",
    "//src/lib/diagnostics/inspect/contrib/rust",
    "//src/lib/diagnostics/inspect/derive",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/syslog/rust:syslog",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:async-trait",
    "//third_party/rust_crates:bitfield",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:log",
    "//third_party/rust_crates:slab",
    "//third_party/rust_crates:thiserror",
  ]

  test_deps = [ "//third_party/rust_crates:matches" ]

  sources = [
    "src/main.rs",
    "src/profile.rs",
    "src/profile_registrar.rs",
    "src/rfcomm/frame/fcs.rs",
    "src/rfcomm/frame/mod.rs",
    "src/rfcomm/frame/mux_commands/dlc_parameter_negotiation.rs",
    "src/rfcomm/frame/mux_commands/flow_control.rs",
    "src/rfcomm/frame/mux_commands/mod.rs",
    "src/rfcomm/frame/mux_commands/modem_status.rs",
    "src/rfcomm/frame/mux_commands/non_supported.rs",
    "src/rfcomm/frame/mux_commands/remote_line_status.rs",
    "src/rfcomm/frame/mux_commands/remote_port_negotiation.rs",
    "src/rfcomm/frame/mux_commands/test_command.rs",
    "src/rfcomm/inspect.rs",
    "src/rfcomm/mod.rs",
    "src/rfcomm/server.rs",
    "src/rfcomm/session/channel.rs",
    "src/rfcomm/session/mod.rs",
    "src/rfcomm/session/multiplexer.rs",
    "src/rfcomm/test_util.rs",
    "src/rfcomm/types.rs",
    "src/types.rs",
  ]
}

package("bt-rfcomm") {
  deps = [ ":bin" ]

  binaries = [
    {
      name = "bt_rfcomm"
    },
  ]
  meta = [
    {
      path = rebase_path("meta/bt-rfcomm.cmx")
      dest = "bt-rfcomm.cmx"
    },
  ]
}

test_package("tests") {
  package_name = "bt-rfcomm-tests"

  deps = [ ":bin_test" ]

  tests = [
    {
      name = "bt_rfcomm_bin_test"
      dest = "bt-rfcomm-unittests"
      environments = basic_envs
    },
  ]
}
