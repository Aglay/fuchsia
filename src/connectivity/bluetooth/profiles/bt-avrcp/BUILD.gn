# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")
import("//build/rust/rustc_binary.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

rustc_binary("bin") {
  name = "bt_avrcp"
  edition = "2018"
  with_unit_tests = true

  deps = [
    "//sdk/fidl/fuchsia.bluetooth:fuchsia.bluetooth-rustc",
    "//sdk/fidl/fuchsia.bluetooth.avrcp:fuchsia.bluetooth.avrcp-rustc",
    "//sdk/fidl/fuchsia.bluetooth.avrcp.test:fuchsia.bluetooth.avrcp.test-rustc",
    "//sdk/fidl/fuchsia.bluetooth.bredr:fuchsia.bluetooth.bredr-rustc",
    "//src/connectivity/bluetooth/lib/bt-avctp",
    "//src/connectivity/bluetooth/lib/fuchsia-bluetooth",
    "//src/lib/diagnostics/inspect/contrib/rust",
    "//src/lib/diagnostics/inspect/derive",
    "//src/lib/diagnostics/inspect/rust",
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/syslog/rust:syslog",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:bitflags",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:log",
    "//third_party/rust_crates:matches",
    "//third_party/rust_crates:parking_lot",
    "//third_party/rust_crates:pin-utils",
    "//third_party/rust_crates:rand",
    "//third_party/rust_crates:slab",
    "//third_party/rust_crates:thiserror",
  ]

  sources = [
    "src/main.rs",
    "src/packets/browsing/get_folder_items.rs",
    "src/packets/browsing/get_total_items.rs",
    "src/packets/browsing/mod.rs",
    "src/packets/browsing/set_addressed_player.rs",
    "src/packets/continuation.rs",
    "src/packets/get_capabilities.rs",
    "src/packets/get_element_attributes.rs",
    "src/packets/get_play_status.rs",
    "src/packets/mod.rs",
    "src/packets/notification.rs",
    "src/packets/player_application_settings/get_attribute_text.rs",
    "src/packets/player_application_settings/get_current_settings.rs",
    "src/packets/player_application_settings/get_value_text.rs",
    "src/packets/player_application_settings/list_settings.rs",
    "src/packets/player_application_settings/mod.rs",
    "src/packets/player_application_settings/set_current_settings.rs",
    "src/packets/rejected.rs",
    "src/packets/set_absolute_volume.rs",
    "src/peer/controller.rs",
    "src/peer/handlers/browse_channel.rs",
    "src/peer/handlers/decoders.rs",
    "src/peer/handlers/mod.rs",
    "src/peer/mod.rs",
    "src/peer/tasks/mod.rs",
    "src/peer/tasks/notification_stream.rs",
    "src/peer_manager/mod.rs",
    "src/peer_manager/target_delegate.rs",
    "src/profile.rs",
    "src/service.rs",
    "src/tests/mod.rs",
    "src/types.rs",
  ]
}

package("bt-avrcp") {
  deps = [ ":bin" ]

  binaries = [
    {
      name = "bt_avrcp"
    },
  ]
  meta = [
    {
      path = rebase_path("meta/bt-avrcp.cmx")
      dest = "bt-avrcp.cmx"
    },
  ]
}

test_package("tests") {
  package_name = "bt-avrcp-tests"

  deps = [ ":bin_test" ]

  tests = [
    {
      name = "bt_avrcp_bin_test"
      dest = "bt-avrcp-unittests"
      environments = basic_envs
    },
  ]
}
