# Copyright (c) 2018 The Fuchsia Authors.
#
# Permission to use, copy, modify, and/or distribute this software for any purpose with or without
# fee is hereby granted, provided that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.

import("//build/cipd.gni")
import("//build/config/fuchsia/rules.gni")
import("//build/driver_package.gni")

# By default, targets are only visible here and to subdirectories.
visibility = [ "./*" ]

# The brcmfmac driver can be built with support for different system buses (PCIE, SDIO and
# simulated-firmware), and different configurations will require different support.  To facilitate
# consolidating all the potentially messy conditional compilation in one place, "binding.cc" is
# conditionally compiled based on the values of the preprocessor #defines:
#
# * CONFIG_BRCMFMAC_PCIE
# * CONFIG_BRCMFMAC_SDIO
# * CONFIG_BRCMFMAC_SIM
# * CONFIG_BRCMFMAC_DRIVER_TEST
#
# These #defines are applied as public_configs entries on the targets:
# respectively:
#
# * pcie/pcie
# * sdio/sdio
# * sim/sim
#
# Thus a target that depends on one of the above targets, can include "binding.cc" in its sources
# and will then conditionally compile it with the set of preprocessor #defines set by the targets
# it depends on.
#
# See the targets ":driver_module" and ":test_driver_module" to see how this is done.

# Sources for driver debug logging.
source_set("debug") {
  sources = [ "debug.cc" ]
  public = [ "debug.h" ]
  public_deps = [
    "//src/lib/ddk",
    "//zircon/system/public",
  ]
}

# Sources for utility classes.  Classes here should be small and self-contained, having no
# dependencies.
source_set("util") {
  public = [
    "intrusive_list.h",
    "task_queue.h",
  ]
}

# Sources for Linux porting compatibility.
source_set("linuxisms") {
  sources = [
    "linuxisms.cc",
    "netbuf.cc",
    "workqueue.cc",
  ]
  public = [
    "linuxisms.h",
    "netbuf.h",
    "workqueue.h",
  ]
  deps = [
    ":debug",
    "//zircon/public/lib/sync",
    "//zircon/public/lib/zircon-internal",
  ]
  public_deps = [
    "//sdk/banjo/ddk.protocol.ethernet",
    "//zircon/system/public",
  ]
}

# Sources for DMA buffer handling.
source_set("dmabuf") {
  sources = [
    "dma_buffer.cc",
    "dma_pool.cc",
    "dma_ring.cc",
  ]
  public = [
    "dma_buffer.h",
    "dma_pool.h",
    "dma_ring.h",
  ]
  deps = [ ":debug" ]
  public_deps = [
    "//zircon/public/lib/zx",
    "//zircon/system/public",
  ]
  friend = [ "test/*" ]
}

# Sources for the BCDC firmware protocol.
source_set("bcdc") {
  sources = [
    "bcdc.cc",
    "fwsignal.cc",
    "fwsignal.h",
  ]
  public = [ "bcdc.h" ]
  deps = [
    ":core",
    ":debug",
    ":linuxisms",
    "//zircon/system/public",
  ]
}

# Sources for the driver core logic.
source_set("core") {
  sources = [
    "bits.cc",
    "bits.h",
    "btcoex.cc",
    "btcoex.h",
    "cfg80211.cc",
    "chip.cc",
    "common.cc",
    "core.cc",
    "d11.cc",
    "device.cc",
    "feature.cc",
    "feature.h",
    "firmware.cc",
    "fweh.cc",
    "fwil.cc",
    "pno.cc",
    "pno.h",
    "timer.cc",
    "utils.cc",
    "wlan_interface.cc",
    "wlan_interface.h",
  ]
  public = [
    "bits.h",
    "brcm_hw_ids.h",
    "brcmu_d11.h",
    "brcmu_utils.h",
    "brcmu_wifi.h",
    "bus.h",
    "cfg80211.h",
    "chip.h",
    "chipcommon.h",
    "common.h",
    "core.h",
    "debug.h",
    "defs.h",
    "device.h",
    "firmware.h",
    "fweh.h",
    "fwil.h",
    "fwil_types.h",
    "fwsignal.h",
    "proto.h",
    "regs.h",
    "soc.h",
    "timer.h",
  ]
  deps = [
    ":debug",
    "//sdk/banjo/ddk.hw.wlan.wlaninfo",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/lib/ddk",
  ]
  public_deps = [
    ":linuxisms",
    "//garnet/lib/wlan/protocol",
    "//sdk/banjo/ddk.protocol.ethernet",
    "//sdk/banjo/ddk.protocol.wlanphyimpl",
    "//sdk/fidl/fuchsia.factory.wlan:fuchsia.factory.wlan_llcpp",
    "//src/devices/lib/broadcom",
    "//src/lib/ddktl",
    "//zircon/public/lib/async",
    "//zircon/public/lib/sync",
    "//zircon/system/public",
    "//zircon/system/ulib/async-loop",
    "//zircon/system/ulib/async-loop:async-loop-default",
  ]
  friend = [ "test/*" ]
}

# Source set including the driver sources, and the bus definitions conditionally compiled in on each
# platform.
source_set("driver_sources") {
  deps = [
    ":core",
    ":debug",
    "//src/devices/lib/driver",
  ]

  # The bus target dependencies below are public_deps so that their configs propagate to users of
  # this target.
  public_deps = []

  # Assume for now that arm64 boards use the SDIO interface.
  if (target_cpu == "arm64") {
    public_deps += [ "sdio" ]
  }

  # Assume for now that x64 boards use the PCIE interface.
  if (target_cpu == "x64") {
    public_deps += [ "pcie" ]
  }
}

# Driver module for the brcmfmac driver.
driver_module("driver_module") {
  output_name = "brcmfmac"
  sources = [ "binding.cc" ]
  deps = [
    ":core",
    ":driver_sources",
  ]
  configs -= [ "//build/config/fuchsia:no_cpp_standard_library" ]
  configs += [ "//build/config/fuchsia:static_cpp_standard_library" ]
}

# Driver module for the test version of the brcmfmac driver, which includes run_unit_tests() DDK
# tests.
driver_module("test_driver_module") {
  output_name = "brcmfmac-test"
  sources = [ "binding.cc" ]
  deps = [
    ":core",
    ":driver_sources",

    # All driver test targets are linked into the driver test.  The appropriate test will be
    # executed at runtime.
    "pcie:pcie_driver_test",
  ]
  defines = [ "CONFIG_BRCMFMAC_DRIVER_TEST=1" ]
  configs -= [ "//build/config/fuchsia:no_cpp_standard_library" ]
  configs += [ "//build/config/fuchsia:static_cpp_standard_library" ]
}

# Firmware file copying below.  There are three targets:
#
# * brcmfmac-firmware-copy
# * brcmfmac-nvram-copy
# * brcmfmac-clm-copy
#
# which copy the firmware, NVRAM definition, and CLM blob respectively.  They are either copy()
# targets, or empty group() targets, for use in the driver_driver_package() targets below.
#
# All files that must be included as libraries in the driver_driver_package() target are added to the
# driver_library_files list.

driver_library_files = []
if (internal_access) {
  # Firmware files from git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git
  if (board_name == "astro") {
    copy("brcmfmac-firmware-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-astro.bin" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.bin" ]
    }
    copy("brcmfmac-nvram-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-astro.txt" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.txt" ]
    }
    copy("brcmfmac-clm-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-astro.clm_blob" ]
      outputs =
          [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.clm_blob" ]
    }
    driver_library_files += [
      "brcmfmac43455-sdio.bin",
      "brcmfmac43455-sdio.txt",
      "brcmfmac43455-sdio.clm_blob",
    ]
  } else if (board_name == "sherlock") {
    copy("brcmfmac-firmware-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-sherlock.bin" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.bin" ]
    }
    copy("brcmfmac-nvram-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-sherlock.txt" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.txt" ]
    }
    copy("brcmfmac-clm-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-sherlock.clm_blob" ]
      outputs =
          [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.clm_blob" ]
    }
    driver_library_files += [
      "brcmfmac43455-sdio.bin",
      "brcmfmac43455-sdio.txt",
      "brcmfmac43455-sdio.clm_blob",
    ]
  } else if (board_name == "nelson") {
    copy("brcmfmac-firmware-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-nelson.bin" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.bin" ]
    }
    copy("brcmfmac-nvram-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-nelson.txt" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.txt" ]
    }
    copy("brcmfmac-clm-copy") {
      sources = [ "firmware/brcmfmac43455-sdio-nelson.clm_blob" ]
      outputs =
          [ "$root_out_dir/firmware/brcmfmac/brcmfmac43455-sdio.clm_blob" ]
    }
    driver_library_files += [
      "brcmfmac43455-sdio.bin",
      "brcmfmac43455-sdio.txt",
      "brcmfmac43455-sdio.clm_blob",
    ]
  } else if (target_cpu == "x64") {
    # Assume for now that x64 boards use the PCIE interface.
    copy("brcmfmac-firmware-copy") {
      sources = [ "firmware/brcmfmac4356-pcie-ap6356sdp.bin" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac4356-pcie.bin" ]
    }
    copy("brcmfmac-nvram-copy") {
      sources = [ "firmware/brcmfmac4356-pcie-ap6356sdp.txt" ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/brcmfmac4356-pcie.txt" ]
    }
    group("brcmfmac-clm-copy") {
    }
    driver_library_files += [
      "brcmfmac4356-pcie.bin",
      "brcmfmac4356-pcie.txt",
    ]
  } else {
    copy("brcmfmac-firmware-copy") {
      sources = [
        "firmware/brcmfmac43242a.bin",
        "firmware/brcmfmac43455-sdio.bin",
        "firmware/brcmfmac43455-sdio.txt",
        "firmware/brcmfmac4356-pcie.bin",
        "firmware/brcmfmac4356-sdio.bin",
        "firmware/brcmfmac4356-sdio.txt",
        "firmware/brcmfmac4359-sdio.bin",
        "firmware/brcmfmac4359-sdio.txt",
      ]
      outputs = [ "$root_out_dir/firmware/brcmfmac/{{source_file_part}}" ]
    }
    group("brcmfmac-nvram-copy") {
    }
    group("brcmfmac-clm-copy") {
    }
    driver_library_files += [
      "brcmfmac43242a.bin",
      "brcmfmac43455-sdio.bin",
      "brcmfmac43455-sdio.txt",
      "brcmfmac4356-pcie.bin",
      "brcmfmac4356-sdio.bin",
      "brcmfmac4356-sdio.txt",
      "brcmfmac4359-sdio.bin",
      "brcmfmac4359-sdio.txt",
    ]
  }
} else {
  # Provide an empty target, in case no firmware is available.
  group("brcmfmac-firmware-copy") {
  }
  group("brcmfmac-nvram-copy") {
  }
  group("brcmfmac-clm-copy") {
  }
}

# The test package, including tests in subdirs.
group("brcmfmac_tests") {
  deps = [
    "msgbuf/test:brcmfmac_msgbuf_test",
    "sdio/test:brcmfmac_sdio_test",
    "sim/test:brcmfmac_sim_test",
    "test:brcmfmac_test",
  ]
  testonly = true
  visibility += [ "*" ]
}

# Driver packages.  Depend on one or the other, depending on whether the board definition would like
# runtime tests in the driver or not.

# Driver package for the brcmfmac driver.
driver_package("brcmfmac") {
  deps = [
    # The copy step has to be in the shared-library toolchain to use the
    # expected output directory, since we treat firmware blobs as if they
    # were libraries which always use the shared-library toolchain to build.
    ":brcmfmac-clm-copy($shlib_toolchain)",
    ":brcmfmac-firmware-copy($shlib_toolchain)",
    ":brcmfmac-nvram-copy($shlib_toolchain)",
    ":driver_module",
  ]
  drivers = [
    {
      name = "brcmfmac.so"
    },
  ]
  libraries = []
  foreach(file, driver_library_files) {
    libraries += [
      {
        name = "firmware/brcmfmac/$file"
      },
    ]
  }
  visibility += [ "*" ]
}

# Driver package for the test version of the brcmfmac driver.
driver_package("brcmfmac-test-driver") {
  deps = [
    # The copy step has to be in the shared-library toolchain to use the
    # expected output directory, since we treat firmware blobs as if they
    # were libraries which always use the shared-library toolchain to build.
    ":brcmfmac-clm-copy($shlib_toolchain)",
    ":brcmfmac-firmware-copy($shlib_toolchain)",
    ":brcmfmac-nvram-copy($shlib_toolchain)",
    ":test_driver_module",
  ]
  drivers = [
    {
      name = "brcmfmac-test.so"
    },
  ]
  libraries = []
  foreach(file, driver_library_files) {
    libraries += [
      {
        name = "firmware/brcmfmac/$file"
      },
    ]
  }
  visibility += [ "*" ]
}
