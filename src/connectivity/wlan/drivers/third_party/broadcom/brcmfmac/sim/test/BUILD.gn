# Copyright (c) 2019 The Fuchsia Authors.
#
# Permission to use, copy, modify, and/or distribute this software for any purpose with or without
# fee is hereby granted, provided that the above copyright notice and this permission notice appear
# in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
# NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
# OF THIS SOFTWARE.

import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

source_set("sim_test") {
  output_name = "sim_test"
  testonly = true
  sources = [ "sim_test.cc" ]
  public = [ "sim_test.h" ]
  deps = [ "//zircon/system/public" ]
  public_deps = [
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac/sim",
    "//src/lib/fxl/test:gtest_main",
  ]
}

executable("assoc_test") {
  output_name = "assoc_test"
  testonly = true
  sources = [ "assoc_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("channel_switch_test") {
  output_name = "channel_switch_test"
  testonly = true
  sources = [ "channel_switch_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("create_softap_test") {
  output_name = "create_softap_test"
  testonly = true
  sources = [ "create_softap_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("auth_test") {
  output_name = "auth_test"
  testonly = true
  sources = [ "auth_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("dynamic_if_test") {
  output_name = "dynamic_if_test"
  testonly = true
  sources = [ "dynamic_if_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("firmware_config_test") {
  output_name = "firmware_config_test"
  testonly = true
  sources = [ "firmware_config_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac/sim",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("iovar_test") {
  output_name = "iovar_test"
  testonly = true
  sources = [ "iovar_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac/sim",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  #deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("lifecycle_test") {
  output_name = "lifecycle_test"
  testonly = true
  sources = [ "lifecycle_test.cc" ]
  deps = [
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac/sim",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("scan_dwell_time_test") {
  output_name = "scan_dwell_time_test"
  testonly = true
  sources = [ "scan_dwell_time_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("passive_scan_test") {
  output_name = "passive_scan_test"
  testonly = true
  sources = [ "passive_scan_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]
  public_configs = [ "//build/config:Wno-reorder-init-list" ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("active_scan_test") {
  output_name = "active_scan_test"
  testonly = true
  sources = [ "active_scan_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]
  public_configs = [ "//build/config:Wno-reorder-init-list" ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("cc_test") {
  output_name = "cc_test"
  testonly = true
  sources = [ "cc_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]
  public_configs = [ "//build/config:Wno-reorder-init-list" ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

executable("beacon_lost_test") {
  output_name = "beacon_lost_test"
  testonly = true
  sources = [ "beacon_lost_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]
}

executable("data_frame_test") {
  output_name = "data_frame_test"
  testonly = true
  sources = [ "data_frame_test.cc" ]
  deps = [
    ":sim_test",
    "//src/connectivity/wlan/drivers/testing/lib/sim-device",
    "//src/connectivity/wlan/drivers/testing/lib/sim-env",
    "//src/connectivity/wlan/drivers/testing/lib/sim-fake-ap",
    "//src/connectivity/wlan/drivers/third_party/broadcom/brcmfmac:core",
    "//src/connectivity/wlan/lib/common/cpp:common",
    "//src/devices/testing/fake_ddk",
    "//src/lib/fxl/test:gtest_main",
  ]

  # TODO(46539): Fix the leaks and remove this.
  deps += [ "//build/config/sanitizers:suppress-lsan.DO-NOT-USE-THIS" ]
}

unittest_package("brcmfmac_sim_test") {
  package_name = "brcmfmac-sim-test"
  deps = [
    ":active_scan_test",
    ":assoc_test",
    ":auth_test",
    ":beacon_lost_test",
    ":cc_test",
    ":channel_switch_test",
    ":create_softap_test",
    ":data_frame_test",
    ":dynamic_if_test",
    ":firmware_config_test",
    ":iovar_test",
    ":lifecycle_test",
    ":passive_scan_test",
    ":scan_dwell_time_test",
  ]
  tests = [
    {
      name = "assoc_test"
      environments = basic_envs
    },
    {
      name = "channel_switch_test"
      environments = basic_envs
    },
    {
      name = "cc_test"
      environments = basic_envs
    },
    {
      name = "create_softap_test"
      environments = basic_envs
    },
    {
      name = "auth_test"
      environments = basic_envs
    },
    {
      name = "dynamic_if_test"
      environments = basic_envs
    },
    {
      name = "firmware_config_test"
      environments = basic_envs
    },
    {
      name = "iovar_test"
      environments = basic_envs
    },
    {
      name = "lifecycle_test"
      environments = basic_envs
    },
    {
      name = "scan_dwell_time_test"
      environments = basic_envs
    },
    {
      name = "passive_scan_test"
      environments = basic_envs
    },
    {
      name = "active_scan_test"
      environments = basic_envs
    },
    {
      name = "beacon_lost_test"
      environments = basic_envs
    },
    {
      name = "data_frame_test"
      environments = basic_envs
    },
  ]
}
