// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by "stringer -output ./src/connectivity/network/netstack/filter/filter_string.go -type=Action,Direction,endpointState ./src/connectivity/network/netstack/filter"; DO NOT EDIT.

package filter

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Pass-0]
	_ = x[Drop-1]
	_ = x[DropReset-2]
}

const _Action_name = "PassDropDropReset"

var _Action_index = [...]uint8{0, 4, 8, 17}

func (i Action) String() string {
	if i < 0 || i >= Action(len(_Action_index)-1) {
		return "Action(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Action_name[_Action_index[i]:_Action_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Incoming-0]
	_ = x[Outgoing-1]
}

const _Direction_name = "IncomingOutgoing"

var _Direction_index = [...]uint8{0, 8, 16}

func (i Direction) String() string {
	if i < 0 || i >= Direction(len(_Direction_index)-1) {
		return "Direction(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Direction_name[_Direction_index[i]:_Direction_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ICMPFirstPacket-0]
	_ = x[UDPFirstPacket-1]
	_ = x[UDPSingle-2]
	_ = x[UDPMultiple-3]
	_ = x[TCPFirstPacket-4]
	_ = x[TCPOpening-5]
	_ = x[TCPEstablished-6]
	_ = x[TCPClosing-7]
	_ = x[TCPFinWait-8]
	_ = x[TCPClosed-9]
}

const _endpointState_name = "ICMPFirstPacketUDPFirstPacketUDPSingleUDPMultipleTCPFirstPacketTCPOpeningTCPEstablishedTCPClosingTCPFinWaitTCPClosed"

var _endpointState_index = [...]uint8{0, 15, 29, 38, 49, 63, 73, 87, 97, 107, 116}

func (i endpointState) String() string {
	if i < 0 || i >= endpointState(len(_endpointState_index)-1) {
		return "endpointState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _endpointState_name[_endpointState_index[i]:_endpointState_index[i+1]]
}
