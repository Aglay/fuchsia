# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")
import("//build/rust/rustc_binary.gni")

declare_args() {
  # Whether or not prototype account transfer is enabled.
  # NOTE: This is not secure and should NOT be enabled for any products!  This
  # is only for use during local development.
  prototype_account_transfer = false
}

rustc_binary("bin") {
  name = "account_manager"
  edition = "2018"
  with_unit_tests = true

  deps = [
    "//garnet/public/lib/fidl/rust/fidl",
    "//garnet/public/rust/fuchsia-async",
    "//garnet/public/rust/fuchsia-component",
    "//garnet/public/rust/fuchsia-syslog",
    "//garnet/public/rust/fuchsia-zircon",
    "//sdk/fidl/fuchsia.auth:fuchsia.auth-rustc",
    "//sdk/fidl/fuchsia.identity.account:fuchsia.identity.account-rustc",
    "//sdk/fidl/fuchsia.overnet:fuchsia.overnet-rustc",
    "//sdk/fidl/fuchsia.overnet.protocol:fuchsia.overnet.protocol-rustc",
    "//sdk/fidl/fuchsia.sys:fuchsia.sys-rustc",
    "//src/identity/fidl:account-prototype-rustc",
    "//src/identity/fidl:account-rustc",
    "//src/identity/fidl:account-transfer-rustc",
    "//src/identity/lib/account_common",
    "//src/identity/lib/token_manager",
    "//src/lib/inspect/rust/fuchsia-inspect",
    "//third_party/rust_crates:async-trait",
    "//third_party/rust_crates:failure",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:getopts",
    "//third_party/rust_crates:lazy_static",
    "//third_party/rust_crates:log",
    "//third_party/rust_crates:parking_lot",
    "//third_party/rust_crates:rand",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_derive",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:tempfile",
  ]
}

package("account_manager") {
  deps = [
    ":bin",
  ]

  binary = "account_manager"

  meta = [
    {
      if (prototype_account_transfer) {
        path = rebase_path("meta/account_manager_prototype.cmx")
      } else {
        path = rebase_path("meta/account_manager.cmx")
      }
      dest = "account_manager.cmx"
    },
  ]
}

group("account_manager_auth_providers") {
  public_deps = [
    "../google_auth_provider",
  ]
}
