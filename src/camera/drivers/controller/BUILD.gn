# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/fuchsia/rules.gni")
import("//build/package.gni")

driver_module("controller-driver") {
  output_name = "controller"
  deps = [
    "//src/camera/drivers/controller/:controller-source",
  ]

  configs -= [ "//build/config/fuchsia:no_cpp_standard_library" ]
  configs += [ "//build/config/fuchsia:static_cpp_standard_library" ]
  configs += [ "//build/config/fuchsia:enable_zircon_asserts" ]
}

source_set("controller-source") {
  visibility = [ "../*" ]
  sources = [
    "controller-device.cc",
    "controller-protocol.cc",
    "memory_allocation.cc",
    "stream_protocol.cc",
  ]
  deps = [
    "//sdk/banjo/ddk.protocol.ge2d",
    "//sdk/banjo/ddk.protocol.isp",
    "//sdk/fidl/fuchsia.camera2",
    "//sdk/fidl/fuchsia.camera2.hal",
    "//src/camera/drivers/controller/configs/sherlock/:controller-configs",
    "//src/lib/syslog/cpp",
    "//zircon/public/lib/async-cpp",
    "//zircon/public/lib/async-loop-cpp",
    "//zircon/public/lib/async-loop-default",
    "//zircon/public/lib/ddk",
    "//zircon/public/lib/ddktl",
    "//zircon/public/lib/device-protocol-pdev",
    "//zircon/public/lib/device-protocol-platform-device",
    "//zircon/public/lib/driver",
    "//zircon/public/lib/fbl",
    "//zircon/public/lib/fidl-utils",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/fzl",
    "//zircon/public/lib/hwreg",
    "//zircon/public/lib/image-format",
    "//zircon/public/lib/sync",
    "//zircon/public/lib/syslog",
    "//zircon/public/lib/zx",
    "//zircon/public/lib/zxtest",
    "//zircon/system/banjo/ddk.protocol.composite",
    "//zircon/system/banjo/ddk.protocol.gdc",
    "//zircon/system/banjo/ddk.protocol.sysmem",
    "//zircon/system/fidl/fuchsia-hardware-camera:fuchsia-hardware-camera_c",
    "//zircon/system/fidl/fuchsia-sysmem:fuchsia-sysmem_c",
  ]
  public_configs = [ "//build/config:Wno-reorder-init-list" ]
}

package("controller") {
  deprecated_system_image = true

  deps = [
    ":controller-driver",
  ]

  drivers = [
    {
      name = "controller.so"
    },
  ]
}
