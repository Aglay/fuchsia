# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/cipd.gni")
import("//build/config/fuchsia/rules.gni")
import("//build/driver_package.gni")
import("//src/camera/debug.gni")

# The following config files are currently gated behind internal
# access to the CIPD repository.
if (internal_access) {
  all_gdc_config_files = [
    "config_001_2176x2720-to-640x512-RS-YUV420SemiPlanar.bin",
    "config_001_2240x1792-to-640x512-S-YUV420SemiPlanar.bin",
    "config_002_1152x1440-to-1440x1152-DKCR-YUV420SemiPlanar.bin",
    "config_002_2176x2720-to-2240x1792-DKCR-YUV420SemiPlanar.bin",
    "config_003_2176x2720-to-2240x1792-DKCR-YUV420SemiPlanar.bin",
    "config_1152x1440_to_1152x864_Crop_Rotate.bin",
    "config_1152x1440_to_512x384_Crop_Rotate.bin",
    "config_1152x1440_to_720x540_Crop_Rotate.bin",
  ]

  all_watermark_files = [
    "watermark-360p.rgba",
    "watermark-480p.rgba",
    "watermark-720p.rgba",
  ]
}

driver_module("driver") {
  output_name = "controller"
  deps = [ ":source" ]

  configs -= [ "//build/config/fuchsia:no_cpp_standard_library" ]
  configs += [
    "//build/config/fuchsia:static_cpp_standard_library",
    "//build/config/fuchsia:enable_zircon_asserts",
  ]
}

source_set("source") {
  defines = [ camera_debug_define ]
  visibility = [ "../*" ]
  sources = [
    "controller-device.cc",
    "controller-device.h",
    "controller-protocol.cc",
    "controller-protocol.h",
    "gdc_node.cc",
    "gdc_node.h",
    "ge2d_node.cc",
    "ge2d_node.h",
    "graph_utils.cc",
    "graph_utils.h",
    "input_node.cc",
    "input_node.h",
    "memory_allocation.cc",
    "memory_allocation.h",
    "output_node.cc",
    "output_node.h",
    "pipeline_manager.cc",
    "pipeline_manager.h",
    "processing_node.cc",
    "processing_node.h",
    "stream_protocol.cc",
    "stream_protocol.h",
  ]
  public_deps = [
    "//sdk/banjo/ddk.protocol.camerahwaccel",
    "//sdk/banjo/ddk.protocol.composite",
    "//sdk/banjo/ddk.protocol.gdc",
    "//sdk/banjo/ddk.protocol.ge2d",
    "//sdk/banjo/ddk.protocol.isp",
    "//sdk/banjo/ddk.protocol.platform.bus",
    "//sdk/banjo/ddk.protocol.sysmem",
    "//sdk/fidl/fuchsia.camera2",
    "//sdk/fidl/fuchsia.camera2.hal",
    "//sdk/fidl/fuchsia.hardware.camera",
    "//sdk/fidl/fuchsia.hardware.camera:fuchsia.hardware.camera_c",
    "//sdk/fidl/fuchsia.sysmem:fuchsia.sysmem_c",
    "//sdk/lib/syslog/cpp",
    "//sdk/lib/syslog/cpp:backend_legacy",
    "//src/camera/drivers/controller/configs/sherlock:controller-configs",
    "//src/camera/lib/format_conversion",
    "//src/devices/bus/lib/device-protocol-pdev",
    "//src/devices/bus/lib/device-protocol-platform-device",
    "//src/devices/lib/driver",
    "//src/lib/ddk",
    "//src/lib/ddktl",
    "//src/lib/fsl",
    "//src/lib/fxl",
    "//zircon/public/lib/async-cpp",
    "//zircon/public/lib/fbl",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/hwreg",
    "//zircon/public/lib/zircon-internal",
    "//zircon/public/lib/zx",
    "//zircon/system/ulib/async-loop:async-loop-cpp",
    "//zircon/system/ulib/async-loop:async-loop-default",
    "//zircon/system/ulib/fidl-utils",
    "//zircon/system/ulib/image-format",
    "//zircon/system/ulib/syslog",
    "//zircon/system/ulib/trace:trace-driver",
  ]
}

driver_package("controller") {
  deps = [ ":driver" ]

  drivers = [
    {
      name = "controller.so"
    },
  ]

  libraries = []
  if (internal_access) {
    foreach(config_file, all_gdc_config_files) {
      libraries += [
        {
          source =
              rebase_path("//prebuilt/camera/arm/gdc/configs/" + config_file)
          name = "firmware/" + config_file
        },
      ]
    }
    foreach(watermark_file, all_watermark_files) {
      libraries += [
        {
          source = rebase_path("//prebuilt/camera/watermark/" + watermark_file)
          name = "firmware/" + watermark_file
        },
      ]
    }
  }
}
