# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/package.gni")
import("//build/rust/rustc_binary.gni")
import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

rustc_binary("bin") {
  name = "iquery"
  with_unit_tests = true
  edition = "2018"

  deps = [
    "//garnet/lib/rust/files_async",
    "//garnet/lib/rust/io_util",
    "//sdk/fidl/fuchsia.inspect:fuchsia.inspect-rustc",
    "//sdk/fidl/fuchsia.inspect.deprecated:fuchsia.inspect.deprecated-rustc",
    "//sdk/fidl/fuchsia.sys:fuchsia.sys-rustc",
    "//src/diagnostics/lib/inspect-fidl-load",
    "//src/diagnostics/lib/selectors",
    "//src/lib/fdio/rust:fdio",
    "//src/lib/fidl/rust/fidl",
    "//src/lib/fuchsia-async",
    "//src/lib/fuchsia-component",
    "//src/lib/inspect/rust/fuchsia-inspect",
    "//src/lib/inspect/rust/fuchsia-inspect-node-hierarchy",
    "//src/lib/syslog/rust:syslog",
    "//src/lib/zircon/rust:fuchsia-zircon",
    "//third_party/rust_crates:anyhow",
    "//third_party/rust_crates:argh",
    "//third_party/rust_crates:async-trait",
    "//third_party/rust_crates:derivative",
    "//third_party/rust_crates:futures",
    "//third_party/rust_crates:glob",
    "//third_party/rust_crates:lazy_static",
    "//third_party/rust_crates:nom",
    "//third_party/rust_crates:num-traits",
    "//third_party/rust_crates:pretty_assertions",
    "//third_party/rust_crates:regex",
    "//third_party/rust_crates:serde",
    "//third_party/rust_crates:serde_json",
    "//third_party/rust_crates:tempfile",
    "//third_party/rust_crates:thiserror",
    "//zircon/system/fidl/fuchsia-io:fuchsia-io-rustc",
  ]
}

package("iquery") {
  deps = [ ":bin" ]

  binaries = [
    {
      name = "iquery"
      shell = true
    },
  ]
}

test_package("iquery_tests") {
  deps = [
    ":bin_test",
    "test/basic_component:iquery_basic_component",
    "test/example_component:iquery_example_component",
  ]

  binaries = [
    {
      name = "iquery_basic_component"
    },
    {
      name = "iquery_example_component"
    },
  ]

  tests = [
    {
      name = "iquery_bin_test"
    },
  ]

  meta = [
    {
      path = rebase_path("meta/iquery_basic_component.cmx")
      dest = "basic_component.cmx"
    },
    {
      path = rebase_path("meta/iquery_test_component.cmx")
      dest = "test_component.cmx"
    },
  ]
}

group("tests") {
  testonly = true

  deps = [
    ":iquery_tests",
    "test:iquery_golden_tests",
  ]
}
