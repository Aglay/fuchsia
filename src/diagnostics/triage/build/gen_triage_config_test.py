#!/usr/bin/env python
# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import argparse
import os
import re
import sys


def main():
    parser = argparse.ArgumentParser(
        sys.argv[0], description="Generate main file for Fuchsia dart test")
    parser.add_argument(
        "--out", help="Path to .rs file to generate", required=True)
    parser.add_argument(
        '--config',
        help='The config file to test',
        required=True,
        default=[],
        action='append')
    args = parser.parse_args()

    out_dir = os.path.dirname(args.out)
    config_files = args.config

    outfile = open(args.out, 'w')

    # Begin writing file
    outfile.write(
        '''// Generated by %s

#[cfg(test)]
mod test {
    use {
        anyhow::Error,
        triage_config_testing_helper::{run_tests, ConfigFile},
    };
''' % os.path.basename(__file__))

    for path in config_files:
        write_file_getter(outfile, path)

    write_test(outfile, config_files)

    outfile.write('''
}
    ''')

    outfile.close()


def write_file_getter(outfile, path):
    outfile.write(
        '''
    fn make_%s_file() -> ConfigFile {
        let contents = r#"
    ''' % config_file_name(path))

    with open(path, 'r') as f:
        contents = f.read()

    outfile.write(contents)

    outfile.write(
        '''
        "#;
        ConfigFile::new(String::from("%s"), contents)
    }
    ''' % base_name(path))


def write_test(outfile, config_files):
    outfile.write(
        '''
    #[test]
    fn run_all_config_tests() -> Result<(), Error> {
        let files = vec![''')

    for path in config_files:
        outfile.write(
            '''
            make_%s_file(),''' % config_file_name(path))

    outfile.write(
        '''
        ];
        run_tests(files)?;
        Ok(())
    }''')


def config_file_name(path):
    return os.path.basename(path).replace(".", "_")


def base_name(path):
    return "_".join(config_file_name(path).split("_")[:-1])


if __name__ == '__main__':
    main()
