# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/test/test_package.gni")
import("//build/testing/environments.gni")

# NOTE(nathaniel): We don't like having this target at all and we intend to keep
# it very, very small.
source_set("crossplatform") {
  sources = [
    "capture.h",
    "set_when_called.cc",
    "set_when_called.h",
  ]

  public_deps = [
    "//zircon/public/lib/fit:fit",
  ]
}

source_set("callback") {
  sources = [
    "auto_cleanable.h",
    "cancellable.cc",
    "cancellable.h",
    "cancellable_helper.cc",
    "cancellable_helper.h",
    "destruction_sentinel.cc",
    "destruction_sentinel.h",
    "ensure_called.h",
    "operation_serializer.h",
    "scoped_callback.h",
    "scoped_task_runner.cc",
    "scoped_task_runner.h",
    "trace_callback.h",
    "waiter.h",
  ]

  public_deps = [
    ":crossplatform",
    "//src/lib/fxl",
    "//zircon/public/lib/async-default",
    "//zircon/public/lib/fit",
    "//zircon/public/lib/trace",
    "//zircon/public/lib/zx",
  ]

  public_configs = [ "//garnet/public:config" ]

  deps = [
    "//zircon/public/lib/async-cpp",
  ]
}

executable("callback_unittests") {
  testonly = true

  sources = [
    "auto_cleanable_unittest.cc",
    "cancellable_helper_unittest.cc",
    "cancellable_unittest.cc",
    "capture_unittest.cc",
    "destruction_sentinel_unittest.cc",
    "ensure_called_unittest.cc",
    "operation_serializer_unittest.cc",
    "scoped_callback_unittest.cc",
    "scoped_task_runner_unittest.cc",
    "set_when_called_unittest.cc",
    "waiter_unittest.cc",
  ]

  deps = [
    ":callback",
    ":crossplatform",
    "//garnet/public/lib/gtest",
    "//src/lib/fxl/test:gtest_main",
    "//third_party/googletest:gmock",
    "//third_party/googletest:gtest",
    "//zircon/public/lib/async-testing",
  ]
}

unittest_package("callback_tests") {
  deps = [
    ":callback_unittests",
  ]

  tests = [
    {
      name = "callback_unittests"
      environments = basic_envs
    },
  ]
}

group("tests") {
  testonly = true

  deps = [
    ":callback_tests",
  ]
}
