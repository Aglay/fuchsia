// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SRC_LIB_FUZZING_FIDL_LLVM_FUZZER_H_
#define SRC_LIB_FUZZING_FIDL_LLVM_FUZZER_H_

#include <fuchsia/fuzzer/cpp/fidl.h>
#include <lib/fidl/cpp/binding_set.h>
#include <zircon/types.h>

#include <string>
#include <vector>

#include "test-input.h"

namespace fuzzing {
namespace {

using fuchsia::fuzzer::DataProviderPtr;
using fuchsia::fuzzer::LlvmFuzzer;

}  // namespace

class LlvmFuzzerImpl : public LlvmFuzzer {
 public:
  LlvmFuzzerImpl();
  virtual ~LlvmFuzzerImpl();

  // Registers this instance, along with its test input VMO and proxy labels, with the DataProvider.
  zx_status_t Configure(DataProviderPtr data_provider);

  // FIDL methods
  void TestOneInput(TestOneInputCallback callback) override;

 private:
  // Returns the labels of the expected data consumers, if any.
  // The implmentation of this method is typically autogenerated by a GN template.
  // See also |DataProvider::PartitionTestInput|.
  std::vector<std::string> GetDataConsumerLabels();

  // Set by |Configure| and passed to the |DataProvider|.
  fidl::Binding<LlvmFuzzer> binding_;

  // Test input data and its provider.
  TestInput input_;
  DataProviderPtr data_provider_;
};

}  // namespace fuzzing

#endif  // SRC_LIB_FUZZING_FIDL_LLVM_FUZZER_H_
