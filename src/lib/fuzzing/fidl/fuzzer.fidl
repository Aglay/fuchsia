// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/// A library of cross-process fuzzing protocols.
///
/// A fuzzer can be described in three parts:
///   1. The code under test.
///   2. A fuzz target function that maps each test input to the interface of the code under test.
///   3. A fuzzing engine that generates new test inputs.
///
/// Each execution of the code under test with a test input is a single fuzzing iteration. A fuzzer
/// will perform iterations repeatedly until a defect is found or some other stopping condition is
/// reached (e.g. a time limit).
///
/// In coverage-guided fuzzing, the code under test is instrumented to provide code coverage
/// information back to the fuzzing engine. The engine maintains a set of coverage-increasing inputs
/// called a corpus, and mutates these inputs to create new ones.
///
/// Source-based instrumentation can be added by the compiler, but this generally assumes all three
/// parts are combined into a single process. For general-purpose FIDL fuzzing on Fuchsia, these
/// parts need to be able to reside in different processes. The protocols in this library allow
/// the interactions between those parts to happen over FIDL interfaces.
///
/// For more details, see https://fuchsia.dev/fuchsia-src/development/testing/fuzzing/overview
library fuchsia.fuzzer;

using fuchsia.mem;
using zx;

/// Aggregated sanitizer coverage data proxied from other processes.
///
/// For cross-process fuzzing. the code under test needs to proxy its code coverage data back to
/// fuzzing engine. The Coverage protocol describes this action, with the code under test as the
/// client and the fuzzing engine as the server. There are two types of methods:
///   1. Some coverage, such as inline 8-bit counters and PC tables, is written to specific memory
///      locations. This data is forwarded to engine by setting up shared buffers. These methods
///      correspond to the LLVM compiler_rt `__sanitizer_cov_*_init` functions supported by
///      libFuzzer.
///   2. Other coverage is associated with specific machine instructions being called, e.g. CMP
///      instructions. Rather than provide each traced instruction to the engine in a separate FIDL
///      call, a shared buffer is set up and the instructions are batched. The traced instructions
///      correspond to the LLVM compiler_rt `__sanitizer_cov_trace_*` functions.
[Discoverable]
protocol Coverage {
    /// Registers the provided VMO to be used for inline 8-bit edge counters.
    ///
    /// This should be called for each element in a process's DSO map, i.e. for the process itself
    /// and any shared objects it loads. On error, the fuzzing engine will close the channel with an
    /// epitaph.
    ///
    /// See https://clang.llvm.org/docs/SanitizerCoverage.html#inline-8bit-counters
    AddInline8BitCounters(fuchsia.mem.Buffer inline_8bit_counters) -> ();

    /// Registers the provided VMO to be used for a table of instrumented PCs.
    ///
    /// This should be called for each element in a process's DSO map, i.e. for the process itself
    /// and any shared objects it loads. On error, the fuzzing engine will close the channel with an
    /// epitaph.
    ///
    /// See https://clang.llvm.org/docs/SanitizerCoverage.html#pc-table
    AddPcTable(fuchsia.mem.Buffer pcs) -> ();

    /// Registers the provided VMO to be used as a circular buffer of traced instructions.
    ///
    /// This should be called once per client. Subsequent calls will replace the previous VMO.
    /// On error, the fuzzing engine will close the channel with an epitaph.
    ///
    /// See https://clang.llvm.org/docs/SanitizerCoverage.html#tracing-data-flow
    AddTraces(handle<vmo> instruction_traces) -> ();
};

/// Test input partition label length.
const int32 MAX_LABEL_SIZE = 256;

/// Maximum number of labelled data consumers to a `DataProvider`.instance.
const int32 MAX_LABEL_COUNT = 128;

/// Partitions fuzzer test inputs for multiple consumers based on in-place labels.
///
/// For traditional single-process fuzzers, the fuzzing engine generates a sequence of bytes known
/// as a test input that the fuzz target function uses to exercise the interface to the code under
/// test. For multi-process FIDL fuzzing, it may need to provide data to fake dependencies of the
/// code under test in addition to the fuzz target function. To achieve this, the fuzzing engine can
/// acts as a server for this protocol with the fuzz target function and one or more of the proxies
/// as clients.
///
/// Implementations should split the single test input between the different consumers in a way that
/// is "fuzzer-stable", i.e. most mutations such as adding or removing bytes shouldn't radically
/// alter what data the consumers receive.
[Discoverable]
protocol DataProvider {
    /// Configures how test inputs will be partitioned.
    ///
    /// Registers the provided VMO to be used for transferring the test input of the primary fuzz
    /// target function, which is the primary and first data consumer of this interface. In order to
    /// correctly reserve test input for proxies which may connect mid-iteration, it also must
    /// define labels to be used in partitioning at the outset.
    ///
    /// It is an error to call this method more than once. Subsequent calls are ignored.
    Configure(handle<vmo> vmo, vector<string:MAX_LABEL_SIZE>:MAX_LABEL_COUNT? labels) -> ();

    /// Associates a shared VMO with a partition label.
    ///
    /// Registers the provided VMO to be used for transferring the test input of an additional data
    /// consumer, as indicated by a label previously provided to `Configure`.
    ///
    /// Returns ZX_ERR_INVALID_ARGS if label is unrecognized.
    AddConsumer(string:MAX_LABEL_SIZE label, handle<vmo> vmo) -> (zx.status result);
};
