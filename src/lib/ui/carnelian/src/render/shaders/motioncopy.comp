// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#version 450

layout (local_size_x = 48) in;

layout (binding = 0, rgba8) readonly restrict uniform image2D src_image;
layout (binding = 1, rgba8) writeonly restrict uniform image2D dst_image;

layout (push_constant) uniform PushConstantBlock {
    // Source image offset.
    ivec2 src_offset;
    // Source image dimensions.
    ivec2 src_dims;
    // Destination image offset.
    ivec2 dst_offset;
    // Values used to advance copy offset.
    ivec2 dxdy;
    // Border color used for motion blur.
    vec4 border;
    // Exposure value used for motion blur.
    uint exposure;
    // Extent of copy beyond exposure.
    uint extent;
} params;

const float GAMMA = 2.2;

// Takes a sRGB value and return its linear form.
vec4 toLinear(vec4 srgb)
{
    return vec4(pow(srgb.rgb, vec3(GAMMA)), srgb.a);
}

// Takes a linear value and return its sRGB form.
vec4 toGamma(vec4 linear)
{
    return vec4(pow(linear.rgb, vec3(1.0 / GAMMA)), linear.a);
}

// Takes a source image offset and returns its texel coordinate.
ivec2 srcCoord(ivec2 src_offset)
{
    return ivec2(mod(src_offset, params.src_dims));
}

// Copies a number of samples specified by the exposure and extent
// parameters from source to destination image.
//
// * Box filter can be applied for motion blur effect while
//   performing the copy by specifying an exposure parameter
//   larger than 1.
// * Source and destination images must be in sRGB colorspace
//   for correct filter effect.
void main()
{
    ivec2 dest = ivec2(gl_GlobalInvocationID.xy) + params.dst_offset.xy;
    ivec2 tail = ivec2(gl_GlobalInvocationID.xy) + params.src_offset.xy;
    ivec2 head = tail;

    // Border color multiplied by exposure value.
    vec4 sum = params.border * vec4(params.exposure);

    // Copy initial exposure range where tail is the border color.
    uint exposure = params.exposure;
    while (exposure-- > 0)
    {
        vec4 rgba = toLinear(imageLoad(src_image, srcCoord(head)));
        sum -= params.border;
        sum += rgba;
        imageStore(dst_image, dest, toGamma(sum / params.exposure));
        dest.xy += params.dxdy.xy;
        head.xy += params.dxdy.xy;
    }

    // Copy remaining range.
    uint extent = params.extent;
    while (extent-- > 0)
    {
        vec4 rgba1 = toLinear(imageLoad(src_image, srcCoord(tail)));
        vec4 rgba2 = toLinear(imageLoad(src_image, srcCoord(head)));
        sum -= rgba1;
        sum += rgba2;
        imageStore(dst_image, dest, toGamma(sum / params.exposure));
        dest.xy += params.dxdy.xy;
        tail.xy += params.dxdy.xy;
        head.xy += params.dxdy.xy;
    }
}
