// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

success("StrictBitsKnownValue") {
    value = StrictBitsStruct {
        b: 1,
    },
    bytes = {
        v1 = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    },
}

success("StrictBitsCombinedValue") {
    value = StrictBitsStruct {
        b: 3,
    },
    bytes = {
        v1 = [
            0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    },
}

encode_failure("StrictBitsUnknownBit") {
    // TODO(fxb/7847): Implement strict bits in Dart and Go.
    // Rust: cannot construct invalid bits.
    bindings_denylist = [dart,go,rust],
    value = StrictBitsStruct {
        b: 4,
    },
    err = STRICT_BITS_UNKNOWN_BIT,
}

decode_failure("StrictBitsUnknownBit") {
    // TODO(fxb/7847): Implement strict bits in Dart and Go.
    bindings_denylist = [dart,go],
    type = StrictBitsStruct,
    bytes = {
        v1 = [
            0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    },
    err = STRICT_BITS_UNKNOWN_BIT,
}

success("FlexibleBitsKnownValue") {
    value = FlexibleBitsStruct {
        b: 1,
    },
    bytes = {
        v1 = [
            0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ],
    },
}

success("FlexibleBitsUnknownValue") {
    // TODO(fxb/7847): Implement flexible bits in Rust, HLCPP, and LLCPP.
    bindings_denylist = [rust,cpp,llcpp],
    value = FlexibleBitsStruct {
        b: 0xffffffff,
    },
    bytes = {
        v1 = [
            0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
        ],
    },
}

success("FlexibleBitsUint64UnknownValue") {
    // TODO(fxb/7847): Implement flexible bits in Rust, HLCPP, and LLCPP.
    bindings_denylist = [rust,cpp,llcpp],
    value = FlexibleBitsUint64Struct {
        b: 0x0102030405060708,
    },
    bytes = {
        v1 = [
            0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01,
        ],
    },
}
