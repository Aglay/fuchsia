// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by //src/tests/fidl/dangerous_identifiers/generate.
library fidl.test.dangerous.table.fields.camel;

table DangerousMembers {
    1: uint32 Abstract;
    2: uint32 Alignas;
    3: uint32 Alignof;
    4: uint32 And;
    5: uint32 AndEq;
    6: uint32 As;
    7: uint32 Asm;
    8: uint32 Assert;
    9: uint32 Async;
    10: uint32 AtomicCancel;
    11: uint32 AtomicCommit;
    12: uint32 AtomicNoexcept;
    13: uint32 Auto;
    14: uint32 Await;
    15: uint32 Become;
    16: uint32 Bitand;
    17: uint32 Bitor;
    18: uint32 Bool;
    19: uint32 Box;
    20: uint32 Break;
    21: uint32 Byte;
    22: uint32 Case;
    23: uint32 Catch;
    24: uint32 Chan;
    25: uint32 Char;
    26: uint32 Char16T;
    27: uint32 Char32T;
    28: uint32 Class;
    29: uint32 CoAwait;
    30: uint32 CoReturn;
    31: uint32 CoYield;
    32: uint32 CodingTraits;
    33: uint32 Compl;
    34: uint32 Concept;
    35: uint32 Const;
    36: uint32 ConstCast;
    37: uint32 Constexpr;
    38: uint32 Continue;
    39: uint32 Controller;
    40: uint32 Covariant;
    41: uint32 Crate;
    42: uint32 Decltype;
    43: uint32 Decoder;
    44: uint32 Default;
    45: uint32 Defer;
    46: uint32 Deferred;
    47: uint32 Delete;
    48: uint32 Do;
    49: uint32 Double;
    50: uint32 Dynamic;
    51: uint32 DynamicCast;
    52: uint32 Else;
    53: uint32 Encoder;
    54: uint32 EnsureValuesInstantiated;
    55: uint32 Enum;
    56: uint32 Empty;
    57: uint32 Err;
    58: uint32 Explicit;
    59: uint32 Export;
    60: uint32 Extends;
    61: uint32 Extern;
    62: uint32 External;
    63: uint32 Factory;
    64: uint32 Fallthrough;
    65: uint32 False;
    66: uint32 Fidl;
    67: uint32 FidlType;
    68: uint32 Final;
    69: uint32 Finally;
    70: uint32 Float;
    71: uint32 Fn;
    72: uint32 For;
    73: uint32 Friend;
    74: uint32 Func;
    75: uint32 Future;
    76: uint32 Futures;
    77: uint32 Get;
    78: uint32 Go;
    79: uint32 Goto;
    80: uint32 HasInvalidTag;
    81: uint32 HashCode;
    82: uint32 If;
    83: uint32 Impl;
    84: uint32 Implements;
    85: uint32 Import;
    86: uint32 In;
    87: uint32 Index;
    88: uint32 Inline;
    89: uint32 Int;
    90: uint32 Int16;
    91: uint32 Int32;
    92: uint32 Int64;
    93: uint32 Int8;
    94: uint32 Interface;
    95: uint32 InternalTag;
    96: uint32 Is;
    97: uint32 Let;
    98: uint32 Lhs;
    99: uint32 Library;
    100: uint32 List;
    101: uint32 Long;
    102: uint32 Loop;
    103: uint32 Macro;
    104: uint32 Map;
    105: uint32 Match;
    106: uint32 Mixin;
    107: uint32 Mod;
    108: uint32 Module;
    109: uint32 Move;
    110: uint32 Mut;
    111: uint32 Mutable;
    112: uint32 Namespace;
    113: uint32 Never;
    114: uint32 New;
    115: uint32 NoSuchMethod;
    116: uint32 Noexcept;
    117: uint32 None;
    118: uint32 Not;
    119: uint32 NotEq;
    120: uint32 Null;
    121: uint32 Nullptr;
    122: uint32 Num;
    123: uint32 Object;
    124: uint32 Offset;
    125: uint32 Offsetof;
    126: uint32 Ok;
    127: uint32 OnOpen;
    128: uint32 Operator;
    129: uint32 Option;
    130: uint32 Or;
    131: uint32 OrEq;
    132: uint32 Override;
    133: uint32 Package;
    134: uint32 Part;
    135: uint32 Priv;
    136: uint32 Private;
    137: uint32 Proc;
    138: uint32 Protected;
    139: uint32 Proxy;
    140: uint32 Pub;
    141: uint32 Public;
    142: uint32 Pure;
    143: uint32 Range;
    144: uint32 Ref;
    145: uint32 Register;
    146: uint32 ReinterpretCast;
    147: uint32 Requires;
    148: uint32 Result;
    149: uint32 Rethrow;
    150: uint32 Return;
    151: uint32 Rhs;
    152: uint32 Rune;
    153: uint32 RuntimeType;
    154: uint32 Select;
    155: uint32 Self;
    156: uint32 Send;
    157: uint32 Set;
    158: uint32 SetController;
    159: uint32 Short;
    160: uint32 Signed;
    161: uint32 Sizeof;
    162: uint32 Some;
    163: uint32 Static;
    164: uint32 StaticAssert;
    165: uint32 StaticCast;
    166: uint32 Stream;
    167: uint32 String;
    168: uint32 Struct;
    169: uint32 Stub;
    170: uint32 Super;
    171: uint32 Switch;
    172: uint32 Synchronized;
    173: uint32 Template;
    174: uint32 This;
    175: uint32 ThreadLocal;
    176: uint32 Throw;
    177: uint32 ToString;
    178: uint32 Trait;
    179: uint32 True;
    180: uint32 Try;
    181: uint32 Type;
    182: uint32 Typedef;
    183: uint32 Typeid;
    184: uint32 Typename;
    185: uint32 Typeof;
    186: uint32 Uint16;
    187: uint32 Uint32;
    188: uint32 Uint64;
    189: uint32 Uint8;
    190: uint32 Union;
    191: uint32 Unsafe;
    192: uint32 Unsigned;
    193: uint32 Unsized;
    194: uint32 Use;
    195: uint32 Using;
    196: uint32 Value;
    197: uint32 ValueOf;
    198: uint32 ValueUnion;
    199: uint32 ValuesMap;
    200: uint32 Var;
    201: uint32 Vec;
    202: uint32 Virtual;
    203: uint32 Void;
    204: uint32 Volatile;
    205: uint32 WcharT;
    206: uint32 Where;
    207: uint32 Which;
    208: uint32 While;
    209: uint32 With;
    210: uint32 Xor;
    211: uint32 XorEq;
    212: uint32 Xunion;
    213: uint32 Yield;
    214: uint32 Zx;
    215: uint32 Bytes;
    216: uint32 Unknown;
    217: uint32 UnknownBytes;
    [BindingsDenylist = "dart"]
    218: uint32 UnknownData;
};
