// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by //src/tests/fidl/dangerous_identifiers/generate.
library fidl.test.dangerous.method.event.arguments.lower;
alias argtype = uint32;

protocol DangerousResponseArguments {
    -> Event0(argtype abstract);
    -> Event1(argtype alignas);
    -> Event2(argtype alignof);
    -> Event3(argtype and);
    -> Event4(argtype and_eq);
    -> Event5(argtype as);
    -> Event6(argtype asm);
    -> Event7(argtype assert);
    -> Event8(argtype async);
    -> Event9(argtype atomic_cancel);
    -> Event10(argtype atomic_commit);
    -> Event11(argtype atomic_noexcept);
    -> Event12(argtype auto);
    -> Event13(argtype await);
    -> Event14(argtype become);
    -> Event15(argtype bitand);
    -> Event16(argtype bitor);
    -> Event17(argtype bool);
    -> Event18(argtype box);
    -> Event19(argtype break);
    -> Event20(argtype byte);
    -> Event214(argtype bytes);
    -> Event21(argtype case);
    -> Event22(argtype catch);
    -> Event23(argtype chan);
    -> Event24(argtype char);
    -> Event25(argtype char16_t);
    -> Event26(argtype char32_t);
    -> Event27(argtype class);
    -> Event28(argtype co_await);
    -> Event29(argtype co_return);
    -> Event30(argtype co_yield);
    -> Event31(argtype coding_traits);
    -> Event32(argtype compl);
    -> Event33(argtype concept);
    -> Event34(argtype const);
    -> Event35(argtype const_cast);
    -> Event36(argtype constexpr);
    -> Event37(argtype continue);
    -> Event38(argtype controller);
    -> Event39(argtype covariant);
    -> Event40(argtype crate);
    -> Event41(argtype decltype);
    -> Event42(argtype decoder);
    -> Event43(argtype default);
    -> Event44(argtype defer);
    -> Event45(argtype deferred);
    -> Event46(argtype delete);
    -> Event47(argtype do);
    -> Event48(argtype double);
    -> Event49(argtype dynamic);
    -> Event50(argtype dynamic_cast);
    -> Event51(argtype else);
    -> Event52(argtype encoder);
    -> Event53(argtype ensure_values_instantiated);
    -> Event54(argtype enum);
    -> Event55(argtype empty);
    -> Event56(argtype err);
    -> Event57(argtype explicit);
    -> Event58(argtype export);
    -> Event59(argtype extends);
    -> Event60(argtype extern);
    -> Event61(argtype external);
    -> Event62(argtype factory);
    -> Event63(argtype fallthrough);
    -> Event64(argtype false);
    -> Event65(argtype fidl);
    -> Event66(argtype fidl_type);
    -> Event67(argtype final);
    -> Event68(argtype finally);
    -> Event69(argtype float);
    -> Event70(argtype fn);
    -> Event71(argtype for);
    -> Event72(argtype friend);
    -> Event73(argtype func);
    -> Event74(argtype future);
    -> Event75(argtype futures);
    -> Event76(argtype get);
    -> Event77(argtype go);
    -> Event78(argtype goto);
    -> Event79(argtype has_invalid_tag);
    -> Event80(argtype hash_code);
    -> Event81(argtype if);
    -> Event82(argtype impl);
    -> Event83(argtype implements);
    -> Event84(argtype import);
    -> Event85(argtype in);
    -> Event86(argtype index);
    -> Event87(argtype inline);
    -> Event88(argtype int);
    -> Event89(argtype int16);
    -> Event90(argtype int32);
    -> Event91(argtype int64);
    -> Event92(argtype int8);
    -> Event93(argtype interface);
    -> Event94(argtype internal_tag);
    -> Event95(argtype is);
    -> Event96(argtype let);
    -> Event97(argtype lhs);
    -> Event98(argtype library);
    -> Event99(argtype list);
    -> Event100(argtype long);
    -> Event101(argtype loop);
    -> Event102(argtype macro);
    -> Event103(argtype map);
    -> Event104(argtype match);
    -> Event105(argtype mixin);
    -> Event106(argtype mod);
    -> Event107(argtype module);
    -> Event108(argtype move);
    -> Event109(argtype mut);
    -> Event110(argtype mutable);
    -> Event111(argtype namespace);
    -> Event112(argtype never);
    -> Event113(argtype new);
    -> Event114(argtype no_such_method);
    -> Event115(argtype noexcept);
    -> Event116(argtype none);
    -> Event117(argtype not);
    -> Event118(argtype not_eq);
    -> Event119(argtype null);
    -> Event120(argtype nullptr);
    -> Event121(argtype num);
    -> Event122(argtype object);
    -> Event123(argtype offset);
    -> Event124(argtype offsetof);
    -> Event125(argtype ok);
    -> Event126(argtype on_open);
    -> Event127(argtype operator);
    -> Event128(argtype option);
    -> Event129(argtype or);
    -> Event130(argtype or_eq);
    -> Event131(argtype override);
    -> Event132(argtype package);
    -> Event133(argtype part);
    -> Event134(argtype priv);
    -> Event135(argtype private);
    -> Event136(argtype proc);
    -> Event137(argtype protected);
    -> Event138(argtype proxy);
    -> Event139(argtype pub);
    -> Event140(argtype public);
    -> Event141(argtype pure);
    -> Event142(argtype range);
    -> Event143(argtype ref);
    -> Event144(argtype register);
    -> Event145(argtype reinterpret_cast);
    -> Event146(argtype requires);
    -> Event147(argtype result);
    -> Event148(argtype rethrow);
    -> Event149(argtype return);
    -> Event150(argtype rhs);
    -> Event151(argtype rune);
    -> Event152(argtype runtime_type);
    -> Event153(argtype select);
    -> Event154(argtype self);
    -> Event155(argtype send);
    -> Event156(argtype set);
    -> Event157(argtype set_controller);
    -> Event158(argtype short);
    -> Event159(argtype signed);
    -> Event160(argtype sizeof);
    -> Event161(argtype some);
    -> Event162(argtype static);
    -> Event163(argtype static_assert);
    -> Event164(argtype static_cast);
    -> Event165(argtype stream);
    -> Event166(argtype string);
    -> Event167(argtype struct);
    -> Event168(argtype stub);
    -> Event169(argtype super);
    -> Event170(argtype switch);
    -> Event171(argtype synchronized);
    -> Event172(argtype template);
    -> Event173(argtype this);
    -> Event174(argtype thread_local);
    -> Event175(argtype throw);
    -> Event176(argtype to_string);
    -> Event177(argtype trait);
    -> Event178(argtype true);
    -> Event179(argtype try);
    -> Event180(argtype type);
    -> Event181(argtype typedef);
    -> Event182(argtype typeid);
    -> Event183(argtype typename);
    -> Event184(argtype typeof);
    -> Event185(argtype uint16);
    -> Event186(argtype uint32);
    -> Event187(argtype uint64);
    -> Event188(argtype uint8);
    -> Event189(argtype union);
    -> Event215(argtype unknown);
    -> Event216(argtype unknown_bytes);
    [BindingsDenylist = "dart"]
    -> Event217(argtype unknown_data);
    -> Event190(argtype unsafe);
    -> Event191(argtype unsigned);
    -> Event192(argtype unsized);
    -> Event193(argtype use);
    -> Event194(argtype using);
    -> Event195(argtype value);
    -> Event196(argtype value_of);
    -> Event197(argtype value_union);
    -> Event198(argtype values_map);
    -> Event199(argtype var);
    -> Event200(argtype vec);
    -> Event201(argtype virtual);
    -> Event202(argtype void);
    -> Event203(argtype volatile);
    -> Event204(argtype wchar_t);
    -> Event205(argtype where);
    -> Event206(argtype which);
    -> Event207(argtype while);
    -> Event208(argtype with);
    -> Event209(argtype xor);
    -> Event210(argtype xor_eq);
    -> Event211(argtype xunion);
    -> Event212(argtype yield);
    -> Event213(argtype zx);
};
