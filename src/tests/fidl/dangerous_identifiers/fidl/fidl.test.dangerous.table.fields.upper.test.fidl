// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.table.fields.upper;

table DangerousMembers {
    1: uint32 ABSTRACT;
    2: uint32 ALIGNAS;
    3: uint32 ALIGNOF;
    4: uint32 AND;
    5: uint32 AND_EQ;
    6: uint32 AS;
    7: uint32 ASM;
    8: uint32 ASSERT;
    9: uint32 ASYNC;
    10: uint32 ATOMIC_CANCEL;
    11: uint32 ATOMIC_COMMIT;
    12: uint32 ATOMIC_NOEXCEPT;
    13: uint32 AUTO;
    14: uint32 AWAIT;
    15: uint32 BECOME;
    16: uint32 BITAND;
    17: uint32 BITOR;
    18: uint32 BOOL;
    19: uint32 BOX;
    20: uint32 BREAK;
    21: uint32 BYTE;
    215: uint32 BYTES;
    22: uint32 CASE;
    23: uint32 CATCH;
    24: uint32 CHAN;
    25: uint32 CHAR;
    26: uint32 CHAR16_T;
    27: uint32 CHAR32_T;
    28: uint32 CLASS;
    29: uint32 CO_AWAIT;
    30: uint32 CO_RETURN;
    31: uint32 CO_YIELD;
    32: uint32 CODING_TRAITS;
    33: uint32 COMPL;
    34: uint32 CONCEPT;
    35: uint32 CONST;
    36: uint32 CONST_CAST;
    37: uint32 CONSTEXPR;
    38: uint32 CONTINUE;
    39: uint32 CONTROLLER;
    40: uint32 COVARIANT;
    41: uint32 CRATE;
    42: uint32 DECLTYPE;
    43: uint32 DECODER;
    44: uint32 DEFAULT;
    45: uint32 DEFER;
    46: uint32 DEFERRED;
    47: uint32 DELETE;
    48: uint32 DO;
    49: uint32 DOUBLE;
    50: uint32 DYNAMIC;
    51: uint32 DYNAMIC_CAST;
    52: uint32 ELSE;
    53: uint32 ENCODER;
    54: uint32 ENSURE_VALUES_INSTANTIATED;
    55: uint32 ENUM;
    56: uint32 EMPTY;
    57: uint32 ERR;
    58: uint32 EXPLICIT;
    59: uint32 EXPORT;
    60: uint32 EXTENDS;
    61: uint32 EXTERN;
    62: uint32 EXTERNAL;
    63: uint32 FACTORY;
    64: uint32 FALLTHROUGH;
    65: uint32 FALSE;
    66: uint32 FIDL;
    67: uint32 FIDL_TYPE;
    68: uint32 FINAL;
    69: uint32 FINALLY;
    70: uint32 FLOAT;
    71: uint32 FN;
    72: uint32 FOR;
    73: uint32 FRIEND;
    74: uint32 FUNC;
    75: uint32 FUTURE;
    76: uint32 FUTURES;
    77: uint32 GET;
    78: uint32 GO;
    79: uint32 GOTO;
    80: uint32 HAS_INVALID_TAG;
    81: uint32 HASH_CODE;
    82: uint32 IF;
    83: uint32 IMPL;
    84: uint32 IMPLEMENTS;
    85: uint32 IMPORT;
    86: uint32 IN;
    87: uint32 INDEX;
    88: uint32 INLINE;
    89: uint32 INT;
    90: uint32 INT16;
    91: uint32 INT32;
    92: uint32 INT64;
    93: uint32 INT8;
    94: uint32 INTERFACE;
    95: uint32 INTERNAL_TAG;
    96: uint32 IS;
    97: uint32 LET;
    98: uint32 LHS;
    99: uint32 LIBRARY;
    100: uint32 LIST;
    101: uint32 LONG;
    102: uint32 LOOP;
    103: uint32 MACRO;
    104: uint32 MAP;
    105: uint32 MATCH;
    106: uint32 MIXIN;
    107: uint32 MOD;
    108: uint32 MODULE;
    109: uint32 MOVE;
    110: uint32 MUT;
    111: uint32 MUTABLE;
    112: uint32 NAMESPACE;
    113: uint32 NEVER;
    114: uint32 NEW;
    115: uint32 NO_SUCH_METHOD;
    116: uint32 NOEXCEPT;
    117: uint32 NONE;
    118: uint32 NOT;
    119: uint32 NOT_EQ;
    120: uint32 NULL;
    121: uint32 NULLPTR;
    122: uint32 NUM;
    123: uint32 OBJECT;
    124: uint32 OFFSET;
    125: uint32 OFFSETOF;
    126: uint32 OK;
    127: uint32 ON_OPEN;
    128: uint32 OPERATOR;
    129: uint32 OPTION;
    130: uint32 OR;
    131: uint32 OR_EQ;
    132: uint32 OVERRIDE;
    133: uint32 PACKAGE;
    134: uint32 PART;
    135: uint32 PRIV;
    136: uint32 PRIVATE;
    137: uint32 PROC;
    138: uint32 PROTECTED;
    139: uint32 PROXY;
    140: uint32 PUB;
    141: uint32 PUBLIC;
    142: uint32 PURE;
    143: uint32 RANGE;
    144: uint32 REF;
    145: uint32 REGISTER;
    146: uint32 REINTERPRET_CAST;
    147: uint32 REQUIRES;
    148: uint32 RESULT;
    149: uint32 RETHROW;
    150: uint32 RETURN;
    151: uint32 RHS;
    152: uint32 RUNE;
    153: uint32 RUNTIME_TYPE;
    154: uint32 SELECT;
    155: uint32 SELF;
    156: uint32 SEND;
    157: uint32 SET;
    158: uint32 SET_CONTROLLER;
    159: uint32 SHORT;
    160: uint32 SIGNED;
    161: uint32 SIZEOF;
    162: uint32 SOME;
    163: uint32 STATIC;
    164: uint32 STATIC_ASSERT;
    165: uint32 STATIC_CAST;
    166: uint32 STREAM;
    167: uint32 STRING;
    168: uint32 STRUCT;
    169: uint32 STUB;
    170: uint32 SUPER;
    171: uint32 SWITCH;
    172: uint32 SYNCHRONIZED;
    173: uint32 TEMPLATE;
    174: uint32 THIS;
    175: uint32 THREAD_LOCAL;
    176: uint32 THROW;
    177: uint32 TO_STRING;
    178: uint32 TRAIT;
    179: uint32 TRUE;
    180: uint32 TRY;
    181: uint32 TYPE;
    182: uint32 TYPEDEF;
    183: uint32 TYPEID;
    184: uint32 TYPENAME;
    185: uint32 TYPEOF;
    186: uint32 UINT16;
    187: uint32 UINT32;
    188: uint32 UINT64;
    189: uint32 UINT8;
    190: uint32 UNION;
    216: uint32 UNKNOWN;
    217: uint32 UNKNOWN_BYTES;
    [BindingsDenylist = "dart"]
    218: uint32 UNKNOWN_DATA;
    191: uint32 UNSAFE;
    192: uint32 UNSIGNED;
    193: uint32 UNSIZED;
    194: uint32 USE;
    195: uint32 USING;
    196: uint32 VALUE;
    197: uint32 VALUE_OF;
    198: uint32 VALUE_UNION;
    199: uint32 VALUES_MAP;
    200: uint32 VAR;
    201: uint32 VEC;
    202: uint32 VIRTUAL;
    203: uint32 VOID;
    204: uint32 VOLATILE;
    205: uint32 WCHAR_T;
    206: uint32 WHERE;
    207: uint32 WHICH;
    208: uint32 WHILE;
    209: uint32 WITH;
    210: uint32 XOR;
    211: uint32 XOR_EQ;
    212: uint32 XUNION;
    213: uint32 YIELD;
    214: uint32 ZX;
};
