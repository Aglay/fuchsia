// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Generated by generate.py.
library fidl.test.dangerous.method.response.arguments.lower;
using argtype = uint32;

protocol DangerousResponseArguments {
    Method0() -> (argtype abstract);
    Method1() -> (argtype alignas);
    Method2() -> (argtype alignof);
    Method3() -> (argtype and);
    Method4() -> (argtype and_eq);
    Method5() -> (argtype as);
    Method6() -> (argtype asm);
    Method7() -> (argtype assert);
    Method8() -> (argtype async);
    Method9() -> (argtype atomic_cancel);
    Method10() -> (argtype atomic_commit);
    Method11() -> (argtype atomic_noexcept);
    Method12() -> (argtype auto);
    Method13() -> (argtype await);
    Method14() -> (argtype become);
    Method15() -> (argtype bitand);
    Method16() -> (argtype bitor);
    Method17() -> (argtype bool);
    Method18() -> (argtype box);
    Method19() -> (argtype break);
    Method20() -> (argtype byte);
    Method214() -> (argtype bytes);
    Method21() -> (argtype case);
    Method22() -> (argtype catch);
    Method23() -> (argtype chan);
    Method24() -> (argtype char);
    Method25() -> (argtype char16_t);
    Method26() -> (argtype char32_t);
    Method27() -> (argtype class);
    Method28() -> (argtype co_await);
    Method29() -> (argtype co_return);
    Method30() -> (argtype co_yield);
    Method31() -> (argtype coding_traits);
    Method32() -> (argtype compl);
    Method33() -> (argtype concept);
    Method34() -> (argtype const);
    Method35() -> (argtype const_cast);
    Method36() -> (argtype constexpr);
    Method37() -> (argtype continue);
    Method38() -> (argtype controller);
    Method39() -> (argtype covariant);
    Method40() -> (argtype crate);
    Method41() -> (argtype decltype);
    Method42() -> (argtype decoder);
    Method43() -> (argtype default);
    Method44() -> (argtype defer);
    Method45() -> (argtype deferred);
    Method46() -> (argtype delete);
    Method47() -> (argtype do);
    Method48() -> (argtype double);
    Method49() -> (argtype dynamic);
    Method50() -> (argtype dynamic_cast);
    Method51() -> (argtype else);
    Method52() -> (argtype encoder);
    Method53() -> (argtype ensure_values_instantiated);
    Method54() -> (argtype enum);
    Method55() -> (argtype empty);
    Method56() -> (argtype err);
    Method57() -> (argtype explicit);
    Method58() -> (argtype export);
    Method59() -> (argtype extends);
    Method60() -> (argtype extern);
    Method61() -> (argtype external);
    Method62() -> (argtype factory);
    Method63() -> (argtype fallthrough);
    Method64() -> (argtype false);
    Method65() -> (argtype fidl);
    Method66() -> (argtype fidl_type);
    Method67() -> (argtype final);
    Method68() -> (argtype finally);
    Method69() -> (argtype float);
    Method70() -> (argtype fn);
    Method71() -> (argtype for);
    Method72() -> (argtype friend);
    Method73() -> (argtype func);
    Method74() -> (argtype future);
    Method75() -> (argtype futures);
    Method76() -> (argtype get);
    Method77() -> (argtype go);
    Method78() -> (argtype goto);
    Method79() -> (argtype has_invalid_tag);
    Method80() -> (argtype hash_code);
    Method81() -> (argtype if);
    Method82() -> (argtype impl);
    Method83() -> (argtype implements);
    Method84() -> (argtype import);
    Method85() -> (argtype in);
    Method86() -> (argtype index);
    Method87() -> (argtype inline);
    Method88() -> (argtype int);
    Method89() -> (argtype int16);
    Method90() -> (argtype int32);
    Method91() -> (argtype int64);
    Method92() -> (argtype int8);
    Method93() -> (argtype interface);
    Method94() -> (argtype internal_tag);
    Method95() -> (argtype is);
    Method96() -> (argtype let);
    Method97() -> (argtype lhs);
    Method98() -> (argtype library);
    Method99() -> (argtype list);
    Method100() -> (argtype long);
    Method101() -> (argtype loop);
    Method102() -> (argtype macro);
    Method103() -> (argtype map);
    Method104() -> (argtype match);
    Method105() -> (argtype mixin);
    Method106() -> (argtype mod);
    Method107() -> (argtype module);
    Method108() -> (argtype move);
    Method109() -> (argtype mut);
    Method110() -> (argtype mutable);
    Method111() -> (argtype namespace);
    Method112() -> (argtype never);
    Method113() -> (argtype new);
    Method114() -> (argtype no_such_method);
    Method115() -> (argtype noexcept);
    Method116() -> (argtype none);
    Method117() -> (argtype not);
    Method118() -> (argtype not_eq);
    Method119() -> (argtype null);
    Method120() -> (argtype nullptr);
    Method121() -> (argtype num);
    Method122() -> (argtype object);
    Method123() -> (argtype offset);
    Method124() -> (argtype offsetof);
    Method125() -> (argtype ok);
    Method126() -> (argtype on_open);
    Method127() -> (argtype operator);
    Method128() -> (argtype option);
    Method129() -> (argtype or);
    Method130() -> (argtype or_eq);
    Method131() -> (argtype override);
    Method132() -> (argtype package);
    Method133() -> (argtype part);
    Method134() -> (argtype priv);
    Method135() -> (argtype private);
    Method136() -> (argtype proc);
    Method137() -> (argtype protected);
    Method138() -> (argtype proxy);
    Method139() -> (argtype pub);
    Method140() -> (argtype public);
    Method141() -> (argtype pure);
    Method142() -> (argtype range);
    Method143() -> (argtype ref);
    Method144() -> (argtype register);
    Method145() -> (argtype reinterpret_cast);
    Method146() -> (argtype requires);
    Method147() -> (argtype result);
    Method148() -> (argtype rethrow);
    Method149() -> (argtype return);
    Method150() -> (argtype rhs);
    Method151() -> (argtype rune);
    Method152() -> (argtype runtime_type);
    Method153() -> (argtype select);
    Method154() -> (argtype self);
    Method155() -> (argtype send);
    Method156() -> (argtype set);
    Method157() -> (argtype set_controller);
    Method158() -> (argtype short);
    Method159() -> (argtype signed);
    Method160() -> (argtype sizeof);
    Method161() -> (argtype some);
    Method162() -> (argtype static);
    Method163() -> (argtype static_assert);
    Method164() -> (argtype static_cast);
    Method165() -> (argtype stream);
    Method166() -> (argtype string);
    Method167() -> (argtype struct);
    Method168() -> (argtype stub);
    Method169() -> (argtype super);
    Method170() -> (argtype switch);
    Method171() -> (argtype synchronized);
    Method172() -> (argtype template);
    Method173() -> (argtype this);
    Method174() -> (argtype thread_local);
    Method175() -> (argtype throw);
    Method176() -> (argtype to_string);
    Method177() -> (argtype trait);
    Method178() -> (argtype true);
    Method179() -> (argtype try);
    Method180() -> (argtype type);
    Method181() -> (argtype typedef);
    Method182() -> (argtype typeid);
    Method183() -> (argtype typename);
    Method184() -> (argtype typeof);
    Method185() -> (argtype uint16);
    Method186() -> (argtype uint32);
    Method187() -> (argtype uint64);
    Method188() -> (argtype uint8);
    Method189() -> (argtype union);
    Method190() -> (argtype unsafe);
    Method191() -> (argtype unsigned);
    Method192() -> (argtype unsized);
    Method193() -> (argtype use);
    Method194() -> (argtype using);
    Method195() -> (argtype value);
    Method196() -> (argtype value_of);
    Method197() -> (argtype value_union);
    Method198() -> (argtype values_map);
    Method199() -> (argtype var);
    Method200() -> (argtype vec);
    Method201() -> (argtype virtual);
    Method202() -> (argtype void);
    Method203() -> (argtype volatile);
    Method204() -> (argtype wchar_t);
    Method205() -> (argtype where);
    Method206() -> (argtype which);
    Method207() -> (argtype while);
    Method208() -> (argtype with);
    Method209() -> (argtype xor);
    Method210() -> (argtype xor_eq);
    Method211() -> (argtype xunion);
    Method212() -> (argtype yield);
    Method213() -> (argtype zx);
};
