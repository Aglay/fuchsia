# Copyright 2019 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("../gn/build_rules.gni")
import("../gn/glsl_shader_rules.gni")
import("vulkan_testing.gni")

config("common_public_config") {
  # Unlike the sources here, clients use "tests/common/..." to include the headers.
  include_dirs = [ graphics_compute_dir ]
}

# NOTE: The CQ runs graphics_compute_unittests on the host, even for Fuchsia
# builds. And the CQ runs host executables in an environment without Vulkan
# support (i.e. libvulkan.so.1 is not available).
#
# Due to this Vulkan-specific sources are split from |common| into |common_vk|
# so only the former can be unit-tested properly on the CQ. The latter will
# be tested when src/graphics/lib/compute:all_tests is built.

source_set("common") {
  public = [
    "common/argparse.h",
    "common/utils.h",
  ]
  sources = [
    "common/argparse.c",
    "common/argparse.h",
    "common/utils.c",
    "common/utils.h",
  ]
  public_configs = [ ":common_public_config" ]
}

graphics_compute_unittests("common_unittests") {
  sources = [
    "common/argparse_unittest.cc",
  ]
  deps = [
    ":common",
  ]
}

# Vulkan-dependent files.
# NOTE: This includes |common| as a public_deps for convenience.
source_set("common_vk") {
  public = [
    "common/vk_app_state.h",
    "common/vk_swapchain.h",
    "common/vk_utils.h",
  ]
  sources = [
    "common/vk_app_state.c",
    "common/vk_app_state.h",
    "common/vk_swapchain.c",
    "common/vk_swapchain.h",
    "common/vk_utils.c",
    "common/vk_utils.h",
  ]
  public_deps = [
    ":common",
    graphics_compute_vulkan_loader_target,
  ]
  deps = []
  if (is_fuchsia) {
    deps += [
      "//zircon/public/lib/async-loop",
      "//zircon/public/lib/async-loop-default",
      "//zircon/public/lib/trace-provider-with-fdio",
    ]
  }
  if (!is_fuchsia) {
    # GLFW is used to create a window on the host in vk_app_state.c
    deps += [ "//third_party/glfw:glfw" ]

    # Work-around bug in //third_party/glfw:glfw definition.
    if (is_linux) {
      libs = [
        "X11",
        "Xinerama",
        "Xcursor",
        "Xrandr",
      ]
    }
  }
  public_configs = [ ":common_public_config" ]
}

graphics_compute_unittests("common_vk_unittests") {
  sources = [
    "common/vk_app_state_unittest.cc",
  ]
  deps = [
    ":common_vk",
  ]
  public_configs = [ "//build/config:Wno-reorder-init-list" ]
}

# Skia test application helper library.
# This one is only used to write small tests to compare Spinel and Skia
# performance and correctness.
#
# NOTE: One must set |skia_use_vulkan = true| in the args.gn file in order
#       to build Skia's Vulkan backend on the host. Otherwise, any program
#       linking to this library will fail to initialize properly at runtime
#       when run on the host (device binaries should always work though).
#
config("common_skia_config") {
  # Clients should include "tests/common/skia/skia_test_app.h"
  include_dirs = [ graphics_compute_dir ]
}

source_set("common_skia") {
  public = [
    "common/skia/skia_test_app.h",
  ]
  sources = [
    "common/skia/skia_test_app.cc",
    "common/skia/skia_test_app.h",
  ]
  deps = [
    ":common",
    ":common_vk",
  ]
  public_deps = [
    "//third_party/skia",
  ]
  public_configs = [ ":common_skia_config" ]
}

group("tests") {
  testonly = true
  deps = [
    "vk_app_state_test",
    "vk_skia_test",
    "vk_swapchain_test",
    "vk_transfer_test",
    "vk_triangle_test",
  ]
}
