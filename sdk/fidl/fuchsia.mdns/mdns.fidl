// Copyright 2017 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.mdns;

using fuchsia.netstack;

/// Primary mDNS service interface.
[Discoverable]
protocol Controller {
    /// Gets the addresses for the specified host name. `host_name` may not end in
    /// a '.'.
    ResolveHostName(string host_name, uint32 timeout_ms)
        -> (fuchsia.netstack.SocketAddress? v4_address,
            fuchsia.netstack.SocketAddress? v6_address);

    /// Subscribes to a service. The subscription lasts until `subscriber` is
    /// unbound. `service_name` must end in '._tcp.' or '._udp.'.
    SubscribeToService(string service_name, ServiceSubscriber subscriber);

    /// Publishes a service instance available at the specified port. The service
    /// is published until it is unpublished via `UnpublishServiceInstance`.
    /// `service_name` must end in '._tcp.' or '._udp.'. `instance_name` must not
    /// end in a '.'. `port` is host-endian. `text` contains metadata strings that
    /// describe the instance. No subtypes are published unless the `SetSubtypes`
    /// method is called. `perform_probe` indicates whether a probe for a
    /// conflicting instance should be performed before publishing the instance.
    /// This value should be `true` unless the instance name is known to be
    /// unique.
    PublishServiceInstance(string service_name,
                           string instance_name,
                           uint16 port,
                           vector<string>? text,
                           bool perform_probe) -> (Result result);

    /// Ends publication started with `PublishServiceInstance`. `service_name` must
    /// end in '._tcp.' or '._udp.'. `instance_name` must not end in a '.'.
    UnpublishServiceInstance(string service_name, string instance_name);

    /// Publishes a service instance with support for subtypes. `service_name` must
    /// end in '._tcp.' or '._udp.'. `instance_name` must not end in a '.'.
    /// `responder` is consulted for initial announcements and to answer queries.
    /// The service is published until the `responder` channel closes. In addition
    /// to announcements and queries for the service type, all queries for subtypes
    /// are answered subject to filtering through the `Responder`. If subtype
    /// announcement is desired, a call to `SetSubtypes` is required to set the
    /// list of announced subtypes. `perform_probe` indicates whether a probe for
    /// a conflicting instance should be performed before publishing the instance.
    /// This value should be `true` unless the instance name is known to be
    /// unique.
    AddResponder(string service_name,
                 string instance_name,
                 bool perform_probe,
                 Responder responder);

    /// Sets the subtypes for a service instance currently being published due to
    /// a call to `PublishServiceInstance` or `AddResponder`.  `service_name` must
    /// end in '._tcp.' or '._udp.'. `instance_name` must not end in a '.'. For an
    /// instance published with `PublishServiceInstance`, the specified subtypes
    /// will be announced, and queries for the subtypes will be answered. For an
    /// instance published with `AddResponder`, the specified subtypes will be
    /// announced subject to filtering through the `Responder`. All subtype
    /// queries are forwarded to the `Responder`, so this method has no effect
    /// in that regard.
    SetSubtypes(string service_name,
                string instance_name,
                vector<string> subtypes);

    /// Initiates announcement of a service instance currently being published due
    /// to a call to `PublishServiceInstance` or `AddResponder`. This is generally
    /// not needed for the `PublishServiceInstance` case. For instances published
    /// with `AddResponder`, this method is typically used when the port or text
    /// associated with the instance changes. All announcements are filtered
    /// through the `Responder`, which can reply with the new port and text
    /// values.
    ReannounceInstance(string service_name, string instance_name);

    /// Specifies whether mDNS traffic should be logged.
    SetVerbose(bool value);
};

/// Result values for instance publishing.
enum Result : int32 {
    /// Operation succeeded.
    OK = 0;

    /// The specified service name is invalid.
    INVALID_SERVICE_NAME = -1;

    /// The specified instance name is invalid.
    INVALID_INSTANCE_NAME = -2;

    /// The specified service instance is already being published by this
    /// mDNS implementation.
    ALREADY_PUBLISHED_LOCALLY = -3;

    /// The specified service instance is already being published by another
    /// host on the subnet. This result occurs when an initial probe discovers
    /// a conflicting instance.
    ALREADY_PUBLISHED_ON_SUBNET = -4;
};

/// Client-implemented interface for subscribers. Method replies are used to
/// throttle traffic. The service won't necessarily wait for a reply before
/// calling another method.
protocol ServiceSubscriber {
    /// Notifies the subscriber that a service instance has been discovered.
    InstanceDiscovered(ServiceInstance instance) -> ();

    /// Notifies the subscriber that addresses or text for a known service
    /// instance have changed.
    InstanceChanged(ServiceInstance instance) -> ();

    /// Notifies the subscriber that a known service instance has been lost.
    InstanceLost(string service_name, string instance_name) -> ();
};

/// Describes a service instance.
struct ServiceInstance {
    string service_name;
    string instance_name;
    fuchsia.netstack.SocketAddress? v4_address;
    fuchsia.netstack.SocketAddress? v6_address;
    vector<string>? text;
};

/// Client-supplied responder interface.
protocol Responder {
    /// Updates the status of the instance publication.
    UpdateStatus(Result result);

    /// Provides instance information for initial announcements and query responses
    /// relating to the service instance specified in `Service.AddResponder`.
    /// `query` indicates whether data is requested for an initial announcement
    /// (false) or in response to a query (true). If the publication relates to a
    /// subtype of the service, `subtype` contains the subtype, otherwise it is
    /// null. If `publication` is null, no announcement or response is transmitted.
    /// Strings in `text` are transmitted in the TXT record.
    GetPublication(bool query, string? subtype)
        -> (Publication? publication);
};

/// Describes an initial instance publication or query response. `port` is host-
/// endian.
struct Publication {
    uint16 port;
    vector<string>? text;
    uint32 ptr_ttl_seconds = 4500; // default 75 minutes
    uint32 srv_ttl_seconds = 120; // default 2 minutes
    uint32 txt_ttl_seconds = 4500; // default 75 minutes
};
