// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.accessibility;

enum SettingsManagerStatus {
    OK = 0;
    ERROR = 1;
};

/// Specifies color correction mode.
enum ColorCorrection {
    // No color correction enabled.
    DISABLED = 0;

    // Color correction enabled for protoanomaly (red-green -- reduced sensitivity to red light).
    CORRECT_PROTANOMALY = 1;

    // Color correction enabled for deuteranomaly (red-green -- reduced sensitivy to green light).
    CORRECT_DEUTERANOMALY = 2;

    // Color correction enabled for tritanomaly (blue-yellow -- reduced sensitivity to blude light).
    CORRECT_TRITANOMALY = 3;
};

table Settings {
    // When magnification_enabled == true, user can specify an area of the screen to be magnified.
    // Note that actually magnifying the region requires an addition input (gesture, button, etc.).
    1: bool magnification_enabled = false;

    // Degree of magnification for magnified area.
    2: float32 magnification_zoom_factor = 1.0;

    // When screen_reader_enabled == true, user can specify elements of the UI to be described
    // audibly.
    // Note that reading a particular element requires an additional input.
    3: bool screen_reader_enabled = false;

    // When color_inversion_enabled == true, certain colors are inverted across the entire screen.
    // No additional user input is required for the inversion to take place once enabled.
    // Colors will continue to be inverted until color_inversion_enabled is set to false.
    4: bool color_inversion_enabled = false;

    // When color_correction is set to DISABLED, colors are displayed normally.
    // When color_correction has a different value, colors are modified to correct for the specified
    // type of color-blindness.
    // No additional user input is required for correction to take place once enabled.
    // Correction will continue to occur until color_correction is set to DISABLED.
    5: ColorCorrection color_correction = DISABLED;
};

/// The accessibility settings manager enables clients to get/set and watch settings values
/// for accessibility services.
[Discoverable]
protocol SettingsManager {
    // Returns current value of accessibility settings.
    GetSettings()
        -> (SettingsManagerStatus status, Settings accessibility_settings);

    // Enables or disables magnification depending on |magnification_enabled|.
    // When |magnification_enabled| is different from the existing setting,
    // the zoom factor is reset to 1.0.
    SetMagnificationEnabled(bool magnification_enabled)
        -> (SettingsManagerStatus status);

    // Sets value of zoom factor, provided that magnification is enabled.
    // Zoom factor must be > 1.0.
    // Returns ERROR if zoom is disabled or if magnification_zoom_factor < 1.0.
    SetMagnificationZoomFactor(float32 magnification_zoom_factor)
        -> (SettingsManagerStatus status);

    // Sets value of screen_reader_enabled, and returns OK.
    SetScreenReaderEnabled(bool screen_reader_enabled)
        -> (SettingsManagerStatus status);

    // Sets value of color_inversion_enabled, and returns OK.
    SetColorInversionEnabled(bool color_inversion_enabled)
        -> (SettingsManagerStatus status);

    // Sets value of color_correction, and returns OK.
    SetColorCorrection(ColorCorrection color_correction)
        -> (SettingsManagerStatus status);

    // Registers a watcher to observe changes in accessibility settings.
    Watch(SettingsWatcher watcher);
};

protocol SettingsWatcher {
    // Called when accessibility settings elections change.
    OnSettingsChange(Settings accessibility_settings);
};
