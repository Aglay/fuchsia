// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.ui.scenic.internal;

enum Error {
    BAD_OPERATION = 0;
};

/// All functions in this protocol are feed-forward.
/// They are not executed until Present() is called.
protocol Flatland {
    /// Execute all feed-forward operations.
    ///
    /// If executing a command produces an error (e.g., CreateTransform(0)), Present() will return
    /// an error. Commands that produce errors are ignored. Future commands are still executed.
    ///
    /// TODO(36166): Present should stop execution, and kill the channel, when some errors are
    /// detected.
    ///
    /// The client may only Present() a fixed number of times before it must wait for this function
    /// to return. This number or presents remaining is the return value of this method. The number of /// presents remaining will never drop without a corresponding call to Present() by the client,
    /// however, it may stay the same, or even increase, with each call to Present().
    ///
    /// num_presents_remaining will always be >= 1
    Present() -> (uint32 num_presents_remaining) error Error;

    // ***** Graph management *****

    /// This function will reset all state on this interface.
    ClearGraph();

    // ***** Transforms *****

    // Transform constructors.

    /// Creates a new Transform node. Transforms are a hierarchical piece of a Flatland graph. They
    /// can have children, and can reference Content. A sub-graph represented by a Transform and its
    /// descendants can be rendered to a display.
    ///
    /// Transforms are kept alive, even when released, as long as they are children of either an
    /// unreleased Transform, or the Root Transform.
    ///
    /// Each Transform can have a single piece of attached Content. Common types of Content include
    /// bitmaps, asynchronous streams of images, and links to Transforms in other processes.
    ///
    /// Transforms have attributes. Child Transforms inherit the combined attributes of their
    /// parents. Content attached to a Transform is also affected by that Transform's attributes.
    ///
    /// When a sub-graph of Transforms is rendered, Content will be rendered back-to-front, starting
    /// with the Content on the root transform, and continuing recursively through all of its child
    /// Transforms in the order the children were added. See AddChild() for more information.
    ///
    /// Zero is not a valid transform id. All other values are valid, assuming they are not already
    /// in use (see ReleaseTransform() for more details).
    CreateTransform(uint64 transform_id);

    // Transform management

    /// Adds a child Transform to a parent Transform. The new child Transform, and any Content
    /// attached to it or its children, will be rendered on top of the parentâ€™s Content, as well as
    /// any previously added children.
    AddChild(uint64 parent_transform_id, uint64 child_transform_id);

    /// Removes a child Transform from a parent Transform.
    RemoveChild(uint64 parent_transform_id, uint64 child_transform_id);

    /// Sets the Root Transform for the graph.
    ///
    /// The sub-graph defined by the Root Transform and its children will be rendered as Content
    /// in the linked parent Graph (see LinkGraph()). Any parents of the Root Transform in this
    /// Graph will be ignored.
    ///
    /// The Root Transform, and all children of the Root Transform, are kept alive if they are
    /// released (see ReleaseTransform() for more details).
    ///
    /// There is only ever one Root. Since 0 is not a valid transform id (see CreateTransform()),
    /// calling SetRootTransform(0) clears the current Root, destroying any previously released
    /// objects that are not referenced by the new root.
    SetRootTransform(uint64 transform_id);

    // ***** Cleanup operations *****

    /// Released Transforms and Content will be garbage collected by the system once they are no
    /// longer necessary for rendering (i.e., there is no path from the Root Transform to the
    /// object, all pending rendering has completed, and new Content is available).
    ///
    /// However, once released, the id immediately goes out of scope for future function calls, and
    /// can be reused by the client when creating new Transforms and Content.
    ///
    /// It is an error to call Graph functions on a released id (unless that id has been reused to
    /// construct a new object).
    ReleaseTransform(uint64 transform_id);
};
