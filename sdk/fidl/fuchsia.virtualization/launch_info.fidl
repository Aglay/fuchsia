// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.virtualization;

using zx;

/// An interface that will receive channels for Wayland connections.
[Discoverable]
protocol WaylandDispatcher {
    /// Inform dispatcher of new connection.
    ///
    /// When a client opens a new connection to the virtio_wl device, a new
    /// zx::channel will be created for that connection. The virtio_wl device
    /// will retain one endpoint of that channel and the other endpoint will be
    /// provided to this method. The messages on the channel will be Wayland
    /// protocol messages as sent by the client. Each channel datagram will
    /// contain 1 or more complete Wayland messages.
    OnNewConnection(zx.handle:CHANNEL channel);
};

/// Properties describing a virtio_wl device.
resource struct WaylandDevice {
    /// The amount of guest-physical address space to allocate for virtio_wl
    /// buffers.
    ///
    /// Default to a 1GiB allocation.
    uint64 memory = 1073741824;

    /// The dispatcher for new virtio_wl connections.
    WaylandDispatcher dispatcher;
};

/// Properties describing a virtio_magma device.
struct MagmaDevice {
    /// The amount of guest-physical address space to allocate for virtio_magma
    /// buffers.
    ///
    /// Default to a 16GiB allocation.
    uint64 memory = 17179869184;
};

resource struct LaunchInfo {
    /// The URL of the package to launch.
    string url;

    /// A diagnostic string to associate with this instance.
    string? label;

    /// Configuration that will be passed to the VMM when launching the guest.
    GuestConfig guest_config;

    /// An optional virtio_wl device.
    ///
    /// If not provided, no virtio_wl device will be created by the VMM.
    WaylandDevice? wayland_device;

    /// An optional virtio_magma device.
    ///
    /// If not provided, no virtio_magma device will be created by the VMM.
    MagmaDevice? magma_device;
};

[Discoverable]
protocol LaunchInfoProvider {
    Get() -> (LaunchInfo launch_info);
};
