// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.io.test;

using fuchsia.mem;
using fuchsia.io;

// TODO(fxb/33880): Implement full testing framework. For now, we are
// hard-coding the desired directory layout manually in separate "Get"
// functions. In the next step, we would want to have a protocol to describe
// the intended directory layout setup, and integrate io2 connections.

/// Conformance test harnesses will implement this protocol to setup its
/// associated filesystem servers with the described directory layout,
/// allowing their implementation of `fuchsia.io` and `fuchsia.io2` protocols
/// to be verified by a common test suite.
///
/// Different test cases will not interact with one another during the
/// conformance test, and only one test case will be active at a time per
/// tested filesystem. So it is possible to host all cases as different
/// sub-directories under a common filesystem instance, to simplify the
/// lifecycle and implementation.
///
/// If a test case has mutable bits, each method call should be implemented
/// to obtain the directory in its original state. In other words, repeated
/// test case set up should "as-if" yield new directories.
///
/// See `src/storage/conformance/README.md` for an overview of io conformance
/// testing.
///
/// Temporary protocol for child components of test component to expose their
/// harness protocol to prevent race conditions by just having the child
/// component expose their protocol.
/// TODO(fxb/45684): Change this to use ComponentManager events for connections
/// once available.
[Discoverable]
protocol HarnessReceiver {
    /// Send Io1TestHarness to for receiver to connect to.
    SendIo1Harness(Io1TestHarness harness);
};

/// Io1 test harness to provide functions for the test suite to make connections.
/// TODO(fxb/45610): Update io1 basic directory structure test harness once
/// design is fleshed out.
/// TODO(fxb/46082): Add separate io2 test harness api once we come up with a
/// good enough set of functions that we have enough flexibility to create
/// variable directory structures to with explicit permission settings for tests.
[Discoverable]
protocol Io1TestHarness {
    GetEmptyDirectory(request<fuchsia.io.Directory> directory_request);
    GetDirectoryWithVmoFile(fuchsia.mem.Range buffer,
                            request<fuchsia.io.Directory> directory_request);
    GetDirectoryWithRemoteDirectory(string:fuchsia.io.MAX_PATH path,
                                    fuchsia.io.Directory remote_directory,
                                    request<fuchsia.io.Directory> directory_request);
};
