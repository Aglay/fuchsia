// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.session;

using fuchsia.mem;

/// Maximum number of annotations per element.
const uint32 MAX_ANNOTATIONS = 100;

/// Maximum length of [`fuchsia.session/Key`].
const uint32 MAX_KEY_LENGTH = 256;

/// Maximum length of a [`fuchsia.session/Value`] `text` field, in characters.
const uint32 MAX_TEXT_LENGTH = 1024;

/// Maximum length of a [`fuchsia.session/Value`] `buffer` field, in bytes.
const uint32 MAX_BUFFER_BYTES = 102400;

/// An identifier for an [`fuchsia.session/Annotation`].
using Key = string:MAX_KEY_LENGTH;

/// The value of a [`fuchsia.session/Entry`].
///
/// The actual field used depends on the type of annotation.
///
/// The size of `buffer` is limited to `MAX_BUFFER_BYTES` bytes.
union Value {
    1: string:MAX_TEXT_LENGTH text;
    2: fuchsia.mem.Buffer buffer;
};

/// An annotation defined dynamically by key/value pair.
///
/// The `Key`, `Value` type, and legal values are not enforced by the Session Framework. Cooperating
/// components that exchange annotations must define and validate annotation entries based on their
/// own conventions.
struct Annotation {
    /// An identfier for this annotation.
    Key key;

    /// The content of this annotation.
    Value? value;
};

// NOTE: `Annotations` is a table (and not a type alias) to anticipate the possibility that
// `Annotations` may be extended with additional well-known annotations, using hard-coded
// table fields of any legal type.
/// Contains the annotations applied to an Element.
table Annotations {
    /// A list of dynamically-defined annotations.
    1: vector<Annotation>:MAX_ANNOTATIONS custom_annotations;
};
