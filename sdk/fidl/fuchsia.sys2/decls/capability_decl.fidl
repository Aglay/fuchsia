// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.sys2;

using fuchsia.component;

/// Declares a capability defined by this component.
flexible union CapabilityDecl {
    1: ServiceDecl service;
    2: StorageDecl storage;
    3: RunnerDecl runner;
    4: ResolverDecl resolver;
};

/// The type of storage offered or used by a component.
enum StorageType {
    /// Persistent data storage.
    DATA = 1;

    /// Cache storage that may be deleted at any time by the system.
    CACHE = 2;

    /// Meta storage that will be used by component manager to persist metadata
    /// and other information about the component
    META = 3;
};

/// Declares a service capability backed by this component.
///
/// To learn more about services, see:
/// https://fuchsia.dev/fuchsia-src/glossary#service
table ServiceDecl {
    /// The name of this service.
    1: string:fuchsia.component.MAX_NAME_LENGTH name;

    /// The path to the service in the component's outgoing directory.
    2: string:fuchsia.component.MAX_PATH_LENGTH source_path;
};

/// Declares a storage capability backed by a directory from which data, cache,
/// or meta storage can be offered.
table StorageDecl {
    /// The name of this storage
    1: fuchsia.component.name name;

    /// The provider of the underlying directory capability relative to the
    /// component itself. Must be `parent`, `self`, or `child`.
    2: Ref source;

    /// The incoming path to the directory capability. If "source == SELF", this
    /// is a path in the component's outgoing directory. Otherwise, it is the
    /// path by which the capability was presented to the component.
    3: string:fuchsia.component.MAX_PATH_LENGTH source_path;
};

/// Declares a runner capability backed by a service.
table RunnerDecl {
    /// The name of this runner.
    1: fuchsia.component.name name;

    /// The provider of the underlying service relative to the component itself.
    /// Must be `parent`, `self`, or `child`.
    2: Ref source;

    /// The path of the capability within the specified source.
    3: string:fuchsia.component.MAX_PATH_LENGTH source_path;
};

/// Declares a resolver which is responsible for resolving component URLs to actual components.
/// See `fuchsia.sys2.ComponentResolver` for the protocol resolvers are expected to implement.
table ResolverDecl {
    /// The name of this resolver.
    /// Must be non-empty, unique among resolvers declared in the same `ComponentDecl`, and
    /// contain only the following characters: [a-z0-9-_.].
    1: fuchsia.component.name name;

    /// The path of the capability in the declaring component's namespace.
    2: string:fuchsia.component.MAX_PATH_LENGTH source_path;
};
