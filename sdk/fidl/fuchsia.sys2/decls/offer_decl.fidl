// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.sys2;

/// Declares a capability offered by a component to one of its children, which may
/// have been offered by the component's containing realm, the component itself,
/// or one of its other children.
xunion OfferDecl {
    OfferServiceDecl service;
    OfferDirectoryDecl directory;
    OfferStorageDecl storage;
};

/// Declares a service offered by a component to one of its children, which may
/// have been offered by the component's containing realm, the component itself,
/// or one of its other children.
table OfferServiceDecl {
    /// The provider of the capability relative to the component itself. Must be
    /// |realm|, |self|, or |child|.
    1: Ref source;

    /// Path identifying the service being offered.
    2: string:MAX_PATH_LENGTH source_path;

    /// The list of children to which the capability should be offered.
    3: vector<OfferTarget> targets;
};

/// Declares a directory offered by a component to one of its children, which may
/// have been offered by the component's containing realm, the component itself,
/// or one of its other children.
table OfferDirectoryDecl {
    /// The provider of the capability relative to the component itself. Must be
    /// |realm|, |self|, or |child|.
    1: Ref source;

    /// Path identifying the directory being offered.
    2: string:MAX_PATH_LENGTH source_path;

    /// The list of children to which the capability should be offered.
    3: vector<OfferTarget> targets;
};

/// Declares a storage capability offered by a component to one of its children,
/// such as meta storage offered by the component's containing realm or cache
/// storage offered by the component itself.
table OfferStorageDecl {
    /// The type of storage being offered.
    1: StorageType type;

    /// The source of the storage capability. Must be |realm| or |storage|.
    2: Ref source;

    /// The destinations to which the capability should be offered. Each |Ref|
    /// must be |child| or |collection|.
    3: vector<Ref> dests;
};

/// Describes a target for a capability offering.
// TODO: Split OfferTarget by capability type.
table OfferTarget {
    /// The path under which the capability is being offered.
    ///
    /// Must be an absolute path starting with /.
    1: string:MAX_PATH_LENGTH target_path;

    /// Reference to the destination. Must be |child| or |collection|.
    2: Ref dest;
};
