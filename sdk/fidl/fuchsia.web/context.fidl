// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

library fuchsia.web;

using fuchsia.io;

enum ContextError : int32 {
    /// The remote debugging service was not opened.
    REMOTE_DEBUGGING_PORT_NOT_OPENED = 1;
};

/// The top-level service interface which allows for the creation of
/// Context resources.
// TODO(WEB-29): Remove ContextProvider in favor of launching Context
// instances directly.
[Discoverable]
protocol ContextProvider {
    /// Creates a new browser Context whose state is wholly independent and
    /// isolated from other Contexts.
    ///
    /// `context`: An interface request which will receive a bound Context
    ///            service.
    Create(CreateContextParams params, request<Context> context);
};

/// Defines a provider which hosts resources from a fuchsia.io.Directory.
/// Content can GET resource files via the provider, but not enumerate
/// directories. Resources can be accessed by their URLs:
///
///    content://<provider-name>/<path/to/resource>
///
/// By default the MIME types of files are determined automatically by
/// "sniffing" the contents of the files. No content encoding will be
/// declared, which browsers will interpret as meaning "text/plain".
/// Content type and encoding metadata may optionally be specified explicitly
/// by metadata/ files which reside alongside the file. Metadata is expressed
/// in JSON files, named are the files they describe with a "._metadata" suffix.
/// For example, the file "index.html" would have the a metadata file called
/// "index.html._metadata", with the following contents:
///    {
///      "charset": "utf-8",
///      "mime": "text/html"
///    }
table ContentDirectoryProvider {
    /// Name of the provider.
    /// Must be non-empty and composed solely of alphanumerics, dots, and dashes.
    1: string:255 name;

    /// Directory containing the files served by this provider.
    2: fuchsia.io.Directory directory;
};

table CreateContextParams {
    /// Service directory to be used by the context.
    // TODO(WEB-26): Document required and optional services that Context uses.
    1: fuchsia.io.Directory service_directory;

    /// Handle to the directory that will contain the Context's
    /// persistent data. If it is left unset, then the created Context will be
    /// stateless, with all of its data discarded upon Context destruction.
    /// If set, `data_directory` must not be shared with any other Context.
    // TODO(WEB-28): Provide an API to inform the caller when the
    // `data_directory` can be safely removed.
    2: fuchsia.io.Directory data_directory;

    /// Optional suffix to append to the UserAgent string, to describe the
    /// embedder's product & version. See the User-Agent HTTP header
    /// specification at https://tools.ietf.org/html/rfc7231#section-5.5.3
    3: string user_agent_product;
    4: string user_agent_version;

    /// Enables Frames to be created with remote debugging enabled using the DevTools protocol. If
    /// `port` is 0, then an ephemeral port will be used, which can be queried via the
    /// [`fuchsia.web.Context/GetRemoteDebuggingPort`] API.
    5: uint16 remote_debugging_port;

    /// List of providers whose contents will be served by content:// URLs.
    6: vector<ContentDirectoryProvider>:100 content_directories;
};

/// Manages browsing state (e.g. LocalStorage, cookies, etc) associated with
/// a set of Frames.
protocol Context {
    /// Creates a new frame under this Context. Destruction of a Context
    /// triggers the destruction of all of its associated Frames. Frames can be
    /// transferred to another component but cannot be shared across multiple
    /// components.
    ///
    /// `frame`: An interface request that will be bound to the created Frame.
    CreateFrame(request<Frame> frame);

    /// Similar to [`fuchsia.web.Context/CreateFrame`], with extra parameters.
    [Transitional]
    CreateFrameWithParams(CreateFrameParams params, request<Frame> frame);

    /// Used to observe cookies for sites hosted under this Context.
    [Transitional]
    GetCookieManager(request<CookieManager> manager);

    /// Waits until debugging is available on one or more Frames, and returns the DevTools port
    /// number. Multiple calls may be queued to received the port number. If the
    /// [`fuchsia.web.Context`] was  created without debugging enabled, or the remote debugging
    /// service failed to start, then the [`fuchsia.web.ContextError`] will be set to
    /// `REMOTE_DEBUGGING_PORT_NOT_OPENED`.
    GetRemoteDebuggingPort() -> (uint16 port) error ContextError;
};

table CreateFrameParams {
    /// Set to true to enable remote debugging. The [`fuchsia.web.Frame`] will be closed with
    /// `ERR_INVALID_ARGS if |remote_debugging_port| was not set in
    /// [`fuchsia.web.CreateContextParams`].
    1: bool enable_remote_debugging;
};