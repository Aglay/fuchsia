// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Code generated by tools/fidl/gidl-conformance-suite/regen.sh; DO NOT EDIT.

#include <conformance/cpp/fidl.h>
#include <gtest/gtest.h>

#include "lib/fidl/cpp/test/test_util.h"

TEST(Conformance, 3ByteObjectAlignmentInStruct_Old_Encode) {
  conformance::ThreeByteInStruct v1;

  conformance::ThreeByte v2;

  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  v1.elem1 = std::move(v2);

  conformance::ThreeByte v6;

  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);

  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);

  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  v1.elem2 = std::move(v6);

  conformance::ThreeByte v10;

  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);

  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);

  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  v1.elem3 = std::move(v10);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, 5ByteObjectAlignmentInStruct_Old_Encode) {
  conformance::FiveByteInStruct v1;

  conformance::FiveByte v2;

  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  v1.elem1 = std::move(v2);

  conformance::FiveByte v5;

  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);

  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  v1.elem2 = std::move(v5);

  conformance::FiveByte v8;

  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);

  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  v1.elem3 = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Old_Encode) {
  conformance::ThreeByteInVector v1;

  conformance::ThreeByte v2;

  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  conformance::ThreeByte v6;

  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);

  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);

  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  conformance::ThreeByte v10;

  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);

  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);

  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  std::vector<conformance::ThreeByte> v14;
  v14.push_back(std::move(v2));
  v14.push_back(std::move(v6));
  v14.push_back(std::move(v10));
  v1.elems = std::move(v14);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Old_Encode) {
  conformance::FiveByteInVector v1;

  conformance::FiveByte v2;

  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  conformance::FiveByte v5;

  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);

  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  conformance::FiveByte v8;

  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);

  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  std::vector<conformance::FiveByte> v11;
  v11.push_back(std::move(v2));
  v11.push_back(std::move(v5));
  v11.push_back(std::move(v8));
  v1.elems = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, 3ByteObjectAlignmentInArray_Old_Encode) {
  conformance::ThreeByteInArray v1;

  conformance::ThreeByte v2;

  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  conformance::ThreeByte v6;

  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);

  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);

  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  conformance::ThreeByte v10;

  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);

  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);

  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  auto v14 = std::array<conformance::ThreeByte, 3>{std::move(v2), std::move(v6), std::move(v10)};
  v1.elems = std::move(v14);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Old_Encode) {
  conformance::FiveByteInArray v1;

  conformance::FiveByte v2;

  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  conformance::FiveByte v5;

  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);

  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  conformance::FiveByte v8;

  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);

  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  auto v11 = std::array<conformance::FiveByte, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.elems = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, EmptyStruct_Old_Encode) {
  conformance::EmptyStruct v1;

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, EmptyStructSandwich_Old_Encode) {
  conformance::EmptyStructSandwich v1;

  std::string v2("before");
  v1.before = std::move(v2);

  conformance::EmptyStruct v3;
  v1.es = std::move(v3);

  std::string v4("after");
  v1.after = std::move(v4);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65,
      0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Old_Encode) {
  conformance::Uint8Uint16Uint32Uint64 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint16_t v3 = 515ull;
  v1.f2 = std::move(v3);

  uint32_t v4 = 67438087ull;
  v1.f3 = std::move(v4);

  uint64_t v5 = 579005069656919567ull;
  v1.f4 = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x03, 0x02, 0x07, 0x06, 0x05, 0x04,
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Old_Encode) {
  conformance::Uint64Uint32Uint16Uint8 v1;

  uint64_t v2 = 579005069656919567ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 67438087ull;
  v1.f2 = std::move(v3);

  uint16_t v4 = 515ull;
  v1.f3 = std::move(v4);

  uint8_t v5 = 1ull;
  v1.f4 = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
      0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, SimpleTableEmpty_Old_Encode) {
  conformance::StructOfSimpleTable v1;

  conformance::SimpleTable v2;
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, SimpleTableXAndY_Old_Encode) {
  conformance::StructOfSimpleTable v1;

  conformance::SimpleTable v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));

  int64_t v4 = 67ull;
  v2.set_y(std::move(v4));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, SimpleTableJustY_Old_Encode) {
  conformance::StructOfSimpleTable v1;

  conformance::SimpleTable v2;

  int64_t v3 = 67ull;
  v2.set_y(std::move(v3));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Old_Encode) {
  conformance::StructOfTableWithStringAndVector v1;

  conformance::TableWithStringAndVector v2;

  std::string v3("hello");
  v2.set_foo(std::move(v3));

  int32_t v4 = 27ull;
  v2.set_bar(std::move(v4));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00,
      0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, SimpleTableThenUint64_Old_Encode) {
  conformance::SimpleTableThenUint64 v1;

  conformance::SimpleTable v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));

  int64_t v4 = 67ull;
  v2.set_y(std::move(v4));
  v1.table = std::move(v2);

  uint64_t v5 = 16045690984833335023ull;
  v1.number = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, ReverseOrdinalTable_Old_Encode) {
  conformance::StructOfReverseOrdinalTable v1;

  conformance::ReverseOrdinalTable v2;

  int64_t v3 = 170ull;
  v2.set_x(std::move(v3));

  int64_t v4 = 187ull;
  v2.set_y(std::move(v4));

  int64_t v5 = 204ull;
  v2.set_z(std::move(v5));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, InlineXUnionInStruct_Old_Encode) {
  conformance::TestInlineXUnionInStruct v1;

  std::string v2("before");
  v1.before = std::move(v2);

  conformance::SampleXUnion v3;

  uint32_t v4 = 3735928559ull;
  v3.set_u(std::move(v4));
  v1.xu = std::move(v3);

  std::string v5("after");
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OptionalXUnionInStructAbsent_Old_Encode) {
  conformance::TestOptionalXUnionInStruct v1;

  std::string v2("before");
  v1.before = std::move(v2);

  std::string v3("after");
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OptionalXUnionInStructPresent_Old_Encode) {
  conformance::TestOptionalXUnionInStruct v1;

  std::string v2("before");
  v1.before = std::move(v2);

  std::unique_ptr<conformance::SampleXUnion> v3 = std::make_unique<conformance::SampleXUnion>();

  uint32_t v4 = 3735928559ull;
  v3->set_u(std::move(v4));
  v1.xu = std::move(v3);

  std::string v5("after");
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00,
      0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, XUnionInTableXUnionAbsent_Old_Encode) {
  conformance::TestXUnionInTable v1;

  conformance::XUnionInTable v2;

  std::string v3("before");
  v2.set_before(std::move(v3));

  std::string v4("after");
  v2.set_after(std::move(v4));
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, XUnionInTableXUnionPresent_Old_Encode) {
  conformance::TestXUnionInTable v1;

  conformance::XUnionInTable v2;

  std::string v3("before");
  v2.set_before(std::move(v3));

  conformance::SampleXUnion v4;

  uint32_t v5 = 3735928559ull;
  v4.set_u(std::move(v5));
  v2.set_xu(std::move(v4));

  std::string v6("after");
  v2.set_after(std::move(v6));
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2, 0x56,
      0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, StrictXUnion_Old_Encode) {
  conformance::TestStrictXUnionInStruct v1;

  conformance::SampleStrictXUnion v2;

  uint32_t v3 = 3735928559ull;
  v2.set_u(std::move(v3));
  v1.xu = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, AddEthernetDeviceRequest_Old_Encode) {
  conformance::TestAddEthernetDeviceRequest v1;

  std::string v2("@/dev/sys/pci/00:03.0/e1000/ethernet");
  v1.topological_path = std::move(v2);

  conformance::InterfaceConfig v3;

  std::string v4("ethp0003");
  v3.name = std::move(v4);

  conformance::IpAddressConfig v5;

  bool v6 = true;
  v5.set_dhcp(std::move(v6));
  v3.ip_address_config = std::move(v5);
  v1.config = std::move(v3);

  uint32_t v7 = 4294967295ull;
  v1.this_should_be_a_handle = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64,
      0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72,
      0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, AddEthernetDeviceRequest_V1_Encode) {
  conformance::TestAddEthernetDeviceRequest v1;

  std::string v2("@/dev/sys/pci/00:03.0/e1000/ethernet");
  v1.topological_path = std::move(v2);

  conformance::InterfaceConfig v3;

  std::string v4("ethp0003");
  v3.name = std::move(v4);

  conformance::IpAddressConfig v5;

  bool v6 = true;
  v5.set_dhcp(std::move(v6));
  v3.ip_address_config = std::move(v5);
  v1.config = std::move(v3);

  uint32_t v7 = 4294967295ull;
  v1.this_should_be_a_handle = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70,
      0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30, 0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30,
      0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65,
      0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, FileGetAttrResponse_Old_Encode) {
  conformance::FileGetAttrResponse v1;

  int32_t v2 = 2125315759ull;
  v1.s = std::move(v2);

  conformance::NodeAttributes v3;

  uint32_t v4 = 2518909348ull;
  v3.mode = std::move(v4);

  uint64_t v5 = 1ull;
  v3.id = std::move(v5);

  uint64_t v6 = 231ull;
  v3.content_size = std::move(v6);

  uint64_t v7 = 231ull;
  v3.storage_size = std::move(v7);

  uint64_t v8 = 1ull;
  v3.link_count = std::move(v8);

  uint64_t v9 = 9833440827789222417ull;
  v3.creation_time = std::move(v9);

  uint64_t v10 = 72038755451251353ull;
  v3.modification_time = std::move(v10);
  v1.attributes = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44,
      0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Optionals_Old_Encode) {
  conformance::StructWithOptionals v1;

  conformance::EmptyStruct v2;
  v1.s = std::move(v2);

  std::unique_ptr<conformance::EmptyStruct> v3 = std::make_unique<conformance::EmptyStruct>();
  v1.s2 = std::move(v3);

  conformance::TableWithEmptyStruct v4;

  conformance::EmptyStruct v5;
  v4.set_s(std::move(v5));
  v1.t = std::move(v4);

  conformance::XUnionWithEmptyStruct v6;

  conformance::EmptyStruct v7;
  v6.set_s(std::move(v7));
  v1.xu = std::move(v6);

  std::unique_ptr<conformance::XUnionWithEmptyStruct> v8 =
      std::make_unique<conformance::XUnionWithEmptyStruct>();

  conformance::EmptyStruct v9;
  v8->set_s(std::move(v9));
  v1.xu2 = std::move(v8);

  conformance::UnionWithEmptyStruct v10;

  conformance::EmptyStruct v11;
  v10.set_s(std::move(v11));
  v1.u = std::move(v10);

  std::unique_ptr<conformance::UnionWithEmptyStruct> v12 =
      std::make_unique<conformance::UnionWithEmptyStruct>();

  conformance::EmptyStruct v13;
  v12->set_s(std::move(v13));
  v1.u2 = std::move(v12);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Optionals_V1_Encode) {
  conformance::StructWithOptionals v1;

  conformance::EmptyStruct v2;
  v1.s = std::move(v2);

  std::unique_ptr<conformance::EmptyStruct> v3 = std::make_unique<conformance::EmptyStruct>();
  v1.s2 = std::move(v3);

  conformance::TableWithEmptyStruct v4;

  conformance::EmptyStruct v5;
  v4.set_s(std::move(v5));
  v1.t = std::move(v4);

  conformance::XUnionWithEmptyStruct v6;

  conformance::EmptyStruct v7;
  v6.set_s(std::move(v7));
  v1.xu = std::move(v6);

  std::unique_ptr<conformance::XUnionWithEmptyStruct> v8 =
      std::make_unique<conformance::XUnionWithEmptyStruct>();

  conformance::EmptyStruct v9;
  v8->set_s(std::move(v9));
  v1.xu2 = std::move(v8);

  conformance::UnionWithEmptyStruct v10;

  conformance::EmptyStruct v11;
  v10.set_s(std::move(v11));
  v1.u = std::move(v10);

  std::unique_ptr<conformance::UnionWithEmptyStruct> v12 =
      std::make_unique<conformance::UnionWithEmptyStruct>();

  conformance::EmptyStruct v13;
  v12->set_s(std::move(v13));
  v1.u2 = std::move(v12);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Arrays_Old_Encode) {
  conformance::StructWithArrays v1;

  int32_t v2 = 1ull;
  int32_t v3 = 2ull;
  auto v4 = std::array<int32_t, 2>{std::move(v2), std::move(v3)};
  v1.arr_int = std::move(v4);

  std::string v5("a");
  std::string v6("b");
  auto v7 = std::array<std::string, 2>{std::move(v5), std::move(v6)};
  v1.arr_string = std::move(v7);

  ::fidl::StringPtr v8("c");
  ::fidl::StringPtr v9;
  auto v10 = std::array<::fidl::StringPtr, 2>{std::move(v8), std::move(v9)};
  v1.arr_nullable_string = std::move(v10);

  conformance::StructWithInt v11;

  int32_t v12 = 1ull;
  v11.x = std::move(v12);
  conformance::StructWithInt v13;

  int32_t v14 = 2ull;
  v13.x = std::move(v14);
  auto v15 = std::array<conformance::StructWithInt, 2>{std::move(v11), std::move(v13)};
  v1.arr_struct = std::move(v15);

  std::unique_ptr<conformance::StructWithInt> v16;
  std::unique_ptr<conformance::StructWithInt> v17 = std::make_unique<conformance::StructWithInt>();

  int32_t v18 = 16909060ull;
  v17->x = std::move(v18);
  auto v19 =
      std::array<std::unique_ptr<conformance::StructWithInt>, 2>{std::move(v16), std::move(v17)};
  v1.arr_nullable_struct = std::move(v19);

  int32_t v20 = 1ull;
  int32_t v21 = 2ull;
  int32_t v22 = 3ull;
  auto v23 = std::array<int32_t, 3>{std::move(v20), std::move(v21), std::move(v22)};
  int32_t v24 = 4ull;
  int32_t v25 = 5ull;
  int32_t v26 = 6ull;
  auto v27 = std::array<int32_t, 3>{std::move(v24), std::move(v25), std::move(v26)};
  auto v28 = std::array<std::array<int32_t, 3>, 2>{std::move(v23), std::move(v27)};
  v1.arr_arr_int = std::move(v28);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Vectors_Old_Encode) {
  conformance::StructWithVectors v1;

  std::vector<int32_t> v2;
  v1.vec_empty = std::move(v2);

  int32_t v3 = 1ull;
  int32_t v4 = 2ull;
  std::vector<int32_t> v5;
  v5.push_back(std::move(v3));
  v5.push_back(std::move(v4));
  v1.vec_int = std::move(v5);

  std::string v6("a");
  std::string v7("b");
  std::vector<std::string> v8;
  v8.push_back(std::move(v6));
  v8.push_back(std::move(v7));
  v1.vec_string = std::move(v8);

  ::fidl::StringPtr v9;
  ::fidl::StringPtr v10("c");
  ::fidl::StringPtr v11;
  std::vector<::fidl::StringPtr> v12;
  v12.push_back(std::move(v9));
  v12.push_back(std::move(v10));
  v12.push_back(std::move(v11));
  v1.vec_nullable_string = std::move(v12);

  conformance::StructWithInt v13;

  int32_t v14 = 1ull;
  v13.x = std::move(v14);
  std::vector<conformance::StructWithInt> v15;
  v15.push_back(std::move(v13));
  v1.vec_struct = std::move(v15);

  std::unique_ptr<conformance::StructWithInt> v16;
  std::unique_ptr<conformance::StructWithInt> v17;
  std::unique_ptr<conformance::StructWithInt> v18 = std::make_unique<conformance::StructWithInt>();

  int32_t v19 = 2ull;
  v18->x = std::move(v19);
  std::vector<std::unique_ptr<conformance::StructWithInt>> v20;
  v20.push_back(std::move(v16));
  v20.push_back(std::move(v17));
  v20.push_back(std::move(v18));
  v1.vec_nullable_struct = std::move(v20);

  int32_t v21 = 1ull;
  int32_t v22 = 2ull;
  std::vector<int32_t> v23;
  v23.push_back(std::move(v21));
  v23.push_back(std::move(v22));
  int32_t v24 = 3ull;
  std::vector<int32_t> v25;
  v25.push_back(std::move(v24));
  std::vector<std::vector<int32_t>> v26;
  v26.push_back(std::move(v23));
  v26.push_back(std::move(v25));
  v1.vec_vec_int = std::move(v26);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, BoolTrue_Old_Encode) {
  conformance::MyBool v1;

  bool v2 = true;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, BoolFalse_Old_Encode) {
  conformance::MyBool v1;

  bool v2 = false;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, ByteZero_Old_Encode) {
  conformance::MyByte v1;

  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Byte255_Old_Encode) {
  conformance::MyByte v1;

  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int8Min_Old_Encode) {
  conformance::MyInt8 v1;

  int8_t v2 = -128ll;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int8Zero_Old_Encode) {
  conformance::MyInt8 v1;

  int8_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int8Max_Old_Encode) {
  conformance::MyInt8 v1;

  int8_t v2 = 127ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int16Min_Old_Encode) {
  conformance::MyInt16 v1;

  int16_t v2 = -32768ll;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int16Zero_Old_Encode) {
  conformance::MyInt16 v1;

  int16_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int16Max_Old_Encode) {
  conformance::MyInt16 v1;

  int16_t v2 = 32767ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int32Min_Old_Encode) {
  conformance::MyInt32 v1;

  int32_t v2 = -2147483648ll;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int32Zero_Old_Encode) {
  conformance::MyInt32 v1;

  int32_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int32Max_Old_Encode) {
  conformance::MyInt32 v1;

  int32_t v2 = 2147483647ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int64Min_Old_Encode) {
  conformance::MyInt64 v1;

  int64_t v2 = -9223372036854775807ll - 1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int64Zero_Old_Encode) {
  conformance::MyInt64 v1;

  int64_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Int64Max_Old_Encode) {
  conformance::MyInt64 v1;

  int64_t v2 = 9223372036854775807ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint8Zero_Old_Encode) {
  conformance::MyUint8 v1;

  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint8Max_Old_Encode) {
  conformance::MyUint8 v1;

  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint16Zero_Old_Encode) {
  conformance::MyUint16 v1;

  uint16_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint16Max_Old_Encode) {
  conformance::MyUint16 v1;

  uint16_t v2 = 65535ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint32Zero_Old_Encode) {
  conformance::MyUint32 v1;

  uint32_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint32Max_Old_Encode) {
  conformance::MyUint32 v1;

  uint32_t v2 = 4294967295ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint64Zero_Old_Encode) {
  conformance::MyUint64 v1;

  uint64_t v2 = 0ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Uint64Max_Old_Encode) {
  conformance::MyUint64 v1;

  uint64_t v2 = 18446744073709551615ull;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float32Zero_Old_Encode) {
  conformance::MyFloat32 v1;

  float v2 = 0;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float32One_Old_Encode) {
  conformance::MyFloat32 v1;

  float v2 = 1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float32MinusOne_Old_Encode) {
  conformance::MyFloat32 v1;

  float v2 = -1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float32Max_Old_Encode) {
  conformance::MyFloat32 v1;

  float v2 = 3.4028234663852886e+38;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float64Zero_Old_Encode) {
  conformance::MyFloat64 v1;

  double v2 = 0;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float64One_Old_Encode) {
  conformance::MyFloat64 v1;

  double v2 = 1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float64MinusOne_Old_Encode) {
  conformance::MyFloat64 v1;

  double v2 = -1;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Float64Max_Old_Encode) {
  conformance::MyFloat64 v1;

  double v2 = 1.7976931348623157e+308;
  v1.value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich1Case1_Old_Encode) {
  conformance::Sandwich1 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize8Align4 v3;

  uint32_t v4 = 202050057ull;
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00,
      0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich1Case1_V1_Encode) {
  conformance::Sandwich1 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize8Align4 v3;

  uint32_t v4 = 202050057ull;
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich1WithOptUnionPresent_Old_Encode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::UnionSize8Align4> v3 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v4 = 202050057ull;
  v3->set_variant(std::move(v4));
  v1.opt_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich1WithOptUnionPresent_V1_Encode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::UnionSize8Align4> v3 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v4 = 202050057ull;
  v3->set_variant(std::move(v4));
  v1.opt_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich1WithOptUnionAbsent_Old_Encode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  uint32_t v3 = 134678021ull;
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich1WithOptUnionAbsent_V1_Encode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  uint32_t v3 = 134678021ull;
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich2Case1_Old_Encode) {
  conformance::Sandwich2 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize12Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = std::array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich2Case1_V1_Encode) {
  conformance::Sandwich2 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize12Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = std::array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich3Case1_Old_Encode) {
  conformance::Sandwich3 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize24Align8 v3;

  conformance::StructSize16Align8 v4;

  uint64_t v5 = 12080525177006498208ull;
  v4.f1 = std::move(v5);

  uint64_t v6 = 12659246559711111592ull;
  v4.f2 = std::move(v6);
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich3Case1_V1_Encode) {
  conformance::Sandwich3 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize24Align8 v3;

  conformance::StructSize16Align8 v4;

  uint64_t v5 = 12080525177006498208ull;
  v4.f1 = std::move(v5);

  uint64_t v6 = 12659246559711111592ull;
  v4.f2 = std::move(v6);
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1,
      0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich4Case1_Old_Encode) {
  conformance::Sandwich4 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize36Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  uint8_t v10 = 166ull;
  uint8_t v11 = 167ull;
  uint8_t v12 = 168ull;
  uint8_t v13 = 169ull;
  uint8_t v14 = 170ull;
  uint8_t v15 = 171ull;
  uint8_t v16 = 172ull;
  uint8_t v17 = 173ull;
  uint8_t v18 = 174ull;
  uint8_t v19 = 175ull;
  uint8_t v20 = 176ull;
  uint8_t v21 = 177ull;
  uint8_t v22 = 178ull;
  uint8_t v23 = 179ull;
  uint8_t v24 = 180ull;
  uint8_t v25 = 181ull;
  uint8_t v26 = 182ull;
  uint8_t v27 = 183ull;
  uint8_t v28 = 184ull;
  uint8_t v29 = 185ull;
  uint8_t v30 = 186ull;
  uint8_t v31 = 187ull;
  uint8_t v32 = 188ull;
  uint8_t v33 = 189ull;
  uint8_t v34 = 190ull;
  uint8_t v35 = 191ull;
  auto v36 = std::array<uint8_t, 32>{
      std::move(v4),  std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),
      std::move(v9),  std::move(v10), std::move(v11), std::move(v12), std::move(v13),
      std::move(v14), std::move(v15), std::move(v16), std::move(v17), std::move(v18),
      std::move(v19), std::move(v20), std::move(v21), std::move(v22), std::move(v23),
      std::move(v24), std::move(v25), std::move(v26), std::move(v27), std::move(v28),
      std::move(v29), std::move(v30), std::move(v31), std::move(v32), std::move(v33),
      std::move(v34), std::move(v35)};
  v3.set_variant(std::move(v36));
  v1.the_union = std::move(v3);

  uint32_t v37 = 134678021ull;
  v1.after = std::move(v37);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
      0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb,
      0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich4Case1_V1_Encode) {
  conformance::Sandwich4 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize36Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  uint8_t v10 = 166ull;
  uint8_t v11 = 167ull;
  uint8_t v12 = 168ull;
  uint8_t v13 = 169ull;
  uint8_t v14 = 170ull;
  uint8_t v15 = 171ull;
  uint8_t v16 = 172ull;
  uint8_t v17 = 173ull;
  uint8_t v18 = 174ull;
  uint8_t v19 = 175ull;
  uint8_t v20 = 176ull;
  uint8_t v21 = 177ull;
  uint8_t v22 = 178ull;
  uint8_t v23 = 179ull;
  uint8_t v24 = 180ull;
  uint8_t v25 = 181ull;
  uint8_t v26 = 182ull;
  uint8_t v27 = 183ull;
  uint8_t v28 = 184ull;
  uint8_t v29 = 185ull;
  uint8_t v30 = 186ull;
  uint8_t v31 = 187ull;
  uint8_t v32 = 188ull;
  uint8_t v33 = 189ull;
  uint8_t v34 = 190ull;
  uint8_t v35 = 191ull;
  auto v36 = std::array<uint8_t, 32>{
      std::move(v4),  std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),
      std::move(v9),  std::move(v10), std::move(v11), std::move(v12), std::move(v13),
      std::move(v14), std::move(v15), std::move(v16), std::move(v17), std::move(v18),
      std::move(v19), std::move(v20), std::move(v21), std::move(v22), std::move(v23),
      std::move(v24), std::move(v25), std::move(v26), std::move(v27), std::move(v28),
      std::move(v29), std::move(v30), std::move(v31), std::move(v32), std::move(v33),
      std::move(v34), std::move(v35)};
  v3.set_variant(std::move(v36));
  v1.the_union = std::move(v3);

  uint32_t v37 = 134678021ull;
  v1.after = std::move(v37);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4,
      0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
      0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich5Case1_Old_Encode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich5Case1_V1_Encode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich5Case2_Old_Encode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize24Align8 v4;

  conformance::StructSize16Align8 v5;

  uint64_t v6 = 12080525177006498208ull;
  v5.f1 = std::move(v6);

  uint64_t v7 = 12659246559711111592ull;
  v5.f2 = std::move(v7);
  v4.set_variant(std::move(v5));
  v3.set_size24align8(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich5Case2_V1_Encode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize24Align8 v4;

  conformance::StructSize16Align8 v5;

  uint64_t v6 = 12080525177006498208ull;
  v5.f1 = std::move(v6);

  uint64_t v7 = 12659246559711111592ull;
  v5.f2 = std::move(v7);
  v4.set_variant(std::move(v5));
  v3.set_size24align8(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case1_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  std::vector<uint8_t> v10;
  v10.push_back(std::move(v4));
  v10.push_back(std::move(v5));
  v10.push_back(std::move(v6));
  v10.push_back(std::move(v7));
  v10.push_back(std::move(v8));
  v10.push_back(std::move(v9));
  v3.set_vector_of_uint8(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case1_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  std::vector<uint8_t> v10;
  v10.push_back(std::move(v4));
  v10.push_back(std::move(v5));
  v10.push_back(std::move(v6));
  v10.push_back(std::move(v7));
  v10.push_back(std::move(v8));
  v10.push_back(std::move(v9));
  v3.set_vector_of_uint8(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case1AbsentVector_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::vector<uint8_t> v4;
  v3.set_vector_of_uint8(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case1AbsentVector_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::vector<uint8_t> v4;
  v3.set_vector_of_uint8(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case2_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::string v4("soft migrations rock!");
  v3.set_s(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case2_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::string v4("soft migrations rock!");
  v3.set_s(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
      0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case3_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 115ull;
  uint8_t v6 = 111ull;
  uint8_t v7 = 102ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 32ull;
  uint8_t v11 = 109ull;
  uint8_t v12 = 105ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  conformance::StructSize3Align1 v14;

  uint8_t v15 = 114ull;
  uint8_t v16 = 97ull;
  uint8_t v17 = 116ull;
  auto v18 = std::array<uint8_t, 3>{std::move(v15), std::move(v16), std::move(v17)};
  v14.three_bytes = std::move(v18);
  std::vector<conformance::StructSize3Align1> v19;
  v19.push_back(std::move(v4));
  v19.push_back(std::move(v9));
  v19.push_back(std::move(v14));
  v3.set_vector_s3_a1(std::move(v19));
  v1.the_union = std::move(v3);

  uint32_t v20 = 134678021ull;
  v1.after = std::move(v20);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f,
      0x66, 0x20, 0x6d, 0x69, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case3_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 115ull;
  uint8_t v6 = 111ull;
  uint8_t v7 = 102ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 32ull;
  uint8_t v11 = 109ull;
  uint8_t v12 = 105ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  conformance::StructSize3Align1 v14;

  uint8_t v15 = 114ull;
  uint8_t v16 = 97ull;
  uint8_t v17 = 116ull;
  auto v18 = std::array<uint8_t, 3>{std::move(v15), std::move(v16), std::move(v17)};
  v14.three_bytes = std::move(v18);
  std::vector<conformance::StructSize3Align1> v19;
  v19.push_back(std::move(v4));
  v19.push_back(std::move(v9));
  v19.push_back(std::move(v14));
  v3.set_vector_s3_a1(std::move(v19));
  v1.the_union = std::move(v3);

  uint32_t v20 = 134678021ull;
  v1.after = std::move(v20);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x20,
      0x6d, 0x69, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case4_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 28531ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 102ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 27936ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 105ull;
  v7.f2 = std::move(v9);
  conformance::StructSize3Align2 v10;

  uint16_t v11 = 24946ull;
  v10.f1 = std::move(v11);

  uint8_t v12 = 116ull;
  v10.f2 = std::move(v12);
  std::vector<conformance::StructSize3Align2> v13;
  v13.push_back(std::move(v4));
  v13.push_back(std::move(v7));
  v13.push_back(std::move(v10));
  v3.set_vector_s3_a2(std::move(v13));
  v1.the_union = std::move(v3);

  uint32_t v14 = 134678021ull;
  v1.after = std::move(v14);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f,
      0x66, 0x00, 0x20, 0x6d, 0x69, 0x00, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case4_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 28531ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 102ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 27936ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 105ull;
  v7.f2 = std::move(v9);
  conformance::StructSize3Align2 v10;

  uint16_t v11 = 24946ull;
  v10.f1 = std::move(v11);

  uint8_t v12 = 116ull;
  v10.f2 = std::move(v12);
  std::vector<conformance::StructSize3Align2> v13;
  v13.push_back(std::move(v4));
  v13.push_back(std::move(v7));
  v13.push_back(std::move(v10));
  v3.set_vector_s3_a2(std::move(v13));
  v1.the_union = std::move(v3);

  uint32_t v14 = 134678021ull;
  v1.after = std::move(v14);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x00,
      0x20, 0x6d, 0x69, 0x00, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case5_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint32_t v4 = 4294967295ull;
  uint32_t v5 = 4294967295ull;
  uint32_t v6 = 4294967295ull;
  std::vector<uint32_t> v7;
  v7.push_back(std::move(v4));
  v7.push_back(std::move(v5));
  v7.push_back(std::move(v6));
  v3.set_handles(std::move(v7));
  v1.the_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case5_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint32_t v4 = 4294967295ull;
  uint32_t v5 = 4294967295ull;
  uint32_t v6 = 4294967295ull;
  std::vector<uint32_t> v7;
  v7.push_back(std::move(v4));
  v7.push_back(std::move(v5));
  v7.push_back(std::move(v6));
  v3.set_handles(std::move(v7));
  v1.the_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case6_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 164ull;
  uint8_t v11 = 165ull;
  uint8_t v12 = 166ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = std::array<conformance::StructSize3Align1, 2>{std::move(v4), std::move(v9)};
  v3.set_array_s3_a1(std::move(v14));
  v1.the_union = std::move(v3);

  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case6_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 164ull;
  uint8_t v11 = 165ull;
  uint8_t v12 = 166ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = std::array<conformance::StructSize3Align1, 2>{std::move(v4), std::move(v9)};
  v3.set_array_s3_a1(std::move(v14));
  v1.the_union = std::move(v3);

  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case7_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 41633ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 163ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 42404ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 166ull;
  v7.f2 = std::move(v9);
  auto v10 = std::array<conformance::StructSize3Align2, 2>{std::move(v4), std::move(v7)};
  v3.set_array_s3_a2(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case7_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 41633ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 163ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 42404ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 166ull;
  v7.f2 = std::move(v9);
  auto v10 = std::array<conformance::StructSize3Align2, 2>{std::move(v4), std::move(v7)};
  v3.set_array_s3_a2(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case8_Old_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  std::vector<conformance::UnionSize8Align4> v6;
  v6.push_back(std::move(v4));
  v3.set_vector_union(std::move(v6));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich6Case8_V1_Encode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  std::vector<conformance::UnionSize8Align4> v6;
  v6.push_back(std::move(v4));
  v3.set_vector_union(std::move(v6));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich7Case1_Old_Encode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::Sandwich1> v3 = std::make_unique<conformance::Sandwich1>();

  uint32_t v4 = 67305985ull;
  v3->before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3->the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3->after = std::move(v7);
  v1.opt_sandwich1 = std::move(v3);

  uint32_t v8 = 606282273ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04,
      0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich7Case1_V1_Encode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::Sandwich1> v3 = std::make_unique<conformance::Sandwich1>();

  uint32_t v4 = 67305985ull;
  v3->before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3->the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3->after = std::move(v7);
  v1.opt_sandwich1 = std::move(v3);

  uint32_t v8 = 606282273ull;
  v1.after = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich7Case2_Old_Encode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  uint32_t v3 = 606282273ull;
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich7Case2_V1_Encode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  uint32_t v3 = 606282273ull;
  v1.after = std::move(v3);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression1_Old_Encode) {
  conformance::Regression1 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  uint8_t v4 = 3ull;
  v1.f3 = std::move(v4);

  uint16_t v5 = 4ull;
  v1.f4 = std::move(v5);

  uint64_t v6 = 5ull;
  v1.f5 = std::move(v6);

  uint8_t v7 = 6ull;
  v1.f6 = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression1_V1_Encode) {
  conformance::Regression1 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  uint8_t v4 = 3ull;
  v1.f3 = std::move(v4);

  uint16_t v5 = 4ull;
  v1.f4 = std::move(v5);

  uint64_t v6 = 5ull;
  v1.f5 = std::move(v6);

  uint8_t v7 = 6ull;
  v1.f6 = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression2_Old_Encode) {
  conformance::Regression2 v1;

  conformance::Regression1 v2;

  uint8_t v3 = 1ull;
  v2.f1 = std::move(v3);

  uint32_t v4 = 2ull;
  v2.f2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.f3 = std::move(v5);

  uint16_t v6 = 4ull;
  v2.f4 = std::move(v6);

  uint64_t v7 = 5ull;
  v2.f5 = std::move(v7);

  uint8_t v8 = 6ull;
  v2.f6 = std::move(v8);
  v1.head = std::move(v2);

  uint8_t v9 = 7ull;
  v1.f7 = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression2_V1_Encode) {
  conformance::Regression2 v1;

  conformance::Regression1 v2;

  uint8_t v3 = 1ull;
  v2.f1 = std::move(v3);

  uint32_t v4 = 2ull;
  v2.f2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.f3 = std::move(v5);

  uint16_t v6 = 4ull;
  v2.f4 = std::move(v6);

  uint64_t v7 = 5ull;
  v2.f5 = std::move(v7);

  uint8_t v8 = 6ull;
  v2.f6 = std::move(v8);
  v1.head = std::move(v2);

  uint8_t v9 = 7ull;
  v1.f7 = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression3Absent_Old_Encode) {
  conformance::Regression3 v1;

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression3Absent_V1_Encode) {
  conformance::Regression3 v1;

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression3Present_Old_Encode) {
  conformance::Regression3 v1;

  std::unique_ptr<conformance::Regression2> v2 = std::make_unique<conformance::Regression2>();

  conformance::Regression1 v3;

  uint8_t v4 = 1ull;
  v3.f1 = std::move(v4);

  uint32_t v5 = 2ull;
  v3.f2 = std::move(v5);

  uint8_t v6 = 3ull;
  v3.f3 = std::move(v6);

  uint16_t v7 = 4ull;
  v3.f4 = std::move(v7);

  uint64_t v8 = 5ull;
  v3.f5 = std::move(v8);

  uint8_t v9 = 6ull;
  v3.f6 = std::move(v9);
  v2->head = std::move(v3);

  uint8_t v10 = 7ull;
  v2->f7 = std::move(v10);
  v1.opt_value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression3Present_V1_Encode) {
  conformance::Regression3 v1;

  std::unique_ptr<conformance::Regression2> v2 = std::make_unique<conformance::Regression2>();

  conformance::Regression1 v3;

  uint8_t v4 = 1ull;
  v3.f1 = std::move(v4);

  uint32_t v5 = 2ull;
  v3.f2 = std::move(v5);

  uint8_t v6 = 3ull;
  v3.f3 = std::move(v6);

  uint16_t v7 = 4ull;
  v3.f4 = std::move(v7);

  uint64_t v8 = 5ull;
  v3.f5 = std::move(v8);

  uint8_t v9 = 6ull;
  v3.f6 = std::move(v9);
  v2->head = std::move(v3);

  uint8_t v10 = 7ull;
  v2->f7 = std::move(v10);
  v1.opt_value = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment1Array_Old_Encode) {
  conformance::Size5Alignment1Array v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  conformance::Size5Alignment1 v16;

  uint8_t v17 = 11ull;
  uint8_t v18 = 12ull;
  uint8_t v19 = 13ull;
  uint8_t v20 = 14ull;
  uint8_t v21 = 15ull;
  auto v22 = std::array<uint8_t, 5>{std::move(v17), std::move(v18), std::move(v19), std::move(v20),
                                    std::move(v21)};
  v16.data = std::move(v22);
  auto v23 =
      std::array<conformance::Size5Alignment1, 3>{std::move(v2), std::move(v9), std::move(v16)};
  v1.a = std::move(v23);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment1Array_V1_Encode) {
  conformance::Size5Alignment1Array v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  conformance::Size5Alignment1 v16;

  uint8_t v17 = 11ull;
  uint8_t v18 = 12ull;
  uint8_t v19 = 13ull;
  uint8_t v20 = 14ull;
  uint8_t v21 = 15ull;
  auto v22 = std::array<uint8_t, 5>{std::move(v17), std::move(v18), std::move(v19), std::move(v20),
                                    std::move(v21)};
  v16.data = std::move(v22);
  auto v23 =
      std::array<conformance::Size5Alignment1, 3>{std::move(v2), std::move(v9), std::move(v16)};
  v1.a = std::move(v23);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
      0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment4Array_Old_Encode) {
  conformance::Size5Alignment4Array v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  conformance::Size5Alignment4 v8;

  uint32_t v9 = 235736075ull;
  v8.four = std::move(v9);

  uint8_t v10 = 15ull;
  v8.one = std::move(v10);
  auto v11 =
      std::array<conformance::Size5Alignment4, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.a = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09,
      0x0a, 0x00, 0x00, 0x00, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment4Array_V1_Encode) {
  conformance::Size5Alignment4Array v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  conformance::Size5Alignment4 v8;

  uint32_t v9 = 235736075ull;
  v8.four = std::move(v9);

  uint8_t v10 = 15ull;
  v8.one = std::move(v10);
  auto v11 =
      std::array<conformance::Size5Alignment4, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.a = std::move(v11);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09,
      0x0a, 0x00, 0x00, 0x00, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment1Vector_Old_Encode) {
  conformance::Size5Alignment1Vector v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  std::vector<conformance::Size5Alignment1> v16;
  v16.push_back(std::move(v2));
  v16.push_back(std::move(v9));
  v1.v = std::move(v16);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment1Vector_V1_Encode) {
  conformance::Size5Alignment1Vector v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  std::vector<conformance::Size5Alignment1> v16;
  v16.push_back(std::move(v2));
  v16.push_back(std::move(v9));
  v1.v = std::move(v16);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment4Vector_Old_Encode) {
  conformance::Size5Alignment4Vector v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  std::vector<conformance::Size5Alignment4> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v5));
  v1.v = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00,
      0x00, 0x00, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Size5Alignment4Vector_V1_Encode) {
  conformance::Size5Alignment4Vector v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  std::vector<conformance::Size5Alignment4> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v5));
  v1.v = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00,
      0x00, 0x00, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_StructWithReservedSandwich_Old_Encode) {
  conformance::Table_StructWithReservedSandwichStruct v1;

  conformance::Table_StructWithReservedSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 9ull;
  uint8_t v5 = 10ull;
  uint8_t v6 = 11ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::StructSize3Align1 v8;

  uint8_t v9 = 25ull;
  uint8_t v10 = 26ull;
  uint8_t v11 = 27ull;
  auto v12 = std::array<uint8_t, 3>{std::move(v9), std::move(v10), std::move(v11)};
  v8.three_bytes = std::move(v12);
  v2.set_s2(std::move(v8));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_StructWithReservedSandwich_V1_Encode) {
  conformance::Table_StructWithReservedSandwichStruct v1;

  conformance::Table_StructWithReservedSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 9ull;
  uint8_t v5 = 10ull;
  uint8_t v6 = 11ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::StructSize3Align1 v8;

  uint8_t v9 = 25ull;
  uint8_t v10 = 26ull;
  uint8_t v11 = 27ull;
  auto v12 = std::array<uint8_t, 3>{std::move(v9), std::move(v10), std::move(v11)};
  v8.three_bytes = std::move(v12);
  v2.set_s2(std::move(v8));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_StructWithUint32Sandwich_Old_Encode) {
  conformance::Table_StructWithUint32SandwichStruct v1;

  conformance::Table_StructWithUint32Sandwich v2;

  uint32_t v3 = 67305985ull;
  v2.set_i(std::move(v3));

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v2.set_s1(std::move(v4));

  conformance::StructSize3Align1 v9;

  uint8_t v10 = 25ull;
  uint8_t v11 = 26ull;
  uint8_t v12 = 27ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  v2.set_s2(std::move(v9));

  uint32_t v14 = 218893066ull;
  v2.set_i2(std::move(v14));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1a,
      0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_StructWithUint32Sandwich_V1_Encode) {
  conformance::Table_StructWithUint32SandwichStruct v1;

  conformance::Table_StructWithUint32Sandwich v2;

  uint32_t v3 = 67305985ull;
  v2.set_i(std::move(v3));

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v2.set_s1(std::move(v4));

  conformance::StructSize3Align1 v9;

  uint8_t v10 = 25ull;
  uint8_t v11 = 26ull;
  uint8_t v12 = 27ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  v2.set_s2(std::move(v9));

  uint32_t v14 = 218893066ull;
  v2.set_i2(std::move(v14));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1a,
      0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_UnionWithVector_ReservedSandwich_Old_Encode) {
  conformance::Table_UnionWithVector_ReservedSandwichStruct v1;

  conformance::Table_UnionWithVector_ReservedSandwich v2;

  conformance::UnionWithVector v3;

  std::string v4("hello");
  v3.set_s(std::move(v4));
  v2.set_uv(std::move(v3));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_UnionWithVector_ReservedSandwich_V1_Encode) {
  conformance::Table_UnionWithVector_ReservedSandwichStruct v1;

  conformance::Table_UnionWithVector_ReservedSandwich v2;

  conformance::UnionWithVector v3;

  std::string v4("hello");
  v3.set_s(std::move(v4));
  v2.set_uv(std::move(v3));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_UnionWithVector_StructSandwich_Old_Encode) {
  conformance::Table_UnionWithVector_StructSandwichStruct v1;

  conformance::Table_UnionWithVector_StructSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::UnionWithVector v8;

  std::string v9("hello");
  v8.set_s(std::move(v9));
  v2.set_uv(std::move(v8));

  conformance::StructSize3Align1 v10;

  uint8_t v11 = 4ull;
  uint8_t v12 = 5ull;
  uint8_t v13 = 6ull;
  auto v14 = std::array<uint8_t, 3>{std::move(v11), std::move(v12), std::move(v13)};
  v10.three_bytes = std::move(v14);
  v2.set_s2(std::move(v10));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65,
      0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Table_UnionWithVector_StructSandwich_V1_Encode) {
  conformance::Table_UnionWithVector_StructSandwichStruct v1;

  conformance::Table_UnionWithVector_StructSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::UnionWithVector v8;

  std::string v9("hello");
  v8.set_s(std::move(v9));
  v2.set_uv(std::move(v8));

  conformance::StructSize3Align1 v10;

  uint8_t v11 = 4ull;
  uint8_t v12 = 5ull;
  uint8_t v13 = 6ull;
  auto v14 = std::array<uint8_t, 3>{std::move(v11), std::move(v12), std::move(v13)};
  v10.three_bytes = std::move(v14);
  v2.set_s2(std::move(v10));
  v1.table = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,
      0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, XUnionWithStruct_Old_Encode) {
  conformance::XUnionWithStructStruct v1;

  conformance::XUnionWithStruct v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s(std::move(v3));
  v1.xu = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, XUnionWithStruct_V1_Encode) {
  conformance::XUnionWithStructStruct v1;

  conformance::XUnionWithStruct v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s(std::move(v3));
  v1.xu = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, ArrayStruct_Old_Encode) {
  conformance::ArrayStruct v1;

  conformance::StringUnion v2;

  std::string v3("one");
  v2.set_s(std::move(v3));
  conformance::StringUnion v4;

  std::string v5("two");
  v4.set_s(std::move(v5));
  conformance::StringUnion v6;

  std::string v7("three");
  v6.set_s(std::move(v7));
  auto v8 = std::array<conformance::StringUnion, 3>{std::move(v2), std::move(v4), std::move(v6)};
  v1.unions = std::move(v8);

  std::unique_ptr<conformance::StringUnion> v9 = std::make_unique<conformance::StringUnion>();

  std::string v10("four");
  v9->set_s(std::move(v10));
  std::unique_ptr<conformance::StringUnion> v11 = std::make_unique<conformance::StringUnion>();

  std::string v12("five");
  v11->set_s(std::move(v12));
  std::unique_ptr<conformance::StringUnion> v13 = std::make_unique<conformance::StringUnion>();

  std::string v14("six");
  v13->set_s(std::move(v14));
  auto v15 = std::array<std::unique_ptr<conformance::StringUnion>, 3>{std::move(v9), std::move(v11),
                                                                      std::move(v13)};
  v1.optional_unions = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74,
      0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x68, 0x72, 0x65, 0x65, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x6f, 0x75, 0x72, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x69, 0x76, 0x65,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x69,
      0x78, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, ArrayStruct_V1_Encode) {
  conformance::ArrayStruct v1;

  conformance::StringUnion v2;

  std::string v3("one");
  v2.set_s(std::move(v3));
  conformance::StringUnion v4;

  std::string v5("two");
  v4.set_s(std::move(v5));
  conformance::StringUnion v6;

  std::string v7("three");
  v6.set_s(std::move(v7));
  auto v8 = std::array<conformance::StringUnion, 3>{std::move(v2), std::move(v4), std::move(v6)};
  v1.unions = std::move(v8);

  std::unique_ptr<conformance::StringUnion> v9 = std::make_unique<conformance::StringUnion>();

  std::string v10("four");
  v9->set_s(std::move(v10));
  std::unique_ptr<conformance::StringUnion> v11 = std::make_unique<conformance::StringUnion>();

  std::string v12("five");
  v11->set_s(std::move(v12));
  std::unique_ptr<conformance::StringUnion> v13 = std::make_unique<conformance::StringUnion>();

  std::string v14("six");
  v13->set_s(std::move(v14));
  auto v15 = std::array<std::unique_ptr<conformance::StringUnion>, 3>{std::move(v9), std::move(v11),
                                                                      std::move(v13)};
  v1.optional_unions = std::move(v15);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0x6e, 0x65, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x74, 0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x74, 0x68,
      0x72, 0x65, 0x65, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x6f, 0x75, 0x72, 0x00, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x66, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x69, 0x78, 0x00, 0x00,
      0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, TransformerEmptyStruct_Old_Encode) {
  conformance::TransformerEmptyStruct v1;

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, TransformerEmptyStruct_V1_Encode) {
  conformance::TransformerEmptyStruct v1;

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, EmptyStructUnion_Old_Encode) {
  conformance::EmptyStructUnionStruct v1;

  conformance::EmptyStructUnion v2;

  conformance::TransformerEmptyStruct v3;
  v2.set_es(std::move(v3));
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, EmptyStructUnion_V1_Encode) {
  conformance::EmptyStructUnionStruct v1;

  conformance::EmptyStructUnion v2;

  conformance::TransformerEmptyStruct v3;
  v2.set_es(std::move(v3));
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, NoCodingTablesStressor_Old_Encode) {
  conformance::NoCodingTablesStressor v1;

  uint64_t v2 = 1229782938247303441ull;
  v1.f1 = std::move(v2);

  uint64_t v3 = 2459565876494606882ull;
  v1.f2 = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 51ull;
  uint8_t v6 = 51ull;
  uint8_t v7 = 51ull;
  uint8_t v8 = 51ull;
  uint8_t v9 = 51ull;
  uint8_t v10 = 51ull;
  uint8_t v11 = 51ull;
  uint8_t v12 = 51ull;
  uint8_t v13 = 51ull;
  uint8_t v14 = 51ull;
  uint8_t v15 = 51ull;
  uint8_t v16 = 51ull;
  uint8_t v17 = 51ull;
  uint8_t v18 = 51ull;
  uint8_t v19 = 51ull;
  uint8_t v20 = 51ull;
  uint8_t v21 = 51ull;
  uint8_t v22 = 51ull;
  uint8_t v23 = 51ull;
  uint8_t v24 = 51ull;
  uint8_t v25 = 51ull;
  uint8_t v26 = 51ull;
  uint8_t v27 = 51ull;
  uint8_t v28 = 51ull;
  uint8_t v29 = 51ull;
  uint8_t v30 = 51ull;
  uint8_t v31 = 51ull;
  uint8_t v32 = 51ull;
  uint8_t v33 = 51ull;
  uint8_t v34 = 51ull;
  uint8_t v35 = 51ull;
  uint8_t v36 = 51ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v1.u1 = std::move(v4);

  uint64_t v38 = 4919131752989213764ull;
  v1.f3 = std::move(v38);

  uint64_t v39 = 6148914691236517205ull;
  v1.f4 = std::move(v39);

  conformance::UnionSize36Align4 v40;

  uint8_t v41 = 102ull;
  uint8_t v42 = 102ull;
  uint8_t v43 = 102ull;
  uint8_t v44 = 102ull;
  uint8_t v45 = 102ull;
  uint8_t v46 = 102ull;
  uint8_t v47 = 102ull;
  uint8_t v48 = 102ull;
  uint8_t v49 = 102ull;
  uint8_t v50 = 102ull;
  uint8_t v51 = 102ull;
  uint8_t v52 = 102ull;
  uint8_t v53 = 102ull;
  uint8_t v54 = 102ull;
  uint8_t v55 = 102ull;
  uint8_t v56 = 102ull;
  uint8_t v57 = 102ull;
  uint8_t v58 = 102ull;
  uint8_t v59 = 102ull;
  uint8_t v60 = 102ull;
  uint8_t v61 = 102ull;
  uint8_t v62 = 102ull;
  uint8_t v63 = 102ull;
  uint8_t v64 = 102ull;
  uint8_t v65 = 102ull;
  uint8_t v66 = 102ull;
  uint8_t v67 = 102ull;
  uint8_t v68 = 102ull;
  uint8_t v69 = 102ull;
  uint8_t v70 = 102ull;
  uint8_t v71 = 102ull;
  uint8_t v72 = 102ull;
  auto v73 = std::array<uint8_t, 32>{
      std::move(v41), std::move(v42), std::move(v43), std::move(v44), std::move(v45),
      std::move(v46), std::move(v47), std::move(v48), std::move(v49), std::move(v50),
      std::move(v51), std::move(v52), std::move(v53), std::move(v54), std::move(v55),
      std::move(v56), std::move(v57), std::move(v58), std::move(v59), std::move(v60),
      std::move(v61), std::move(v62), std::move(v63), std::move(v64), std::move(v65),
      std::move(v66), std::move(v67), std::move(v68), std::move(v69), std::move(v70),
      std::move(v71), std::move(v72)};
  v40.set_variant(std::move(v73));
  v1.u2 = std::move(v40);

  uint64_t v74 = 8608480567731124087ull;
  v1.f5 = std::move(v74);

  uint64_t v75 = 9838263505978427528ull;
  v1.f6 = std::move(v75);

  conformance::UnionSize36Align4 v76;

  uint8_t v77 = 153ull;
  uint8_t v78 = 153ull;
  uint8_t v79 = 153ull;
  uint8_t v80 = 153ull;
  uint8_t v81 = 153ull;
  uint8_t v82 = 153ull;
  uint8_t v83 = 153ull;
  uint8_t v84 = 153ull;
  uint8_t v85 = 153ull;
  uint8_t v86 = 153ull;
  uint8_t v87 = 153ull;
  uint8_t v88 = 153ull;
  uint8_t v89 = 153ull;
  uint8_t v90 = 153ull;
  uint8_t v91 = 153ull;
  uint8_t v92 = 153ull;
  uint8_t v93 = 153ull;
  uint8_t v94 = 153ull;
  uint8_t v95 = 153ull;
  uint8_t v96 = 153ull;
  uint8_t v97 = 153ull;
  uint8_t v98 = 153ull;
  uint8_t v99 = 153ull;
  uint8_t v100 = 153ull;
  uint8_t v101 = 153ull;
  uint8_t v102 = 153ull;
  uint8_t v103 = 153ull;
  uint8_t v104 = 153ull;
  uint8_t v105 = 153ull;
  uint8_t v106 = 153ull;
  uint8_t v107 = 153ull;
  uint8_t v108 = 153ull;
  auto v109 = std::array<uint8_t, 32>{
      std::move(v77),  std::move(v78),  std::move(v79),  std::move(v80),  std::move(v81),
      std::move(v82),  std::move(v83),  std::move(v84),  std::move(v85),  std::move(v86),
      std::move(v87),  std::move(v88),  std::move(v89),  std::move(v90),  std::move(v91),
      std::move(v92),  std::move(v93),  std::move(v94),  std::move(v95),  std::move(v96),
      std::move(v97),  std::move(v98),  std::move(v99),  std::move(v100), std::move(v101),
      std::move(v102), std::move(v103), std::move(v104), std::move(v105), std::move(v106),
      std::move(v107), std::move(v108)};
  v76.set_variant(std::move(v109));
  v1.u3 = std::move(v76);

  uint64_t v110 = 12297829382473034410ull;
  v1.f7 = std::move(v110);

  std::unique_ptr<conformance::Size8Align8> v111 = std::make_unique<conformance::Size8Align8>();

  uint64_t v112 = 17216961135462248174ull;
  v111->data = std::move(v112);
  v1.p1 = std::move(v111);

  uint64_t v113 = 13527612320720337851ull;
  v1.f8 = std::move(v113);

  std::unique_ptr<conformance::Size8Align8> v114 = std::make_unique<conformance::Size8Align8>();

  uint64_t v115 = 17216961135462248174ull;
  v114->data = std::move(v115);
  v1.p2 = std::move(v114);

  uint64_t v116 = 15987178197214944733ull;
  v1.f9 = std::move(v116);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
      0x22, 0x03, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44,
      0x44, 0x44, 0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x03, 0x00, 0x00,
      0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
      0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x03, 0x00, 0x00, 0x00, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x00,
      0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xee, 0xee,
      0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, NoCodingTablesStressor_V1_Encode) {
  conformance::NoCodingTablesStressor v1;

  uint64_t v2 = 1229782938247303441ull;
  v1.f1 = std::move(v2);

  uint64_t v3 = 2459565876494606882ull;
  v1.f2 = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 51ull;
  uint8_t v6 = 51ull;
  uint8_t v7 = 51ull;
  uint8_t v8 = 51ull;
  uint8_t v9 = 51ull;
  uint8_t v10 = 51ull;
  uint8_t v11 = 51ull;
  uint8_t v12 = 51ull;
  uint8_t v13 = 51ull;
  uint8_t v14 = 51ull;
  uint8_t v15 = 51ull;
  uint8_t v16 = 51ull;
  uint8_t v17 = 51ull;
  uint8_t v18 = 51ull;
  uint8_t v19 = 51ull;
  uint8_t v20 = 51ull;
  uint8_t v21 = 51ull;
  uint8_t v22 = 51ull;
  uint8_t v23 = 51ull;
  uint8_t v24 = 51ull;
  uint8_t v25 = 51ull;
  uint8_t v26 = 51ull;
  uint8_t v27 = 51ull;
  uint8_t v28 = 51ull;
  uint8_t v29 = 51ull;
  uint8_t v30 = 51ull;
  uint8_t v31 = 51ull;
  uint8_t v32 = 51ull;
  uint8_t v33 = 51ull;
  uint8_t v34 = 51ull;
  uint8_t v35 = 51ull;
  uint8_t v36 = 51ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v1.u1 = std::move(v4);

  uint64_t v38 = 4919131752989213764ull;
  v1.f3 = std::move(v38);

  uint64_t v39 = 6148914691236517205ull;
  v1.f4 = std::move(v39);

  conformance::UnionSize36Align4 v40;

  uint8_t v41 = 102ull;
  uint8_t v42 = 102ull;
  uint8_t v43 = 102ull;
  uint8_t v44 = 102ull;
  uint8_t v45 = 102ull;
  uint8_t v46 = 102ull;
  uint8_t v47 = 102ull;
  uint8_t v48 = 102ull;
  uint8_t v49 = 102ull;
  uint8_t v50 = 102ull;
  uint8_t v51 = 102ull;
  uint8_t v52 = 102ull;
  uint8_t v53 = 102ull;
  uint8_t v54 = 102ull;
  uint8_t v55 = 102ull;
  uint8_t v56 = 102ull;
  uint8_t v57 = 102ull;
  uint8_t v58 = 102ull;
  uint8_t v59 = 102ull;
  uint8_t v60 = 102ull;
  uint8_t v61 = 102ull;
  uint8_t v62 = 102ull;
  uint8_t v63 = 102ull;
  uint8_t v64 = 102ull;
  uint8_t v65 = 102ull;
  uint8_t v66 = 102ull;
  uint8_t v67 = 102ull;
  uint8_t v68 = 102ull;
  uint8_t v69 = 102ull;
  uint8_t v70 = 102ull;
  uint8_t v71 = 102ull;
  uint8_t v72 = 102ull;
  auto v73 = std::array<uint8_t, 32>{
      std::move(v41), std::move(v42), std::move(v43), std::move(v44), std::move(v45),
      std::move(v46), std::move(v47), std::move(v48), std::move(v49), std::move(v50),
      std::move(v51), std::move(v52), std::move(v53), std::move(v54), std::move(v55),
      std::move(v56), std::move(v57), std::move(v58), std::move(v59), std::move(v60),
      std::move(v61), std::move(v62), std::move(v63), std::move(v64), std::move(v65),
      std::move(v66), std::move(v67), std::move(v68), std::move(v69), std::move(v70),
      std::move(v71), std::move(v72)};
  v40.set_variant(std::move(v73));
  v1.u2 = std::move(v40);

  uint64_t v74 = 8608480567731124087ull;
  v1.f5 = std::move(v74);

  uint64_t v75 = 9838263505978427528ull;
  v1.f6 = std::move(v75);

  conformance::UnionSize36Align4 v76;

  uint8_t v77 = 153ull;
  uint8_t v78 = 153ull;
  uint8_t v79 = 153ull;
  uint8_t v80 = 153ull;
  uint8_t v81 = 153ull;
  uint8_t v82 = 153ull;
  uint8_t v83 = 153ull;
  uint8_t v84 = 153ull;
  uint8_t v85 = 153ull;
  uint8_t v86 = 153ull;
  uint8_t v87 = 153ull;
  uint8_t v88 = 153ull;
  uint8_t v89 = 153ull;
  uint8_t v90 = 153ull;
  uint8_t v91 = 153ull;
  uint8_t v92 = 153ull;
  uint8_t v93 = 153ull;
  uint8_t v94 = 153ull;
  uint8_t v95 = 153ull;
  uint8_t v96 = 153ull;
  uint8_t v97 = 153ull;
  uint8_t v98 = 153ull;
  uint8_t v99 = 153ull;
  uint8_t v100 = 153ull;
  uint8_t v101 = 153ull;
  uint8_t v102 = 153ull;
  uint8_t v103 = 153ull;
  uint8_t v104 = 153ull;
  uint8_t v105 = 153ull;
  uint8_t v106 = 153ull;
  uint8_t v107 = 153ull;
  uint8_t v108 = 153ull;
  auto v109 = std::array<uint8_t, 32>{
      std::move(v77),  std::move(v78),  std::move(v79),  std::move(v80),  std::move(v81),
      std::move(v82),  std::move(v83),  std::move(v84),  std::move(v85),  std::move(v86),
      std::move(v87),  std::move(v88),  std::move(v89),  std::move(v90),  std::move(v91),
      std::move(v92),  std::move(v93),  std::move(v94),  std::move(v95),  std::move(v96),
      std::move(v97),  std::move(v98),  std::move(v99),  std::move(v100), std::move(v101),
      std::move(v102), std::move(v103), std::move(v104), std::move(v105), std::move(v106),
      std::move(v107), std::move(v108)};
  v76.set_variant(std::move(v109));
  v1.u3 = std::move(v76);

  uint64_t v110 = 12297829382473034410ull;
  v1.f7 = std::move(v110);

  std::unique_ptr<conformance::Size8Align8> v111 = std::make_unique<conformance::Size8Align8>();

  uint64_t v112 = 17216961135462248174ull;
  v111->data = std::move(v112);
  v1.p1 = std::move(v111);

  uint64_t v113 = 13527612320720337851ull;
  v1.f8 = std::move(v113);

  std::unique_ptr<conformance::Size8Align8> v114 = std::make_unique<conformance::Size8Align8>();

  uint64_t v115 = 17216961135462248174ull;
  v114->data = std::move(v115);
  v1.p2 = std::move(v114);

  uint64_t v116 = 15987178197214944733ull;
  v1.f9 = std::move(v116);

  const auto expected = std::vector<uint8_t>{
      0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
      0x22, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x44, 0x44, 0x44, 0x44, 0x44,
      0x44, 0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x88, 0x88,
      0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,
      0xee, 0xee,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OutOfLineSandwich1Case1_Old_Encode) {
  conformance::OutOfLineSandwich1 v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1 v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3.the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67,
      0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x05, 0x06, 0x07, 0x08, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
      0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OutOfLineSandwich1Case1_V1_Encode) {
  conformance::OutOfLineSandwich1 v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1 v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3.the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05,
      0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,
      0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
      0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionPresent_Old_Encode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  std::unique_ptr<conformance::UnionSize8Align4> v5 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v6 = 202050057ull;
  v5->set_variant(std::move(v6));
  v3.opt_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1WithOptUnion> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x68,
      0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
      0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionPresent_V1_Encode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  std::unique_ptr<conformance::UnionSize8Align4> v5 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v6 = 202050057ull;
  v5->set_variant(std::move(v6));
  v3.opt_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1WithOptUnion> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05,
      0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,
      0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
      0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionAbsent_Old_Encode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  uint32_t v5 = 134678021ull;
  v3.after = std::move(v5);
  std::vector<conformance::Sandwich1WithOptUnion> v6;
  v6.push_back(std::move(v3));
  v1.v = std::move(v6);

  std::string v7("hard transitions suck!");
  v1.after = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e,
      0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionAbsent_V1_Encode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  uint32_t v5 = 134678021ull;
  v3.after = std::move(v5);
  std::vector<conformance::Sandwich1WithOptUnion> v6;
  v6.push_back(std::move(v3));
  v1.v = std::move(v6);

  std::string v7("hard transitions suck!");
  v1.after = std::move(v7);

  const auto expected = std::vector<uint8_t>{
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67,
      0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
      0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression4_Old_Encode) {
  conformance::Regression4 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v1.s1 = std::move(v4);

  uint8_t v9 = 3ull;
  v1.f3 = std::move(v9);

  uint16_t v10 = 4ull;
  v1.f4 = std::move(v10);

  uint64_t v11 = 5ull;
  v1.f5 = std::move(v11);

  uint8_t v12 = 6ull;
  v1.f6 = std::move(v12);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x03, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Regression4_V1_Encode) {
  conformance::Regression4 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v1.s1 = std::move(v4);

  uint8_t v9 = 3ull;
  v1.f3 = std::move(v9);

  uint16_t v10 = 4ull;
  v1.f4 = std::move(v10);

  uint64_t v11 = 5ull;
  v1.f5 = std::move(v11);

  uint8_t v12 = 6ull;
  v1.f6 = std::move(v12);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x03, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich4Align8_Old_Encode) {
  conformance::Sandwich4Align8 v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  uint64_t v39 = 1157159078456920585ull;
  v1.alignment8_enforcement = std::move(v39);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
      0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06,
      0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich4Align8_V1_Encode) {
  conformance::Sandwich4Align8 v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  uint64_t v39 = 1157159078456920585ull;
  v1.alignment8_enforcement = std::move(v39);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a,
      0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
      0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5,
      0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich4Align8WithPointer_Old_Encode) {
  conformance::Sandwich4Align8WithPointer v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  std::unique_ptr<conformance::Size8Align8> v39 = std::make_unique<conformance::Size8Align8>();

  uint64_t v40 = 1157159078456920585ull;
  v39->data = std::move(v40);
  v1.alignment8_enforcement = std::move(v39);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4,
      0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1,
      0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe,
      0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich4Align8WithPointer_V1_Encode) {
  conformance::Sandwich4Align8WithPointer v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  std::unique_ptr<conformance::Size8Align8> v39 = std::make_unique<conformance::Size8Align8>();

  uint64_t v40 = 1157159078456920585ull;
  v39->data = std::move(v40);
  v1.alignment8_enforcement = std::move(v39);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
      0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich8Case1_Old_Encode) {
  conformance::Sandwich8 v1;

  uint64_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich8Case1_V1_Encode) {
  conformance::Sandwich8 v1;

  uint64_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich9Case1_Old_Encode) {
  conformance::Sandwich9 v1;

  uint16_t v2 = 513ull;
  v1.before = std::move(v2);

  conformance::UnionWithVectorOfVectors v3;

  std::unique_ptr<conformance::StructSize3Align1> v4 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v5 = 16ull;
  uint8_t v6 = 17ull;
  uint8_t v7 = 18ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4->three_bytes = std::move(v8);
  std::unique_ptr<conformance::StructSize3Align1> v9 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v10 = 19ull;
  uint8_t v11 = 20ull;
  uint8_t v12 = 21ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9->three_bytes = std::move(v13);
  std::vector<std::unique_ptr<conformance::StructSize3Align1>> v14;
  v14.push_back(std::move(v4));
  v14.push_back(std::move(v9));
  std::vector<std::vector<std::unique_ptr<conformance::StructSize3Align1>>> v15;
  v15.push_back(std::move(v14));
  v3.set_v(std::move(v15));
  v1.the_union = std::move(v3);

  uint16_t v16 = 4625ull;
  v1.after = std::move(v16);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0x11, 0x12,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, Sandwich9Case1_V1_Encode) {
  conformance::Sandwich9 v1;

  uint16_t v2 = 513ull;
  v1.before = std::move(v2);

  conformance::UnionWithVectorOfVectors v3;

  std::unique_ptr<conformance::StructSize3Align1> v4 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v5 = 16ull;
  uint8_t v6 = 17ull;
  uint8_t v7 = 18ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4->three_bytes = std::move(v8);
  std::unique_ptr<conformance::StructSize3Align1> v9 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v10 = 19ull;
  uint8_t v11 = 20ull;
  uint8_t v12 = 21ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9->three_bytes = std::move(v13);
  std::vector<std::unique_ptr<conformance::StructSize3Align1>> v14;
  v14.push_back(std::move(v4));
  v14.push_back(std::move(v9));
  std::vector<std::vector<std::unique_ptr<conformance::StructSize3Align1>>> v15;
  v15.push_back(std::move(v14));
  v3.set_v(std::move(v15));
  v1.the_union = std::move(v3);

  uint16_t v16 = 4625ull;
  v1.after = std::move(v16);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0x11,
      0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, SimpleTableArrayStruct_Old_Encode) {
  conformance::SimpleTableArrayStruct v1;

  conformance::TransformerSimpleTable v2;

  uint32_t v3 = 2745344416ull;
  v2.set_value(std::move(v3));
  conformance::TransformerSimpleTable v4;

  uint32_t v5 = 3014832560ull;
  v4.set_value(std::move(v5));
  auto v6 = std::array<conformance::TransformerSimpleTable, 2>{std::move(v2), std::move(v4)};
  v1.the_array = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb0, 0xb1, 0xb2, 0xb3, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, SimpleTableArrayStruct_V1_Encode) {
  conformance::SimpleTableArrayStruct v1;

  conformance::TransformerSimpleTable v2;

  uint32_t v3 = 2745344416ull;
  v2.set_value(std::move(v3));
  conformance::TransformerSimpleTable v4;

  uint32_t v5 = 3014832560ull;
  v4.set_value(std::move(v5));
  auto v6 = std::array<conformance::TransformerSimpleTable, 2>{std::move(v2), std::move(v4)};
  v1.the_array = std::move(v6);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xb0, 0xb1, 0xb2, 0xb3, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, StringUnionVector_Old_Encode) {
  conformance::StringUnionVector v1;

  std::unique_ptr<conformance::StringUnion> v2 = std::make_unique<conformance::StringUnion>();

  std::string v3("hello");
  v2->set_s(std::move(v3));
  std::unique_ptr<conformance::StringUnion> v4 = std::make_unique<conformance::StringUnion>();

  uint8_t v5 = 170ull;
  v4->set_u8(std::move(v5));
  std::unique_ptr<conformance::StringUnion> v6 = std::make_unique<conformance::StringUnion>();

  uint8_t v7 = 187ull;
  v6->set_u8(std::move(v7));
  std::vector<std::unique_ptr<conformance::StringUnion>> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v4));
  v8.push_back(std::move(v6));
  v1.the_vector = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, StringUnionVector_V1_Encode) {
  conformance::StringUnionVector v1;

  std::unique_ptr<conformance::StringUnion> v2 = std::make_unique<conformance::StringUnion>();

  std::string v3("hello");
  v2->set_s(std::move(v3));
  std::unique_ptr<conformance::StringUnion> v4 = std::make_unique<conformance::StringUnion>();

  uint8_t v5 = 170ull;
  v4->set_u8(std::move(v5));
  std::unique_ptr<conformance::StringUnion> v6 = std::make_unique<conformance::StringUnion>();

  uint8_t v7 = 187ull;
  v6->set_u8(std::move(v7));
  std::vector<std::unique_ptr<conformance::StringUnion>> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v4));
  v8.push_back(std::move(v6));
  v1.the_vector = std::move(v8);

  const auto expected = std::vector<uint8_t>{
      0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68,
      0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, CreateComponentRequest_Old_Encode) {
  conformance::CreateComponentRequest v1;

  conformance::LaunchInfo v2;

  std::string v3(
      "fuchsia-pkg://fuchsia.com/fidl_compatibility_test_server_rust_write_xunion#meta/"
      "fidl_compatibility_test_server_rust_write_xunion.cmx");
  v2.url = std::move(v3);

  uint32_t v4 = 4294967295ull;
  v2.directory_request = std::move(v4);
  v1.launch_info = std::move(v2);

  uint32_t v5 = 4294967295ull;
  v1.controller = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2d, 0x70, 0x6b,
      0x67, 0x3a, 0x2f, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
      0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
      0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
      0x72, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75,
      0x6e, 0x69, 0x6f, 0x6e, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f,
      0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
      0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x73, 0x74,
      0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
      0x6d, 0x78, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, CreateComponentRequest_V1_Encode) {
  conformance::CreateComponentRequest v1;

  conformance::LaunchInfo v2;

  std::string v3(
      "fuchsia-pkg://fuchsia.com/fidl_compatibility_test_server_rust_write_xunion#meta/"
      "fidl_compatibility_test_server_rust_write_xunion.cmx");
  v2.url = std::move(v3);

  uint32_t v4 = 4294967295ull;
  v2.directory_request = std::move(v4);
  v1.launch_info = std::move(v2);

  uint32_t v5 = 4294967295ull;
  v1.controller = std::move(v5);

  const auto expected = std::vector<uint8_t>{
      0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0x00, 0x00, 0x00, 0x00, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2d, 0x70, 0x6b,
      0x67, 0x3a, 0x2f, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d,
      0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
      0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
      0x72, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75,
      0x6e, 0x69, 0x6f, 0x6e, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f,
      0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74,
      0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x73, 0x74,
      0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
      0x6d, 0x78, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, UnionWithBoundString_Old_Encode) {
  conformance::UnionWithBoundStringStruct v1;

  conformance::UnionWithBoundString v2;

  std::string v3("abcd");
  v2.set_boundFiveStr(std::move(v3));
  v1.v = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x61, 0x62, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, UnionWithBoundString_V1_Encode) {
  conformance::UnionWithBoundStringStruct v1;

  conformance::UnionWithBoundString v2;

  std::string v3("abcd");
  v2.set_boundFiveStr(std::move(v3));
  v1.v = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x61, 0x62, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, UnionMigration_SingleVariant_Old_Encode) {
  conformance::SingleVariantUnionStruct v1;

  conformance::SingleVariantUnion v2;

  uint32_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, UnionMigration_SingleVariant_V1_Encode) {
  conformance::SingleVariantUnionStruct v1;

  conformance::SingleVariantUnion v2;

  uint32_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, ReverseOrdinalUnion_Old_Encode) {
  conformance::ReverseOrdinalUnionStruct v1;

  conformance::ReverseOrdinalUnion v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryOld>(v1,
                                                                                        expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, ReverseOrdinalUnion_V1_Encode) {
  conformance::ReverseOrdinalUnionStruct v1;

  conformance::ReverseOrdinalUnion v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  const auto expected = std::vector<uint8_t>{
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };

  const auto result =
      fidl::test::util::ValueToBytes<decltype(v1), fidl::test::util::EncoderFactoryV1>(v1,
                                                                                       expected);
  EXPECT_TRUE(result);
}

TEST(Conformance, 3ByteObjectAlignmentInStruct_Old_Decode) {
  conformance::ThreeByteInStruct v1;

  conformance::ThreeByte v2;

  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  v1.elem1 = std::move(v2);

  conformance::ThreeByte v6;

  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);

  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);

  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  v1.elem2 = std::move(v6);

  conformance::ThreeByte v10;

  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);

  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);

  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  v1.elem3 = std::move(v10);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, 5ByteObjectAlignmentInStruct_Old_Decode) {
  conformance::FiveByteInStruct v1;

  conformance::FiveByte v2;

  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  v1.elem1 = std::move(v2);

  conformance::FiveByte v5;

  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);

  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  v1.elem2 = std::move(v5);

  conformance::FiveByte v8;

  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);

  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  v1.elem3 = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, 3ByteObjectAlignmentInVector_Old_Decode) {
  conformance::ThreeByteInVector v1;

  conformance::ThreeByte v2;

  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  conformance::ThreeByte v6;

  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);

  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);

  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  conformance::ThreeByte v10;

  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);

  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);

  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  std::vector<conformance::ThreeByte> v14;
  v14.push_back(std::move(v2));
  v14.push_back(std::move(v6));
  v14.push_back(std::move(v10));
  v1.elems = std::move(v14);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, 5ByteObjectAlignmentInVector_Old_Decode) {
  conformance::FiveByteInVector v1;

  conformance::FiveByte v2;

  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  conformance::FiveByte v5;

  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);

  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  conformance::FiveByte v8;

  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);

  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  std::vector<conformance::FiveByte> v11;
  v11.push_back(std::move(v2));
  v11.push_back(std::move(v5));
  v11.push_back(std::move(v8));
  v1.elems = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08,
      0x07, 0x06, 0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, 3ByteObjectAlignmentInArray_Old_Decode) {
  conformance::ThreeByteInArray v1;

  conformance::ThreeByte v2;

  uint8_t v3 = 1ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 2ull;
  v2.elem2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.elem3 = std::move(v5);
  conformance::ThreeByte v6;

  uint8_t v7 = 4ull;
  v6.elem1 = std::move(v7);

  uint8_t v8 = 5ull;
  v6.elem2 = std::move(v8);

  uint8_t v9 = 6ull;
  v6.elem3 = std::move(v9);
  conformance::ThreeByte v10;

  uint8_t v11 = 7ull;
  v10.elem1 = std::move(v11);

  uint8_t v12 = 8ull;
  v10.elem2 = std::move(v12);

  uint8_t v13 = 9ull;
  v10.elem3 = std::move(v13);
  auto v14 = std::array<conformance::ThreeByte, 3>{std::move(v2), std::move(v6), std::move(v10)};
  v1.elems = std::move(v14);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, 5ByteObjectAlignmentInArray_Old_Decode) {
  conformance::FiveByteInArray v1;

  conformance::FiveByte v2;

  uint32_t v3 = 16909060ull;
  v2.elem1 = std::move(v3);

  uint8_t v4 = 5ull;
  v2.elem2 = std::move(v4);
  conformance::FiveByte v5;

  uint32_t v6 = 101124105ull;
  v5.elem1 = std::move(v6);

  uint8_t v7 = 10ull;
  v5.elem2 = std::move(v7);
  conformance::FiveByte v8;

  uint32_t v9 = 185339150ull;
  v8.elem1 = std::move(v9);

  uint8_t v10 = 15ull;
  v8.elem2 = std::move(v10);
  auto v11 = std::array<conformance::FiveByte, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.elems = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00, 0x09, 0x08, 0x07, 0x06,
      0x0a, 0x00, 0x00, 0x00, 0x0e, 0x0d, 0x0c, 0x0b, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, EmptyStruct_Old_Decode) {
  conformance::EmptyStruct v1;

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, EmptyStructSandwich_Old_Decode) {
  conformance::EmptyStructSandwich v1;

  std::string v2("before");
  v1.before = std::move(v2);

  conformance::EmptyStruct v3;
  v1.es = std::move(v3);

  std::string v4("after");
  v1.after = std::move(v4);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f,
      0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint8Uint16Uint32Uint64_Old_Decode) {
  conformance::Uint8Uint16Uint32Uint64 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint16_t v3 = 515ull;
  v1.f2 = std::move(v3);

  uint32_t v4 = 67438087ull;
  v1.f3 = std::move(v4);

  uint64_t v5 = 579005069656919567ull;
  v1.f4 = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x02, 0x07, 0x06,
      0x05, 0x04, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint64Uint32Uint16Uint8_Old_Decode) {
  conformance::Uint64Uint32Uint16Uint8 v1;

  uint64_t v2 = 579005069656919567ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 67438087ull;
  v1.f2 = std::move(v3);

  uint16_t v4 = 515ull;
  v1.f3 = std::move(v4);

  uint8_t v5 = 1ull;
  v1.f4 = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a,
      0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, SimpleTableEmpty_Old_Decode) {
  conformance::StructOfSimpleTable v1;

  conformance::SimpleTable v2;
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, SimpleTableXAndY_Old_Decode) {
  conformance::StructOfSimpleTable v1;

  conformance::SimpleTable v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));

  int64_t v4 = 67ull;
  v2.set_y(std::move(v4));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, SimpleTableJustY_Old_Decode) {
  conformance::StructOfSimpleTable v1;

  conformance::SimpleTable v2;

  int64_t v3 = 67ull;
  v2.set_y(std::move(v3));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, TableWithStringAndVectorNoVectorContent_Old_Decode) {
  conformance::StructOfTableWithStringAndVector v1;

  conformance::TableWithStringAndVector v2;

  std::string v3("hello");
  v2.set_foo(std::move(v3));

  int32_t v4 = 27ull;
  v2.set_bar(std::move(v4));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c,
      0x6f, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, SimpleTableThenUint64_Old_Decode) {
  conformance::SimpleTableThenUint64 v1;

  conformance::SimpleTable v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));

  int64_t v4 = 67ull;
  v2.set_y(std::move(v4));
  v1.table = std::move(v2);

  uint64_t v5 = 16045690984833335023ull;
  v1.number = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0xef, 0xbe, 0xad, 0xde, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, ReverseOrdinalTable_Old_Decode) {
  conformance::StructOfReverseOrdinalTable v1;

  conformance::ReverseOrdinalTable v2;

  int64_t v3 = 170ull;
  v2.set_x(std::move(v3));

  int64_t v4 = 187ull;
  v2.set_y(std::move(v4));

  int64_t v5 = 204ull;
  v2.set_z(std::move(v5));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, InlineXUnionInStruct_Old_Decode) {
  conformance::TestInlineXUnionInStruct v1;

  std::string v2("before");
  v1.before = std::move(v2);

  conformance::SampleXUnion v3;

  uint32_t v4 = 3735928559ull;
  v3.set_u(std::move(v4));
  v1.xu = std::move(v3);

  std::string v5("after");
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde,
      0x00, 0x00, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OptionalXUnionInStructAbsent_Old_Decode) {
  conformance::TestOptionalXUnionInStruct v1;

  std::string v2("before");
  v1.before = std::move(v2);

  std::string v3("after");
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66,
      0x6f, 0x72, 0x65, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OptionalXUnionInStructPresent_Old_Decode) {
  conformance::TestOptionalXUnionInStruct v1;

  std::string v2("before");
  v1.before = std::move(v2);

  std::unique_ptr<conformance::SampleXUnion> v3 = std::make_unique<conformance::SampleXUnion>();

  uint32_t v4 = 3735928559ull;
  v3->set_u(std::move(v4));
  v1.xu = std::move(v3);

  std::string v5("after");
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xb2, 0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xef, 0xbe, 0xad, 0xde,
      0x00, 0x00, 0x00, 0x00, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, XUnionInTableXUnionAbsent_Old_Decode) {
  conformance::TestXUnionInTable v1;

  conformance::XUnionInTable v2;

  std::string v3("before");
  v2.set_before(std::move(v3));

  std::string v4("after");
  v2.set_after(std::move(v4));
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0x05,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, XUnionInTableXUnionPresent_Old_Decode) {
  conformance::TestXUnionInTable v1;

  conformance::XUnionInTable v2;

  std::string v3("before");
  v2.set_before(std::move(v3));

  conformance::SampleXUnion v4;

  uint32_t v5 = 3735928559ull;
  v4.set_u(std::move(v5));
  v2.set_xu(std::move(v4));

  std::string v6("after");
  v2.set_after(std::move(v6));
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x00, 0x00, 0xb2,
      0x56, 0x9c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00,
      0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x61, 0x66, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, StrictXUnion_Old_Decode) {
  conformance::TestStrictXUnionInStruct v1;

  conformance::SampleStrictXUnion v2;

  uint32_t v3 = 3735928559ull;
  v2.set_u(std::move(v3));
  v1.xu = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x72, 0xea, 0xe2, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xef, 0xbe, 0xad, 0xde, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, AddEthernetDeviceRequest_Old_Decode) {
  conformance::TestAddEthernetDeviceRequest v1;

  std::string v2("@/dev/sys/pci/00:03.0/e1000/ethernet");
  v1.topological_path = std::move(v2);

  conformance::InterfaceConfig v3;

  std::string v4("ethp0003");
  v3.name = std::move(v4);

  conformance::IpAddressConfig v5;

  bool v6 = true;
  v5.set_dhcp(std::move(v6));
  v3.ip_address_config = std::move(v5);
  v1.config = std::move(v3);

  uint32_t v7 = 4294967295ull;
  v1.this_should_be_a_handle = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64, 0x65, 0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f,
      0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30, 0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31,
      0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x00, 0x00,
      0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30, 0x30, 0x33,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, AddEthernetDeviceRequest_V1_Decode) {
  conformance::TestAddEthernetDeviceRequest v1;

  std::string v2("@/dev/sys/pci/00:03.0/e1000/ethernet");
  v1.topological_path = std::move(v2);

  conformance::InterfaceConfig v3;

  std::string v4("ethp0003");
  v3.name = std::move(v4);

  conformance::IpAddressConfig v5;

  bool v6 = true;
  v5.set_dhcp(std::move(v6));
  v3.ip_address_config = std::move(v5);
  v1.config = std::move(v3);

  uint32_t v7 = 4294967295ull;
  v1.this_should_be_a_handle = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0x64, 0x65,
      0x76, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x70, 0x63, 0x69, 0x2f, 0x30, 0x30, 0x3a, 0x30,
      0x33, 0x2e, 0x30, 0x2f, 0x65, 0x31, 0x30, 0x30, 0x30, 0x2f, 0x65, 0x74, 0x68, 0x65,
      0x72, 0x6e, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x65, 0x74, 0x68, 0x70, 0x30, 0x30,
      0x30, 0x33, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, FileGetAttrResponse_Old_Decode) {
  conformance::FileGetAttrResponse v1;

  int32_t v2 = 2125315759ull;
  v1.s = std::move(v2);

  conformance::NodeAttributes v3;

  uint32_t v4 = 2518909348ull;
  v3.mode = std::move(v4);

  uint64_t v5 = 1ull;
  v3.id = std::move(v5);

  uint64_t v6 = 231ull;
  v3.content_size = std::move(v6);

  uint64_t v7 = 231ull;
  v3.storage_size = std::move(v7);

  uint64_t v8 = 1ull;
  v3.link_count = std::move(v8);

  uint64_t v9 = 9833440827789222417ull;
  v3.creation_time = std::move(v9);

  uint64_t v10 = 72038755451251353ull;
  v3.modification_time = std::move(v10);
  v1.attributes = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xaf, 0xbe, 0xad, 0x7e, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x81, 0x23, 0x96,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66,
      0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Optionals_Old_Decode) {
  conformance::StructWithOptionals v1;

  conformance::EmptyStruct v2;
  v1.s = std::move(v2);

  std::unique_ptr<conformance::EmptyStruct> v3 = std::make_unique<conformance::EmptyStruct>();
  v1.s2 = std::move(v3);

  conformance::TableWithEmptyStruct v4;

  conformance::EmptyStruct v5;
  v4.set_s(std::move(v5));
  v1.t = std::move(v4);

  conformance::XUnionWithEmptyStruct v6;

  conformance::EmptyStruct v7;
  v6.set_s(std::move(v7));
  v1.xu = std::move(v6);

  std::unique_ptr<conformance::XUnionWithEmptyStruct> v8 =
      std::make_unique<conformance::XUnionWithEmptyStruct>();

  conformance::EmptyStruct v9;
  v8->set_s(std::move(v9));
  v1.xu2 = std::move(v8);

  conformance::UnionWithEmptyStruct v10;

  conformance::EmptyStruct v11;
  v10.set_s(std::move(v11));
  v1.u = std::move(v10);

  std::unique_ptr<conformance::UnionWithEmptyStruct> v12 =
      std::make_unique<conformance::UnionWithEmptyStruct>();

  conformance::EmptyStruct v13;
  v12->set_s(std::move(v13));
  v1.u2 = std::move(v12);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99,
      0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Optionals_V1_Decode) {
  conformance::StructWithOptionals v1;

  conformance::EmptyStruct v2;
  v1.s = std::move(v2);

  std::unique_ptr<conformance::EmptyStruct> v3 = std::make_unique<conformance::EmptyStruct>();
  v1.s2 = std::move(v3);

  conformance::TableWithEmptyStruct v4;

  conformance::EmptyStruct v5;
  v4.set_s(std::move(v5));
  v1.t = std::move(v4);

  conformance::XUnionWithEmptyStruct v6;

  conformance::EmptyStruct v7;
  v6.set_s(std::move(v7));
  v1.xu = std::move(v6);

  std::unique_ptr<conformance::XUnionWithEmptyStruct> v8 =
      std::make_unique<conformance::XUnionWithEmptyStruct>();

  conformance::EmptyStruct v9;
  v8->set_s(std::move(v9));
  v1.xu2 = std::move(v8);

  conformance::UnionWithEmptyStruct v10;

  conformance::EmptyStruct v11;
  v10.set_s(std::move(v11));
  v1.u = std::move(v10);

  std::unique_ptr<conformance::UnionWithEmptyStruct> v12 =
      std::make_unique<conformance::UnionWithEmptyStruct>();

  conformance::EmptyStruct v13;
  v12->set_s(std::move(v13));
  v1.u2 = std::move(v12);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99, 0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xe0, 0x99,
      0x74, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Arrays_Old_Decode) {
  conformance::StructWithArrays v1;

  int32_t v2 = 1ull;
  int32_t v3 = 2ull;
  auto v4 = std::array<int32_t, 2>{std::move(v2), std::move(v3)};
  v1.arr_int = std::move(v4);

  std::string v5("a");
  std::string v6("b");
  auto v7 = std::array<std::string, 2>{std::move(v5), std::move(v6)};
  v1.arr_string = std::move(v7);

  ::fidl::StringPtr v8("c");
  ::fidl::StringPtr v9;
  auto v10 = std::array<::fidl::StringPtr, 2>{std::move(v8), std::move(v9)};
  v1.arr_nullable_string = std::move(v10);

  conformance::StructWithInt v11;

  int32_t v12 = 1ull;
  v11.x = std::move(v12);
  conformance::StructWithInt v13;

  int32_t v14 = 2ull;
  v13.x = std::move(v14);
  auto v15 = std::array<conformance::StructWithInt, 2>{std::move(v11), std::move(v13)};
  v1.arr_struct = std::move(v15);

  std::unique_ptr<conformance::StructWithInt> v16;
  std::unique_ptr<conformance::StructWithInt> v17 = std::make_unique<conformance::StructWithInt>();

  int32_t v18 = 16909060ull;
  v17->x = std::move(v18);
  auto v19 =
      std::array<std::unique_ptr<conformance::StructWithInt>, 2>{std::move(v16), std::move(v17)};
  v1.arr_nullable_struct = std::move(v19);

  int32_t v20 = 1ull;
  int32_t v21 = 2ull;
  int32_t v22 = 3ull;
  auto v23 = std::array<int32_t, 3>{std::move(v20), std::move(v21), std::move(v22)};
  int32_t v24 = 4ull;
  int32_t v25 = 5ull;
  int32_t v26 = 6ull;
  auto v27 = std::array<int32_t, 3>{std::move(v24), std::move(v25), std::move(v26)};
  auto v28 = std::array<std::array<int32_t, 3>, 2>{std::move(v23), std::move(v27)};
  v1.arr_arr_int = std::move(v28);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Vectors_Old_Decode) {
  conformance::StructWithVectors v1;

  std::vector<int32_t> v2;
  v1.vec_empty = std::move(v2);

  int32_t v3 = 1ull;
  int32_t v4 = 2ull;
  std::vector<int32_t> v5;
  v5.push_back(std::move(v3));
  v5.push_back(std::move(v4));
  v1.vec_int = std::move(v5);

  std::string v6("a");
  std::string v7("b");
  std::vector<std::string> v8;
  v8.push_back(std::move(v6));
  v8.push_back(std::move(v7));
  v1.vec_string = std::move(v8);

  ::fidl::StringPtr v9;
  ::fidl::StringPtr v10("c");
  ::fidl::StringPtr v11;
  std::vector<::fidl::StringPtr> v12;
  v12.push_back(std::move(v9));
  v12.push_back(std::move(v10));
  v12.push_back(std::move(v11));
  v1.vec_nullable_string = std::move(v12);

  conformance::StructWithInt v13;

  int32_t v14 = 1ull;
  v13.x = std::move(v14);
  std::vector<conformance::StructWithInt> v15;
  v15.push_back(std::move(v13));
  v1.vec_struct = std::move(v15);

  std::unique_ptr<conformance::StructWithInt> v16;
  std::unique_ptr<conformance::StructWithInt> v17;
  std::unique_ptr<conformance::StructWithInt> v18 = std::make_unique<conformance::StructWithInt>();

  int32_t v19 = 2ull;
  v18->x = std::move(v19);
  std::vector<std::unique_ptr<conformance::StructWithInt>> v20;
  v20.push_back(std::move(v16));
  v20.push_back(std::move(v17));
  v20.push_back(std::move(v18));
  v1.vec_nullable_struct = std::move(v20);

  int32_t v21 = 1ull;
  int32_t v22 = 2ull;
  std::vector<int32_t> v23;
  v23.push_back(std::move(v21));
  v23.push_back(std::move(v22));
  int32_t v24 = 3ull;
  std::vector<int32_t> v25;
  v25.push_back(std::move(v24));
  std::vector<std::vector<int32_t>> v26;
  v26.push_back(std::move(v23));
  v26.push_back(std::move(v25));
  v1.vec_vec_int = std::move(v26);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00,
      0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, BoolTrue_Old_Decode) {
  conformance::MyBool v1;

  bool v2 = true;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, BoolFalse_Old_Decode) {
  conformance::MyBool v1;

  bool v2 = false;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, ByteZero_Old_Decode) {
  conformance::MyByte v1;

  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Byte255_Old_Decode) {
  conformance::MyByte v1;

  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int8Min_Old_Decode) {
  conformance::MyInt8 v1;

  int8_t v2 = -128ll;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int8Zero_Old_Decode) {
  conformance::MyInt8 v1;

  int8_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int8Max_Old_Decode) {
  conformance::MyInt8 v1;

  int8_t v2 = 127ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int16Min_Old_Decode) {
  conformance::MyInt16 v1;

  int16_t v2 = -32768ll;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int16Zero_Old_Decode) {
  conformance::MyInt16 v1;

  int16_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int16Max_Old_Decode) {
  conformance::MyInt16 v1;

  int16_t v2 = 32767ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int32Min_Old_Decode) {
  conformance::MyInt32 v1;

  int32_t v2 = -2147483648ll;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int32Zero_Old_Decode) {
  conformance::MyInt32 v1;

  int32_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int32Max_Old_Decode) {
  conformance::MyInt32 v1;

  int32_t v2 = 2147483647ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int64Min_Old_Decode) {
  conformance::MyInt64 v1;

  int64_t v2 = -9223372036854775807ll - 1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int64Zero_Old_Decode) {
  conformance::MyInt64 v1;

  int64_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Int64Max_Old_Decode) {
  conformance::MyInt64 v1;

  int64_t v2 = 9223372036854775807ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint8Zero_Old_Decode) {
  conformance::MyUint8 v1;

  uint8_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint8Max_Old_Decode) {
  conformance::MyUint8 v1;

  uint8_t v2 = 255ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint16Zero_Old_Decode) {
  conformance::MyUint16 v1;

  uint16_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint16Max_Old_Decode) {
  conformance::MyUint16 v1;

  uint16_t v2 = 65535ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint32Zero_Old_Decode) {
  conformance::MyUint32 v1;

  uint32_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint32Max_Old_Decode) {
  conformance::MyUint32 v1;

  uint32_t v2 = 4294967295ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint64Zero_Old_Decode) {
  conformance::MyUint64 v1;

  uint64_t v2 = 0ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Uint64Max_Old_Decode) {
  conformance::MyUint64 v1;

  uint64_t v2 = 18446744073709551615ull;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float32Zero_Old_Decode) {
  conformance::MyFloat32 v1;

  float v2 = 0;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float32One_Old_Decode) {
  conformance::MyFloat32 v1;

  float v2 = 1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float32MinusOne_Old_Decode) {
  conformance::MyFloat32 v1;

  float v2 = -1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float32Max_Old_Decode) {
  conformance::MyFloat32 v1;

  float v2 = 3.4028234663852886e+38;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float64Zero_Old_Decode) {
  conformance::MyFloat64 v1;

  double v2 = 0;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float64One_Old_Decode) {
  conformance::MyFloat64 v1;

  double v2 = 1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float64MinusOne_Old_Decode) {
  conformance::MyFloat64 v1;

  double v2 = -1;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xbf,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Float64Max_Old_Decode) {
  conformance::MyFloat64 v1;

  double v2 = 1.7976931348623157e+308;
  v1.value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich1Case1_Old_Decode) {
  conformance::Sandwich1 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize8Align4 v3;

  uint32_t v4 = 202050057ull;
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00,
      0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich1Case1_V1_Decode) {
  conformance::Sandwich1 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize8Align4 v3;

  uint32_t v4 = 202050057ull;
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich1WithOptUnionPresent_Old_Decode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::UnionSize8Align4> v3 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v4 = 202050057ull;
  v3->set_variant(std::move(v4));
  v1.opt_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich1WithOptUnionPresent_V1_Decode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::UnionSize8Align4> v3 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v4 = 202050057ull;
  v3->set_variant(std::move(v4));
  v1.opt_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich1WithOptUnionAbsent_Old_Decode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  uint32_t v3 = 134678021ull;
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich1WithOptUnionAbsent_V1_Decode) {
  conformance::Sandwich1WithOptUnion v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  uint32_t v3 = 134678021ull;
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich2Case1_Old_Decode) {
  conformance::Sandwich2 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize12Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = std::array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich2Case1_V1_Decode) {
  conformance::Sandwich2 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize12Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  auto v10 = std::array<uint8_t, 6>{std::move(v4), std::move(v5), std::move(v6),
                                    std::move(v7), std::move(v8), std::move(v9)};
  v3.set_variant(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich3Case1_Old_Decode) {
  conformance::Sandwich3 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize24Align8 v3;

  conformance::StructSize16Align8 v4;

  uint64_t v5 = 12080525177006498208ull;
  v4.f1 = std::move(v5);

  uint64_t v6 = 12659246559711111592ull;
  v4.f2 = std::move(v6);
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9,
      0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich3Case1_V1_Decode) {
  conformance::Sandwich3 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize24Align8 v3;

  conformance::StructSize16Align8 v4;

  uint64_t v5 = 12080525177006498208ull;
  v4.f1 = std::move(v5);

  uint64_t v6 = 12659246559711111592ull;
  v4.f2 = std::move(v6);
  v3.set_variant(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich4Case1_Old_Decode) {
  conformance::Sandwich4 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize36Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  uint8_t v10 = 166ull;
  uint8_t v11 = 167ull;
  uint8_t v12 = 168ull;
  uint8_t v13 = 169ull;
  uint8_t v14 = 170ull;
  uint8_t v15 = 171ull;
  uint8_t v16 = 172ull;
  uint8_t v17 = 173ull;
  uint8_t v18 = 174ull;
  uint8_t v19 = 175ull;
  uint8_t v20 = 176ull;
  uint8_t v21 = 177ull;
  uint8_t v22 = 178ull;
  uint8_t v23 = 179ull;
  uint8_t v24 = 180ull;
  uint8_t v25 = 181ull;
  uint8_t v26 = 182ull;
  uint8_t v27 = 183ull;
  uint8_t v28 = 184ull;
  uint8_t v29 = 185ull;
  uint8_t v30 = 186ull;
  uint8_t v31 = 187ull;
  uint8_t v32 = 188ull;
  uint8_t v33 = 189ull;
  uint8_t v34 = 190ull;
  uint8_t v35 = 191ull;
  auto v36 = std::array<uint8_t, 32>{
      std::move(v4),  std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),
      std::move(v9),  std::move(v10), std::move(v11), std::move(v12), std::move(v13),
      std::move(v14), std::move(v15), std::move(v16), std::move(v17), std::move(v18),
      std::move(v19), std::move(v20), std::move(v21), std::move(v22), std::move(v23),
      std::move(v24), std::move(v25), std::move(v26), std::move(v27), std::move(v28),
      std::move(v29), std::move(v30), std::move(v31), std::move(v32), std::move(v33),
      std::move(v34), std::move(v35)};
  v3.set_variant(std::move(v36));
  v1.the_union = std::move(v3);

  uint32_t v37 = 134678021ull;
  v1.after = std::move(v37);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1,
      0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae,
      0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb,
      0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich4Case1_V1_Decode) {
  conformance::Sandwich4 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionSize36Align4 v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  uint8_t v10 = 166ull;
  uint8_t v11 = 167ull;
  uint8_t v12 = 168ull;
  uint8_t v13 = 169ull;
  uint8_t v14 = 170ull;
  uint8_t v15 = 171ull;
  uint8_t v16 = 172ull;
  uint8_t v17 = 173ull;
  uint8_t v18 = 174ull;
  uint8_t v19 = 175ull;
  uint8_t v20 = 176ull;
  uint8_t v21 = 177ull;
  uint8_t v22 = 178ull;
  uint8_t v23 = 179ull;
  uint8_t v24 = 180ull;
  uint8_t v25 = 181ull;
  uint8_t v26 = 182ull;
  uint8_t v27 = 183ull;
  uint8_t v28 = 184ull;
  uint8_t v29 = 185ull;
  uint8_t v30 = 186ull;
  uint8_t v31 = 187ull;
  uint8_t v32 = 188ull;
  uint8_t v33 = 189ull;
  uint8_t v34 = 190ull;
  uint8_t v35 = 191ull;
  auto v36 = std::array<uint8_t, 32>{
      std::move(v4),  std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),
      std::move(v9),  std::move(v10), std::move(v11), std::move(v12), std::move(v13),
      std::move(v14), std::move(v15), std::move(v16), std::move(v17), std::move(v18),
      std::move(v19), std::move(v20), std::move(v21), std::move(v22), std::move(v23),
      std::move(v24), std::move(v25), std::move(v26), std::move(v27), std::move(v28),
      std::move(v29), std::move(v30), std::move(v31), std::move(v32), std::move(v33),
      std::move(v34), std::move(v35)};
  v3.set_variant(std::move(v36));
  v1.the_union = std::move(v3);

  uint32_t v37 = 134678021ull;
  v1.after = std::move(v37);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2,
      0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich5Case1_Old_Decode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich5Case1_V1_Decode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich5Case2_Old_Decode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize24Align8 v4;

  conformance::StructSize16Align8 v5;

  uint64_t v6 = 12080525177006498208ull;
  v5.f1 = std::move(v6);

  uint64_t v7 = 12659246559711111592ull;
  v5.f2 = std::move(v7);
  v4.set_variant(std::move(v5));
  v3.set_size24align8(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
      0xac, 0xad, 0xae, 0xaf, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich5Case2_V1_Decode) {
  conformance::Sandwich5 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize24Align8 v4;

  conformance::StructSize16Align8 v5;

  uint64_t v6 = 12080525177006498208ull;
  v5.f1 = std::move(v6);

  uint64_t v7 = 12659246559711111592ull;
  v5.f2 = std::move(v7);
  v4.set_variant(std::move(v5));
  v3.set_size24align8(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case1_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  std::vector<uint8_t> v10;
  v10.push_back(std::move(v4));
  v10.push_back(std::move(v5));
  v10.push_back(std::move(v6));
  v10.push_back(std::move(v7));
  v10.push_back(std::move(v8));
  v10.push_back(std::move(v9));
  v3.set_vector_of_uint8(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case1_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint8_t v4 = 160ull;
  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  uint8_t v8 = 164ull;
  uint8_t v9 = 165ull;
  std::vector<uint8_t> v10;
  v10.push_back(std::move(v4));
  v10.push_back(std::move(v5));
  v10.push_back(std::move(v6));
  v10.push_back(std::move(v7));
  v10.push_back(std::move(v8));
  v10.push_back(std::move(v9));
  v3.set_vector_of_uint8(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case1AbsentVector_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::vector<uint8_t> v4;
  v3.set_vector_of_uint8(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case1AbsentVector_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::vector<uint8_t> v4;
  v3.set_vector_of_uint8(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case2_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::string v4("soft migrations rock!");
  v3.set_s(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
      0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case2_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  std::string v4("soft migrations rock!");
  v3.set_s(std::move(v4));
  v1.the_union = std::move(v3);

  uint32_t v5 = 134678021ull;
  v1.after = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
      0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case3_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 115ull;
  uint8_t v6 = 111ull;
  uint8_t v7 = 102ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 32ull;
  uint8_t v11 = 109ull;
  uint8_t v12 = 105ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  conformance::StructSize3Align1 v14;

  uint8_t v15 = 114ull;
  uint8_t v16 = 97ull;
  uint8_t v17 = 116ull;
  auto v18 = std::array<uint8_t, 3>{std::move(v15), std::move(v16), std::move(v17)};
  v14.three_bytes = std::move(v18);
  std::vector<conformance::StructSize3Align1> v19;
  v19.push_back(std::move(v4));
  v19.push_back(std::move(v9));
  v19.push_back(std::move(v14));
  v3.set_vector_s3_a1(std::move(v19));
  v1.the_union = std::move(v3);

  uint32_t v20 = 134678021ull;
  v1.after = std::move(v20);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f, 0x66, 0x20,
      0x6d, 0x69, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case3_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 115ull;
  uint8_t v6 = 111ull;
  uint8_t v7 = 102ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 32ull;
  uint8_t v11 = 109ull;
  uint8_t v12 = 105ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  conformance::StructSize3Align1 v14;

  uint8_t v15 = 114ull;
  uint8_t v16 = 97ull;
  uint8_t v17 = 116ull;
  auto v18 = std::array<uint8_t, 3>{std::move(v15), std::move(v16), std::move(v17)};
  v14.three_bytes = std::move(v18);
  std::vector<conformance::StructSize3Align1> v19;
  v19.push_back(std::move(v4));
  v19.push_back(std::move(v9));
  v19.push_back(std::move(v14));
  v3.set_vector_s3_a1(std::move(v19));
  v1.the_union = std::move(v3);

  uint32_t v20 = 134678021ull;
  v1.after = std::move(v20);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66,
      0x20, 0x6d, 0x69, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case4_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 28531ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 102ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 27936ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 105ull;
  v7.f2 = std::move(v9);
  conformance::StructSize3Align2 v10;

  uint16_t v11 = 24946ull;
  v10.f1 = std::move(v11);

  uint8_t v12 = 116ull;
  v10.f2 = std::move(v12);
  std::vector<conformance::StructSize3Align2> v13;
  v13.push_back(std::move(v4));
  v13.push_back(std::move(v7));
  v13.push_back(std::move(v10));
  v3.set_vector_s3_a2(std::move(v13));
  v1.the_union = std::move(v3);

  uint32_t v14 = 134678021ull;
  v1.after = std::move(v14);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f, 0x66, 0x00,
      0x20, 0x6d, 0x69, 0x00, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case4_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 28531ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 102ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 27936ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 105ull;
  v7.f2 = std::move(v9);
  conformance::StructSize3Align2 v10;

  uint16_t v11 = 24946ull;
  v10.f1 = std::move(v11);

  uint8_t v12 = 116ull;
  v10.f2 = std::move(v12);
  std::vector<conformance::StructSize3Align2> v13;
  v13.push_back(std::move(v4));
  v13.push_back(std::move(v7));
  v13.push_back(std::move(v10));
  v3.set_vector_s3_a2(std::move(v13));
  v1.the_union = std::move(v3);

  uint32_t v14 = 134678021ull;
  v1.after = std::move(v14);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66,
      0x00, 0x20, 0x6d, 0x69, 0x00, 0x72, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case5_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint32_t v4 = 4294967295ull;
  uint32_t v5 = 4294967295ull;
  uint32_t v6 = 4294967295ull;
  std::vector<uint32_t> v7;
  v7.push_back(std::move(v4));
  v7.push_back(std::move(v5));
  v7.push_back(std::move(v6));
  v3.set_handles(std::move(v7));
  v1.the_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case5_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  uint32_t v4 = 4294967295ull;
  uint32_t v5 = 4294967295ull;
  uint32_t v6 = 4294967295ull;
  std::vector<uint32_t> v7;
  v7.push_back(std::move(v4));
  v7.push_back(std::move(v5));
  v7.push_back(std::move(v6));
  v3.set_handles(std::move(v7));
  v1.the_union = std::move(v3);

  uint32_t v8 = 134678021ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case6_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 164ull;
  uint8_t v11 = 165ull;
  uint8_t v12 = 166ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = std::array<conformance::StructSize3Align1, 2>{std::move(v4), std::move(v9)};
  v3.set_array_s3_a1(std::move(v14));
  v1.the_union = std::move(v3);

  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case6_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 161ull;
  uint8_t v6 = 162ull;
  uint8_t v7 = 163ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  conformance::StructSize3Align1 v9;

  uint8_t v10 = 164ull;
  uint8_t v11 = 165ull;
  uint8_t v12 = 166ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  auto v14 = std::array<conformance::StructSize3Align1, 2>{std::move(v4), std::move(v9)};
  v3.set_array_s3_a1(std::move(v14));
  v1.the_union = std::move(v3);

  uint32_t v15 = 134678021ull;
  v1.after = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case7_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 41633ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 163ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 42404ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 166ull;
  v7.f2 = std::move(v9);
  auto v10 = std::array<conformance::StructSize3Align2, 2>{std::move(v4), std::move(v7)};
  v3.set_array_s3_a2(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case7_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::StructSize3Align2 v4;

  uint16_t v5 = 41633ull;
  v4.f1 = std::move(v5);

  uint8_t v6 = 163ull;
  v4.f2 = std::move(v6);
  conformance::StructSize3Align2 v7;

  uint16_t v8 = 42404ull;
  v7.f1 = std::move(v8);

  uint8_t v9 = 166ull;
  v7.f2 = std::move(v9);
  auto v10 = std::array<conformance::StructSize3Align2, 2>{std::move(v4), std::move(v7)};
  v3.set_array_s3_a2(std::move(v10));
  v1.the_union = std::move(v3);

  uint32_t v11 = 134678021ull;
  v1.after = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0xa1, 0xa2, 0xa3, 0x00, 0xa4, 0xa5, 0xa6, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case8_Old_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  std::vector<conformance::UnionSize8Align4> v6;
  v6.push_back(std::move(v4));
  v3.set_vector_union(std::move(v6));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich6Case8_V1_Decode) {
  conformance::Sandwich6 v1;

  uint32_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionWithVector v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  std::vector<conformance::UnionSize8Align4> v6;
  v6.push_back(std::move(v4));
  v3.set_vector_union(std::move(v6));
  v1.the_union = std::move(v3);

  uint32_t v7 = 134678021ull;
  v1.after = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich7Case1_Old_Decode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::Sandwich1> v3 = std::make_unique<conformance::Sandwich1>();

  uint32_t v4 = 67305985ull;
  v3->before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3->the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3->after = std::move(v7);
  v1.opt_sandwich1 = std::move(v3);

  uint32_t v8 = 606282273ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
      0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich7Case1_V1_Decode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  std::unique_ptr<conformance::Sandwich1> v3 = std::make_unique<conformance::Sandwich1>();

  uint32_t v4 = 67305985ull;
  v3->before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3->the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3->after = std::move(v7);
  v1.opt_sandwich1 = std::move(v3);

  uint32_t v8 = 606282273ull;
  v1.after = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich7Case2_Old_Decode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  uint32_t v3 = 606282273ull;
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich7Case2_V1_Decode) {
  conformance::Sandwich7 v1;

  uint32_t v2 = 336794129ull;
  v1.before = std::move(v2);

  uint32_t v3 = 606282273ull;
  v1.after = std::move(v3);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x11, 0x12, 0x13, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x21, 0x22, 0x23, 0x24, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression1_Old_Decode) {
  conformance::Regression1 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  uint8_t v4 = 3ull;
  v1.f3 = std::move(v4);

  uint16_t v5 = 4ull;
  v1.f4 = std::move(v5);

  uint64_t v6 = 5ull;
  v1.f5 = std::move(v6);

  uint8_t v7 = 6ull;
  v1.f6 = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression1_V1_Decode) {
  conformance::Regression1 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  uint8_t v4 = 3ull;
  v1.f3 = std::move(v4);

  uint16_t v5 = 4ull;
  v1.f4 = std::move(v5);

  uint64_t v6 = 5ull;
  v1.f5 = std::move(v6);

  uint8_t v7 = 6ull;
  v1.f6 = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression2_Old_Decode) {
  conformance::Regression2 v1;

  conformance::Regression1 v2;

  uint8_t v3 = 1ull;
  v2.f1 = std::move(v3);

  uint32_t v4 = 2ull;
  v2.f2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.f3 = std::move(v5);

  uint16_t v6 = 4ull;
  v2.f4 = std::move(v6);

  uint64_t v7 = 5ull;
  v2.f5 = std::move(v7);

  uint8_t v8 = 6ull;
  v2.f6 = std::move(v8);
  v1.head = std::move(v2);

  uint8_t v9 = 7ull;
  v1.f7 = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression2_V1_Decode) {
  conformance::Regression2 v1;

  conformance::Regression1 v2;

  uint8_t v3 = 1ull;
  v2.f1 = std::move(v3);

  uint32_t v4 = 2ull;
  v2.f2 = std::move(v4);

  uint8_t v5 = 3ull;
  v2.f3 = std::move(v5);

  uint16_t v6 = 4ull;
  v2.f4 = std::move(v6);

  uint64_t v7 = 5ull;
  v2.f5 = std::move(v7);

  uint8_t v8 = 6ull;
  v2.f6 = std::move(v8);
  v1.head = std::move(v2);

  uint8_t v9 = 7ull;
  v1.f7 = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression3Absent_Old_Decode) {
  conformance::Regression3 v1;

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression3Absent_V1_Decode) {
  conformance::Regression3 v1;

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression3Present_Old_Decode) {
  conformance::Regression3 v1;

  std::unique_ptr<conformance::Regression2> v2 = std::make_unique<conformance::Regression2>();

  conformance::Regression1 v3;

  uint8_t v4 = 1ull;
  v3.f1 = std::move(v4);

  uint32_t v5 = 2ull;
  v3.f2 = std::move(v5);

  uint8_t v6 = 3ull;
  v3.f3 = std::move(v6);

  uint16_t v7 = 4ull;
  v3.f4 = std::move(v7);

  uint64_t v8 = 5ull;
  v3.f5 = std::move(v8);

  uint8_t v9 = 6ull;
  v3.f6 = std::move(v9);
  v2->head = std::move(v3);

  uint8_t v10 = 7ull;
  v2->f7 = std::move(v10);
  v1.opt_value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression3Present_V1_Decode) {
  conformance::Regression3 v1;

  std::unique_ptr<conformance::Regression2> v2 = std::make_unique<conformance::Regression2>();

  conformance::Regression1 v3;

  uint8_t v4 = 1ull;
  v3.f1 = std::move(v4);

  uint32_t v5 = 2ull;
  v3.f2 = std::move(v5);

  uint8_t v6 = 3ull;
  v3.f3 = std::move(v6);

  uint16_t v7 = 4ull;
  v3.f4 = std::move(v7);

  uint64_t v8 = 5ull;
  v3.f5 = std::move(v8);

  uint8_t v9 = 6ull;
  v3.f6 = std::move(v9);
  v2->head = std::move(v3);

  uint8_t v10 = 7ull;
  v2->f7 = std::move(v10);
  v1.opt_value = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment1Array_Old_Decode) {
  conformance::Size5Alignment1Array v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  conformance::Size5Alignment1 v16;

  uint8_t v17 = 11ull;
  uint8_t v18 = 12ull;
  uint8_t v19 = 13ull;
  uint8_t v20 = 14ull;
  uint8_t v21 = 15ull;
  auto v22 = std::array<uint8_t, 5>{std::move(v17), std::move(v18), std::move(v19), std::move(v20),
                                    std::move(v21)};
  v16.data = std::move(v22);
  auto v23 =
      std::array<conformance::Size5Alignment1, 3>{std::move(v2), std::move(v9), std::move(v16)};
  v1.a = std::move(v23);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment1Array_V1_Decode) {
  conformance::Size5Alignment1Array v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  conformance::Size5Alignment1 v16;

  uint8_t v17 = 11ull;
  uint8_t v18 = 12ull;
  uint8_t v19 = 13ull;
  uint8_t v20 = 14ull;
  uint8_t v21 = 15ull;
  auto v22 = std::array<uint8_t, 5>{std::move(v17), std::move(v18), std::move(v19), std::move(v20),
                                    std::move(v21)};
  v16.data = std::move(v22);
  auto v23 =
      std::array<conformance::Size5Alignment1, 3>{std::move(v2), std::move(v9), std::move(v16)};
  v1.a = std::move(v23);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
      0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment4Array_Old_Decode) {
  conformance::Size5Alignment4Array v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  conformance::Size5Alignment4 v8;

  uint32_t v9 = 235736075ull;
  v8.four = std::move(v9);

  uint8_t v10 = 15ull;
  v8.one = std::move(v10);
  auto v11 =
      std::array<conformance::Size5Alignment4, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.a = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09,
      0x0a, 0x00, 0x00, 0x00, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment4Array_V1_Decode) {
  conformance::Size5Alignment4Array v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  conformance::Size5Alignment4 v8;

  uint32_t v9 = 235736075ull;
  v8.four = std::move(v9);

  uint8_t v10 = 15ull;
  v8.one = std::move(v10);
  auto v11 =
      std::array<conformance::Size5Alignment4, 3>{std::move(v2), std::move(v5), std::move(v8)};
  v1.a = std::move(v11);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09,
      0x0a, 0x00, 0x00, 0x00, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment1Vector_Old_Decode) {
  conformance::Size5Alignment1Vector v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  std::vector<conformance::Size5Alignment1> v16;
  v16.push_back(std::move(v2));
  v16.push_back(std::move(v9));
  v1.v = std::move(v16);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment1Vector_V1_Decode) {
  conformance::Size5Alignment1Vector v1;

  conformance::Size5Alignment1 v2;

  uint8_t v3 = 1ull;
  uint8_t v4 = 2ull;
  uint8_t v5 = 3ull;
  uint8_t v6 = 4ull;
  uint8_t v7 = 5ull;
  auto v8 = std::array<uint8_t, 5>{std::move(v3), std::move(v4), std::move(v5), std::move(v6),
                                   std::move(v7)};
  v2.data = std::move(v8);
  conformance::Size5Alignment1 v9;

  uint8_t v10 = 6ull;
  uint8_t v11 = 7ull;
  uint8_t v12 = 8ull;
  uint8_t v13 = 9ull;
  uint8_t v14 = 10ull;
  auto v15 = std::array<uint8_t, 5>{std::move(v10), std::move(v11), std::move(v12), std::move(v13),
                                    std::move(v14)};
  v9.data = std::move(v15);
  std::vector<conformance::Size5Alignment1> v16;
  v16.push_back(std::move(v2));
  v16.push_back(std::move(v9));
  v1.v = std::move(v16);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment4Vector_Old_Decode) {
  conformance::Size5Alignment4Vector v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  std::vector<conformance::Size5Alignment4> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v5));
  v1.v = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Size5Alignment4Vector_V1_Decode) {
  conformance::Size5Alignment4Vector v1;

  conformance::Size5Alignment4 v2;

  uint32_t v3 = 67305985ull;
  v2.four = std::move(v3);

  uint8_t v4 = 5ull;
  v2.one = std::move(v4);
  conformance::Size5Alignment4 v5;

  uint32_t v6 = 151521030ull;
  v5.four = std::move(v6);

  uint8_t v7 = 10ull;
  v5.one = std::move(v7);
  std::vector<conformance::Size5Alignment4> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v5));
  v1.v = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04,
      0x05, 0x00, 0x00, 0x00, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_StructWithReservedSandwich_Old_Decode) {
  conformance::Table_StructWithReservedSandwichStruct v1;

  conformance::Table_StructWithReservedSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 9ull;
  uint8_t v5 = 10ull;
  uint8_t v6 = 11ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::StructSize3Align1 v8;

  uint8_t v9 = 25ull;
  uint8_t v10 = 26ull;
  uint8_t v11 = 27ull;
  auto v12 = std::array<uint8_t, 3>{std::move(v9), std::move(v10), std::move(v11)};
  v8.three_bytes = std::move(v12);
  v2.set_s2(std::move(v8));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_StructWithReservedSandwich_V1_Decode) {
  conformance::Table_StructWithReservedSandwichStruct v1;

  conformance::Table_StructWithReservedSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 9ull;
  uint8_t v5 = 10ull;
  uint8_t v6 = 11ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::StructSize3Align1 v8;

  uint8_t v9 = 25ull;
  uint8_t v10 = 26ull;
  uint8_t v11 = 27ull;
  auto v12 = std::array<uint8_t, 3>{std::move(v9), std::move(v10), std::move(v11)};
  v8.three_bytes = std::move(v12);
  v2.set_s2(std::move(v8));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_StructWithUint32Sandwich_Old_Decode) {
  conformance::Table_StructWithUint32SandwichStruct v1;

  conformance::Table_StructWithUint32Sandwich v2;

  uint32_t v3 = 67305985ull;
  v2.set_i(std::move(v3));

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v2.set_s1(std::move(v4));

  conformance::StructSize3Align1 v9;

  uint8_t v10 = 25ull;
  uint8_t v11 = 26ull;
  uint8_t v12 = 27ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  v2.set_s2(std::move(v9));

  uint32_t v14 = 218893066ull;
  v2.set_i2(std::move(v14));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09,
      0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_StructWithUint32Sandwich_V1_Decode) {
  conformance::Table_StructWithUint32SandwichStruct v1;

  conformance::Table_StructWithUint32Sandwich v2;

  uint32_t v3 = 67305985ull;
  v2.set_i(std::move(v3));

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v2.set_s1(std::move(v4));

  conformance::StructSize3Align1 v9;

  uint8_t v10 = 25ull;
  uint8_t v11 = 26ull;
  uint8_t v12 = 27ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9.three_bytes = std::move(v13);
  v2.set_s2(std::move(v9));

  uint32_t v14 = 218893066ull;
  v2.set_i2(std::move(v14));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x09,
      0x0a, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x0a, 0x0b, 0x0c, 0x0d, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_UnionWithVector_ReservedSandwich_Old_Decode) {
  conformance::Table_UnionWithVector_ReservedSandwichStruct v1;

  conformance::Table_UnionWithVector_ReservedSandwich v2;

  conformance::UnionWithVector v3;

  std::string v4("hello");
  v3.set_s(std::move(v4));
  v2.set_uv(std::move(v3));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_UnionWithVector_ReservedSandwich_V1_Decode) {
  conformance::Table_UnionWithVector_ReservedSandwichStruct v1;

  conformance::Table_UnionWithVector_ReservedSandwich v2;

  conformance::UnionWithVector v3;

  std::string v4("hello");
  v3.set_s(std::move(v4));
  v2.set_uv(std::move(v3));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_UnionWithVector_StructSandwich_Old_Decode) {
  conformance::Table_UnionWithVector_StructSandwichStruct v1;

  conformance::Table_UnionWithVector_StructSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::UnionWithVector v8;

  std::string v9("hello");
  v8.set_s(std::move(v9));
  v2.set_uv(std::move(v8));

  conformance::StructSize3Align1 v10;

  uint8_t v11 = 4ull;
  uint8_t v12 = 5ull;
  uint8_t v13 = 6ull;
  auto v14 = std::array<uint8_t, 3>{std::move(v11), std::move(v12), std::move(v13)};
  v10.three_bytes = std::move(v14);
  v2.set_s2(std::move(v10));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00,
      0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Table_UnionWithVector_StructSandwich_V1_Decode) {
  conformance::Table_UnionWithVector_StructSandwichStruct v1;

  conformance::Table_UnionWithVector_StructSandwich v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s1(std::move(v3));

  conformance::UnionWithVector v8;

  std::string v9("hello");
  v8.set_s(std::move(v9));
  v2.set_uv(std::move(v8));

  conformance::StructSize3Align1 v10;

  uint8_t v11 = 4ull;
  uint8_t v12 = 5ull;
  uint8_t v13 = 6ull;
  auto v14 = std::array<uint8_t, 3>{std::move(v11), std::move(v12), std::move(v13)};
  v10.three_bytes = std::move(v14);
  v2.set_s2(std::move(v10));
  v1.table = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00,
      0x00, 0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, XUnionWithStruct_Old_Decode) {
  conformance::XUnionWithStructStruct v1;

  conformance::XUnionWithStruct v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s(std::move(v3));
  v1.xu = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, XUnionWithStruct_V1_Decode) {
  conformance::XUnionWithStructStruct v1;

  conformance::XUnionWithStruct v2;

  conformance::StructSize3Align1 v3;

  uint8_t v4 = 1ull;
  uint8_t v5 = 2ull;
  uint8_t v6 = 3ull;
  auto v7 = std::array<uint8_t, 3>{std::move(v4), std::move(v5), std::move(v6)};
  v3.three_bytes = std::move(v7);
  v2.set_s(std::move(v3));
  v1.xu = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x14, 0x5c, 0x3e, 0x19, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, ArrayStruct_Old_Decode) {
  conformance::ArrayStruct v1;

  conformance::StringUnion v2;

  std::string v3("one");
  v2.set_s(std::move(v3));
  conformance::StringUnion v4;

  std::string v5("two");
  v4.set_s(std::move(v5));
  conformance::StringUnion v6;

  std::string v7("three");
  v6.set_s(std::move(v7));
  auto v8 = std::array<conformance::StringUnion, 3>{std::move(v2), std::move(v4), std::move(v6)};
  v1.unions = std::move(v8);

  std::unique_ptr<conformance::StringUnion> v9 = std::make_unique<conformance::StringUnion>();

  std::string v10("four");
  v9->set_s(std::move(v10));
  std::unique_ptr<conformance::StringUnion> v11 = std::make_unique<conformance::StringUnion>();

  std::string v12("five");
  v11->set_s(std::move(v12));
  std::unique_ptr<conformance::StringUnion> v13 = std::make_unique<conformance::StringUnion>();

  std::string v14("six");
  v13->set_s(std::move(v14));
  auto v15 = std::array<std::unique_ptr<conformance::StringUnion>, 3>{std::move(v9), std::move(v11),
                                                                      std::move(v13)};
  v1.optional_unions = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0x6e, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x74, 0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x68, 0x72, 0x65, 0x65, 0x00, 0x00,
      0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x6f, 0x75, 0x72, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x69, 0x76,
      0x65, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73,
      0x69, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, ArrayStruct_V1_Decode) {
  conformance::ArrayStruct v1;

  conformance::StringUnion v2;

  std::string v3("one");
  v2.set_s(std::move(v3));
  conformance::StringUnion v4;

  std::string v5("two");
  v4.set_s(std::move(v5));
  conformance::StringUnion v6;

  std::string v7("three");
  v6.set_s(std::move(v7));
  auto v8 = std::array<conformance::StringUnion, 3>{std::move(v2), std::move(v4), std::move(v6)};
  v1.unions = std::move(v8);

  std::unique_ptr<conformance::StringUnion> v9 = std::make_unique<conformance::StringUnion>();

  std::string v10("four");
  v9->set_s(std::move(v10));
  std::unique_ptr<conformance::StringUnion> v11 = std::make_unique<conformance::StringUnion>();

  std::string v12("five");
  v11->set_s(std::move(v12));
  std::unique_ptr<conformance::StringUnion> v13 = std::make_unique<conformance::StringUnion>();

  std::string v14("six");
  v13->set_s(std::move(v14));
  auto v15 = std::array<std::unique_ptr<conformance::StringUnion>, 3>{std::move(v9), std::move(v11),
                                                                      std::move(v13)};
  v1.optional_unions = std::move(v15);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0x6e, 0x65, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x74, 0x77, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x74,
      0x68, 0x72, 0x65, 0x65, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x66, 0x6f, 0x75, 0x72, 0x00, 0x00, 0x00,
      0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x66, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x69, 0x78, 0x00,
      0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, TransformerEmptyStruct_Old_Decode) {
  conformance::TransformerEmptyStruct v1;

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, TransformerEmptyStruct_V1_Decode) {
  conformance::TransformerEmptyStruct v1;

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, EmptyStructUnion_Old_Decode) {
  conformance::EmptyStructUnionStruct v1;

  conformance::EmptyStructUnion v2;

  conformance::TransformerEmptyStruct v3;
  v2.set_es(std::move(v3));
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, EmptyStructUnion_V1_Decode) {
  conformance::EmptyStructUnionStruct v1;

  conformance::EmptyStructUnion v2;

  conformance::TransformerEmptyStruct v3;
  v2.set_es(std::move(v3));
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, NoCodingTablesStressor_Old_Decode) {
  conformance::NoCodingTablesStressor v1;

  uint64_t v2 = 1229782938247303441ull;
  v1.f1 = std::move(v2);

  uint64_t v3 = 2459565876494606882ull;
  v1.f2 = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 51ull;
  uint8_t v6 = 51ull;
  uint8_t v7 = 51ull;
  uint8_t v8 = 51ull;
  uint8_t v9 = 51ull;
  uint8_t v10 = 51ull;
  uint8_t v11 = 51ull;
  uint8_t v12 = 51ull;
  uint8_t v13 = 51ull;
  uint8_t v14 = 51ull;
  uint8_t v15 = 51ull;
  uint8_t v16 = 51ull;
  uint8_t v17 = 51ull;
  uint8_t v18 = 51ull;
  uint8_t v19 = 51ull;
  uint8_t v20 = 51ull;
  uint8_t v21 = 51ull;
  uint8_t v22 = 51ull;
  uint8_t v23 = 51ull;
  uint8_t v24 = 51ull;
  uint8_t v25 = 51ull;
  uint8_t v26 = 51ull;
  uint8_t v27 = 51ull;
  uint8_t v28 = 51ull;
  uint8_t v29 = 51ull;
  uint8_t v30 = 51ull;
  uint8_t v31 = 51ull;
  uint8_t v32 = 51ull;
  uint8_t v33 = 51ull;
  uint8_t v34 = 51ull;
  uint8_t v35 = 51ull;
  uint8_t v36 = 51ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v1.u1 = std::move(v4);

  uint64_t v38 = 4919131752989213764ull;
  v1.f3 = std::move(v38);

  uint64_t v39 = 6148914691236517205ull;
  v1.f4 = std::move(v39);

  conformance::UnionSize36Align4 v40;

  uint8_t v41 = 102ull;
  uint8_t v42 = 102ull;
  uint8_t v43 = 102ull;
  uint8_t v44 = 102ull;
  uint8_t v45 = 102ull;
  uint8_t v46 = 102ull;
  uint8_t v47 = 102ull;
  uint8_t v48 = 102ull;
  uint8_t v49 = 102ull;
  uint8_t v50 = 102ull;
  uint8_t v51 = 102ull;
  uint8_t v52 = 102ull;
  uint8_t v53 = 102ull;
  uint8_t v54 = 102ull;
  uint8_t v55 = 102ull;
  uint8_t v56 = 102ull;
  uint8_t v57 = 102ull;
  uint8_t v58 = 102ull;
  uint8_t v59 = 102ull;
  uint8_t v60 = 102ull;
  uint8_t v61 = 102ull;
  uint8_t v62 = 102ull;
  uint8_t v63 = 102ull;
  uint8_t v64 = 102ull;
  uint8_t v65 = 102ull;
  uint8_t v66 = 102ull;
  uint8_t v67 = 102ull;
  uint8_t v68 = 102ull;
  uint8_t v69 = 102ull;
  uint8_t v70 = 102ull;
  uint8_t v71 = 102ull;
  uint8_t v72 = 102ull;
  auto v73 = std::array<uint8_t, 32>{
      std::move(v41), std::move(v42), std::move(v43), std::move(v44), std::move(v45),
      std::move(v46), std::move(v47), std::move(v48), std::move(v49), std::move(v50),
      std::move(v51), std::move(v52), std::move(v53), std::move(v54), std::move(v55),
      std::move(v56), std::move(v57), std::move(v58), std::move(v59), std::move(v60),
      std::move(v61), std::move(v62), std::move(v63), std::move(v64), std::move(v65),
      std::move(v66), std::move(v67), std::move(v68), std::move(v69), std::move(v70),
      std::move(v71), std::move(v72)};
  v40.set_variant(std::move(v73));
  v1.u2 = std::move(v40);

  uint64_t v74 = 8608480567731124087ull;
  v1.f5 = std::move(v74);

  uint64_t v75 = 9838263505978427528ull;
  v1.f6 = std::move(v75);

  conformance::UnionSize36Align4 v76;

  uint8_t v77 = 153ull;
  uint8_t v78 = 153ull;
  uint8_t v79 = 153ull;
  uint8_t v80 = 153ull;
  uint8_t v81 = 153ull;
  uint8_t v82 = 153ull;
  uint8_t v83 = 153ull;
  uint8_t v84 = 153ull;
  uint8_t v85 = 153ull;
  uint8_t v86 = 153ull;
  uint8_t v87 = 153ull;
  uint8_t v88 = 153ull;
  uint8_t v89 = 153ull;
  uint8_t v90 = 153ull;
  uint8_t v91 = 153ull;
  uint8_t v92 = 153ull;
  uint8_t v93 = 153ull;
  uint8_t v94 = 153ull;
  uint8_t v95 = 153ull;
  uint8_t v96 = 153ull;
  uint8_t v97 = 153ull;
  uint8_t v98 = 153ull;
  uint8_t v99 = 153ull;
  uint8_t v100 = 153ull;
  uint8_t v101 = 153ull;
  uint8_t v102 = 153ull;
  uint8_t v103 = 153ull;
  uint8_t v104 = 153ull;
  uint8_t v105 = 153ull;
  uint8_t v106 = 153ull;
  uint8_t v107 = 153ull;
  uint8_t v108 = 153ull;
  auto v109 = std::array<uint8_t, 32>{
      std::move(v77),  std::move(v78),  std::move(v79),  std::move(v80),  std::move(v81),
      std::move(v82),  std::move(v83),  std::move(v84),  std::move(v85),  std::move(v86),
      std::move(v87),  std::move(v88),  std::move(v89),  std::move(v90),  std::move(v91),
      std::move(v92),  std::move(v93),  std::move(v94),  std::move(v95),  std::move(v96),
      std::move(v97),  std::move(v98),  std::move(v99),  std::move(v100), std::move(v101),
      std::move(v102), std::move(v103), std::move(v104), std::move(v105), std::move(v106),
      std::move(v107), std::move(v108)};
  v76.set_variant(std::move(v109));
  v1.u3 = std::move(v76);

  uint64_t v110 = 12297829382473034410ull;
  v1.f7 = std::move(v110);

  std::unique_ptr<conformance::Size8Align8> v111 = std::make_unique<conformance::Size8Align8>();

  uint64_t v112 = 17216961135462248174ull;
  v111->data = std::move(v112);
  v1.p1 = std::move(v111);

  uint64_t v113 = 13527612320720337851ull;
  v1.f8 = std::move(v113);

  std::unique_ptr<conformance::Size8Align8> v114 = std::make_unique<conformance::Size8Align8>();

  uint64_t v115 = 17216961135462248174ull;
  v114->data = std::move(v115);
  v1.p2 = std::move(v114);

  uint64_t v116 = 15987178197214944733ull;
  v1.f9 = std::move(v116);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
      0x22, 0x22, 0x03, 0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44,
      0x44, 0x44, 0x44, 0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x03, 0x00,
      0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
      0x77, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x03, 0x00, 0x00, 0x00, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xee,
      0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, NoCodingTablesStressor_V1_Decode) {
  conformance::NoCodingTablesStressor v1;

  uint64_t v2 = 1229782938247303441ull;
  v1.f1 = std::move(v2);

  uint64_t v3 = 2459565876494606882ull;
  v1.f2 = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 51ull;
  uint8_t v6 = 51ull;
  uint8_t v7 = 51ull;
  uint8_t v8 = 51ull;
  uint8_t v9 = 51ull;
  uint8_t v10 = 51ull;
  uint8_t v11 = 51ull;
  uint8_t v12 = 51ull;
  uint8_t v13 = 51ull;
  uint8_t v14 = 51ull;
  uint8_t v15 = 51ull;
  uint8_t v16 = 51ull;
  uint8_t v17 = 51ull;
  uint8_t v18 = 51ull;
  uint8_t v19 = 51ull;
  uint8_t v20 = 51ull;
  uint8_t v21 = 51ull;
  uint8_t v22 = 51ull;
  uint8_t v23 = 51ull;
  uint8_t v24 = 51ull;
  uint8_t v25 = 51ull;
  uint8_t v26 = 51ull;
  uint8_t v27 = 51ull;
  uint8_t v28 = 51ull;
  uint8_t v29 = 51ull;
  uint8_t v30 = 51ull;
  uint8_t v31 = 51ull;
  uint8_t v32 = 51ull;
  uint8_t v33 = 51ull;
  uint8_t v34 = 51ull;
  uint8_t v35 = 51ull;
  uint8_t v36 = 51ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v1.u1 = std::move(v4);

  uint64_t v38 = 4919131752989213764ull;
  v1.f3 = std::move(v38);

  uint64_t v39 = 6148914691236517205ull;
  v1.f4 = std::move(v39);

  conformance::UnionSize36Align4 v40;

  uint8_t v41 = 102ull;
  uint8_t v42 = 102ull;
  uint8_t v43 = 102ull;
  uint8_t v44 = 102ull;
  uint8_t v45 = 102ull;
  uint8_t v46 = 102ull;
  uint8_t v47 = 102ull;
  uint8_t v48 = 102ull;
  uint8_t v49 = 102ull;
  uint8_t v50 = 102ull;
  uint8_t v51 = 102ull;
  uint8_t v52 = 102ull;
  uint8_t v53 = 102ull;
  uint8_t v54 = 102ull;
  uint8_t v55 = 102ull;
  uint8_t v56 = 102ull;
  uint8_t v57 = 102ull;
  uint8_t v58 = 102ull;
  uint8_t v59 = 102ull;
  uint8_t v60 = 102ull;
  uint8_t v61 = 102ull;
  uint8_t v62 = 102ull;
  uint8_t v63 = 102ull;
  uint8_t v64 = 102ull;
  uint8_t v65 = 102ull;
  uint8_t v66 = 102ull;
  uint8_t v67 = 102ull;
  uint8_t v68 = 102ull;
  uint8_t v69 = 102ull;
  uint8_t v70 = 102ull;
  uint8_t v71 = 102ull;
  uint8_t v72 = 102ull;
  auto v73 = std::array<uint8_t, 32>{
      std::move(v41), std::move(v42), std::move(v43), std::move(v44), std::move(v45),
      std::move(v46), std::move(v47), std::move(v48), std::move(v49), std::move(v50),
      std::move(v51), std::move(v52), std::move(v53), std::move(v54), std::move(v55),
      std::move(v56), std::move(v57), std::move(v58), std::move(v59), std::move(v60),
      std::move(v61), std::move(v62), std::move(v63), std::move(v64), std::move(v65),
      std::move(v66), std::move(v67), std::move(v68), std::move(v69), std::move(v70),
      std::move(v71), std::move(v72)};
  v40.set_variant(std::move(v73));
  v1.u2 = std::move(v40);

  uint64_t v74 = 8608480567731124087ull;
  v1.f5 = std::move(v74);

  uint64_t v75 = 9838263505978427528ull;
  v1.f6 = std::move(v75);

  conformance::UnionSize36Align4 v76;

  uint8_t v77 = 153ull;
  uint8_t v78 = 153ull;
  uint8_t v79 = 153ull;
  uint8_t v80 = 153ull;
  uint8_t v81 = 153ull;
  uint8_t v82 = 153ull;
  uint8_t v83 = 153ull;
  uint8_t v84 = 153ull;
  uint8_t v85 = 153ull;
  uint8_t v86 = 153ull;
  uint8_t v87 = 153ull;
  uint8_t v88 = 153ull;
  uint8_t v89 = 153ull;
  uint8_t v90 = 153ull;
  uint8_t v91 = 153ull;
  uint8_t v92 = 153ull;
  uint8_t v93 = 153ull;
  uint8_t v94 = 153ull;
  uint8_t v95 = 153ull;
  uint8_t v96 = 153ull;
  uint8_t v97 = 153ull;
  uint8_t v98 = 153ull;
  uint8_t v99 = 153ull;
  uint8_t v100 = 153ull;
  uint8_t v101 = 153ull;
  uint8_t v102 = 153ull;
  uint8_t v103 = 153ull;
  uint8_t v104 = 153ull;
  uint8_t v105 = 153ull;
  uint8_t v106 = 153ull;
  uint8_t v107 = 153ull;
  uint8_t v108 = 153ull;
  auto v109 = std::array<uint8_t, 32>{
      std::move(v77),  std::move(v78),  std::move(v79),  std::move(v80),  std::move(v81),
      std::move(v82),  std::move(v83),  std::move(v84),  std::move(v85),  std::move(v86),
      std::move(v87),  std::move(v88),  std::move(v89),  std::move(v90),  std::move(v91),
      std::move(v92),  std::move(v93),  std::move(v94),  std::move(v95),  std::move(v96),
      std::move(v97),  std::move(v98),  std::move(v99),  std::move(v100), std::move(v101),
      std::move(v102), std::move(v103), std::move(v104), std::move(v105), std::move(v106),
      std::move(v107), std::move(v108)};
  v76.set_variant(std::move(v109));
  v1.u3 = std::move(v76);

  uint64_t v110 = 12297829382473034410ull;
  v1.f7 = std::move(v110);

  std::unique_ptr<conformance::Size8Align8> v111 = std::make_unique<conformance::Size8Align8>();

  uint64_t v112 = 17216961135462248174ull;
  v111->data = std::move(v112);
  v1.p1 = std::move(v111);

  uint64_t v113 = 13527612320720337851ull;
  v1.f8 = std::move(v113);

  std::unique_ptr<conformance::Size8Align8> v114 = std::make_unique<conformance::Size8Align8>();

  uint64_t v115 = 17216961135462248174ull;
  v114->data = std::move(v115);
  v1.p2 = std::move(v114);

  uint64_t v116 = 15987178197214944733ull;
  v1.f9 = std::move(v116);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
      0x22, 0x22, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x44, 0x44, 0x44, 0x44,
      0x44, 0x44, 0x44, 0x44, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x04, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x88,
      0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0xdd, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
      0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
      0x99, 0x99, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee,
      0xee, 0xee, 0xee,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OutOfLineSandwich1Case1_Old_Decode) {
  conformance::OutOfLineSandwich1 v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1 v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3.the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
      0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02,
      0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x05, 0x06, 0x07, 0x08, 0x68,
      0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
      0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OutOfLineSandwich1Case1_V1_Decode) {
  conformance::OutOfLineSandwich1 v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1 v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  conformance::UnionSize8Align4 v5;

  uint32_t v6 = 202050057ull;
  v5.set_variant(std::move(v6));
  v3.the_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
      0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02,
      0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00,
      0x00, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
      0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionPresent_Old_Decode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  std::unique_ptr<conformance::UnionSize8Align4> v5 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v6 = 202050057ull;
  v5->set_variant(std::move(v6));
  v3.opt_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1WithOptUnion> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
      0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02,
      0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05,
      0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c,
      0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
      0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionPresent_V1_Decode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  std::unique_ptr<conformance::UnionSize8Align4> v5 =
      std::make_unique<conformance::UnionSize8Align4>();

  uint32_t v6 = 202050057ull;
  v5->set_variant(std::move(v6));
  v3.opt_union = std::move(v5);

  uint32_t v7 = 134678021ull;
  v3.after = std::move(v7);
  std::vector<conformance::Sandwich1WithOptUnion> v8;
  v8.push_back(std::move(v3));
  v1.v = std::move(v8);

  std::string v9("hard transitions suck!");
  v1.after = std::move(v9);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74,
      0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02,
      0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00,
      0x00, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
      0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionAbsent_Old_Decode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  uint32_t v5 = 134678021ull;
  v3.after = std::move(v5);
  std::vector<conformance::Sandwich1WithOptUnion> v6;
  v6.push_back(std::move(v3));
  v1.v = std::move(v6);

  std::string v7("hard transitions suck!");
  v1.after = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d,
      0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b,
      0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
      0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, OutOfLineSandwich1WithOptUnionAbsent_V1_Decode) {
  conformance::OutOfLineSandwich1WithOptUnion v1;

  std::string v2("soft migrations rock!");
  v1.before = std::move(v2);

  conformance::Sandwich1WithOptUnion v3;

  uint32_t v4 = 67305985ull;
  v3.before = std::move(v4);

  uint32_t v5 = 134678021ull;
  v3.after = std::move(v5);
  std::vector<conformance::Sandwich1WithOptUnion> v6;
  v6.push_back(std::move(v3));
  v1.v = std::move(v6);

  std::string v7("hard transitions suck!");
  v1.after = std::move(v7);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x6d,
      0x69, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x72, 0x6f, 0x63, 0x6b,
      0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00,
      0x00, 0x00, 0x68, 0x61, 0x72, 0x64, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
      0x69, 0x6f, 0x6e, 0x73, 0x20, 0x73, 0x75, 0x63, 0x6b, 0x21, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression4_Old_Decode) {
  conformance::Regression4 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v1.s1 = std::move(v4);

  uint8_t v9 = 3ull;
  v1.f3 = std::move(v9);

  uint16_t v10 = 4ull;
  v1.f4 = std::move(v10);

  uint64_t v11 = 5ull;
  v1.f5 = std::move(v11);

  uint8_t v12 = 6ull;
  v1.f6 = std::move(v12);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x09, 0x0a, 0x0b, 0x03, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Regression4_V1_Decode) {
  conformance::Regression4 v1;

  uint8_t v2 = 1ull;
  v1.f1 = std::move(v2);

  uint32_t v3 = 2ull;
  v1.f2 = std::move(v3);

  conformance::StructSize3Align1 v4;

  uint8_t v5 = 9ull;
  uint8_t v6 = 10ull;
  uint8_t v7 = 11ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4.three_bytes = std::move(v8);
  v1.s1 = std::move(v4);

  uint8_t v9 = 3ull;
  v1.f3 = std::move(v9);

  uint16_t v10 = 4ull;
  v1.f4 = std::move(v10);

  uint64_t v11 = 5ull;
  v1.f5 = std::move(v11);

  uint8_t v12 = 6ull;
  v1.f6 = std::move(v12);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x09, 0x0a, 0x0b, 0x03, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich4Align8_Old_Decode) {
  conformance::Sandwich4Align8 v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  uint64_t v39 = 1157159078456920585ull;
  v1.alignment8_enforcement = std::move(v39);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4,
      0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x05, 0x06, 0x07, 0x08,
      0x00, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich4Align8_V1_Decode) {
  conformance::Sandwich4Align8 v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  uint64_t v39 = 1157159078456920585ull;
  v1.alignment8_enforcement = std::move(v39);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,
      0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5,
      0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
      0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich4Align8WithPointer_Old_Decode) {
  conformance::Sandwich4Align8WithPointer v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  std::unique_ptr<conformance::Size8Align8> v39 = std::make_unique<conformance::Size8Align8>();

  uint64_t v40 = 1157159078456920585ull;
  v39->data = std::move(v40);
  v1.alignment8_enforcement = std::move(v39);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x00, 0x00, 0x00, 0xa0, 0xa1, 0xa2, 0xa3,
      0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1,
      0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
      0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich4Align8WithPointer_V1_Decode) {
  conformance::Sandwich4Align8WithPointer v1;

  conformance::Sandwich4 v2;

  uint32_t v3 = 67305985ull;
  v2.before = std::move(v3);

  conformance::UnionSize36Align4 v4;

  uint8_t v5 = 160ull;
  uint8_t v6 = 161ull;
  uint8_t v7 = 162ull;
  uint8_t v8 = 163ull;
  uint8_t v9 = 164ull;
  uint8_t v10 = 165ull;
  uint8_t v11 = 166ull;
  uint8_t v12 = 167ull;
  uint8_t v13 = 168ull;
  uint8_t v14 = 169ull;
  uint8_t v15 = 170ull;
  uint8_t v16 = 171ull;
  uint8_t v17 = 172ull;
  uint8_t v18 = 173ull;
  uint8_t v19 = 174ull;
  uint8_t v20 = 175ull;
  uint8_t v21 = 176ull;
  uint8_t v22 = 177ull;
  uint8_t v23 = 178ull;
  uint8_t v24 = 179ull;
  uint8_t v25 = 180ull;
  uint8_t v26 = 181ull;
  uint8_t v27 = 182ull;
  uint8_t v28 = 183ull;
  uint8_t v29 = 184ull;
  uint8_t v30 = 185ull;
  uint8_t v31 = 186ull;
  uint8_t v32 = 187ull;
  uint8_t v33 = 188ull;
  uint8_t v34 = 189ull;
  uint8_t v35 = 190ull;
  uint8_t v36 = 191ull;
  auto v37 = std::array<uint8_t, 32>{
      std::move(v5),  std::move(v6),  std::move(v7),  std::move(v8),  std::move(v9),
      std::move(v10), std::move(v11), std::move(v12), std::move(v13), std::move(v14),
      std::move(v15), std::move(v16), std::move(v17), std::move(v18), std::move(v19),
      std::move(v20), std::move(v21), std::move(v22), std::move(v23), std::move(v24),
      std::move(v25), std::move(v26), std::move(v27), std::move(v28), std::move(v29),
      std::move(v30), std::move(v31), std::move(v32), std::move(v33), std::move(v34),
      std::move(v35), std::move(v36)};
  v4.set_variant(std::move(v37));
  v2.the_union = std::move(v4);

  uint32_t v38 = 134678021ull;
  v2.after = std::move(v38);
  v1.sandwich4 = std::move(v2);

  std::unique_ptr<conformance::Size8Align8> v39 = std::make_unique<conformance::Size8Align8>();

  uint64_t v40 = 1157159078456920585ull;
  v39->data = std::move(v40);
  v1.alignment8_enforcement = std::move(v39);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
      0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9,
      0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich8Case1_Old_Decode) {
  conformance::Sandwich8 v1;

  uint64_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x0a, 0x0b,
      0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich8Case1_V1_Decode) {
  conformance::Sandwich8 v1;

  uint64_t v2 = 67305985ull;
  v1.before = std::move(v2);

  conformance::UnionOfUnion v3;

  conformance::UnionSize8Align4 v4;

  uint32_t v5 = 202050057ull;
  v4.set_variant(std::move(v5));
  v3.set_size8align4(std::move(v4));
  v1.union_of_union = std::move(v3);

  uint32_t v6 = 134678021ull;
  v1.after = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x03, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x05, 0x06, 0x07, 0x08, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x09, 0x0a, 0x0b, 0x0c, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich9Case1_Old_Decode) {
  conformance::Sandwich9 v1;

  uint16_t v2 = 513ull;
  v1.before = std::move(v2);

  conformance::UnionWithVectorOfVectors v3;

  std::unique_ptr<conformance::StructSize3Align1> v4 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v5 = 16ull;
  uint8_t v6 = 17ull;
  uint8_t v7 = 18ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4->three_bytes = std::move(v8);
  std::unique_ptr<conformance::StructSize3Align1> v9 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v10 = 19ull;
  uint8_t v11 = 20ull;
  uint8_t v12 = 21ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9->three_bytes = std::move(v13);
  std::vector<std::unique_ptr<conformance::StructSize3Align1>> v14;
  v14.push_back(std::move(v4));
  v14.push_back(std::move(v9));
  std::vector<std::vector<std::unique_ptr<conformance::StructSize3Align1>>> v15;
  v15.push_back(std::move(v14));
  v3.set_v(std::move(v15));
  v1.the_union = std::move(v3);

  uint16_t v16 = 4625ull;
  v1.after = std::move(v16);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10, 0x11,
      0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, Sandwich9Case1_V1_Decode) {
  conformance::Sandwich9 v1;

  uint16_t v2 = 513ull;
  v1.before = std::move(v2);

  conformance::UnionWithVectorOfVectors v3;

  std::unique_ptr<conformance::StructSize3Align1> v4 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v5 = 16ull;
  uint8_t v6 = 17ull;
  uint8_t v7 = 18ull;
  auto v8 = std::array<uint8_t, 3>{std::move(v5), std::move(v6), std::move(v7)};
  v4->three_bytes = std::move(v8);
  std::unique_ptr<conformance::StructSize3Align1> v9 =
      std::make_unique<conformance::StructSize3Align1>();

  uint8_t v10 = 19ull;
  uint8_t v11 = 20ull;
  uint8_t v12 = 21ull;
  auto v13 = std::array<uint8_t, 3>{std::move(v10), std::move(v11), std::move(v12)};
  v9->three_bytes = std::move(v13);
  std::vector<std::unique_ptr<conformance::StructSize3Align1>> v14;
  v14.push_back(std::move(v4));
  v14.push_back(std::move(v9));
  std::vector<std::vector<std::unique_ptr<conformance::StructSize3Align1>>> v15;
  v15.push_back(std::move(v14));
  v3.set_v(std::move(v15));
  v1.the_union = std::move(v3);

  uint16_t v16 = 4625ull;
  v1.after = std::move(v16);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x10,
      0x11, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x14, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, SimpleTableArrayStruct_Old_Decode) {
  conformance::SimpleTableArrayStruct v1;

  conformance::TransformerSimpleTable v2;

  uint32_t v3 = 2745344416ull;
  v2.set_value(std::move(v3));
  conformance::TransformerSimpleTable v4;

  uint32_t v5 = 3014832560ull;
  v4.set_value(std::move(v5));
  auto v6 = std::array<conformance::TransformerSimpleTable, 2>{std::move(v2), std::move(v4)};
  v1.the_array = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0x00, 0x00,
      0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xb0, 0xb1, 0xb2, 0xb3, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, SimpleTableArrayStruct_V1_Decode) {
  conformance::SimpleTableArrayStruct v1;

  conformance::TransformerSimpleTable v2;

  uint32_t v3 = 2745344416ull;
  v2.set_value(std::move(v3));
  conformance::TransformerSimpleTable v4;

  uint32_t v5 = 3014832560ull;
  v4.set_value(std::move(v5));
  auto v6 = std::array<conformance::TransformerSimpleTable, 2>{std::move(v2), std::move(v4)};
  v1.the_array = std::move(v6);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa0, 0xa1, 0xa2, 0xa3, 0x00, 0x00,
      0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xb0, 0xb1, 0xb2, 0xb3, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, StringUnionVector_Old_Decode) {
  conformance::StringUnionVector v1;

  std::unique_ptr<conformance::StringUnion> v2 = std::make_unique<conformance::StringUnion>();

  std::string v3("hello");
  v2->set_s(std::move(v3));
  std::unique_ptr<conformance::StringUnion> v4 = std::make_unique<conformance::StringUnion>();

  uint8_t v5 = 170ull;
  v4->set_u8(std::move(v5));
  std::unique_ptr<conformance::StringUnion> v6 = std::make_unique<conformance::StringUnion>();

  uint8_t v7 = 187ull;
  v6->set_u8(std::move(v7));
  std::vector<std::unique_ptr<conformance::StringUnion>> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v4));
  v8.push_back(std::move(v6));
  v1.the_vector = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x68, 0x65, 0x6c, 0x6c,
      0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, StringUnionVector_V1_Decode) {
  conformance::StringUnionVector v1;

  std::unique_ptr<conformance::StringUnion> v2 = std::make_unique<conformance::StringUnion>();

  std::string v3("hello");
  v2->set_s(std::move(v3));
  std::unique_ptr<conformance::StringUnion> v4 = std::make_unique<conformance::StringUnion>();

  uint8_t v5 = 170ull;
  v4->set_u8(std::move(v5));
  std::unique_ptr<conformance::StringUnion> v6 = std::make_unique<conformance::StringUnion>();

  uint8_t v7 = 187ull;
  v6->set_u8(std::move(v7));
  std::vector<std::unique_ptr<conformance::StringUnion>> v8;
  v8.push_back(std::move(v2));
  v8.push_back(std::move(v4));
  v8.push_back(std::move(v6));
  v1.the_vector = std::move(v8);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x05,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, CreateComponentRequest_Old_Decode) {
  conformance::CreateComponentRequest v1;

  conformance::LaunchInfo v2;

  std::string v3(
      "fuchsia-pkg://fuchsia.com/fidl_compatibility_test_server_rust_write_xunion#meta/"
      "fidl_compatibility_test_server_rust_write_xunion.cmx");
  v2.url = std::move(v3);

  uint32_t v4 = 4294967295ull;
  v2.directory_request = std::move(v4);
  v1.launch_info = std::move(v2);

  uint32_t v5 = 4294967295ull;
  v1.controller = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2d, 0x70,
      0x6b, 0x67, 0x3a, 0x2f, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x63, 0x6f,
      0x6d, 0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
      0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
      0x65, 0x72, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78,
      0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x64, 0x6c,
      0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
      0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x73,
      0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2e,
      0x63, 0x6d, 0x78, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, CreateComponentRequest_V1_Decode) {
  conformance::CreateComponentRequest v1;

  conformance::LaunchInfo v2;

  std::string v3(
      "fuchsia-pkg://fuchsia.com/fidl_compatibility_test_server_rust_write_xunion#meta/"
      "fidl_compatibility_test_server_rust_write_xunion.cmx");
  v2.url = std::move(v3);

  uint32_t v4 = 4294967295ull;
  v2.directory_request = std::move(v4);
  v1.launch_info = std::move(v2);

  uint32_t v5 = 4294967295ull;
  v1.controller = std::move(v5);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
      0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2d, 0x70,
      0x6b, 0x67, 0x3a, 0x2f, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2e, 0x63, 0x6f,
      0x6d, 0x2f, 0x66, 0x69, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
      0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
      0x65, 0x72, 0x5f, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78,
      0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x23, 0x6d, 0x65, 0x74, 0x61, 0x2f, 0x66, 0x69, 0x64, 0x6c,
      0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
      0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x73,
      0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x78, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x2e,
      0x63, 0x6d, 0x78, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, UnionWithBoundString_Old_Decode) {
  conformance::UnionWithBoundStringStruct v1;

  conformance::UnionWithBoundString v2;

  std::string v3("abcd");
  v2.set_boundFiveStr(std::move(v3));
  v1.v = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x61, 0x62, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, UnionWithBoundString_V1_Decode) {
  conformance::UnionWithBoundStringStruct v1;

  conformance::UnionWithBoundString v2;

  std::string v3("abcd");
  v2.set_boundFiveStr(std::move(v3));
  v1.v = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
      0xff, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x61, 0x62, 0x63, 0x64, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, UnionMigration_SingleVariant_Old_Decode) {
  conformance::SingleVariantUnionStruct v1;

  conformance::SingleVariantUnion v2;

  uint32_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, UnionMigration_SingleVariant_V1_Decode) {
  conformance::SingleVariantUnionStruct v1;

  conformance::SingleVariantUnion v2;

  uint32_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, ReverseOrdinalUnion_Old_Decode) {
  conformance::ReverseOrdinalUnionStruct v1;

  conformance::ReverseOrdinalUnion v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, ReverseOrdinalUnion_V1_Decode) {
  conformance::ReverseOrdinalUnionStruct v1;

  conformance::ReverseOrdinalUnion v2;

  int64_t v3 = 42ull;
  v2.set_x(std::move(v3));
  v1.u = std::move(v2);

  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  EXPECT_TRUE(fidl::Equals(fidl::test::util::DecodedBytes<decltype(v1)>(bytes), v1));
}

TEST(Conformance, StringExceedsLimit_Old_Encode_Failure) {
  conformance::Length2StringWrapper v1;

  std::string v2("abc");
  v1.length_2_string = std::move(v2);

  fidl::test::util::CheckEncodeFailure<decltype(v1), fidl::test::util::EncoderFactoryOld>(
      v1, ZX_ERR_INVALID_ARGS);
}

TEST(Conformance, StringExceedsLimit_V1_Encode_Failure) {
  conformance::Length2StringWrapper v1;

  std::string v2("abc");
  v1.length_2_string = std::move(v2);

  fidl::test::util::CheckEncodeFailure<decltype(v1), fidl::test::util::EncoderFactoryV1>(
      v1, ZX_ERR_INVALID_ARGS);
}

TEST(Conformance, UnionWithBoundString_ExceedsBounds_Old_Encode_Failure) {
  conformance::UnionWithBoundStringStruct v1;

  conformance::UnionWithBoundString v2;

  std::string v3("abcdef");
  v2.set_boundFiveStr(std::move(v3));
  v1.v = std::move(v2);

  fidl::test::util::CheckEncodeFailure<decltype(v1), fidl::test::util::EncoderFactoryOld>(
      v1, ZX_ERR_INVALID_ARGS);
}

TEST(Conformance, UnionWithBoundString_ExceedsBounds_V1_Encode_Failure) {
  conformance::UnionWithBoundStringStruct v1;

  conformance::UnionWithBoundString v2;

  std::string v3("abcdef");
  v2.set_boundFiveStr(std::move(v3));
  v1.v = std::move(v2);

  fidl::test::util::CheckEncodeFailure<decltype(v1), fidl::test::util::EncoderFactoryV1>(
      v1, ZX_ERR_INVALID_ARGS);
}

TEST(Conformance, NonEmptyStringWithNullPtrBody_Old_Decode_Failure) {
  auto bytes = std::vector<uint8_t>{
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

  };
  fidl::test::util::CheckDecodeFailure<conformance::StringWrapper>(bytes, ZX_ERR_INVALID_ARGS);
}
