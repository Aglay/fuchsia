#!/bin/bash
# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

### run a fuzz test on target a device

##
## Usage: fx fuzz [options] [command] [command-arguments]
##
## Options (must be first):
##   -d, --device   <name>   Connect to device using Fuchsia link-local name.
##                           Must be specified if multiple devices are present.
##   -f, --foreground        Run in the foreground (default is background).
##   -o, --output   <dir>    Use the given directory for saving output files.
##                           Defaults to the current directory.
##   -s, --staging  <dir>    Use the given directory for staging temporary
##                           corpus files being transferred on or off of a
##                           target device. Defaults to a temporary directory
##                           that is removed on completion; use this options to
##                           preserve those temporary files on the host.
##
## Commands:
##   help                    Prints this message and exits.
##   list    [name]          Lists fuzzers matching 'name' if provided, or all
##                           fuzzers.
##   corpus  [name]          Lists the corpus instances in CIPD for the named
##                           fuzzer.
##   fetch   <name> [label]  Retrieves the corpus for the named fuzzer.  If
##                           'label' is a directory, installs the corpus from
##                           that location.  Otherwise fetches and installs the
##                           corpus from CIPD given by 'label' or the latest
##                           corpus if 'label' is omitted.
##   start   <name> [...]    Starts the named fuzzer. Additional arguments are
##                           passed to the fuzzer.  If the target does not have
##                           a corpus for the fuzzer, and the metadata lists one
##                           available, this will fetch the corpus first.
##   check   <name>          Reports information about the named fuzzer, such as
##                           execution status, corpus size, and number of
##                           crashes.
##   stop    <name>          Stops all instances of the named fuzzer.
##   repro   <name> [...]    Runs the named fuzzer on specific inputs. If no
##                           additional inputs are provided, uses all previously
##                           found crashes.
##   merge   <name> [...]    Merges the corpus for the named fuzzer. If no
##                           additional inputs are provided, minimizes the
##                           current corpus.
##   store   <name>          Gathers the current corpus from the target platform
##                           and publishes it. Requires a pristine repository,
##                           as it will updates the build files with the new
##                           corpus location.
##
## The RECOMMENDED way to run a fuzzer is to omit 'command', which will use
## "automatic" mode.  In this mode, 'fx fuzz' will fetch the latest corpus,
## start the fuzzer, and watch it to see when it stops.  Each of these steps
## respects the options above.
##
## Example workflow:
##   1. Shows available fuzzers:
##         fx fuzz list
##
##   2. Run a fuzzer for 8 hours (e.g. overnight), fetching the initial corpus
##      if needed:
##         fx fuzz -o out foo_package/bar_fuzz_test -max_total_time=28800
##
##   3. Check if the fuzzer is still running.
##         fx fuzz check foo/bar
##
##   4. Execute the fuzzer with a crashing input:
##         fx fuzz repro foo/bar crash-deadbeef
##
##   5. Use the artifacts in 'out/foo_package/bar_fuzz_test/latest' to file and
##      fix bugs. Repeat step 4 until the target doesn't crash.
##
##   6. Repeat steps 2-4 until no crashes found.
##
##   7. Minimize the resulting corpus:
##         fx fuzz merge foo/bar
##
##   8. Save the new, minimized corpus in CIPD:
##         fx fuzz store foo/bar

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"/../lib/vars.sh || exit $?

FUZZING_DIR=${FUCHSIA_DIR}/scripts/fuzzing

cmd=${1:-help}
shift
case "${cmd}" in
  help)
    fx-command-help
    ;;
  list)
    python ${FUZZING_DIR}/list_fuzzers.py "$@"
    ;;
  corpus)
    python ${FUZZING_DIR}/list_corpora.py "$@"
    ;;
  fetch)
    python ${FUZZING_DIR}/fetch_corpus.py "$@"
    ;;
  start)
    python ${FUZZING_DIR}/start_fuzzer.py "$@" &
    ;;
  check)
    python ${FUZZING_DIR}/check_fuzzer.py "$@"
    ;;
  stop)
    python ${FUZZING_DIR}/stop_fuzzer.py "$@"
    ;;
  repro)
    python ${FUZZING_DIR}/repro_units.py "$@"
    ;;
  merge)
    python ${FUZZING_DIR}/merge_corpus.py "$@"
    ;;
  store)
    python ${FUZZING_DIR}/store_corpus.py "$@"
    ;;
  *)
    if python ${FUZZING_DIR}/list_fuzzers.py "${cmd}" ; then
      python ${FUZZING_DIR}/fetch_corpus.py "${cmd}"
      python ${FUZZING_DIR}/start_fuzzer.py "${cmd}" "$@" &
    else
      fx-command-help
    fi
    ;;
esac
