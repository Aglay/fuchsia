#!/bin/bash
# Copyright 2020 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

#### CATEGORY=Internal API
### Builds and returns a list of a desired set of build artifacts

## usage: fx get-build-artifacts [--no-build] [--name NAME] MODE
##
## Builds and returns a list of paths to special sets of build artifacts within
## the GN graph relative to the build directory.
##
##  --no-build    do not build the artifacts and just return the list of them
##  --allow-empty do not fail if no such artifacts are found
##  --name        filter the set of images to pick out the particular one of
##                the same name
##
##  MODE          One of the following:
##                `images` -- returns the list of images
##                `pave`-- returns the list of images needed to pave;
##                `pave-zedboot`-- returns the list of images needed to pave
##                zedboot;
##                `netboot`-- returns the list of images needed to netboot
##                `tools` -- returns the list of host tools
##

set -o errexit

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"/lib/vars.sh
fx-config-read

readonly IMAGES_JSON="images.json"
readonly TOOL_PATHS_JSON="tool_paths.json"

build=true
mode=""
name=""
allow_empty=false
while [[ $# -ne 0 ]]; do
  case "$1" in
  --help|-h)
      fx-command-help
      exit 0
      ;;
  --no-build)
    build=false
    ;;
  --allow-empty)
    allow_empty=true
    ;;
  --name)
    shift
    name="$1"
    ;;
  -*)
    fx-error "Unknown flag: $1"
    fx-command-help
    exit 1
    ;;
  *)
    if [[ -z "${mode}" ]]; then
      mode="$1"
    else
      fx-error "unexpected argument: '$1'"
      exit 1
    fi
    ;;
  esac
  shift
done

if [[ -z "${mode}" ]]; then
  fx-error "MODE must be specified"
  fx-command-help
  exit 1
fi

manifest=""
jq_filter=".[]"
paths=()
if [[ "${mode}" == images ]]; then
  manifest="${IMAGES_JSON}"
elif [[ "${mode}" == pave ]]; then
  manifest="${IMAGES_JSON}"
  paths+=("pave.sh")
  jq_filter+=" | select(.bootserver_pave != null)"
elif [[ "${mode}" == pave-zedboot ]]; then
  manifest="${IMAGES_JSON}"
  paths+=("pave-zedboot.sh")
  jq_filter+=" | select(.bootserver_pave_zedboot != null)"
elif [[ "${mode}" == netboot ]]; then
  manifest="${IMAGES_JSON}"
  paths+=("netboot.sh")
  jq_filter+=" | select(.bootserver_netboot != null)"
elif [[ "${mode}" == tools ]]; then
  manifest="${TOOL_PATHS_JSON}"
  jq_filter+=" | select(.os == \"${HOST_OS}\" and .cpu == \"${HOST_CPU}\")"
else
  fx-error "unknown MODE: ${mode}"
  fx-command-help
  exit 1
fi

if [[ ! -z "${name}" ]]; then
  jq_filter+=" | select(.name == \"${name}\")"
  # Filter existing paths by the name as well.
  if [[ "${paths[@]}" =~ "${name}" ]]; then
    paths=("${name}")
  else
    paths=()
  fi
fi
jq_filter+=" | .path"

paths+=($(fx-command-run jq --raw-output "${jq_filter}" "${FUCHSIA_BUILD_DIR}/${manifest}"))
if $build ; then
  # For efficiency's sake, we avoid having to build zircon when building
  # host-side tools.
  if [[ "$mode" == tools ]]; then
    fx-command-run build --no-zircon "${paths[@]}" >&2
  else
    fx-command-run build "${paths[@]}" >&2
  fi
fi

if ! $allow_empty && [[ ${#paths[@]} -eq 0 ]] ; then
  if [[ -z "${name}" ]] ; then
    fx-error "found no artifacts of type \"${mode}\" found in GN graph"
  else
    fx-error "found no artifacts of type \"${mode}\" with name \"${name}\" found in GN graph"
  fi
  exit 1
fi

echo "${paths[@]}"
