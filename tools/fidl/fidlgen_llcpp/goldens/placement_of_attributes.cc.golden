// WARNING: This file is machine generated by fidlgen.

#include <fidl/test/placementofattributes/llcpp/fidl.h>

#include <memory>

auto ::llcpp::fidl::test::placementofattributes::wire::ExampleXUnion::which()
    const -> Tag {
  ZX_ASSERT(!has_invalid_tag());
  switch (ordinal_) {
    case Ordinal::kVariant:
      return static_cast<Tag>(ordinal_);
    default:
      return Tag::kUnknown;
  }
}

void ::llcpp::fidl::test::placementofattributes::wire::ExampleXUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExampleXUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExampleXUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExampleXUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

void ::llcpp::fidl::test::placementofattributes::wire::ExampleUnion::
    SizeAndOffsetAssertionHelper() {
  static_assert(sizeof(ExampleUnion) == sizeof(fidl_xunion_t));
  static_assert(offsetof(ExampleUnion, ordinal_) ==
                offsetof(fidl_xunion_t, tag));
  static_assert(offsetof(ExampleUnion, envelope_) ==
                offsetof(fidl_xunion_t, envelope));
}

namespace llcpp {
namespace fidl {
namespace test {
namespace placementofattributes {
namespace {

[[maybe_unused]] constexpr uint64_t kExampleProtocol_Method_Ordinal =
    2341079615635566980lu;

extern "C" const fidl_type_t
    fidl_test_placementofattributes_ExampleProtocolMethodRequestTable;

extern "C" const fidl_type_t
    fidl_test_placementofattributes_ExampleProtocolMethodResponseTable;

}  // namespace
::llcpp::fidl::test::placementofattributes::ExampleProtocol::ResultOf::Method::
    Method(::fidl::UnownedClientEnd<
               ::llcpp::fidl::test::placementofattributes::ExampleProtocol>
               _client,
           ::llcpp::exampleusing::wire::Empty& arg) {
  ::fidl::internal::EncodedMessageTypes<MethodRequest>::OwnedByte _request(
      zx_txid_t(0), arg);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

::llcpp::fidl::test::placementofattributes::ExampleProtocol::UnownedResultOf::
    Method::Method(
        ::fidl::UnownedClientEnd<
            ::llcpp::fidl::test::placementofattributes::ExampleProtocol>
            _client,
        uint8_t* _request_bytes, uint32_t _request_byte_capacity,
        ::llcpp::exampleusing::wire::Empty& arg) {
  ::fidl::internal::EncodedMessageTypes<MethodRequest>::UnownedByte _request(
      _request_bytes, _request_byte_capacity, 0, arg);
  _request.GetOutgoingMessage().Write(_client);
  status_ = _request.status();
  error_ = _request.error();
}

::fidl::Result ExampleProtocol::ClientImpl::Method(
    ::llcpp::exampleusing::wire::Empty arg) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = ResultOf::Method(
        ::fidl::UnownedClientEnd<
            ::llcpp::fidl::test::placementofattributes::ExampleProtocol>(
            _channel->handle()),
        arg);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

::fidl::Result ExampleProtocol::ClientImpl::Method(
    ::fidl::BufferSpan _request_buffer,
    ::llcpp::exampleusing::wire::Empty arg) {
  if (auto _channel = ::fidl::internal::ClientBase::GetChannel()) {
    auto _res = UnownedResultOf::Method(
        ::fidl::UnownedClientEnd<
            ::llcpp::fidl::test::placementofattributes::ExampleProtocol>(
            _channel->handle()),
        _request_buffer.data, _request_buffer.capacity, arg);
    return ::fidl::Result(_res.status(), _res.error());
  }
  return ::fidl::Result(ZX_ERR_CANCELED, ::fidl::kErrorChannelUnbound);
}

std::optional<::fidl::UnbindInfo> ExampleProtocol::ClientImpl::DispatchEvent(
    fidl_incoming_msg_t* msg) {
  FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
  return ::fidl::UnbindInfo{::fidl::UnbindInfo::kUnexpectedMessage,
                            ZX_ERR_NOT_SUPPORTED};
}

namespace methods {

void ExampleProtocolDispatchMethod(void* interface, void* bytes,
                                   ::fidl::Transaction* txn) {
  auto message = reinterpret_cast<::llcpp::fidl::test::placementofattributes::
                                      ExampleProtocol::MethodRequest*>(bytes);
  ::llcpp::fidl::test::placementofattributes::ExampleProtocol::Interface::
      MethodCompleter::Sync completer(txn);
  reinterpret_cast<
      ::llcpp::fidl::test::placementofattributes::ExampleProtocol::Interface*>(
      interface)
      ->Method(std::move(message->arg), completer);
}

}  // namespace methods

namespace entries {

::fidl::internal::MethodEntry ExampleProtocol[] = {
    {kExampleProtocol_Method_Ordinal,
     ::llcpp::fidl::test::placementofattributes::ExampleProtocol::
         MethodRequest::Type,
     methods::ExampleProtocolDispatchMethod},
};

}  // namespace entries

::fidl::DispatchResult ExampleProtocol::TryDispatch(Interface* impl,
                                                    fidl_incoming_msg_t* msg,
                                                    ::fidl::Transaction* txn) {
  return ::fidl::internal::TryDispatch(
      impl, msg, txn, entries::ExampleProtocol,
      entries::ExampleProtocol + sizeof(entries::ExampleProtocol) /
                                     sizeof(::fidl::internal::MethodEntry));
}

::fidl::DispatchResult ExampleProtocol::Dispatch(Interface* impl,
                                                 fidl_incoming_msg_t* msg,
                                                 ::fidl::Transaction* txn) {
  ::fidl::DispatchResult dispatch_result = TryDispatch(impl, msg, txn);
  if (dispatch_result == ::fidl::DispatchResult::kNotFound) {
    FidlHandleInfoCloseMany(msg->handles, msg->num_handles);
    txn->InternalError(
        {::fidl::UnbindInfo::kUnexpectedMessage, ZX_ERR_NOT_SUPPORTED});
  }
  return dispatch_result;
}

::fidl::DispatchResult ExampleProtocol::Interface::dispatch_message(
    fidl_incoming_msg_t* msg, ::fidl::Transaction* txn) {
  return ExampleProtocol::Dispatch(this, msg, txn);
}

void ::llcpp::fidl::test::placementofattributes::ExampleProtocol::
    MethodRequest::_InitHeader(zx_txid_t _txid) {
  fidl_init_txn_header(&_hdr, _txid, kExampleProtocol_Method_Ordinal);
}

}  // namespace placementofattributes
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
