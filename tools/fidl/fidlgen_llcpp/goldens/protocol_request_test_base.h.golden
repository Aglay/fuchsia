// WARNING: This file is machine generated by fidlgen.

#pragma once

#include <fidl/test/protocolrequest/llcpp/fidl.h>
namespace llcpp {
namespace fidl {
namespace test {
namespace protocolrequest {
namespace testing {

class Parent_TestBase
    : public ::llcpp::fidl::test::protocolrequest::Parent::Interface {
 public:
  virtual ~Parent_TestBase() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;

  using Interface = ::llcpp::fidl::test::protocolrequest::Parent::Interface;
  virtual void GetChild(
      Interface::GetChildCompleter::Sync& completer) override {
    NotImplemented_("GetChild", completer);
  }
  virtual void GetChildRequest(
      Interface::GetChildRequestCompleter::Sync& completer) override {
    NotImplemented_("GetChildRequest", completer);
  }
  virtual void TakeChild(
      ::fidl::ClientEnd<::llcpp::fidl::test::protocolrequest::Child> c,
      Interface::TakeChildCompleter::Sync& completer) override {
    NotImplemented_("TakeChild", completer);
  }
  virtual void TakeChildRequest(
      ::fidl::ServerEnd<::llcpp::fidl::test::protocolrequest::Child> r,
      Interface::TakeChildRequestCompleter::Sync& completer) override {
    NotImplemented_("TakeChildRequest", completer);
  }
};

class Child_TestBase
    : public ::llcpp::fidl::test::protocolrequest::Child::Interface {
 public:
  virtual ~Child_TestBase() {}
  virtual void NotImplemented_(const std::string& name,
                               ::fidl::CompleterBase& completer) = 0;

  using Interface = ::llcpp::fidl::test::protocolrequest::Child::Interface;
};
}  // namespace testing
}  // namespace protocolrequest
}  // namespace test
}  // namespace fidl
}  // namespace llcpp
