// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "gtest/gtest.h"
#include "tools/kazoo/outputs.h"
#include "tools/kazoo/syscall_library.h"
#include "tools/kazoo/test_ir_test_kernel_cases.test.h"

namespace {

TEST(KernelHeaderOutput, TrickyCases) {
  SyscallLibrary library;
  ASSERT_TRUE(SyscallLibraryLoader::FromJson(k_test_kernel_cases, &library));

  StringWriter writer;
  ASSERT_TRUE(KernelHeaderOutput(library, &writer));

  EXPECT_EQ(writer.Out(),
            R"(// Copyright 2019 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// WARNING: THIS FILE IS MACHINE GENERATED BY //tools/kazoo. DO NOT EDIT.

zx_status_t sys_kernelcases_bti_pin(
    zx_handle_t handle,
    uint32_t options,
    zx_handle_t vmo,
    uint64_t offset,
    uint64_t size,
    user_out_ptr<zx_paddr_t> addrs,
    size_t num_addrs,
    user_out_handle* pmt);

void sys_kernelcases_thread_exit(
    ) __NO_RETURN;

zx_status_t sys_kernelcases_mtrace_control(
    zx_handle_t handle,
    uint32_t kind,
    uint32_t action,
    uint32_t options,
    user_inout_ptr<void> ptr,
    size_t ptr_size);

zx_status_t sys_kernelcases_read(
    zx_handle_t handle,
    uint32_t options,
    user_out_ptr<void> bytes,
    uint32_t num_bytes,
    user_out_ptr<zx_handle_t> handles,
    uint32_t num_handles,
    user_out_ptr<uint32_t> actual_bytes,
    user_out_ptr<uint32_t> actual_handles);


)");
}

}  // namespace
