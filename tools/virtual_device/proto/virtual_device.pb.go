// Copyright 2020 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.5.1
// source: virtual_device.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// VirtualDevice describes how to run Fuchsia using a vm or emulator.
//
// This message should capture the set of system images necessary to boot the
// device, as well as the hardware characteristics of the device.
//
// Its primary purpose is to carry virtualization options across system
// boundaries. For example, Fuchsia infra may pass a file containing this
// message from the build to a tool that runs Fuchsia in QEMU, without
// inspecting the message itself.
type VirtualDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this virtual device.
	//
	// This is meant to help humans identify this device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Metadata indicating how to run QEMU.
	Qemu *QEMU `protobuf:"bytes,2,opt,name=qemu,proto3" json:"qemu,omitempty"`
	// The system kernel image.
	Kernel string `protobuf:"bytes,3,opt,name=kernel,proto3" json:"kernel,omitempty"`
	// The initial ramdisk image.
	Initrd string `protobuf:"bytes,4,opt,name=initrd,proto3" json:"initrd,omitempty"`
	// The primary Fuchsia volume.
	Fvm string `protobuf:"bytes,5,opt,name=fvm,proto3" json:"fvm,omitempty"`
}

func (x *VirtualDevice) Reset() {
	*x = VirtualDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virtual_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualDevice) ProtoMessage() {}

func (x *VirtualDevice) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualDevice.ProtoReflect.Descriptor instead.
func (*VirtualDevice) Descriptor() ([]byte, []int) {
	return file_virtual_device_proto_rawDescGZIP(), []int{0}
}

func (x *VirtualDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualDevice) GetQemu() *QEMU {
	if x != nil {
		return x.Qemu
	}
	return nil
}

func (x *VirtualDevice) GetKernel() string {
	if x != nil {
		return x.Kernel
	}
	return ""
}

func (x *VirtualDevice) GetInitrd() string {
	if x != nil {
		return x.Initrd
	}
	return ""
}

func (x *VirtualDevice) GetFvm() string {
	if x != nil {
		return x.Fvm
	}
	return ""
}

// QEMU describes how to run a VirtualDevice in QEMU.
type QEMU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum supported QEMU version.
	MaxVersion string `protobuf:"bytes,1,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
	// The minimum supported QEMU version.
	MinVersion string `protobuf:"bytes,2,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
}

func (x *QEMU) Reset() {
	*x = QEMU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_virtual_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QEMU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QEMU) ProtoMessage() {}

func (x *QEMU) ProtoReflect() protoreflect.Message {
	mi := &file_virtual_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QEMU.ProtoReflect.Descriptor instead.
func (*QEMU) Descriptor() ([]byte, []int) {
	return file_virtual_device_proto_rawDescGZIP(), []int{1}
}

func (x *QEMU) GetMaxVersion() string {
	if x != nil {
		return x.MaxVersion
	}
	return ""
}

func (x *QEMU) GetMinVersion() string {
	if x != nil {
		return x.MinVersion
	}
	return ""
}

var File_virtual_device_proto protoreflect.FileDescriptor

var file_virtual_device_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x71, 0x65, 0x6d, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x45, 0x4d, 0x55,
	0x52, 0x04, 0x71, 0x65, 0x6d, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x69, 0x6e, 0x69, 0x74, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x76, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x76, 0x6d, 0x22, 0x48, 0x0a, 0x04, 0x51, 0x45, 0x4d, 0x55,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x6f, 0x2e, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61,
	0x2e, 0x64, 0x65, 0x76, 0x2f, 0x66, 0x75, 0x63, 0x68, 0x73, 0x69, 0x61, 0x2f, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_virtual_device_proto_rawDescOnce sync.Once
	file_virtual_device_proto_rawDescData = file_virtual_device_proto_rawDesc
)

func file_virtual_device_proto_rawDescGZIP() []byte {
	file_virtual_device_proto_rawDescOnce.Do(func() {
		file_virtual_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_virtual_device_proto_rawDescData)
	})
	return file_virtual_device_proto_rawDescData
}

var file_virtual_device_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_virtual_device_proto_goTypes = []interface{}{
	(*VirtualDevice)(nil), // 0: virtual_device.VirtualDevice
	(*QEMU)(nil),          // 1: virtual_device.QEMU
}
var file_virtual_device_proto_depIdxs = []int32{
	1, // 0: virtual_device.VirtualDevice.qemu:type_name -> virtual_device.QEMU
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_virtual_device_proto_init() }
func file_virtual_device_proto_init() {
	if File_virtual_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_virtual_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_virtual_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QEMU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_virtual_device_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_virtual_device_proto_goTypes,
		DependencyIndexes: file_virtual_device_proto_depIdxs,
		MessageInfos:      file_virtual_device_proto_msgTypes,
	}.Build()
	File_virtual_device_proto = out.File
	file_virtual_device_proto_rawDesc = nil
	file_virtual_device_proto_goTypes = nil
	file_virtual_device_proto_depIdxs = nil
}
