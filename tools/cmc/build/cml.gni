# Copyright 2018 The Fuchsia Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//tools/cmc/build/cmc.gni")

# Compiles a cml file into a cm file.
# Any "include"s are merged into the cml and produce an intermediate file.
#
# Parameters
#
#   manifest (required)
#     [file] The path to the cml file that is to be compiled.
#
#   output_name (optional)
#     [path] Name for the output.
#     If not specified, the target name is used.
#
#   deps (optional)
#   testonly (optional)
#   visibility (optional)
template("cm") {
  cmc("${target_name}_include") {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "testonly",
                             "visibility",
                           ])
    inputs = [ invoker.manifest ]
    output = "${target_out_dir}/${target_name}.cml"
    outputs = [ output ]
    depfile = output + ".d"

    args = [
      "include",
      rebase_path(invoker.manifest, root_build_dir),
      "--output",
      rebase_path(output, root_build_dir),
      "--includepath",
      rebase_path("//", root_build_dir),
      "--depfile",
      rebase_path(depfile, root_build_dir),
    ]
  }

  cmc(target_name) {
    forward_variables_from(invoker,
                           [
                             "deps",
                             "output_name",
                             "testonly",
                             "visibility",
                           ])

    if (!defined(output_name)) {
      output_name = target_name
    }

    if (!defined(deps)) {
      deps = []
    }
    deps += [ ":${target_name}_include" ]

    compiled_output = "${target_out_dir}/${output_name}"
    inputs = get_target_outputs(":${target_name}_include")
    outputs = [ compiled_output ]

    args = [
      "compile",
      rebase_path(inputs[0], root_build_dir),
      "--output",
      rebase_path(compiled_output, root_build_dir),
    ]
  }
}
