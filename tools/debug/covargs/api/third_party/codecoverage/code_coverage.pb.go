// Code generated by protoc-gen-go. DO NOT EDIT.
// source: codecoverage/code_coverage.proto

package codecoverage

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Represents a configuration category that is related to the coverage data.
type ConfigCategory int32

const (
	// Related to produce the test binary and data.
	ConfigCategory_BUILD ConfigCategory = 0
	// Related to run the tests.
	ConfigCategory_TEST ConfigCategory = 1
	// Related to the test itself.
	ConfigCategory_TESTHARNESS ConfigCategory = 2
	// Related to the coverage tool.
	ConfigCategory_COVERAGE_TOOL ConfigCategory = 3
)

var ConfigCategory_name = map[int32]string{
	0: "BUILD",
	1: "TEST",
	2: "TESTHARNESS",
	3: "COVERAGE_TOOL",
}

var ConfigCategory_value = map[string]int32{
	"BUILD":         0,
	"TEST":          1,
	"TESTHARNESS":   2,
	"COVERAGE_TOOL": 3,
}

func (x ConfigCategory) String() string {
	return proto.EnumName(ConfigCategory_name, int32(x))
}

func (ConfigCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{0}
}

// Represents the code coverage for multiple full lines in the file.
type LineRange struct {
	// The first line in the range. Inclusive.
	First int32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	// The last line in the range. Inclusive.
	// If not set, it is the same as `first` above.
	Last int32 `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	// Meaning of values:
	// * positive: the lines are covered.
	// * zero: the lines are instrumented but not covered by tests.
	// * negative: if the lines are uncoverable or uninstrumented
	//
	// If the coverage tool doesn't support counting how many times a line was
	// executed, the value could only be 1 or 0; otherwise the value could be
	// larger than 1. If the values are the exactly the same for a few consecutive
	// lines, they could be merged into one bigger line range.
	// For example, four small ranges in the middle are merged into a bigger one.
	// |line number|actual count|
	// |28         |1           |   --->  LineRange(?, 28, 1)
	// |29         |10          |   --->  LineRange(29, 32, 10)
	// |30         |10          |
	// |31         |10          |
	// |32         |10          |
	// |33         |1           |   --->  LineRange(33, ?, 1)
	//
	// TODO(crbug.com/925886): As of Jan 28th, 2019, there could be negative
	// |count| in the metadata.
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LineRange) Reset()         { *m = LineRange{} }
func (m *LineRange) String() string { return proto.CompactTextString(m) }
func (*LineRange) ProtoMessage()    {}
func (*LineRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{0}
}

func (m *LineRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LineRange.Unmarshal(m, b)
}
func (m *LineRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LineRange.Marshal(b, m, deterministic)
}
func (m *LineRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LineRange.Merge(m, src)
}
func (m *LineRange) XXX_Size() int {
	return xxx_messageInfo_LineRange.Size(m)
}
func (m *LineRange) XXX_DiscardUnknown() {
	xxx_messageInfo_LineRange.DiscardUnknown(m)
}

var xxx_messageInfo_LineRange proto.InternalMessageInfo

func (m *LineRange) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *LineRange) GetLast() int32 {
	if m != nil {
		return m.Last
	}
	return 0
}

func (m *LineRange) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// Represents column range within the same line.
type ColumnRange struct {
	// The first column of the code block. Inclusive.
	First int32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	// The last column of the code block. Inclusive.
	// If not set, it is the same as `first` above.
	Last                 int32    `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ColumnRange) Reset()         { *m = ColumnRange{} }
func (m *ColumnRange) String() string { return proto.CompactTextString(m) }
func (*ColumnRange) ProtoMessage()    {}
func (*ColumnRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{1}
}

func (m *ColumnRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnRange.Unmarshal(m, b)
}
func (m *ColumnRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnRange.Marshal(b, m, deterministic)
}
func (m *ColumnRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnRange.Merge(m, src)
}
func (m *ColumnRange) XXX_Size() int {
	return xxx_messageInfo_ColumnRange.Size(m)
}
func (m *ColumnRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnRange.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnRange proto.InternalMessageInfo

func (m *ColumnRange) GetFirst() int32 {
	if m != nil {
		return m.First
	}
	return 0
}

func (m *ColumnRange) GetLast() int32 {
	if m != nil {
		return m.Last
	}
	return 0
}

// Represents multiple column ranges of a line.
type ColumnRanges struct {
	// The line number of the code block.
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// The column ranges within the line.
	Ranges               []*ColumnRange `protobuf:"bytes,2,rep,name=ranges,proto3" json:"ranges,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ColumnRanges) Reset()         { *m = ColumnRanges{} }
func (m *ColumnRanges) String() string { return proto.CompactTextString(m) }
func (*ColumnRanges) ProtoMessage()    {}
func (*ColumnRanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{2}
}

func (m *ColumnRanges) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ColumnRanges.Unmarshal(m, b)
}
func (m *ColumnRanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ColumnRanges.Marshal(b, m, deterministic)
}
func (m *ColumnRanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ColumnRanges.Merge(m, src)
}
func (m *ColumnRanges) XXX_Size() int {
	return xxx_messageInfo_ColumnRanges.Size(m)
}
func (m *ColumnRanges) XXX_DiscardUnknown() {
	xxx_messageInfo_ColumnRanges.DiscardUnknown(m)
}

var xxx_messageInfo_ColumnRanges proto.InternalMessageInfo

func (m *ColumnRanges) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *ColumnRanges) GetRanges() []*ColumnRange {
	if m != nil {
		return m.Ranges
	}
	return nil
}

// Represents the code coverage of code branches at a line.
type Branch struct {
	// The line number which the branch info belongs to.
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// The total number of branches.
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// The number of covered branches.
	Covered              int32    `protobuf:"varint,3,opt,name=covered,proto3" json:"covered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Branch) Reset()         { *m = Branch{} }
func (m *Branch) String() string { return proto.CompactTextString(m) }
func (*Branch) ProtoMessage()    {}
func (*Branch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{3}
}

func (m *Branch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Branch.Unmarshal(m, b)
}
func (m *Branch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Branch.Marshal(b, m, deterministic)
}
func (m *Branch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Branch.Merge(m, src)
}
func (m *Branch) XXX_Size() int {
	return xxx_messageInfo_Branch.Size(m)
}
func (m *Branch) XXX_DiscardUnknown() {
	xxx_messageInfo_Branch.DiscardUnknown(m)
}

var xxx_messageInfo_Branch proto.InternalMessageInfo

func (m *Branch) GetLine() int32 {
	if m != nil {
		return m.Line
	}
	return 0
}

func (m *Branch) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Branch) GetCovered() int32 {
	if m != nil {
		return m.Covered
	}
	return 0
}

// Represents a code coverage metric of a file or a directory.
type Metric struct {
	// The name of the metric, e.g. "line", "function", "region", etc.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The total number of coverable ones.
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	// The number of covered ones.
	Covered              int32    `protobuf:"varint,3,opt,name=covered,proto3" json:"covered,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{4}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *Metric) GetCovered() int32 {
	if m != nil {
		return m.Covered
	}
	return 0
}

// Represents the code coverage info of a single source file.
type File struct {
	// Source absolute path to the file, e.g. '//base/file.cc'.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The total number of lines in the file.
	TotalLines int32 `protobuf:"varint,2,opt,name=total_lines,json=totalLines,proto3" json:"total_lines,omitempty"`
	// The code coverage info of the lines in the file.
	// If a line is not executable or not instrumented to collect coverage info,
	// it is not coverable and won't be included here.
	Lines []*LineRange `protobuf:"bytes,3,rep,name=lines,proto3" json:"lines,omitempty"`
	// The uncovered code blocks in the file.
	UncoveredBlocks []*ColumnRanges `protobuf:"bytes,4,rep,name=uncovered_blocks,json=uncoveredBlocks,proto3" json:"uncovered_blocks,omitempty"`
	// The code branch info for if/else/etc.
	Branches []*Branch `protobuf:"bytes,5,rep,name=branches,proto3" json:"branches,omitempty"`
	// Code coverage summary for the file.
	Summaries []*Metric `protobuf:"bytes,6,rep,name=summaries,proto3" json:"summaries,omitempty"`
	// The git hash (up to the revision in the checkout) of the commit in Gitiles
	// when the file was most recently changed.
	// E.g. fc7b1de555d4b1fe5b7ff2e4c99662a10cf4ddd6.
	// Empty if the file not tracked by gitiles, such as generated source files.
	Revision string `protobuf:"bytes,7,opt,name=revision,proto3" json:"revision,omitempty"`
	// The UNIX timestamp of the committer date for the revision above.
	Timestamp            int64    `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{5}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *File) GetTotalLines() int32 {
	if m != nil {
		return m.TotalLines
	}
	return 0
}

func (m *File) GetLines() []*LineRange {
	if m != nil {
		return m.Lines
	}
	return nil
}

func (m *File) GetUncoveredBlocks() []*ColumnRanges {
	if m != nil {
		return m.UncoveredBlocks
	}
	return nil
}

func (m *File) GetBranches() []*Branch {
	if m != nil {
		return m.Branches
	}
	return nil
}

func (m *File) GetSummaries() []*Metric {
	if m != nil {
		return m.Summaries
	}
	return nil
}

func (m *File) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *File) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Represents the summary metrics for a given file or a directory.
type CoverageSummary struct {
	// The name of the file, directory, or crbug component.
	// For a directory, it should end with a "/", e.g. "base/".
	// For a file, it should be the file name.
	// For a crbug component, it should be the full path.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The full path to the file, directory, or crbug component.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The metrics for the file or directory.
	Summaries            []*Metric `protobuf:"bytes,3,rep,name=summaries,proto3" json:"summaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CoverageSummary) Reset()         { *m = CoverageSummary{} }
func (m *CoverageSummary) String() string { return proto.CompactTextString(m) }
func (*CoverageSummary) ProtoMessage()    {}
func (*CoverageSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{6}
}

func (m *CoverageSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoverageSummary.Unmarshal(m, b)
}
func (m *CoverageSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoverageSummary.Marshal(b, m, deterministic)
}
func (m *CoverageSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoverageSummary.Merge(m, src)
}
func (m *CoverageSummary) XXX_Size() int {
	return xxx_messageInfo_CoverageSummary.Size(m)
}
func (m *CoverageSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_CoverageSummary.DiscardUnknown(m)
}

var xxx_messageInfo_CoverageSummary proto.InternalMessageInfo

func (m *CoverageSummary) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoverageSummary) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CoverageSummary) GetSummaries() []*Metric {
	if m != nil {
		return m.Summaries
	}
	return nil
}

// Represents the summary metrics for:
// * A single directory and its immediate children.
// * All directories mapping to a single crbug component.
type GroupCoverageSummary struct {
	// Two cases:
	// * The full path of the directory relative to the root of the code base.
	//   For a directory, this should end with a "/", e.g. "//base/".
	//   For the root directory, this should be "//".
	// * The full path of the crbug component like "Blink>Storage>AppCache".
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The coverage metrics for its sub directories.
	Dirs []*CoverageSummary `protobuf:"bytes,2,rep,name=dirs,proto3" json:"dirs,omitempty"`
	// The coverage metrics for all the files within the directory.
	Files []*CoverageSummary `protobuf:"bytes,3,rep,name=files,proto3" json:"files,omitempty"`
	// Code coverage summary for the group.
	Summaries            []*Metric `protobuf:"bytes,6,rep,name=summaries,proto3" json:"summaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GroupCoverageSummary) Reset()         { *m = GroupCoverageSummary{} }
func (m *GroupCoverageSummary) String() string { return proto.CompactTextString(m) }
func (*GroupCoverageSummary) ProtoMessage()    {}
func (*GroupCoverageSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{7}
}

func (m *GroupCoverageSummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupCoverageSummary.Unmarshal(m, b)
}
func (m *GroupCoverageSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupCoverageSummary.Marshal(b, m, deterministic)
}
func (m *GroupCoverageSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupCoverageSummary.Merge(m, src)
}
func (m *GroupCoverageSummary) XXX_Size() int {
	return xxx_messageInfo_GroupCoverageSummary.Size(m)
}
func (m *GroupCoverageSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupCoverageSummary.DiscardUnknown(m)
}

var xxx_messageInfo_GroupCoverageSummary proto.InternalMessageInfo

func (m *GroupCoverageSummary) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *GroupCoverageSummary) GetDirs() []*CoverageSummary {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func (m *GroupCoverageSummary) GetFiles() []*CoverageSummary {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *GroupCoverageSummary) GetSummaries() []*Metric {
	if m != nil {
		return m.Summaries
	}
	return nil
}

// Represents a commit in a Gitiles repository.
type GitilesCommit struct {
	// Hostname of the Gitiles server, e.g. chromium.googlesource.com.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Project name in the Gitiles, e.g. chromium/src.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// The git hash of the commit in Gitiles, e.g.
	// fc7b1de555d4b1fe5b7ff2e4c99662a10cf4ddd6.
	Revision string `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	// The commit position of the commit in Gitiles, e.g. 606065.
	// since not every repository has commit position.
	CommitPosition       int32    `protobuf:"varint,4,opt,name=commit_position,json=commitPosition,proto3" json:"commit_position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GitilesCommit) Reset()         { *m = GitilesCommit{} }
func (m *GitilesCommit) String() string { return proto.CompactTextString(m) }
func (*GitilesCommit) ProtoMessage()    {}
func (*GitilesCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{8}
}

func (m *GitilesCommit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GitilesCommit.Unmarshal(m, b)
}
func (m *GitilesCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GitilesCommit.Marshal(b, m, deterministic)
}
func (m *GitilesCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GitilesCommit.Merge(m, src)
}
func (m *GitilesCommit) XXX_Size() int {
	return xxx_messageInfo_GitilesCommit.Size(m)
}
func (m *GitilesCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_GitilesCommit.DiscardUnknown(m)
}

var xxx_messageInfo_GitilesCommit proto.InternalMessageInfo

func (m *GitilesCommit) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GitilesCommit) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *GitilesCommit) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

func (m *GitilesCommit) GetCommitPosition() int32 {
	if m != nil {
		return m.CommitPosition
	}
	return 0
}

// Represents a patch of a CL in a Gerrit project.
type GerritPatch struct {
	// Hostname of the Gerrit server, e.g. chromium-review.googlesource.com.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// The id of the CL, e.g. 1296501.
	Cl int32 `protobuf:"varint,2,opt,name=cl,proto3" json:"cl,omitempty"`
	// The id of the patch in the CL, e.g. 43.
	Patch int32 `protobuf:"varint,3,opt,name=patch,proto3" json:"patch,omitempty"`
	// Project name of the CL, e.g. chromium/src.
	// Optional, since the cl number is unique in a Gerrit server.
	Project              string   `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GerritPatch) Reset()         { *m = GerritPatch{} }
func (m *GerritPatch) String() string { return proto.CompactTextString(m) }
func (*GerritPatch) ProtoMessage()    {}
func (*GerritPatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{9}
}

func (m *GerritPatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GerritPatch.Unmarshal(m, b)
}
func (m *GerritPatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GerritPatch.Marshal(b, m, deterministic)
}
func (m *GerritPatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GerritPatch.Merge(m, src)
}
func (m *GerritPatch) XXX_Size() int {
	return xxx_messageInfo_GerritPatch.Size(m)
}
func (m *GerritPatch) XXX_DiscardUnknown() {
	xxx_messageInfo_GerritPatch.DiscardUnknown(m)
}

var xxx_messageInfo_GerritPatch proto.InternalMessageInfo

func (m *GerritPatch) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *GerritPatch) GetCl() int32 {
	if m != nil {
		return m.Cl
	}
	return 0
}

func (m *GerritPatch) GetPatch() int32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *GerritPatch) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

// Represents a config setting.
type ConfigSetting struct {
	// The category of the setting.
	Category ConfigCategory `protobuf:"varint,1,opt,name=category,proto3,enum=codecoverage.ConfigCategory" json:"category,omitempty"`
	// Name of the key, e.g. "builder".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Value for the key, e.g. "Linux Builder".
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigSetting) Reset()         { *m = ConfigSetting{} }
func (m *ConfigSetting) String() string { return proto.CompactTextString(m) }
func (*ConfigSetting) ProtoMessage()    {}
func (*ConfigSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{10}
}

func (m *ConfigSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigSetting.Unmarshal(m, b)
}
func (m *ConfigSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigSetting.Marshal(b, m, deterministic)
}
func (m *ConfigSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigSetting.Merge(m, src)
}
func (m *ConfigSetting) XXX_Size() int {
	return xxx_messageInfo_ConfigSetting.Size(m)
}
func (m *ConfigSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigSetting proto.InternalMessageInfo

func (m *ConfigSetting) GetCategory() ConfigCategory {
	if m != nil {
		return m.Category
	}
	return ConfigCategory_BUILD
}

func (m *ConfigSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ConfigSetting) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Represents a code coverage report.
type CoverageReport struct {
	// Either a Gitiles commit or a Gerrit patch must be provided.
	Commit *GitilesCommit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Patch  *GerritPatch   `protobuf:"bytes,2,opt,name=patch,proto3" json:"patch,omitempty"`
	// The build/test/etc configurations that were used to generate coverage data.
	BuildConfigs []*ConfigSetting `protobuf:"bytes,3,rep,name=build_configs,json=buildConfigs,proto3" json:"build_configs,omitempty"`
	// Code coverage info of individual source files.
	Files []*File `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
	// Code coverage info of individual source files saved in separate files.
	FileShards []string `protobuf:"bytes,5,rep,name=file_shards,json=fileShards,proto3" json:"file_shards,omitempty"`
	// Code coverage summary for all directories.
	Dirs []*GroupCoverageSummary `protobuf:"bytes,6,rep,name=dirs,proto3" json:"dirs,omitempty"`
	// Code coverage summary for all crbug components.
	Components []*GroupCoverageSummary `protobuf:"bytes,7,rep,name=components,proto3" json:"components,omitempty"`
	// Code coverage summary for the root directory.
	Summaries            []*Metric `protobuf:"bytes,8,rep,name=summaries,proto3" json:"summaries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CoverageReport) Reset()         { *m = CoverageReport{} }
func (m *CoverageReport) String() string { return proto.CompactTextString(m) }
func (*CoverageReport) ProtoMessage()    {}
func (*CoverageReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b2c0d91799947b3, []int{11}
}

func (m *CoverageReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoverageReport.Unmarshal(m, b)
}
func (m *CoverageReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoverageReport.Marshal(b, m, deterministic)
}
func (m *CoverageReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoverageReport.Merge(m, src)
}
func (m *CoverageReport) XXX_Size() int {
	return xxx_messageInfo_CoverageReport.Size(m)
}
func (m *CoverageReport) XXX_DiscardUnknown() {
	xxx_messageInfo_CoverageReport.DiscardUnknown(m)
}

var xxx_messageInfo_CoverageReport proto.InternalMessageInfo

func (m *CoverageReport) GetCommit() *GitilesCommit {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *CoverageReport) GetPatch() *GerritPatch {
	if m != nil {
		return m.Patch
	}
	return nil
}

func (m *CoverageReport) GetBuildConfigs() []*ConfigSetting {
	if m != nil {
		return m.BuildConfigs
	}
	return nil
}

func (m *CoverageReport) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *CoverageReport) GetFileShards() []string {
	if m != nil {
		return m.FileShards
	}
	return nil
}

func (m *CoverageReport) GetDirs() []*GroupCoverageSummary {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func (m *CoverageReport) GetComponents() []*GroupCoverageSummary {
	if m != nil {
		return m.Components
	}
	return nil
}

func (m *CoverageReport) GetSummaries() []*Metric {
	if m != nil {
		return m.Summaries
	}
	return nil
}

func init() {
	proto.RegisterEnum("codecoverage.ConfigCategory", ConfigCategory_name, ConfigCategory_value)
	proto.RegisterType((*LineRange)(nil), "codecoverage.LineRange")
	proto.RegisterType((*ColumnRange)(nil), "codecoverage.ColumnRange")
	proto.RegisterType((*ColumnRanges)(nil), "codecoverage.ColumnRanges")
	proto.RegisterType((*Branch)(nil), "codecoverage.Branch")
	proto.RegisterType((*Metric)(nil), "codecoverage.Metric")
	proto.RegisterType((*File)(nil), "codecoverage.File")
	proto.RegisterType((*CoverageSummary)(nil), "codecoverage.CoverageSummary")
	proto.RegisterType((*GroupCoverageSummary)(nil), "codecoverage.GroupCoverageSummary")
	proto.RegisterType((*GitilesCommit)(nil), "codecoverage.GitilesCommit")
	proto.RegisterType((*GerritPatch)(nil), "codecoverage.GerritPatch")
	proto.RegisterType((*ConfigSetting)(nil), "codecoverage.ConfigSetting")
	proto.RegisterType((*CoverageReport)(nil), "codecoverage.CoverageReport")
}

func init() { proto.RegisterFile("codecoverage/code_coverage.proto", fileDescriptor_5b2c0d91799947b3) }

var fileDescriptor_5b2c0d91799947b3 = []byte{
	// 772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x6e, 0xea, 0x46,
	0x10, 0x2e, 0x36, 0x10, 0x18, 0xc2, 0x4f, 0x57, 0x48, 0x75, 0x93, 0x54, 0x41, 0xbe, 0x29, 0xaa,
	0xd4, 0xa4, 0x21, 0x52, 0xdb, 0xcb, 0x06, 0x4a, 0x69, 0x54, 0xda, 0x44, 0x4b, 0xd2, 0x5b, 0x64,
	0xcc, 0x06, 0xb6, 0xb5, 0xbd, 0xd6, 0xee, 0x12, 0x29, 0xb7, 0x7d, 0xa5, 0xbe, 0xc3, 0xb9, 0x3f,
	0x6f, 0x74, 0xb4, 0x3f, 0x26, 0x36, 0xe1, 0xe8, 0x24, 0xe7, 0x6e, 0x66, 0xfc, 0x7d, 0xb3, 0xb3,
	0xdf, 0xcc, 0xac, 0xa1, 0x17, 0xb2, 0x25, 0x09, 0xd9, 0x23, 0xe1, 0xc1, 0x8a, 0x9c, 0x2b, 0x67,
	0x9e, 0x79, 0x67, 0x29, 0x67, 0x92, 0xa1, 0xc3, 0x3c, 0xc2, 0xff, 0x03, 0xea, 0x53, 0x9a, 0x10,
	0x1c, 0x24, 0x2b, 0x82, 0xba, 0x50, 0x79, 0xa0, 0x5c, 0x48, 0xaf, 0xd4, 0x2b, 0xf5, 0x2b, 0xd8,
	0x38, 0x08, 0x41, 0x39, 0x0a, 0x84, 0xf4, 0x1c, 0x1d, 0xd4, 0xb6, 0x42, 0x86, 0x6c, 0x93, 0x48,
	0xcf, 0xed, 0x95, 0xfa, 0x2e, 0x36, 0x8e, 0xff, 0x13, 0x34, 0x46, 0x2c, 0xda, 0xc4, 0xc9, 0x1b,
	0xd3, 0xf9, 0xf7, 0x70, 0x98, 0x23, 0x0a, 0x8d, 0xa1, 0x09, 0xb1, 0x44, 0x6d, 0xa3, 0x0b, 0xa8,
	0x72, 0xfd, 0xd5, 0x73, 0x7a, 0x6e, 0xbf, 0x31, 0xf8, 0xfa, 0x2c, 0x7f, 0x91, 0xb3, 0x1c, 0x1f,
	0x5b, 0xa0, 0x3f, 0x85, 0xea, 0x90, 0x07, 0x49, 0xb8, 0xde, 0x9b, 0xb0, 0x0b, 0x15, 0xc9, 0x64,
	0x10, 0xd9, 0x4a, 0x8c, 0x83, 0x3c, 0x38, 0xd0, 0x39, 0xc9, 0x52, 0xdf, 0xad, 0x82, 0x33, 0x57,
	0x65, 0xfb, 0x93, 0x48, 0x4e, 0x43, 0x95, 0x2d, 0x09, 0x62, 0x93, 0xad, 0x8e, 0xb5, 0xfd, 0xe6,
	0x6c, 0xef, 0x1d, 0x28, 0xff, 0x46, 0x23, 0xa2, 0x92, 0xa5, 0x81, 0x5c, 0x67, 0xc9, 0x94, 0x8d,
	0x4e, 0xa1, 0xa1, 0xf9, 0x73, 0x55, 0xa8, 0xb0, 0x29, 0x41, 0x87, 0x54, 0xb7, 0x04, 0xfa, 0x1e,
	0x2a, 0xe6, 0x93, 0xab, 0xb5, 0xf8, 0xaa, 0xa8, 0xc5, 0xb6, 0xa3, 0xd8, 0xa0, 0xd0, 0x18, 0x3a,
	0x9b, 0xc4, 0x9e, 0x3c, 0x5f, 0x44, 0x2c, 0xfc, 0x57, 0x78, 0x65, 0xcd, 0x3c, 0xfa, 0xa8, 0x8a,
	0x02, 0xb7, 0xb7, 0x9c, 0xa1, 0xa6, 0xa0, 0x1f, 0xa0, 0xb6, 0xd0, 0x7a, 0x12, 0xe1, 0x55, 0x34,
	0xbd, 0x5b, 0xa4, 0x1b, 0xb5, 0xf1, 0x16, 0x85, 0x06, 0x50, 0x17, 0x9b, 0x38, 0x0e, 0x38, 0x25,
	0xc2, 0xab, 0xee, 0xa3, 0x18, 0x49, 0xf1, 0x33, 0x0c, 0x1d, 0x41, 0x8d, 0x93, 0x47, 0x2a, 0x28,
	0x4b, 0xbc, 0x03, 0x2d, 0xca, 0xd6, 0x47, 0x27, 0x50, 0x97, 0x34, 0x26, 0x42, 0x06, 0x71, 0xea,
	0xd5, 0xf4, 0xec, 0x3d, 0x07, 0xfc, 0x18, 0xda, 0x23, 0x9b, 0x77, 0xa6, 0xd3, 0x3d, 0xed, 0x6d,
	0x55, 0xa6, 0xb8, 0x93, 0x53, 0xbc, 0x50, 0xa8, 0xfb, 0xaa, 0x42, 0xfd, 0x77, 0x25, 0xe8, 0x4e,
	0x38, 0xdb, 0xa4, 0x7b, 0x0e, 0x7d, 0xd1, 0xd2, 0x0b, 0x28, 0x2f, 0x29, 0xcf, 0x86, 0xf7, 0x9b,
	0x5d, 0xd9, 0x0b, 0x09, 0xb0, 0x86, 0xa2, 0x4b, 0xb5, 0x3f, 0xd1, 0xb6, 0x9e, 0x4f, 0x70, 0x0c,
	0xf6, 0x73, 0x14, 0xf7, 0xff, 0x2b, 0x41, 0x73, 0x42, 0xa5, 0xe2, 0x8f, 0x58, 0x1c, 0x53, 0xbd,
	0xa4, 0x6b, 0x66, 0x37, 0xb7, 0x8e, 0xb5, 0xad, 0x66, 0x39, 0xe5, 0xec, 0x1f, 0x12, 0x4a, 0xab,
	0x5c, 0xe6, 0x16, 0x3a, 0xe6, 0xee, 0x74, 0xec, 0x5b, 0x68, 0x87, 0x3a, 0xe7, 0x3c, 0x65, 0x82,
	0x4a, 0x05, 0x29, 0xeb, 0x71, 0x6e, 0x99, 0xf0, 0xad, 0x8d, 0xfa, 0x01, 0x34, 0x26, 0x84, 0x73,
	0x2a, 0x6f, 0x03, 0x69, 0x36, 0xf6, 0x45, 0x05, 0x2d, 0x70, 0xc2, 0x6c, 0xc1, 0x9c, 0x30, 0x52,
	0x3b, 0x97, 0x2a, 0xb0, 0xdd, 0x2d, 0xe3, 0xe4, 0xeb, 0x2c, 0x17, 0xea, 0xf4, 0x05, 0x34, 0x47,
	0x2c, 0x79, 0xa0, 0xab, 0x19, 0x91, 0x92, 0x26, 0x2b, 0xf4, 0x33, 0xd4, 0xc2, 0x40, 0x92, 0x15,
	0xe3, 0x4f, 0xfa, 0xa0, 0xd6, 0xe0, 0x64, 0x57, 0x64, 0x05, 0x1f, 0x59, 0x0c, 0xde, 0xa2, 0xb7,
	0x73, 0xe5, 0x14, 0x9f, 0x80, 0xc7, 0x20, 0xda, 0x10, 0xab, 0x81, 0x71, 0xfc, 0xff, 0x5d, 0x68,
	0x65, 0xbd, 0xc2, 0x24, 0x65, 0x5c, 0xa2, 0x4b, 0xa8, 0x9a, 0xcb, 0xeb, 0x43, 0x1b, 0x83, 0xe3,
	0xe2, 0xa1, 0x85, 0x56, 0x60, 0x0b, 0x45, 0xe7, 0xd9, 0x65, 0x1d, 0xcd, 0xd9, 0x79, 0xfe, 0x72,
	0xd2, 0x65, 0x3a, 0xfc, 0x02, 0xcd, 0xc5, 0x86, 0x46, 0xcb, 0x79, 0xa8, 0x2f, 0x91, 0x8d, 0xd1,
	0xf1, 0xbe, 0x1b, 0x5a, 0x41, 0xf0, 0xa1, 0x66, 0x98, 0x98, 0x40, 0xfd, 0x6c, 0x00, 0xcd, 0x5b,
	0x81, 0x8a, 0x4c, 0xf5, 0x7a, 0x65, 0x53, 0x77, 0x0a, 0x0d, 0x65, 0xcc, 0xc5, 0x3a, 0xe0, 0x4b,
	0xf3, 0x38, 0xd4, 0x31, 0xa8, 0xd0, 0x4c, 0x47, 0xd0, 0x8f, 0x76, 0xfc, 0xcd, 0x44, 0xfa, 0x3b,
	0xc5, 0xef, 0x59, 0x22, 0xbb, 0x03, 0x43, 0x80, 0x90, 0xc5, 0x29, 0x4b, 0x48, 0x22, 0x85, 0x77,
	0xf0, 0x6a, 0x76, 0x8e, 0x55, 0x5c, 0x89, 0xda, 0xab, 0x56, 0xe2, 0xbb, 0x6b, 0xd5, 0xb4, 0x7c,
	0xef, 0x51, 0x1d, 0x2a, 0xc3, 0xfb, 0xeb, 0xe9, 0xaf, 0x9d, 0x2f, 0x50, 0x0d, 0xca, 0x77, 0xe3,
	0xd9, 0x5d, 0xa7, 0x84, 0xda, 0xd0, 0x50, 0xd6, 0xef, 0x57, 0xf8, 0xaf, 0xf1, 0x6c, 0xd6, 0x71,
	0xd0, 0x97, 0xd0, 0x1c, 0xdd, 0xfc, 0x3d, 0xc6, 0x57, 0x93, 0xf1, 0xfc, 0xee, 0xe6, 0x66, 0xda,
	0x71, 0x17, 0x55, 0xfd, 0xdf, 0xbd, 0xfc, 0x10, 0x00, 0x00, 0xff, 0xff, 0x03, 0xd3, 0x78, 0x02,
	0x9b, 0x07, 0x00, 0x00,
}
