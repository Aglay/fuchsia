// Code generated by protoc-gen-go. DO NOT EDIT.
// source: static.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Static_Optimize int32

const (
	// If new values are added to an enum, a client using an old version of the
	// protobuf definition will have all new values mapped to the enum's zero
	// value. So it's important that the zero value be "special" rather than a
	// regular value so the client can easily detect that something is wrong.
	// See http://go/totw-4 for more info.
	// TODO(olivernewman): Link to a public explanation if and when it becomes
	// available.
	Static_OPTIMIZE_UNSPECIFIED Static_Optimize = 0
	Static_DEBUG                Static_Optimize = 1
	Static_RELEASE              Static_Optimize = 2
)

var Static_Optimize_name = map[int32]string{
	0: "OPTIMIZE_UNSPECIFIED",
	1: "DEBUG",
	2: "RELEASE",
}

var Static_Optimize_value = map[string]int32{
	"OPTIMIZE_UNSPECIFIED": 0,
	"DEBUG":                1,
	"RELEASE":              2,
}

func (x Static_Optimize) String() string {
	return proto.EnumName(Static_Optimize_name, int32(x))
}

func (Static_Optimize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_800d8474b3bfe66d, []int{0, 0}
}

type Static_Arch int32

const (
	Static_ARCH_UNSPECIFIED Static_Arch = 0
	Static_ARM64            Static_Arch = 1
	Static_X64              Static_Arch = 2
)

var Static_Arch_name = map[int32]string{
	0: "ARCH_UNSPECIFIED",
	1: "ARM64",
	2: "X64",
}

var Static_Arch_value = map[string]int32{
	"ARCH_UNSPECIFIED": 0,
	"ARM64":            1,
	"X64":              2,
}

func (x Static_Arch) String() string {
	return proto.EnumName(Static_Arch_name, int32(x))
}

func (Static_Arch) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_800d8474b3bfe66d, []int{0, 1}
}

// Static contains all of the non-dynamic configuration values for building
// Fuchsia. These values are "static" in the sense that they don't vary
// depending on things like git history or local environment, so they can be
// checked into version control.
type Static struct {
	// The optimization level for the build.
	Optimize Static_Optimize `protobuf:"varint,1,opt,name=optimize,proto3,enum=fint.Static_Optimize" json:"optimize,omitempty"`
	// The board to build.
	Board string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// The product file to build.
	Product string `protobuf:"bytes,3,opt,name=product,proto3" json:"product,omitempty"`
	// Whether to skip building the basic images needed to boot and test on
	// Fuchsia.
	ExcludeImages bool `protobuf:"varint,4,opt,name=exclude_images,json=excludeImages,proto3" json:"exclude_images,omitempty"`
	// Extra args to pass to gn gen.
	GnArgs []string `protobuf:"bytes,5,rep,name=gn_args,json=gnArgs,proto3" json:"gn_args,omitempty"`
	// Extra targets to pass to Ninja.
	NinjaTargets []string `protobuf:"bytes,6,rep,name=ninja_targets,json=ninjaTargets,proto3" json:"ninja_targets,omitempty"`
	// Fuchsia packages to build and include in the base set.
	BasePackages []string `protobuf:"bytes,7,rep,name=base_packages,json=basePackages,proto3" json:"base_packages,omitempty"`
	// Fuchsia packages to build and include in the cache set.
	CachePackages []string `protobuf:"bytes,8,rep,name=cache_packages,json=cachePackages,proto3" json:"cache_packages,omitempty"`
	// Fuchsia packages to build and include in the universe set.
	UniversePackages []string `protobuf:"bytes,9,rep,name=universe_packages,json=universePackages,proto3" json:"universe_packages,omitempty"`
	// Whether to build host tests.
	IncludeHostTests bool `protobuf:"varint,10,opt,name=include_host_tests,json=includeHostTests,proto3" json:"include_host_tests,omitempty"`
	// The target CPU architecture.
	TargetArch Static_Arch `protobuf:"varint,11,opt,name=target_arch,json=targetArch,proto3,enum=fint.Static_Arch" json:"target_arch,omitempty"`
	// Values of select_variant GN argument.
	Variants []string `protobuf:"bytes,12,rep,name=variants,proto3" json:"variants,omitempty"`
	// Whether to enforce build size limits.
	EnforceSizeLimits bool `protobuf:"varint,13,opt,name=enforce_size_limits,json=enforceSizeLimits,proto3" json:"enforce_size_limits,omitempty"`
	// Whether to collect build metrics.
	CollectMetrics bool `protobuf:"varint,14,opt,name=collect_metrics,json=collectMetrics,proto3" json:"collect_metrics,omitempty"`
	// Whether to include archives in the build.
	IncludeArchives bool `protobuf:"varint,15,opt,name=include_archives,json=includeArchives,proto3" json:"include_archives,omitempty"`
	// Whether to skip the ninja build if we're running in CQ and none of the
	// changed files affect the build.
	SkipIfUnaffected bool `protobuf:"varint,16,opt,name=skip_if_unaffected,json=skipIfUnaffected,proto3" json:"skip_if_unaffected,omitempty"`
	// The path within the checkout of a file containing historical test duration
	// data specific to the current build config.
	TestDurationsFile string `protobuf:"bytes,26,opt,name=test_durations_file,json=testDurationsFile,proto3" json:"test_durations_file,omitempty"`
	// If `test_durations_file` doesn't exist within the checkout, use this file
	// instead. It's not specific to the current build config, but it can be
	// assumed to always exist.
	DefaultTestDurationsFile string   `protobuf:"bytes,27,opt,name=default_test_durations_file,json=defaultTestDurationsFile,proto3" json:"default_test_durations_file,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *Static) Reset()         { *m = Static{} }
func (m *Static) String() string { return proto.CompactTextString(m) }
func (*Static) ProtoMessage()    {}
func (*Static) Descriptor() ([]byte, []int) {
	return fileDescriptor_800d8474b3bfe66d, []int{0}
}

func (m *Static) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Static.Unmarshal(m, b)
}
func (m *Static) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Static.Marshal(b, m, deterministic)
}
func (m *Static) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Static.Merge(m, src)
}
func (m *Static) XXX_Size() int {
	return xxx_messageInfo_Static.Size(m)
}
func (m *Static) XXX_DiscardUnknown() {
	xxx_messageInfo_Static.DiscardUnknown(m)
}

var xxx_messageInfo_Static proto.InternalMessageInfo

func (m *Static) GetOptimize() Static_Optimize {
	if m != nil {
		return m.Optimize
	}
	return Static_OPTIMIZE_UNSPECIFIED
}

func (m *Static) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

func (m *Static) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *Static) GetExcludeImages() bool {
	if m != nil {
		return m.ExcludeImages
	}
	return false
}

func (m *Static) GetGnArgs() []string {
	if m != nil {
		return m.GnArgs
	}
	return nil
}

func (m *Static) GetNinjaTargets() []string {
	if m != nil {
		return m.NinjaTargets
	}
	return nil
}

func (m *Static) GetBasePackages() []string {
	if m != nil {
		return m.BasePackages
	}
	return nil
}

func (m *Static) GetCachePackages() []string {
	if m != nil {
		return m.CachePackages
	}
	return nil
}

func (m *Static) GetUniversePackages() []string {
	if m != nil {
		return m.UniversePackages
	}
	return nil
}

func (m *Static) GetIncludeHostTests() bool {
	if m != nil {
		return m.IncludeHostTests
	}
	return false
}

func (m *Static) GetTargetArch() Static_Arch {
	if m != nil {
		return m.TargetArch
	}
	return Static_ARCH_UNSPECIFIED
}

func (m *Static) GetVariants() []string {
	if m != nil {
		return m.Variants
	}
	return nil
}

func (m *Static) GetEnforceSizeLimits() bool {
	if m != nil {
		return m.EnforceSizeLimits
	}
	return false
}

func (m *Static) GetCollectMetrics() bool {
	if m != nil {
		return m.CollectMetrics
	}
	return false
}

func (m *Static) GetIncludeArchives() bool {
	if m != nil {
		return m.IncludeArchives
	}
	return false
}

func (m *Static) GetSkipIfUnaffected() bool {
	if m != nil {
		return m.SkipIfUnaffected
	}
	return false
}

func (m *Static) GetTestDurationsFile() string {
	if m != nil {
		return m.TestDurationsFile
	}
	return ""
}

func (m *Static) GetDefaultTestDurationsFile() string {
	if m != nil {
		return m.DefaultTestDurationsFile
	}
	return ""
}

func init() {
	proto.RegisterEnum("fint.Static_Optimize", Static_Optimize_name, Static_Optimize_value)
	proto.RegisterEnum("fint.Static_Arch", Static_Arch_name, Static_Arch_value)
	proto.RegisterType((*Static)(nil), "fint.Static")
}

func init() { proto.RegisterFile("static.proto", fileDescriptor_800d8474b3bfe66d) }

var fileDescriptor_800d8474b3bfe66d = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x93, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0x97, 0xb6, 0x10, 0x78, 0x2d, 0x34, 0x78, 0x9d, 0x66, 0xb5, 0x17, 0xc4, 0x34, 0x8d,
	0x69, 0x13, 0xda, 0xba, 0xaa, 0xa7, 0xed, 0x90, 0x96, 0x74, 0x8d, 0x54, 0x56, 0x14, 0x40, 0x9a,
	0x7a, 0xb1, 0x8c, 0xe3, 0x04, 0xaf, 0x21, 0x41, 0xb6, 0x83, 0x26, 0x3e, 0xe9, 0x3e, 0xce, 0x14,
	0x27, 0xa0, 0xae, 0x3b, 0x81, 0x7f, 0xff, 0xdf, 0x8b, 0x9f, 0x5f, 0x1c, 0x38, 0x52, 0x9a, 0x6a,
	0xc1, 0x06, 0x2b, 0x99, 0xe9, 0x0c, 0x1d, 0x44, 0x22, 0xd5, 0xbd, 0x3f, 0x75, 0xa8, 0x4f, 0x0c,
	0x46, 0x9f, 0xa1, 0x91, 0xad, 0xb4, 0x58, 0x8a, 0x0d, 0xc7, 0x56, 0xd7, 0xea, 0xb7, 0xcf, 0x5f,
	0x0d, 0x0a, 0x67, 0x50, 0xe6, 0x83, 0xfb, 0x2a, 0x0c, 0x76, 0x1a, 0x3a, 0x81, 0xda, 0x3c, 0xa3,
	0x32, 0xc4, 0x7b, 0x5d, 0xab, 0xdf, 0x0c, 0xca, 0x05, 0xc2, 0x60, 0xaf, 0x64, 0x16, 0xe6, 0x4c,
	0xe3, 0x7d, 0xc3, 0xb7, 0x4b, 0xf4, 0x16, 0xda, 0xfc, 0x37, 0x4b, 0xf2, 0x90, 0x13, 0xb1, 0xa4,
	0x31, 0x57, 0xf8, 0xa0, 0x6b, 0xf5, 0x1b, 0x41, 0xab, 0xa2, 0xbe, 0x81, 0xe8, 0x35, 0xd8, 0x71,
	0x4a, 0xa8, 0x8c, 0x15, 0xae, 0x75, 0xf7, 0xfb, 0xcd, 0xa0, 0x1e, 0xa7, 0xae, 0x8c, 0x15, 0x7a,
	0x03, 0xad, 0x54, 0xa4, 0xbf, 0x28, 0xd1, 0x54, 0xc6, 0x5c, 0x2b, 0x5c, 0x37, 0xf1, 0x91, 0x81,
	0xd3, 0x92, 0x15, 0xd2, 0x9c, 0x2a, 0x4e, 0x56, 0x94, 0x3d, 0x9a, 0x3d, 0xec, 0x52, 0x2a, 0xe0,
	0xb8, 0x62, 0x45, 0x27, 0x8c, 0xb2, 0xc5, 0x13, 0xab, 0x61, 0xac, 0x96, 0xa1, 0x3b, 0xed, 0x03,
	0x74, 0xf2, 0x54, 0xac, 0xb9, 0x7c, 0xfa, 0xbc, 0xa6, 0x31, 0x9d, 0x6d, 0xb0, 0x93, 0x3f, 0x02,
	0x12, 0x69, 0x79, 0xba, 0x45, 0xa6, 0x34, 0xd1, 0x5c, 0x69, 0x85, 0xc1, 0x9c, 0xd0, 0xa9, 0x92,
	0xdb, 0x4c, 0xe9, 0x69, 0xc1, 0xd1, 0x39, 0x1c, 0x96, 0xa7, 0x20, 0x54, 0xb2, 0x05, 0x3e, 0x34,
	0x13, 0xef, 0xfc, 0x33, 0x71, 0x57, 0xb2, 0x45, 0x00, 0xa5, 0x55, 0xfc, 0x47, 0xa7, 0xd0, 0x58,
	0x53, 0x29, 0x68, 0xaa, 0x15, 0x3e, 0x32, 0x5d, 0xec, 0xd6, 0x68, 0x00, 0x2f, 0x79, 0x1a, 0x65,
	0x92, 0x71, 0xa2, 0xc4, 0x86, 0x93, 0x44, 0x2c, 0x85, 0x56, 0xb8, 0x65, 0xb6, 0xef, 0x54, 0xd1,
	0x44, 0x6c, 0xf8, 0x9d, 0x09, 0xd0, 0x3b, 0x38, 0x66, 0x59, 0x92, 0x70, 0xa6, 0xc9, 0x92, 0x6b,
	0x29, 0x98, 0xc2, 0x6d, 0xe3, 0xb6, 0x2b, 0x3c, 0x2a, 0x29, 0x7a, 0x0f, 0xdb, 0xe6, 0x4d, 0xa7,
	0x62, 0xcd, 0x15, 0x3e, 0x36, 0xe6, 0x71, 0xc5, 0xdd, 0x0a, 0x17, 0x13, 0x50, 0x8f, 0x62, 0x45,
	0x44, 0x44, 0xf2, 0x94, 0x46, 0x11, 0x67, 0x9a, 0x87, 0xd8, 0x29, 0x27, 0x50, 0x24, 0x7e, 0x34,
	0xdb, 0xf1, 0xa2, 0xe3, 0x62, 0x44, 0x24, 0xcc, 0x25, 0xd5, 0x22, 0x4b, 0x15, 0x89, 0x44, 0xc2,
	0xf1, 0xa9, 0xb9, 0x33, 0x9d, 0x22, 0x1a, 0x6e, 0x93, 0x1b, 0x91, 0x70, 0xf4, 0x0d, 0xce, 0x42,
	0x1e, 0xd1, 0x3c, 0x29, 0x47, 0xfb, 0xbc, 0xee, 0xcc, 0xd4, 0xe1, 0x4a, 0x99, 0x3e, 0x2f, 0xef,
	0x7d, 0x85, 0xc6, 0xf6, 0x0a, 0x23, 0x0c, 0x27, 0xf7, 0xe3, 0xa9, 0x3f, 0xf2, 0x1f, 0x3c, 0x32,
	0xfb, 0x31, 0x19, 0x7b, 0xd7, 0xfe, 0x8d, 0xef, 0x0d, 0x9d, 0x17, 0xa8, 0x09, 0xb5, 0xa1, 0x77,
	0x35, 0xfb, 0xee, 0x58, 0xe8, 0x10, 0xec, 0xc0, 0xbb, 0xf3, 0xdc, 0x89, 0xe7, 0xec, 0xf5, 0x3e,
	0xc1, 0x81, 0x79, 0x05, 0x27, 0xe0, 0xb8, 0xc1, 0xf5, 0xed, 0xff, 0x55, 0x6e, 0x30, 0xba, 0xbc,
	0x70, 0x2c, 0x64, 0xc3, 0xfe, 0xcf, 0xcb, 0x0b, 0x67, 0xef, 0xca, 0x7e, 0xa8, 0x99, 0x2f, 0x6d,
	0x5e, 0x37, 0x3f, 0x5f, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xcb, 0x28, 0x2e, 0x80, 0x03,
	0x00, 0x00,
}
